globals
//globals from Ascii:
constant boolean LIBRARY_Ascii=true
integer array Ascii__i
integer array Ascii__h
integer array Ascii__y
string array Ascii__c
//endglobals from Ascii
//globals from DamageDetection:
constant boolean LIBRARY_DamageDetection=true
//endglobals from DamageDetection
//globals from FrameLoader:
constant boolean LIBRARY_FrameLoader=true
trigger FrameLoader__eventTrigger= CreateTrigger()
trigger FrameLoader__actionTrigger= CreateTrigger()
timer FrameLoader__t= CreateTimer()
//endglobals from FrameLoader
//globals from LibArcaneBarrier:
constant boolean LIBRARY_LibArcaneBarrier=true
//endglobals from LibArcaneBarrier
//globals from LibCounterStrike:
constant boolean LIBRARY_LibCounterStrike=true
//endglobals from LibCounterStrike
//globals from LibPhaseStrike:
constant boolean LIBRARY_LibPhaseStrike=true
//endglobals from LibPhaseStrike
//globals from LibRequired:
constant boolean LIBRARY_LibRequired=true
//endglobals from LibRequired
//globals from MMD:
constant boolean LIBRARY_MMD=true
constant integer MMD_GOAL_NONE= 101
constant integer MMD_GOAL_HIGH= 102
constant integer MMD_GOAL_LOW= 103
        
constant integer MMD_TYPE_STRING= 101
constant integer MMD_TYPE_REAL= 102
constant integer MMD_TYPE_INT= 103

constant integer MMD_OP_ADD= 101
constant integer MMD_OP_SUB= 102
constant integer MMD_OP_SET= 103

constant integer MMD_SUGGEST_NONE= 101
constant integer MMD_SUGGEST_TRACK= 102
constant integer MMD_SUGGEST_LEADERBOARD= 103

constant integer MMD_FLAG_DRAWER= 101
constant integer MMD_FLAG_LOSER= 102
constant integer MMD_FLAG_WINNER= 103
constant integer MMD_FLAG_LEAVER= 104
constant integer MMD_FLAG_PRACTICING= 105
constant boolean MMD__SHOW_DEBUG_MESSAGES= true
        
constant string MMD__chars= "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-+= \\!@#$%^&*()/?>.<,;:'\"{}[]|`~"
constant integer MMD__num_chars= StringLength(MMD__chars)
string array MMD__flags
string array MMD__goals
string array MMD__ops
string array MMD__types
string array MMD__suggestions
boolean MMD__initialized= false
                
gamecache MMD__gc= null
constant string MMD__ESCAPED_CHARS= " \\"
        
constant integer MMD__CURRENT_VERSION= 1
constant integer MMD__MINIMUM_PARSER_VERSION= 1
constant string MMD__FILENAME= "MMD.Dat"
constant string MMD__M_KEY_VAL= "val:"
constant string MMD__M_KEY_CHK= "chk:"
constant integer MMD__NUM_SENDERS_NAIVE= 1
constant integer MMD__NUM_SENDERS_SAFE= 3
integer MMD__num_senders= MMD__NUM_SENDERS_NAIVE
integer MMD__num_msg= 0
        
timer MMD__clock= CreateTimer()
string array MMD__q_msg
real array MMD__q_time
integer array MMD__q_index
integer MMD__q_head= 0
integer MMD__q_tail= 0
//endglobals from MMD
//globals from Power2:
constant boolean LIBRARY_Power2=true
integer array Power2__data
//endglobals from Power2
//globals from RaceSounds:
constant boolean LIBRARY_RaceSounds=true
sound array SoundNoGold
sound array SoundNoLumber
//endglobals from RaceSounds
//globals from RacialTowers:
constant boolean LIBRARY_RacialTowers=true
//endglobals from RacialTowers
//globals from RaiderPillage:
constant boolean LIBRARY_RaiderPillage=true
//endglobals from RaiderPillage
//globals from SimpleTooltip:
constant boolean LIBRARY_SimpleTooltip=true
//endglobals from SimpleTooltip
//globals from SpellFocusedArrow:
constant boolean LIBRARY_SpellFocusedArrow=true
//endglobals from SpellFocusedArrow
//globals from String:
constant boolean LIBRARY_String=true
playercolor array String__PLAYER_COLORS
string array String__PLAYER_COLOR_STRINGS
constant string String__HEX_CHARS= "0123456789abcdef"
string String__COLOR_ENDING= "|r"
integer String__MIN_RAW_CODE= ' '
string String__RAW_CHARS= " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
//endglobals from String
//globals from SuperPlague:
constant boolean LIBRARY_SuperPlague=true
//endglobals from SuperPlague
//globals from Table:
constant boolean LIBRARY_Table=true
integer Table___less= 0
integer Table___more= 8190
    //Configure it if you use more than 8190 "key" variables in your map (this will never happen though).
   
hashtable Table___ht= InitHashtable()
constant integer Table___sizeK=2
constant integer Table___listK=3
//endglobals from Table
//globals from TasItemCost:
constant boolean LIBRARY_TasItemCost=true
unit TasItemCost__shop
            // defines position of a hidden shop to get item costs
            // the size is used to clear up bought items
real TasItemCost__shopRectSize= 1000
real TasItemCost__shopRectX= 180
real TasItemCost__shopRectY= - 340
rect TasItemCost__shopRect
player TasItemCost__shopOwner= Player(bj_PLAYER_NEUTRAL_EXTRA)
integer array TasItemCost__Test
integer TasItemCost__TestCount= 0
integer TasItemCost__HASH_GOLD= StringHash("GOLD")
integer TasItemCost__HASH_LUMBER= StringHash("LUMBER")
integer TasItemCost__HASH_CHARGE= StringHash("CHARGE")
hashtable TasItemHash= InitHashtable()
//endglobals from TasItemCost
//globals from IsRightClick:
constant boolean LIBRARY_IsRightClick=true
boolean array IsRightClick__isRight
trigger IsRightClick__frameTrigger
//endglobals from IsRightClick
//globals from ItemHolder:
constant boolean LIBRARY_ItemHolder=true
integer ItemHolder__data
//endglobals from ItemHolder
//globals from LibAFKSystem:
constant boolean LIBRARY_LibAFKSystem=true
//endglobals from LibAFKSystem
//globals from MultidimensionalArray:
constant boolean LIBRARY_MultidimensionalArray=true
//endglobals from MultidimensionalArray
//globals from TasItemFusion:
constant boolean LIBRARY_TasItemFusion=true
integer TasItemFusion_Count= 0
hashtable TasItemFusion_Hash= InitHashtable()

integer array TasItemFusion_ItemCodes
integer TasItemFusion_ItemCodesCount= 0

integer TasItemFusion_FusionCount= 0
integer array TasItemFusion_FusionResult
integer TasItemFusion_UsedIn
integer TasItemFusion_BuiltWay
integer array TasItemFusion_PlayerItems
integer array TasItemFusion_PlayerMaterial
integer array TasItemFusion_PlayerMissing
integer array TasItemFusion_PlayerMissingUsed
      
boolean TasItemFusion__CheckOwner
player TasItemFusion__Owner
integer TasItemFusion__OwnerIndex

        // Costs
integer TasItemFusionGold
integer TasItemFusionLumber
//endglobals from TasItemFusion
//globals from ToggleIconButton:
constant boolean LIBRARY_ToggleIconButton=true
real ToggleIconButton_DefaultSizeX= 0.024
real ToggleIconButton_DefaultSizeY= 0.024
integer ToggleIconButton_MODE_DEFAULT= 0
integer ToggleIconButton_MODE_SHARED= 1
integer ToggleIconButton_MODE_LOCAL= - 1

integer ToggleIconButton_Counter= 0
integer array ToggleIconButton_ValueOn
integer array ToggleIconButton_Value
framehandle array ToggleIconButton_Button
framehandle array ToggleIconButton_Icon
framehandle array ToggleIconButton_IconPushed
framehandle array ToggleIconButton_ToolTip
integer array ToggleIconButton_Mode
string array ToggleIconButton_Texture
string array ToggleIconButton_TextureOff
string array ToggleIconButton_Text
string array ToggleIconButton_TextOff
trigger array ToggleIconButton_Action

integer ToggleIconButton_Index
player ToggleIconButton_Player
boolean ToggleIconButton_Enabled

trigger ToggleIconButton__Trigger= CreateTrigger()
sound ToggleIconButton_Sound
//endglobals from ToggleIconButton
//globals from TasButtonList:
constant boolean LIBRARY_TasButtonList=true
    //args for custom user actions
integer TasButtonListData= 0
string TasButtonListText= ""
boolean TasButtonListIsSearching= false
integer TasButtonListIndex= 0
framehandle TasButtonListFrame= null

    // System 
hashtable TasButtonList_Hash= InitHashtable()
integer TasButtonList__Counter= 0
trigger TasButtonList__SyncTrigger= CreateTrigger()
trigger TasButtonList__ButtonTrigger= CreateTrigger()
trigger TasButtonList__SearchTrigger= CreateTrigger()
trigger TasButtonList__ButtonScrollTrigger= CreateTrigger()
trigger TasButtonList__SliderTrigger= CreateTrigger()
trigger TasButtonList__SyncRightTrigger= CreateTrigger()
trigger TasButtonList__ButtonRightTrigger= CreateTrigger()
sound TasButtonList__RightClickSound

    // ButtonLists
framehandle array TasButtonListSlider
framehandle array TasButtonListSliderText
framehandle array TasButtonListParent
framehandle array TasButtonListInputFrame
framehandle array TasButtonListSyncFrame
framehandle array TasButtonListSyncFrameRight
integer array TasButtonListButtonCount
integer array TasButtonListCreateContext
string array TasButtonListButtonName
integer array TasButtonListStepSize
trigger array TasButtonListButtonAction
trigger array TasButtonListRightAction
trigger array TasButtonListUpdateAction
trigger array TasButtonListSearchAction
trigger array TasButtonListFilterAction
trigger array TasButtonListAsyncAction
trigger array TasButtonListAsyncRightAction
    
integer array TasButtonListViewPoint
location array TasButtonListDataList
location array TasButtonListDataListFiltered

real TasButtonListGapCol= 0.0
real TasButtonListGapRow= 0.0
integer TasButtonList_CreateContextCounter= 0

//endglobals from TasButtonList
//globals from ToggleIconButtonGroup:
constant boolean LIBRARY_ToggleIconButtonGroup=true
        // limitation all ToggleIconButton of a group have to take indexes next to each other
integer array ToggleIconButtonGroup_IndexStart
integer array ToggleIconButtonGroup_IndexEnd
integer array ToggleIconButtonGroup_groupIndex
framehandle array ToggleIconButtonGroup_ClearButton
framehandle array ToggleIconButtonGroup_ClearButtonIcon
framehandle array ToggleIconButtonGroup_ClearButtonIconPushed

integer ToggleIconButtonGroup_Count= 0

        // args for the Actions
integer ToggleIconButtonGroup_Index
integer ToggleIconButtonGroup_Value

trigger array ToggleIconButtonGroup_Action


trigger ToggleIconButtonGroup__Trigger= CreateTrigger()
trigger ToggleIconButtonGroup__RightClickTrigger= CreateTrigger()
trigger ToggleIconButtonGroup__ClearTrigger= CreateTrigger()
//endglobals from ToggleIconButtonGroup
//globals from TasItemShop:
constant boolean LIBRARY_TasItemShop=true
            // Config Start
real TasItemShop_xPos= 0.0
real TasItemShop_yPos= - 0.02
framepointtype TasItemShop_posPoint= FRAMEPOINT_TOPRIGHT
boolean TasItemShop_posScreenRelative= true
            // It is advised to posScreenRelative = false when posPoint does not include Left or Right
            // with posScreenRelative = false xPos and yPos are abs coords, to which posPoint of the Shop UI is placed to.
    
            // position of Item toolTips, this does not affect the tooltips for Categories or Users.
            // toolTipPosPointParent = null, if you want a specific position on screen.
            // with toolTipPosPoint & toolTipPosPointParent are toolTipPosX & toolTipPosY relative offsets.
            // The position is a bit wierd, the position is not the box but the Extended Tooltip Text, the Header has a height of ~0.052.
real TasItemShop_toolTipPosX= 0.0
real TasItemShop_toolTipPosY= - 0.052
framepointtype TasItemShop_toolTipPosPoint= FRAMEPOINT_TOPRIGHT
framepointtype TasItemShop_toolTipPosPointParent= FRAMEPOINT_BOTTOMRIGHT
            //public framepointtype toolTipPosPointParent = null
real TasItemShop_toolTipSizeX= 0.2
real TasItemShop_toolTipSizeXBig= 0.3
real TasItemShop_toolTipLimitBig= 300
    
            // this can be used to change the visual ("EscMenuControlBackdropTemplate") ("TasItemShopRaceBackdrop")
string TasItemShop_boxFrameName= "TasItemShopRaceBackdrop"
string TasItemShop_boxButtonListFrameName= "EscMenuControlBackdropTemplate"
string TasItemShop_boxRefFrameName= "EscMenuControlBackdropTemplate"
string TasItemShop_boxCatFrameName= "EscMenuControlBackdropTemplate"
string TasItemShop_boxUndoFrameName= "TasItemShopRaceBackdrop"
string TasItemShop_boxDefuseFrameName= "TasItemShopRaceBackdrop"
string TasItemShop_buttonListHighLightFrameName= "TasItemShopSelectedHighlight"
real TasItemShop_boxFrameBorderGap= 0.0065
real TasItemShop_boxButtonListBorderGap= 0.0065
real TasItemShop_boxRefBorderGap= 0.0065
real TasItemShop_boxCatBorderGap= 0.0055
real TasItemShop_boxUndoBorderGap= 0.0045
real TasItemShop_boxDefuseBorderGap= 0.0045
real TasItemShop_boxSellBorderGap= 0.0045
real TasItemShop_buttonListButtonGapCol= 0.001
real TasItemShop_buttonListButtonGapRow= 0.005
            // material control
boolean TasItemShop_flexibleShop= false
boolean TasItemShop_sharedItems= false
boolean TasItemShop_canProviderGetItem= true
boolean TasItemShop_canUndo= true
boolean TasItemShop_canDefuse= true
string TasItemShop_DefuseButtonIcon= "ReplaceableTextures\\CommandButtons\\BTNdemolish"
string TasItemShop_DefuseButtonIconDisabled= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNdemolish"
boolean TasItemShop_canSellItems= true
real TasItemShop_SellFactor= 0.75
boolean TasItemShop_SellUsesCostModifier= true
string TasItemShop_SellButtonIcon= "ReplaceableTextures\\CommandButtons\\BTNReturnGoods"
string TasItemShop_SellButtonIconDisabled= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNReturnGoods"
            
string TasItemShop_MainUserTexture= "ui\\widgets\\console\\human\\commandbutton\\human-multipleselection-border"
string TasItemShop_MainItemTexture= "ui\\widgets\\console\\human\\commandbutton\\human-multipleselection-border"
    
real TasItemShop_shopRange= 1850
real TasItemShop_updateTime= 0.4
            // Titel-text in the reference Boxes
string TasItemShop_textUpgrades= "COLON_UPGRADE"
string TasItemShop_textMats= "SCORESCREEN_TAB3"
string TasItemShop_textInventory= "INVENTORY"
string TasItemShop_textUser= "USER"
string TasItemShop_textCanNotBuyPrefix= "Can not buy: "
string TasItemShop_textCanNotBuySufix= "OUTOFSTOCKTOOLTIP"
string TasItemShop_textNoValidShopper= "No valid Hero"
string TasItemShop_textUndo= "Undo: "
string TasItemShop_textUnBuyable= "xxxxxxx"
string TasItemShop_textDefuse= "Defuse:"
string TasItemShop_textSell= "Sell:"
string TasItemShop_textQuickLink= "ShortCuts:"
string TasItemShop_categoryModeTextAnd= "ui\\widgets\\battlenet\\bnet-mainmenu-friends-disabled"
string TasItemShop_categoryModeTextOr= "Or"
string TasItemShop_categoryModeIconOr= "ui\\widgets\\battlenet\\bnet-mainmenu-friends-up"
string TasItemShop_categoryModeIconAnd= "And"
    
            
oskeytype TasItemShop_quickLinkKey= OSKEY_LSHIFT
    
            // how many refButtons, refButtons have pages, if needed.
            // A feature is disabled with a counter smaller than 1.
integer TasItemShop_refButtonCountMats= 4
integer TasItemShop_refButtonCountUp= 4
integer TasItemShop_refButtonCountInv= 6
integer TasItemShop_refButtonCountUser= 6
integer TasItemShop_refButtonCountQuickLink= 4
real TasItemShop_refButtonSize= 0.02
real TasItemShop_refButtonGap= 0.003
real TasItemShop_refButtonPageSize= 0.012
boolean TasItemShop_refButtonPageRotate= true
string TasItemShop_refButtonPageUp= "ReplaceableTextures\\CommandButtons\\BTNReplay-SpeedUp"
string TasItemShop_refButtonPageDown= "ReplaceableTextures\\CommandButtons\\BTNReplay-SpeedDown"
real TasItemShop_refButtonBoxSizeY= 0.047
    
            // (true) right clicking an refInventoryButton in the UI will sell the item
            // (false) right clicking it will buy it again.
boolean TasItemShop_inventoryRightClickSell= true
boolean TasItemShop_inventoryShowMainOnly= true
    
boolean TasItemShop_userButtonOrder= true
    
real TasItemShop_doubleClickTimeOut= 2.0
    
            // model displayed when buy request was started.
            //public string spriteModel = "UI\\Feedback\\GoldCredit\\GoldCredit.mdl" // in 1.31 the coins are black only.
            //public string spriteModel = "Abilities\\Weapons\\RockBoltMissile\\RockBoltMissile.mdl"
            //public string spriteModel = "Abilities\\Weapons\\BansheeMissile\\BansheeMissile.mdl"
            //public string spriteModel = "Abilities\\Spells\\Other\\GeneralAuraTarget\\GeneralAuraTarget.mdl"
string TasItemShop_spriteModel= "war3mapImported\\BansheeMissile.mdx"
real TasItemShop_spriteScale= 0.0006
integer TasItemShop_spriteAnimationIndex= 1
    
integer TasItemShop_buttonListRows= 5
            // buttonListCols has a strong impact on the xSize of this UI. make sure that refButtons of one type fit into this.
integer TasItemShop_buttonListCols= 3
    
            // this will not change the size of the Buttons, nor the space the text can take
            // true = Show
            // false = hide
boolean TasItemShop_buttonListShowGold= true
boolean TasItemShop_buttonListShowLumber= true
boolean TasItemShop_buyButtonShowGold= true
boolean TasItemShop_buyButtonShowLumber= true
    
            // which button is used inside the ButtonList? Enable one block and disable the other one
    
string TasItemShop_buttonListButtonName= "TasButtonSmall"
real TasItemShop_buttonListButtonSizeX= 0.1
real TasItemShop_buttonListButtonSizeY= 0.0325
    
            // "TasButtonGrid" are smaller, they don't show the names in the list
            //public string buttonListButtonName = "TasButtonGrid"
            //public real buttonListButtonSizeX = 0.064
            //public real buttonListButtonSizeY = 0.0265
        
real TasItemShop_categoryButtonSize= 0.019
    
            // -------
            // Config End
            // System variables Start
            // -------
    
            
    
integer array TasItemShop_Selected
integer array TasItemShop_SelectedCategory
item array TasItemShop_SelectedItem
    
timer TasItemShop_Timer
    
boolean TasItemShop_IsReforged
    
group TasItemShop_TempGroup= CreateGroup()
unit TasItemShop_TempUnit
real TasItemShop_TempRange
player TasItemShop_TempPlayer
    
integer TasItemShop_CREATE_CONTEXT_CURRENT= - 1
integer TasItemShop_CREATE_CONTEXT_SELL= - 2
    
integer TasItemShop_ButtonListIndex
integer TasItemShop_CategoryModButtonIndex
    
integer TasItemShop_RefButtonBoxRows= 0
framehandle array TasItemShop_RefButtonBoxFrameLast
framehandle array TasItemShop_RefButtonBoxFrameFirst
real array TasItemShop_RefButtonBoxSize
    
integer TasItemShop_Shops
integer TasItemShop_ShopCount= 0
real array TasItemShop_ShopRange
boolean array TasItemShop_ShopWhiteList
trigger array TasItemShop_ShopCostAction
integer TasItemShop_ShopsItems
integer TasItemShop_ShopsGold
integer TasItemShop_ShopsLumber
    
integer array TasItemShop_UndoItems
integer array TasItemShop_UndoResults
integer array TasItemShop_UndoResultCode
integer array TasItemShop_UndoGold
integer array TasItemShop_UndoLumber
integer TasItemShop_UndoPlayerSize= 800
integer array TasItemShop_UndoPlayerCount
string array TasItemShop_UndoActionName
item array TasItemShop_UndoStackGainer
integer array TasItemShop_UndoStackGained
    
integer TasItemShop_TasItemCategory
    
string array TasItemShop_CategoryIcon
string array TasItemShop_CategoryText
integer TasItemShop_CategoryCount= 0
integer array TasItemShop_CategoryValues
    
integer TasItemShop_MissingCount= 0
integer array TasItemShop_MissingItemCode
    
integer array TasItemShop_HaggleSkill
real array TasItemShop_HaggleGold
real array TasItemShop_HaggleLumber
real array TasItemShop_HaggleLumberAdd
real array TasItemShop_HaggleGoldAdd
integer TasItemShop_HaggleCount= 0
    
integer array TasItemShop_CategoryPlayerValues
    
framehandle TasItemShop_FrameSprite
framehandle TasItemShop_FrameSpriteParent
    
framehandle TasItemShop_FrameParentSuper
framehandle TasItemShop_FrameParentSuperUI
framehandle TasItemShop_FrameSuperBox
framehandle TasItemShop_FrameTitelText
framehandle TasItemShop_FrameFullscreen
framehandle TasItemShop_FrameTasButtonList
framehandle TasItemShop_FrameCategoryBox
            
    
framehandle TasItemShop_FrameUndoBox
framehandle TasItemShop_FrameUndoButton
framehandle TasItemShop_FrameUndoButtonIcon
framehandle TasItemShop_FrameUndoButtonIconPushed
framehandle TasItemShop_FrameUndoText
    
framehandle TasItemShop_FrameDefuseBox
framehandle TasItemShop_FrameDefuseButton
framehandle TasItemShop_FrameDefuseText
    
framehandle TasItemShop_FrameSellBox
framehandle TasItemShop_FrameSellButton
framehandle TasItemShop_FrameSellText
    
framehandle TasItemShop_FrameUserBox
framehandle TasItemShop_FrameUserText
framehandle TasItemShop_FrameUserPage
framehandle TasItemShop_FrameUserPageUp
framehandle TasItemShop_FrameUserPageText
framehandle TasItemShop_FrameUserPageDown
    
framehandle TasItemShop_FrameInventoryBox
framehandle TasItemShop_FrameInventoryText
framehandle TasItemShop_FrameInventoryPage
framehandle TasItemShop_FrameInventoryPageUp
framehandle TasItemShop_FrameInventoryPageText
framehandle TasItemShop_FrameInventoryPageDown
    
framehandle TasItemShop_FrameMaterialBox
framehandle TasItemShop_FrameMaterialText
framehandle TasItemShop_FrameMaterialPage
framehandle TasItemShop_FrameMaterialPageUp
framehandle TasItemShop_FrameMaterialPageText
framehandle TasItemShop_FrameMaterialPageDown
    
framehandle TasItemShop_FrameUpgradeBox
framehandle TasItemShop_FrameUpgradeText
framehandle TasItemShop_FrameUpgradePage
framehandle TasItemShop_FrameUpgradePageUp
framehandle TasItemShop_FrameUpgradePageText
framehandle TasItemShop_FrameUpgradePageDown
    
integer array TasItemShop_QuickLink
boolean array TasItemShop_QuickLinkKeyActive
framehandle TasItemShop_FrameQuickLinkBox
framehandle TasItemShop_FrameQuickLinkBoxHighLight
framehandle TasItemShop_FrameQuickLinkText
framehandle TasItemShop_FrameQuickLinkPage
framehandle TasItemShop_FrameQuickLinkPageUp
framehandle TasItemShop_FrameQuickLinkPageText
framehandle TasItemShop_FrameQuickLinkPageDown
    
trigger TasItemShop_ButtonTriggerInventory
trigger TasItemShop_ButtonTriggerInventoryPage
trigger TasItemShop_ButtonTriggerMaterial
trigger TasItemShop_ButtonTriggerMaterialPage
trigger TasItemShop_ButtonTriggerUser
trigger TasItemShop_ButtonTriggerUserPage
trigger TasItemShop_ButtonTriggerUpgrade
trigger TasItemShop_ButtonTriggerUpgradePage
trigger TasItemShop_ButtonTriggerSell
trigger TasItemShop_ButtonTriggerDefuse
trigger TasItemShop_ButtonTriggerBuy
trigger TasItemShop_ButtonTriggerUndo
trigger TasItemShop_ButtonTriggerClear
trigger TasItemShop_ButtonTriggerSelect
trigger TasItemShop_ButtonTriggerOrder
trigger TasItemShop_ButtonTriggerESC
trigger TasItemShop_ButtonTriggerClearFocus
trigger TasItemShop_ButtonTriggerParentScroll
trigger TasItemShop_ButtonTriggerCategoryMode
trigger TasItemShop_ButtonTriggerQuickLink
trigger TasItemShop_ButtonTriggerQuickLinkPage
trigger TasItemShop_ButtonTriggerQuickLinkKeyPress
trigger TasItemShop_ButtonTriggerQuickLinkKeyRelease
            
    
integer TasItemShop_RefButtonCount= 0
framehandle array TasItemShop_RefButton
framehandle array TasItemShop_RefButtonIcon
framehandle array TasItemShop_RefButtonIconPushed
framehandle array TasItemShop_RefButtonOverlay
framehandle array TasItemShop_RefButtonOverlay2
framehandle array TasItemShop_RefButtonToolTip
framehandle array TasItemShop_RefButtonToolTipIcon
framehandle array TasItemShop_RefButtonToolTipText
framehandle array TasItemShop_RefButtonToolTipName
            //public unit array RefButtonUnit
            //public item array RefButtonItem
            //public integer array RefButtonItemCode
    
integer TasItemShop_RefButtonInventoryStart
integer TasItemShop_RefButtonInventoryEnd
integer TasItemShop_RefButtonUpgradeStart
integer TasItemShop_RefButtonUpgradeEnd
integer TasItemShop_RefButtonMaterialStart
integer TasItemShop_RefButtonMaterialEnd
integer TasItemShop_RefButtonUserStart
integer TasItemShop_RefButtonUserEnd
integer TasItemShop_RefButtonQuickLinkStart
integer TasItemShop_RefButtonQuickLinkEnd
    
integer TasItemShop_TempTable
integer TasItemShop_TempHashTable
    
integer TasItemShop_BUY_ABLE_ITEMS_Count= 0
            // use TasItemShopAdd(itemCode, category) inside local function UserInit() to fill it
            // This List is used by shops without custom data or by BlackList Shops
integer array TasItemShop_BUY_ABLE_ITEMS
    
integer TasItemShop_BuyAbleMarked
    
integer TasItemShop_MarkedItemCodes
    
group array TasItemShop_Shoper
real TasItemShop_DoubleClickStamp
unit array TasItemShop_ShoperMain
unit array TasItemShop_CurrentShop
integer TasItemShop_LocalShopObject
integer array TasItemShop_CurrentOffSetInventory
integer array TasItemShop_CurrentOffSetMaterial
integer array TasItemShop_CurrentOffSetUpgrade
integer array TasItemShop_CurrentOffSetUser
integer array TasItemShop_CurrentOffSetQuickLink
            
real TasItemShop_xSize
real TasItemShop_ySize
    
integer TasItemShop_TempGold
integer TasItemShop_TempLumber
real TasItemShop_TempGoldR
real TasItemShop_TempLumberR
//endglobals from TasItemShop
//globals from TasItemShopGUILoader:
constant boolean LIBRARY_TasItemShopGUILoader=true
//endglobals from TasItemShopGUILoader
//globals from TasItemShopUserInit:
constant boolean LIBRARY_TasItemShopUserInit=true
//endglobals from TasItemShopUserInit
real bt_genericFrameEvent= 0
framehandle bt_lastCreatedFrame= null
framehandle bt_triggerFrame= null
player bt_triggerFramePlayer= null
frameeventtype bt_triggerFrameEvent= null
real bt_triggerFrameValue= 0
string bt_triggerFrameText= null

real udg_DDE_Delay= 0

boolean udg_isMMDEnabled= false

// processed: string array udg_MMD_RaceName[20]

// processed: integer array udg_MMD_Wins[6]

// processed: integer array udg_MMD_Losses[6]

// processed: integer array udg_MMD_Score[6]

// processed: integer array udg_MMD_Score_Final[6]

// processed: real array udg_MMD_Bonus[6]

// processed: integer array udg_MMD_MiddleTime[6]

// processed: integer array udg_MMD_MiddleTimeTotal[6]

hashtable udg_MMD_HeroNamesTable= null

trigger udg_TasItemShopShortCuts= null

trigger udg_TasItemShopFusion= null

trigger udg_TasItemShopCreateShop= null

trigger udg_TasItemShopCategory= null

trigger udg_TasItemShopAdd= null

trigger udg_TasItemShopHaggle= null

trigger udg_TasItemShopCosts= null

// processed: integer array udg_TasItemShop_Mats[1]

integer udg_TasItemShop_Item= 0

integer udg_TasItemShop_Unit= 0

player udg_TasItemShop_Player= null

boolean udg_TasItemShop_WhiteList= false

integer udg_TasItemShop_Category= 0

string udg_TasItemShop_Text= null

string udg_TasItemShop_Icon= null

real udg_TasItemShop_Gold= 0

real udg_TasItemShop_Lumber= 0

integer udg_TasItemShop_Skill= 0

integer udg_TasItemShop_Buff= 0

real udg_TasItemShop_GoldAdd= 0

real udg_TasItemShop_LumberAdd= 0

integer udg_MyItemShopCat= 0

integer udg_MyItemShopCat2= 0

// processed: fogmodifier array udg_VisibilityModifier[6]

// processed: hashtable array udg_SkinTable[4]

hashtable udg_CustomValueSkinTable= null

// processed: timer array udg_LevelUpTimerBlob[6]

// processed: timer array udg_LevelUpTimerText[6]

// processed: integer array udg_LevelUpTimerBlobCounter[6]

// processed: integer array udg_LevelUpTimerTextCounter[6]

// processed: timer array udg_SkinEquipTimer[6]

timer udg_Timer5Minutes= null

boolean udg_SaveLoadDisabled= false

timer udg_LoadTimer= null

// processed: integer array udg_totalHuman[6]

// processed: integer array udg_totalOrc[6]

// processed: integer array udg_totalUndead[6]

// processed: integer array udg_totalNightElf[6]

// processed: integer array udg_totalNaga[6]

// processed: integer array udg_totalDemon[6]

// processed: integer array udg_winsHuman[6]

// processed: integer array udg_winsOrc[6]

// processed: integer array udg_winsUndead[6]

// processed: integer array udg_winsNightElf[6]

// processed: integer array udg_winsNaga[6]

// processed: integer array udg_winsDemon[6]

location udg_TempLoc7= null

location udg_TempLoc15= null

unit udg_UnitVarPicked= null

unit udg_UnitVarCaster3= null

unit udg_GraveBlowStun= null

unit udg_Scourage= null

unit udg_UmbraUnit= null

// processed: unit array udg_BlackStrike[1]

integer udg_Reaping= 0

unit udg_BlackHunter= null

real udg_x= 0

real udg_y= 0

location udg_point= null

hashtable udg_UnitTypeTable= null

group udg_Priests= null

group udg_Sorceress= null

group udg_Spellbreaker= null

group udg_DragonhawkRiders= null

group udg_MortarTeams= null

group udg_Paladins= null

group udg_Archmages= null

group udg_MountainKings= null

group udg_BloodMages= null

group udg_Batriders= null

group udg_Shamans= null

group udg_Raiders= null

group udg_SpiritWalkers= null

group udg_Blademasters= null

group udg_FarSeers= null

group udg_TaurenChieftains= null

group udg_ShadowHunters= null

group udg_CryptFiends= null

group udg_Necromancers= null

group udg_Banshees= null

group udg_ObsidianStatues= null

group udg_Destroyers= null

group udg_DeathKnights= null

group udg_Liches= null

group udg_Dreadlords= null

group udg_CryptLords= null

group udg_Dryads= null

group udg_DruidOfTheClaws= null

group udg_DruidOfTheTalons= null

group udg_FaerieDragons= null

group udg_KeeperOfTheGroves= null

group udg_PriestessOfTheMoons= null

group udg_DemonHunters= null

group udg_Wardens= null

group udg_Alchemists= null

group udg_SeaWitches= null

group udg_Tinkers= null

group udg_Beastmasters= null

group udg_Brewmasters= null

group udg_DarkRangers= null

group udg_Firelords= null

group udg_PitLords= null

group udg_Storm= null

group udg_Earth= null

group udg_Fire= null

group udg_Battlemages= null

group udg_Charmers= null

group udg_Apprentices= null

group udg_Constructs= null

group udg_Arcanists= null

group udg_Pyromancers= null

group udg_Geomancers= null

group udg_Magicians= null

group udg_KirinTorOperatives= null

group udg_KirinTorCurators= null

group udg_ArcaneCurators= null

group udg_Mages= null

group udg_HighWizards= null

group udg_SpellOfficers= null

group udg_Thaumaturges= null

group udg_Elementalists= null

group udg_BloodArchers= null

group udg_Darkcasters= null

group udg_DragonhawkRidersBE= null

group udg_Maguses= null

group udg_Magisters= null

group udg_Decimators= null

group udg_Phoenixes= null

group udg_PhoenixAssassins= null

group udg_SentinelCommanders= null

group udg_BloodKnights= null

group udg_Sunreavers= null

group udg_DarkRogues= null

group udg_Empusas= null

group udg_AbominationsForsaken= null

group udg_Apothecarys= null

group udg_Deathguards= null

group udg_Spectres= null

group udg_Gorgons= null

group udg_Wraithblades= null

group udg_Valkyrs= null

group udg_Reapers= null

group udg_BansheeMaidens= null

group udg_Deathstalkers= null

group udg_Exterminators= null

group udg_Summoners= null

group udg_Swellers= null

group udg_NagaMyrmidons= null

group udg_DragonTurtles= null

group udg_RoyalCommanders= null

group udg_TideHunters= null

group udg_SunkenEmpresses= null

group udg_MyrmidonCommanders= null

real udg_ManaFlareRange= 0

group udg_AerialShacklesGroup= null

group udg_PossessionGroup= null

hashtable udg_PossessionTable= null

hashtable udg_PossessionTable2= null

group udg_Tornados= null

// processed: boolean array udg_activeDefend[12]

// processed: boolean array udg_activeSlow[12]

// processed: boolean array udg_activeInvisibility[12]

// processed: boolean array udg_activePolymorph[12]

// processed: boolean array udg_activeFlare[12]

// processed: boolean array udg_activeHeal[12]

// processed: boolean array udg_activeDispelMagic[12]

// processed: boolean array udg_activeInnerFire[12]

// processed: boolean array udg_activeControlMagic[12]

// processed: boolean array udg_activeAerialShackles[12]

// processed: boolean array udg_activeHolyLight[12]

// processed: boolean array udg_activeDivineShield[12]

// processed: boolean array udg_activeResurrection[12]

// processed: boolean array udg_activeBlizzard[12]

// processed: boolean array udg_activeWaterElemental[12]

// processed: boolean array udg_activeTornado[12]

// processed: boolean array udg_activeStormBolt[12]

// processed: boolean array udg_activeThunderClap[12]

// processed: boolean array udg_activeAvatar[12]

// processed: boolean array udg_activeFlamestrike[12]

// processed: boolean array udg_activeBanish[12]

// processed: boolean array udg_activeSiphonMana[12]

// processed: boolean array udg_activePhoenix[12]

// processed: unit array udg_WindWalkUnit[12]

// processed: boolean array udg_isBladestormOn[14]

// processed: unit array udg_BladestormVisualUnit[14]

// processed: timer array udg_BladestormVisualTimer[14]

// processed: location array udg_EarthquakePoint[12]

// processed: boolean array udg_EarthquakeActive[12]

// processed: boolean array udg_activeBerserk[12]

// processed: boolean array udg_activePurge[12]

// processed: boolean array udg_activeLightningShield[12]

// processed: boolean array udg_activeBloodlust[12]

// processed: boolean array udg_activeEnsnare[12]

// processed: boolean array udg_activeSentryWard[12]

// processed: boolean array udg_activeStasisTrap[12]

// processed: boolean array udg_activeHealingWard[12]

// processed: boolean array udg_activeSpiritLink[12]

// processed: boolean array udg_activeDisenchant[12]

// processed: boolean array udg_activeAncestralSpirit[12]

// processed: boolean array udg_activeUnstableConcoction[12]

// processed: boolean array udg_activeDevour[12]

// processed: boolean array udg_activeWindWalk[12]

// processed: boolean array udg_activeMirrorImage[12]

// processed: boolean array udg_activeBladestorm[12]

// processed: boolean array udg_activeChainLightning[12]

// processed: boolean array udg_activeFirebolt[12]

// processed: boolean array udg_activeSpiritWolves[12]

// processed: boolean array udg_activeEarthquake[12]

// processed: boolean array udg_activeShockwave[12]

// processed: boolean array udg_activeWarStomp[12]

// processed: boolean array udg_activeHealingWave[12]

// processed: boolean array udg_activeHex[12]

// processed: boolean array udg_activeSerpentWard[12]

// processed: boolean array udg_activeBigBadVoodoo[12]

// processed: location array udg_DeathAndDecayPoint[12]

// processed: boolean array udg_DeathAndDecayActive[12]

group udg_CryptFiendBurrow= null

group udg_GargoyleStoneForm= null

real udg_MeatWagonsMoveEvent= 0

timer udg_MeatWagonsMoveTimer= null

group udg_MeatWagons= null

group udg_DiseaseClouds= null

// processed: boolean array udg_activeWeb[12]

// processed: boolean array udg_activeBurrow[12]

// processed: boolean array udg_activeCurse[12]

// processed: boolean array udg_activeAntiMagicShell[12]

// processed: boolean array udg_activePossession[12]

// processed: boolean array udg_activeSpiritTouch[12]

// processed: boolean array udg_activeEssenceOfBlight[12]

// processed: boolean array udg_activeStoneForm[12]

// processed: boolean array udg_activeRaiseDead[12]

// processed: boolean array udg_activeUnholyFrenzy[12]

// processed: boolean array udg_activeCripple[12]

// processed: boolean array udg_activeDevourMagic[12]

// processed: boolean array udg_activeOrbOfAnnihilation[12]

// processed: boolean array udg_activeAbsorbMana[12]

// processed: boolean array udg_activeDeathCoil[12]

// processed: boolean array udg_activeDeathPact[12]

// processed: boolean array udg_activeAnimateDead[12]

// processed: boolean array udg_activeFrostNova[12]

// processed: boolean array udg_activeFrostShield[12]

// processed: boolean array udg_activeDarkRitual[12]

// processed: boolean array udg_activeDeathAndDecay[12]

// processed: boolean array udg_activeCarrionSwarm[12]

// processed: boolean array udg_activeSleep[12]

// processed: boolean array udg_activeInferno[12]

// processed: boolean array udg_activeImpale[12]

// processed: boolean array udg_activeCarrionBeetles[12]

// processed: boolean array udg_activeLocustSwarm[12]

// processed: integer array udg_ImmolationCounter[12]

// processed: boolean array udg_activeSentinel[12]

// processed: boolean array udg_activeAbolishMagic[12]

// processed: boolean array udg_activeRoar[12]

// processed: boolean array udg_activeRejuvenation[12]

// processed: boolean array udg_activeBearForm[12]

// processed: boolean array udg_activeFaerieFire[12]

// processed: boolean array udg_activeCrowForm[12]

// processed: boolean array udg_activeCyclone[12]

// processed: boolean array udg_activePhaseShift[12]

// processed: boolean array udg_activeManaFlare[12]

// processed: boolean array udg_activeTaunt[12]

// processed: boolean array udg_activeEntanglingRoots[12]

// processed: boolean array udg_activeForceOfNature[12]

// processed: boolean array udg_activeTranquility[12]

// processed: boolean array udg_activeSilence[12]

// processed: boolean array udg_activeSearingArrows[12]

// processed: boolean array udg_activeStarfall[12]

// processed: boolean array udg_activeManaBurn[12]

// processed: boolean array udg_activeImmolation[12]

// processed: boolean array udg_activeMetamorphosis[12]

// processed: boolean array udg_activeFanOfKnives[12]

// processed: boolean array udg_activeBlink[12]

// processed: boolean array udg_activeShadowStrike[12]

// processed: boolean array udg_activeVengeance[12]

// processed: unit array udg_StormWindWalkUnit[12]

// processed: location array udg_VolcanoPoint[12]

// processed: boolean array udg_VolcanoActive[12]

// processed: boolean array udg_activeHealingSpray[12]

// processed: boolean array udg_activeChemicalRage[12]

// processed: boolean array udg_activeAcidBomb[12]

// processed: boolean array udg_activeTransmute[12]

// processed: boolean array udg_activeForkedLightning[12]

// processed: boolean array udg_activeFrostArrows[12]

// processed: boolean array udg_activeManaShield[12]

// processed: boolean array udg_activeTornadoNeutral[12]

// processed: boolean array udg_activePocketFactory[12]

// processed: boolean array udg_activeClusterRockets[12]

// processed: boolean array udg_activeRoboGoblin[12]

// processed: boolean array udg_activeSummonBear[12]

// processed: boolean array udg_activeSummonQuilbeast[12]

// processed: boolean array udg_activeSummonHawk[12]

// processed: boolean array udg_activeStampede[12]

// processed: boolean array udg_activeBreathOfFire[12]

// processed: boolean array udg_activeDrunkenHaze[12]

// processed: boolean array udg_activeStormEarthFire[12]

// processed: boolean array udg_activeSilenceNeutral[12]

// processed: boolean array udg_activeBlackArrow[12]

// processed: boolean array udg_activeLifeDrain[12]

// processed: boolean array udg_activeCharm[12]

// processed: boolean array udg_activeSoulBurn[12]

// processed: boolean array udg_activeLavaSpawn[12]

// processed: boolean array udg_activeVolcano[12]

// processed: boolean array udg_activeRainOfFire[12]

// processed: boolean array udg_activeHowlOfTerror[12]

// processed: boolean array udg_activeDoom[12]

group udg_WeakenGroup= null

group udg_LivingBombGroup= null

unit udg_EpicenterUnit= null

group udg_DalaranRuneGroup= null

unit udg_ArcaneField= null

// processed: location array udg_PointPermafrost[12]

// processed: integer array udg_PrismaticShieldCounter[12]

// processed: boolean array udg_activeMagicShield[12]

// processed: boolean array udg_activeProtectiveField[12]

// processed: boolean array udg_activeDefendDalaran[12]

// processed: boolean array udg_activeManaShieldDalaran[12]

// processed: boolean array udg_activeEnergyWhip[12]

// processed: boolean array udg_activeDalaranRune[12]

// processed: boolean array udg_activeEliminateMagic[12]

// processed: boolean array udg_activeWeaken[12]

// processed: boolean array udg_activeBarrierDalaran[12]

// processed: boolean array udg_activeAbsorbManaDalaran[12]

// processed: boolean array udg_activeFusion[12]

// processed: boolean array udg_activeInversion[12]

// processed: boolean array udg_activeWisdomEmbrace[12]

// processed: boolean array udg_activePolymorphDalaran[12]

// processed: boolean array udg_activeMagicalDestruction[12]

// processed: boolean array udg_activeBurn[12]

// processed: boolean array udg_activeLivingBomb[12]

// processed: boolean array udg_activeFuryOfTheFlame[12]

// processed: boolean array udg_activeEarthfall[12]

// processed: boolean array udg_activeBurstOfRoots[12]

// processed: boolean array udg_activeMetamorphicForm[12]

// processed: boolean array udg_activeArcaneField[12]

// processed: boolean array udg_activeFrostPillar[12]

// processed: boolean array udg_activeAquaElemental[12]

// processed: boolean array udg_activeAbsorbMagic[12]

// processed: boolean array udg_activeArcaneLeash[12]

// processed: boolean array udg_activeBlinkDalaran[12]

// processed: boolean array udg_activeSummonEarthElemental[12]

// processed: boolean array udg_activeSummonWaterEleDALARAN[12]

// processed: boolean array udg_activeSummonAetherElemental[12]

// processed: boolean array udg_activeSummonFireElemental[12]

// processed: boolean array udg_activeArcaneArrow[12]

// processed: boolean array udg_activeEnchantedQuiver[12]

// processed: boolean array udg_activeTurmoilOfMagic[12]

// processed: boolean array udg_activeImplode[12]

// processed: boolean array udg_activeUnstablePortal[12]

// processed: boolean array udg_activeBlinkHighWizard[12]

// processed: boolean array udg_activeBlinkMage[12]

// processed: boolean array udg_activeManaWard[12]

// processed: boolean array udg_activeDisruption[12]

// processed: boolean array udg_activeArcaneWave[12]

// processed: boolean array udg_activePrismaticShield[12]

// processed: boolean array udg_activeTemporalGuard[12]

// processed: boolean array udg_activeAntiEnergy[12]

// processed: boolean array udg_activeOverpower[12]

// processed: boolean array udg_activeEpicenter[12]

// processed: boolean array udg_activeFrostBolt[12]

// processed: boolean array udg_activeMassFrostArmor[12]

// processed: boolean array udg_activePermafrost[12]

group udg_PiercingChargeGroup= null

group udg_PiercingChargeDamageGroup= null

hashtable udg_TablePiercingCharge= null

// processed: integer array udg_PhoenixSlashTick[12]

group udg_HolyBoltGroup= null

hashtable udg_TableHolyBolt= null

// processed: effect array udg_ShieldBashChargeEffect[12]

group udg_ShieldBashGroup= null

group udg_ShieldBashDamageGroup= null

hashtable udg_TableShieldBashCharge= null

// processed: unit array udg_MeldUnit[12]

group udg_EmberCannonMode= null

// processed: boolean array udg_activeConcentration[12]

// processed: boolean array udg_activeDoppelganger[12]

// processed: boolean array udg_activeSlowBloodElf[12]

// processed: boolean array udg_activeSilverEdgeForm[12]

// processed: boolean array udg_activePetalWard[12]

// processed: boolean array udg_activeSunBlast[12]

// processed: boolean array udg_activeManaDecay[12]

// processed: boolean array udg_activeMagicHunger[12]

// processed: boolean array udg_activeArcaneRush[12]

// processed: boolean array udg_activeArcaneShield[12]

// processed: boolean array udg_activeSpellSteal[12]

// processed: boolean array udg_activeVerbisVirtus[12]

// processed: boolean array udg_activeLiberateShield[12]

// processed: boolean array udg_activePiercingCharge[12]

// processed: boolean array udg_activeBattlecry[12]

// processed: boolean array udg_activeEmberCannonMode[12]

// processed: boolean array udg_activeRefraction[12]

// processed: boolean array udg_activeMeld[12]

// processed: boolean array udg_activePoisonTrap[12]

// processed: boolean array udg_activeHolyBolt[12]

// processed: boolean array udg_activeHavok[12]

// processed: boolean array udg_activeUltimateStrength[12]

// processed: boolean array udg_activeBerserkersCall[12]

// processed: boolean array udg_activeShieldBash[12]

// processed: boolean array udg_activeRallying[12]

// processed: boolean array udg_activeStandUnited[12]

// processed: boolean array udg_activeRainOfChaos[12]

// processed: boolean array udg_activeLiberate[12]

// processed: boolean array udg_activeSiphonLifeMana[12]

// processed: boolean array udg_activeBladestormBELF[12]

// processed: boolean array udg_activeSinDoreiBlades[12]

// processed: boolean array udg_activeManaBurnBELF[12]

group udg_HookGroup= null

group udg_HookCasterGroup= null

hashtable udg_HookTable= null

hashtable udg_HookDummyPointTable= null

hashtable udg_HookDummyCountTable= null

hashtable udg_HookDummyDoPullTable= null

hashtable udg_HookDummyEffectTable= null

group udg_ShadowsCallGroup= null

group udg_FadeGroup= null

// processed: boolean array udg_isCastingBansheeScream[12]

// processed: boolean array udg_isRunningBansheeScream[12]

// processed: unit array udg_BansheeScreamCaster[12]

// processed: effect array udg_BansheeScreamEffect[12]

// processed: timer array udg_BansheeScreamInitTimer[12]

// processed: group array udg_BlightAuraGroup[12]

// processed: integer array udg_BlightAuraLevelTemp[12]

// processed: timer array udg_PunishTimer[12]

// processed: boolean array udg_activePhaseStrike[12]

// processed: boolean array udg_activePotentRemedy[12]

// processed: boolean array udg_activeAcerbicPotion[12]

// processed: boolean array udg_activeForsakenConcoction[12]

// processed: boolean array udg_activeDeathFumes[12]

// processed: boolean array udg_activeHook[12]

// processed: boolean array udg_activeCorpsePile[12]

// processed: boolean array udg_activeRemainingSpirit[12]

// processed: boolean array udg_activeNecroticOath[12]

// processed: boolean array udg_activeForlornCell[12]

// processed: boolean array udg_activeShadowsCall[12]

// processed: boolean array udg_activeConsume[12]

// processed: boolean array udg_activeFade[12]

// processed: boolean array udg_activePetrify[12]

// processed: boolean array udg_activeSentient[12]

// processed: boolean array udg_activeSalubrious[12]

// processed: boolean array udg_activeRaiseFromGraves[12]

// processed: boolean array udg_activeUndeadEmbrace[12]

// processed: boolean array udg_activeGraveBlow[12]

// processed: boolean array udg_activeDread[12]

// processed: boolean array udg_activeShadowAscendant[12]

// processed: boolean array udg_activeFatefulStrike[12]

// processed: boolean array udg_activeLifeDrainForsaken[12]

// processed: boolean array udg_activeRemorseless[12]

// processed: boolean array udg_activeBansheeScream[12]

// processed: boolean array udg_activePunish[12]

// processed: boolean array udg_activeShift[12]

// processed: boolean array udg_activeDeathBound[12]

// processed: boolean array udg_activeVileBlast[12]

// processed: boolean array udg_activeVirus[12]

// processed: boolean array udg_activePlague[12]

// processed: boolean array udg_activeGreaterAbomination[12]

group udg_CouatlEggGroup= null

// processed: boolean array udg_isSunkenWaveOn[12]

group udg_SunkenWaveGroup= null

hashtable udg_TableSunkenWave= null

// processed: location array udg_SunkenWaveEndLoc[1]

group udg_VortexAuraGroup= null

// processed: boolean array udg_isRazorEdgeOn[12]

group udg_RazorEdgeGroup= null

// processed: unit array udg_RazorEdgeCaster[12]

// processed: group array udg_RazorEdgeTargets[12]

// processed: location array udg_RazorEdgeEndLoc[1]

// processed: boolean array udg_isRetreatOn[12]

// processed: unit array udg_RetreatCaster[12]

group udg_RetreatGroup= null

// processed: location array udg_RetreatEndLoc[1]

// processed: unit array udg_HunterInstinctsUnit[12]

group udg_WeaponChangeGroup= null

hashtable udg_SpellLockTargets= null

group udg_SubmergedGroup= null

// processed: boolean array udg_activeWeaponChange[12]

// processed: boolean array udg_activeDevourNaga[12]

// processed: boolean array udg_activeParasite[12]

// processed: boolean array udg_activeWaterShield[12]

// processed: boolean array udg_activeTyphoon[12]

// processed: boolean array udg_activeMadness[12]

// processed: boolean array udg_activeDrainMagic[12]

// processed: boolean array udg_activeSuffocate[12]

// processed: boolean array udg_activeSpellLock[12]

// processed: boolean array udg_activeMendingWater[12]

// processed: boolean array udg_activeCrystalized[12]

// processed: boolean array udg_activeSubmerge[12]

// processed: boolean array udg_activeThermalEruption[12]

// processed: boolean array udg_activeAquaBurst[12]

// processed: boolean array udg_activeCurseOfTheDepth[12]

// processed: boolean array udg_activeGust[12]

// processed: boolean array udg_activeRavage[12]

// processed: boolean array udg_activeSunkenWave[12]

// processed: boolean array udg_activeMist[12]

// processed: boolean array udg_activeMonsoon[12]

// processed: boolean array udg_activeMalediction[12]

// processed: boolean array udg_activeRazorEdge[12]

// processed: boolean array udg_activeRetreat[12]

// processed: boolean array udg_activeHealingWater[12]

// processed: boolean array udg_activeHunterInstinct[12]

// processed: effect array udg_WrathOfThePhoenixEffect[6]

// processed: boolean array udg_WrathOfThePhoenixBool[6]

// processed: group array udg_WrathOfThePhoenixDamageGroup[12]

// processed: boolean array udg_isCultOfForgottenResearched[6]

// processed: string array udg_PlayerColors[6]

string udg_MapMusic= null

// processed: integer array udg_PlayerRace[6]

// processed: integer array udg_PlayerRacePrevious[6]

hashtable udg_TablePlayerRace= null

boolean udg_isGameModeClassic= false

// processed: integer array udg_BuilderType[1]

// processed: integer array udg_MainBuildingType[1]

// processed: integer array udg_ResearchBuilding1Type[1]

// processed: integer array udg_ResearchBuilding2Type[1]

integer udg_AmountOfRoundsPlayed= 0

timer udg_GameModeTimer= null

timer udg_RaceSelectionTimer= null

// processed: rect array udg_WorkerRegion[6]

// processed: rect array udg_SpawnTimerRegion[6]

// processed: texttag array udg_SpawnTimerTextTags[6]

// processed: rect array udg_RockRegions[100]

// processed: destructable array udg_Rocks[100]

// processed: camerasetup array udg_PlayerCameras[6]

// processed: boolean array udg_XRVoteClickCheck[6]

integer udg_TotalRounds= 0

// processed: real array udg_CameraZoom[6]

real udg_WaveTime= 0

// processed: group array udg_UnitGroupBuildings[2]

hashtable udg_SpawnTable= null

hashtable udg_HeroTable= null

// processed: integer array udg_TableBuildingTypes[200]

// processed: integer array udg_TableUnitTypes[200]

timer udg_Timer= null

// processed: integer array udg_PlayerQueue[6]

// processed: integer array udg_SpawnPlayers[2]

// processed: rect array udg_SpawnRegions[2]

// processed: timer array udg_SpawnDelayTimer[2]

// processed: integer array udg_TotalUnits[6]

// processed: integer array udg_TotalKills[6]

// processed: real array udg_TotalDamage[6]

// processed: integer array udg_TotalUnitsSpawned[6]

// processed: integer array udg_TotalScore[6]

// processed: integer array udg_TotalGoldEarned[6]

real udg_PlayerLeavesEventReal= 0

player udg_EventPlayerLeave= null

// processed: timer array udg_FrameFortressTimer[2]

timer udg_TimerScoreboard= null

// processed: boolean array udg_ActivePlayers[6]

// processed: force array udg_Teams[2]

// processed: unit array udg_Fortress[2]

// processed: unit array udg_WatchTower[2]

// processed: boolean array udg_Victory[6]

boolean udg_GameOver= false

// processed: unit array udg_MainBuilding[6]

// processed: rect array udg_BuildRegion[6]

// processed: rect array udg_UpgradeRegion[6]

// processed: rect array udg_ResearchRegion[6]

// processed: rect array udg_ResearchRegion2[6]

// processed: rect array udg_ItemShopRegion[6]

// processed: boolean array udg_UnitBuildingSwap[6]

group udg_HeroBuildings= null

// processed: integer array udg_Income[6]

// processed: string array udg_IncomeNoMiddleText[6]

// processed: string array udg_IncomeMiddleText[6]

// processed: integer array udg_MiddleIncome[2]

// processed: real array udg_MiddleIncome2[2]

// processed: real array udg_AddedTime[6]

boolean udg_testbool= false

// processed: integer array udg_GoldExtractorCost[6]

// processed: integer array udg_GoldExtractorNumber[6]

// processed: timer array udg_GoldExtractorCooldown[6]

// processed: boolean array udg_GoldExtractorCooldownBoolean[6]

// processed: group array udg_UnitsOnTheirHalf[6]

// processed: group array udg_UnitsOnEnemyHalf[6]

group udg_UnitsOnTeam1Side= null

group udg_UnitsOnTeam2Side= null

// processed: rect array udg_MiddleRegions[35]

// processed: rect array udg_AttackRegions[2]

group udg_DeadUnits= null

// processed: group array udg_IdleUnits[2]

integer udg_UnitLifespan= 0

hashtable udg_TableUnitTimedLife= null

hashtable udg_TableTimedLifeTT= null

group udg_TimedLifeTTs= null

// processed: integer array udg_TotalHeroes[6]

group udg_Heroes= null

group udg_DeadHeroes= null

// processed: integer array udg_UnitXP[10]

// processed: integer array udg_HeroXP[10]

// processed: boolean array udg_isShopOpen[6]

timer udg_TwentyMinuteTimer= null

integer udg_intSeconds= 0

string udg_stringSeconds= null

integer udg_intMinutes= 0

string udg_stringMinutes= null

integer udg_intHours= 0

string udg_stringHours= null

// processed: timer array udg_UnitExpirationTimer[2]

// processed: multiboard array udg_Multiboard[6]

boolean udg_Bool= false

location udg_Point= null

location udg_Point2= null

location udg_Point3= null

location udg_Point4= null

location udg_Point5= null

location udg_Point6= null

group udg_UnitGroup= null

group udg_UnitGroup2= null

group udg_UnitGroup3= null

group udg_UnitGroup4= null

integer udg_Integer= 0

integer udg_Integer2= 0

player udg_Player= null

real udg_Real= 0

real udg_Real2= 0

real udg_Real3= 0

real udg_Real4= 0

string udg_String= null

string udg_String2= null

unit udg_Unit= null

unit udg_Unit2= null

integer udg_DebugCounter= 0

string udg_DebugString= null

unit udg_testunit= null
rect gg_rct_Battlefield= null
rect gg_rct_Build_Player_1= null
rect gg_rct_Build_Player_2= null
rect gg_rct_Build_Player_3= null
rect gg_rct_Build_Player_4= null
rect gg_rct_Build_Player_5= null
rect gg_rct_Build_Player_6= null
rect gg_rct_Fortress_Team_1= null
rect gg_rct_Fortress_Team_2= null
rect gg_rct_Hero_Dead_Region= null
rect gg_rct_Item_Shop_Player_1= null
rect gg_rct_Item_Shop_Player_2= null
rect gg_rct_Item_Shop_Player_3= null
rect gg_rct_Item_Shop_Player_4= null
rect gg_rct_Item_Shop_Player_5= null
rect gg_rct_Item_Shop_Player_6= null
rect gg_rct_Middle_Doodad_00= null
rect gg_rct_Middle_Doodad_04= null
rect gg_rct_Middle_Doodad_08= null
rect gg_rct_Middle_Team_1= null
rect gg_rct_Middle_Team_2= null
rect gg_rct_Spawn_Player_1= null
rect gg_rct_Spawn_Player_2= null
rect gg_rct_Spawn_Player_3= null
rect gg_rct_Spawn_Player_4= null
rect gg_rct_Spawn_Player_5= null
rect gg_rct_Spawn_Player_6= null
rect gg_rct_Team_1_Backline= null
rect gg_rct_Team_1_Spawn= null
rect gg_rct_Team_2_Backline= null
rect gg_rct_Team_2_Spawn= null
rect gg_rct_Tower_Team_1= null
rect gg_rct_Tower_Team_2= null
rect gg_rct_UnitLoad= null
rect gg_rct_Upgrade_Player_1= null
rect gg_rct_Upgrade_Player_1_Copy= null
rect gg_rct_Upgrade_Player_1_Copy_2= null
rect gg_rct_Upgrade_Player_2= null
rect gg_rct_Upgrade_Player_2_Copy= null
rect gg_rct_Upgrade_Player_2_Copy_2= null
rect gg_rct_Upgrade_Player_3= null
rect gg_rct_Upgrade_Player_3_Copy= null
rect gg_rct_Upgrade_Player_3_Copy_2= null
rect gg_rct_Upgrade_Player_4= null
rect gg_rct_Upgrade_Player_4_Copy= null
rect gg_rct_Upgrade_Player_4_Copy_2= null
rect gg_rct_Upgrade_Player_5= null
rect gg_rct_Upgrade_Player_5_Copy= null
rect gg_rct_Upgrade_Player_5_Copy_2= null
rect gg_rct_Upgrade_Player_6= null
rect gg_rct_Upgrade_Player_6_Copy= null
rect gg_rct_Upgrade_Player_6_Copy_2= null
rect gg_rct_Item_Removal_1= null
rect gg_rct_Item_Removal_2= null
rect gg_rct_Defensive_Structure_Area= null
rect gg_rct_Player_1_Units_TT= null
rect gg_rct_Player_3_Units_TT= null
rect gg_rct_Player_5_Units_TT= null
rect gg_rct_Player_2_Units_TT= null
rect gg_rct_Player_4_Units_TT= null
rect gg_rct_Player_6_Units_TT= null
sound gg_snd_ReceiveGold= null
sound gg_snd_Hint= null
sound gg_snd_AchievementEarned= null
sound gg_snd_Warning= null
sound gg_snd_GoodJob= null
sound gg_snd_GamePause= null
sound gg_snd_QuestActivateWhat1= null
sound gg_snd_Shinobi_Execution= null
sound gg_snd_UI_Stinger_VictoryPanel02= null
sound gg_snd_Coin= null
string gg_snd_GatewayMorph0= null
camerasetup gg_cam_Default_Game_Camera= null
camerasetup gg_cam_Camera_Player_1= null
camerasetup gg_cam_Camera_Player_2= null
camerasetup gg_cam_Camera_Player_3= null
camerasetup gg_cam_Camera_Player_4= null
camerasetup gg_cam_Camera_Player_5= null
camerasetup gg_cam_Camera_Player_6= null
camerasetup gg_cam_Cinematic_01_Team_1= null
camerasetup gg_cam_Cinematic_02_Team_1= null
camerasetup gg_cam_Cinematic_01_Team_2= null
camerasetup gg_cam_Cinematic_02_Team_2= null
camerasetup gg_cam_DSR_Unit_Preview_Angle= null
trigger gg_trg_Delayed_Destroy_Effect= null
trigger gg_trg_Example_DDE= null
trigger gg_trg_Init_MMD_Values= null
trigger gg_trg_New_Round_MMD_Values= null
trigger gg_trg_Update_MMD_Values= null
trigger gg_trg_ItemshopGUI_Init_Cats= null
trigger gg_trg_ItemshopGUI_Init_Fusions= null
trigger gg_trg_ItemshopGUI_Init_Items= null
trigger gg_trg_ItemshopGUI_Init_Shop= null
trigger gg_trg_ItemshopGUI_Init_Haggle_Skills= null
trigger gg_trg_ItemshopGUI_Init= null
trigger gg_trg_ItemshopGUI_Init_ShortCuts= null
trigger gg_trg_Cinematic_Sequence_01= null
trigger gg_trg_Cinematic_Sequence_02_init_scripts= null
trigger gg_trg_SetupGUISpellTables= null
trigger gg_trg_Move_Unit_On_Cast= null
trigger gg_trg_Terrain_Change_TEST= null
trigger gg_trg_Mana_Flare_Cast= null
trigger gg_trg_Unit_Casts_Invisibility= null
trigger gg_trg_Unit_Casts_Invisibility_NEW= null
trigger gg_trg_Unit_Casts_Aerial_Shackles= null
trigger gg_trg_Unit_Finishes_Casting_Aerial_Shackles= null
trigger gg_trg_Unit_Casts_Ancestral_Spirit= null
trigger gg_trg_Unit_Casts_Stasis_Trap= null
trigger gg_trg_Unit_Casts_Burrow= null
trigger gg_trg_Unit_Casts_Devour_Magic= null
trigger gg_trg_Unit_Hit_by_Possession= null
trigger gg_trg_Unit_Casts_Kaboom= null
trigger gg_trg_Banshee_Possession_NEW= null
trigger gg_trg_Banshee_Possession_Kill= null
trigger gg_trg_Banshee_Possession_change_back= null
trigger gg_trg_Hero_Casts_Earthquake= null
trigger gg_trg_Hero_Stops_Casting_Earthquake= null
trigger gg_trg_Hero_Casts_Death_and_Decay= null
trigger gg_trg_Hero_Stops_Casting_Death_and_Decay= null
trigger gg_trg_Hero_Casts_Tornado= null
trigger gg_trg_Tornado_Search= null
trigger gg_trg_Holy_Light= null
trigger gg_trg_Divine_Shield= null
trigger gg_trg_Resurrection= null
trigger gg_trg_Blizzard= null
trigger gg_trg_Water_Elemental= null
trigger gg_trg_Tornado= null
trigger gg_trg_Storm_Bolt= null
trigger gg_trg_Avatar_and_Thunder_Clap= null
trigger gg_trg_Avatar= null
trigger gg_trg_Blood_Mage_Abilities= null
trigger gg_trg_Footman_Defend= null
trigger gg_trg_Priest_Dispel_Magic= null
trigger gg_trg_Priest_Inner_Fire_2= null
trigger gg_trg_Sorceress_Invisibility= null
trigger gg_trg_Sorceress_Sheep= null
trigger gg_trg_Sorceress_Sheep_2= null
trigger gg_trg_Spellbreaker_Control_Magic= null
trigger gg_trg_Dragonhawk_Rider_Aerial_Shackles= null
trigger gg_trg_Dragonhawk_Rider_Aerial_Shackles_2= null
trigger gg_trg_Mortar_Team_Flare= null
trigger gg_trg_Wind_Walk= null
trigger gg_trg_Wind_Walk_2= null
trigger gg_trg_Wind_Walk_Unit_Dies= null
trigger gg_trg_Blademaster_Dies= null
trigger gg_trg_Mirror_Image= null
trigger gg_trg_Bladestorm= null
trigger gg_trg_Chain_Lightning= null
trigger gg_trg_Spirit_Wolves= null
trigger gg_trg_Firebolt= null
trigger gg_trg_Earthquake= null
trigger gg_trg_Earthquake_Point_Check= null
trigger gg_trg_Shockwave= null
trigger gg_trg_War_Stomp= null
trigger gg_trg_Healing_Wave= null
trigger gg_trg_Hex= null
trigger gg_trg_Serpent_Ward= null
trigger gg_trg_Big_Bad_Voodoo= null
trigger gg_trg_Big_Bad_Voodoo_Check= null
trigger gg_trg_Big_Bad_Voodoo_is_attacked= null
trigger gg_trg_Berserker_Berserk= null
trigger gg_trg_Batrider_Unstable_Concoction= null
trigger gg_trg_Batrider_Unstable_Concoction_2= null
trigger gg_trg_Shaman_Purge= null
trigger gg_trg_Shaman_Purge_2= null
trigger gg_trg_Shaman_Lightning_Shield= null
trigger gg_trg_Spirit_Walker_Spirit_Link= null
trigger gg_trg_Spirit_Walker_Spirit_Link_2= null
trigger gg_trg_Spirit_Walker_Disenchant= null
trigger gg_trg_Spirit_Walker_Ancestral_Spirit= null
trigger gg_trg_Witch_Doctor_Stasis_Trap_Healing_Ward= null
trigger gg_trg_Kodo_Beast_Devour= null
trigger gg_trg_Death_Coil= null
trigger gg_trg_Death_Pact= null
trigger gg_trg_Animate_Dead= null
trigger gg_trg_Frost_Nova= null
trigger gg_trg_Autocast_Frost_Armor_ON= null
trigger gg_trg_Autocast_Frost_Armor_OFF= null
trigger gg_trg_Dark_Ritual= null
trigger gg_trg_Death_and_Decay= null
trigger gg_trg_Death_and_Decay_Point_Check= null
trigger gg_trg_Dreadlord_Abilities= null
trigger gg_trg_Crypt_Lord_Abilities= null
trigger gg_trg_Autocast_Carrion_Beetles_ON= null
trigger gg_trg_Autocast_Carrion_Beetles_OFF= null
trigger gg_trg_Crypt_Fiend_Burrow= null
trigger gg_trg_Crypt_Fiend_Unburrow= null
trigger gg_trg_Crypt_Fiend_Unburrow_2= null
trigger gg_trg_Crypt_Fiend_Dies= null
trigger gg_trg_Gargoyle_Stone_Form= null
trigger gg_trg_Gargoyle_Unstone_Form= null
trigger gg_trg_Gargoyle_Uses_Unstone_Form= null
trigger gg_trg_Necromancer_Raise_Dead= null
trigger gg_trg_Necromancer_Unholy_Frenzy= null
trigger gg_trg_Necromancer_Cripple= null
trigger gg_trg_Banshee_Anti_Magic_Shell= null
trigger gg_trg_Banshee_Possession= null
trigger gg_trg_Banshee_Possession_2= null
trigger gg_trg_Banshee_Possession_Random= null
trigger gg_trg_Obsidian_Staue_Spirit_Touch= null
trigger gg_trg_Meat_Wagon_Exhume_Corpses= null
trigger gg_trg_Meat_Wagon_Dies= null
trigger gg_trg_Disease_Cloud_is_summoned= null
trigger gg_trg_Disease_Cloud_Dies= null
trigger gg_trg_Destroyer_Absorb_Mana= null
trigger gg_trg_Destroyer_Absorb_Mana_2= null
trigger gg_trg_Destroyer_Devour_Magic= null
trigger gg_trg_Entangling_Roots= null
trigger gg_trg_Force_of_Nature= null
trigger gg_trg_Tranquility= null
trigger gg_trg_Autocast_Searing_Arrows_ON= null
trigger gg_trg_Autocast_Searing_Arrows_OFF= null
trigger gg_trg_Silence= null
trigger gg_trg_Starfall= null
trigger gg_trg_Starfall_Check= null
trigger gg_trg_Mana_Burn= null
trigger gg_trg_Immolation= null
trigger gg_trg_Metamorphosis= null
trigger gg_trg_Fan_of_Knives= null
trigger gg_trg_Blink= null
trigger gg_trg_Shadow_Strike= null
trigger gg_trg_Vengeance= null
trigger gg_trg_Dryad_Abolish_Magic= null
trigger gg_trg_Huntress_Sentinel= null
trigger gg_trg_Druid_of_the_Talon_Crow_Form= null
trigger gg_trg_Druid_of_the_Talon_Cyclone= null
trigger gg_trg_Druid_of_the_Claw_Roar= null
trigger gg_trg_Druid_of_the_Claw_Roar_2= null
trigger gg_trg_Druid_of_the_Claw_Rejuvenation= null
trigger gg_trg_Druid_of_the_Claw_Bear_Form= null
trigger gg_trg_Mountain_Giant_Taunt= null
trigger gg_trg_Healing_Spray= null
trigger gg_trg_Chemical_Rage= null
trigger gg_trg_Acid_Bomb= null
trigger gg_trg_Transmute= null
trigger gg_trg_Transmute_FIX= null
trigger gg_trg_Forked_Lightning= null
trigger gg_trg_Autocast_Frost_Arrows_ON= null
trigger gg_trg_Autocast_Frost_Arrows_OFF= null
trigger gg_trg_Mana_Shield= null
trigger gg_trg_Tornado_Neutral= null
trigger gg_trg_Pocket_Factory= null
trigger gg_trg_Cluster_Rockets= null
trigger gg_trg_Robo_Goblin= null
trigger gg_trg_Summon_Bear= null
trigger gg_trg_Summon_Hawk_and_Quilbeast= null
trigger gg_trg_Stampede= null
trigger gg_trg_Breath_of_Fire= null
trigger gg_trg_Drunken_Haze= null
trigger gg_trg_Storm_Earth_and_Fire= null
trigger gg_trg_Storm_Earth_and_Fire_is_summoned= null
trigger gg_trg_Storm_Wind_Walk= null
trigger gg_trg_Storm_Wind_Walk_2= null
trigger gg_trg_Storm_Wind_Walk_Unit_Dies= null
trigger gg_trg_Storm_Dies= null
trigger gg_trg_Earth_Attacks= null
trigger gg_trg_Silence_Neutral= null
trigger gg_trg_Autocast_Black_Arrow_ON= null
trigger gg_trg_Autocast_Black_Arrow_OFF= null
trigger gg_trg_Life_Drain= null
trigger gg_trg_Charm= null
trigger gg_trg_Soul_Burn= null
trigger gg_trg_Lava_Spawn= null
trigger gg_trg_Volcano= null
trigger gg_trg_Volcano_Point_Check= null
trigger gg_trg_Rain_of_Fire= null
trigger gg_trg_Howl_of_Terror= null
trigger gg_trg_Doom= null
trigger gg_trg_Morph_to_Aether_Elemental= null
trigger gg_trg_Morph_to_Earth_Elemental= null
trigger gg_trg_Morph_to_Water_Elemental= null
trigger gg_trg_Morph_to_Fire_Elemental= null
trigger gg_trg_Weaken_Cast= null
trigger gg_trg_Weaken_Check= null
trigger gg_trg_Living_Bomb= null
trigger gg_trg_Living_Bomb_Effect= null
trigger gg_trg_Living_Bomb_Death= null
trigger gg_trg_Arcane_Arrow= null
trigger gg_trg_Turmoil_of_Magic= null
trigger gg_trg_Implode= null
trigger gg_trg_Implode_Dummy_Level_1= null
trigger gg_trg_Implode_Dummy_Level_2= null
trigger gg_trg_Implode_Dummy_Level_3= null
trigger gg_trg_Prismatic_Shield= null
trigger gg_trg_Anti_Energy= null
trigger gg_trg_Anti_Energy_Effect= null
trigger gg_trg_Overpower= null
trigger gg_trg_Overpower_OFF= null
trigger gg_trg_Epicenter= null
trigger gg_trg_Epicenter_Bonus= null
trigger gg_trg_Unit_Casts_Dalaran_Rune= null
trigger gg_trg_Dalaran_Rune_Group_Check= null
trigger gg_trg_Wisdom_Embrace_Effect= null
trigger gg_trg_Fusion= null
trigger gg_trg_Arcane_Field= null
trigger gg_trg_Mana_Whip= null
trigger gg_trg_Frost_Nova_Dalaran= null
trigger gg_trg_Mass_Frost_Armor= null
trigger gg_trg_Permafrost= null
trigger gg_trg_Permafrost_OFF= null
trigger gg_trg_Earth_Elemental_Rank_3_Dies= null
trigger gg_trg_Fire_Elemental_Dies= null
trigger gg_trg_AI_Arcane_Arrow= null
trigger gg_trg_AI_Turmoil_of_Magic= null
trigger gg_trg_AI_Implode= null
trigger gg_trg_AI_Blink_High_Wizard= null
trigger gg_trg_AI_Unstable_Portal= null
trigger gg_trg_AI_Mana_Ward= null
trigger gg_trg_AI_Disruption= null
trigger gg_trg_AI_Arcane_Wave= null
trigger gg_trg_AI_Prismatic_Shield= null
trigger gg_trg_AI_Temporal_Guard= null
trigger gg_trg_AI_Summon_Earth_Elemental= null
trigger gg_trg_Summon_Aether_and_Water_Elemental= null
trigger gg_trg_AI_Summon_Fire_Elemental= null
trigger gg_trg_AI_AntiEnergy= null
trigger gg_trg_AI_Overpower= null
trigger gg_trg_AI_Epicenter= null
trigger gg_trg_AI_Frost_Bolt= null
trigger gg_trg_AI_Mass_Frost_Armor= null
trigger gg_trg_AI_Blink_Mage= null
trigger gg_trg_AI_Permafrost= null
trigger gg_trg_All_Units_Mana_Shield= null
trigger gg_trg_AI_Magic_Shield= null
trigger gg_trg_Charmer_Energy_Whip= null
trigger gg_trg_Apprentice_Eliminate_Magic= null
trigger gg_trg_Apprentice_Focal_Magic= null
trigger gg_trg_Apprentice_Weaken= null
trigger gg_trg_Apprentice_Barrier= null
trigger gg_trg_Construct_Absorb_Mana= null
trigger gg_trg_Construct_Fusion= null
trigger gg_trg_Arcanist_Inversion= null
trigger gg_trg_Arcanist_Wisdom_Embrace= null
trigger gg_trg_Arcanist_Sheep= null
trigger gg_trg_Arcanist_Aether_Manipulation= null
trigger gg_trg_Pyromancer_Burn= null
trigger gg_trg_Pyromancer_Fury_of_the_Flame= null
trigger gg_trg_Geomancer_Burst_of_Roots= null
trigger gg_trg_Geomancer_Earthfall= null
trigger gg_trg_Geomancer_Metamorphic_Form= null
trigger gg_trg_Geomancer_UnMetamorphic_Form= null
trigger gg_trg_Magician_Mana_Decay= null
trigger gg_trg_Magician_Arcane_Field= null
trigger gg_trg_AI_Dalaran_Defend= null
trigger gg_trg_AI_Protective_Field= null
trigger gg_trg_AI_Protective_Field_2= null
trigger gg_trg_Kirin_Tor_Operative_Frost_Nova= null
trigger gg_trg_Kirin_Tor_Operative_Aqua_Elemental= null
trigger gg_trg_Kirin_Tor_Operative_Absorb_Magic= null
trigger gg_trg_Kirin_Tor_Operative_Blink= null
trigger gg_trg_Kirin_Tor_Curator_Arcane_Leash= null
trigger gg_trg_Kirin_Tor_Curaotr_Arcane_Leash_2= null
trigger gg_trg_Arcane_Affinity= null
trigger gg_trg_Piercing_Charge= null
trigger gg_trg_Piercing_Charge_Periodic= null
trigger gg_trg_Concentration= null
trigger gg_trg_Deadly_Grasp= null
trigger gg_trg_Battlecry= null
trigger gg_trg_Magic_Hunger= null
trigger gg_trg_Magic_Hunger_Attack= null
trigger gg_trg_Doppleganger= null
trigger gg_trg_Petal_Ward= null
trigger gg_trg_Arcane_Rush= null
trigger gg_trg_Verbis_Virtus= null
trigger gg_trg_Sun_Blast= null
trigger gg_trg_Ember_Cannon_Mode_ON= null
trigger gg_trg_Ember_Cannon_Mode_OFF= null
trigger gg_trg_Meld= null
trigger gg_trg_Phoenix_Slash= null
trigger gg_trg_Blade_Dance= null
trigger gg_trg_Holy_Bolt= null
trigger gg_trg_Holy_Bolt_Periodic= null
trigger gg_trg_Havok= null
trigger gg_trg_Berserkers_Call= null
trigger gg_trg_Shield_Bash= null
trigger gg_trg_Shield_Bash_Periodic= null
trigger gg_trg_Stand_United= null
trigger gg_trg_Liberate= null
trigger gg_trg_Arcane_Clarity= null
trigger gg_trg_AI_Refraction= null
trigger gg_trg_AI_Refraction_2= null
trigger gg_trg_AI_Meld= null
trigger gg_trg_AI_Meld_2= null
trigger gg_trg_Meld_Unit_Dies= null
trigger gg_trg_Phoenix_Assassin_Dies= null
trigger gg_trg_AI_Holy_Bolt= null
trigger gg_trg_AI_Bladestorm_BELF= null
trigger gg_trg_AI_SinDorei_Blades= null
trigger gg_trg_AI_Mana_Burn_BELF= null
trigger gg_trg_AI_Berserkers_Call= null
trigger gg_trg_AI_Shield_Bash= null
trigger gg_trg_AI_Havok= null
trigger gg_trg_AI_Ultimate_Strength= null
trigger gg_trg_AI_Ultimate_Strength_2= null
trigger gg_trg_AI_Rallying= null
trigger gg_trg_AI_Stand_United= null
trigger gg_trg_AI_Rain_of_Chaos= null
trigger gg_trg_AI_Liberate= null
trigger gg_trg_AI_Siphon_Life_and_Mana= null
trigger gg_trg_AI_Concentration= null
trigger gg_trg_AI_Doppelganger= null
trigger gg_trg_AI_Slow_BELF= null
trigger gg_trg_AI_Silver_Edge_Form= null
trigger gg_trg_AI_Deadly_Grasp= null
trigger gg_trg_AI_Dragonhawk_Rider_Mana_Decay= null
trigger gg_trg_AI_Petal_Ward= null
trigger gg_trg_AI_Sun_Blast= null
trigger gg_trg_AI_Arcane_Rush= null
trigger gg_trg_AI_Verbis_Virtus= null
trigger gg_trg_AI_Liberate_Shield= null
trigger gg_trg_AI_Relocate= null
trigger gg_trg_AI_Battlecry= null
trigger gg_trg_AI_Ember_Cannon_Mode= null
trigger gg_trg_AI_Decimator_Mode= null
trigger gg_trg_Hook_Init= null
trigger gg_trg_Unit_Casts_Hook= null
trigger gg_trg_Hook_Periodic= null
trigger gg_trg_Unit_Finishes_Casting_Hook= null
trigger gg_trg_Shadows_Call_Cast= null
trigger gg_trg_Shadows_Call= null
trigger gg_trg_Fade_Cast= null
trigger gg_trg_Fade= null
trigger gg_trg_Phase_Strike= null
trigger gg_trg_Blight_Spread= null
trigger gg_trg_Dark_Rogue_Blight_Grow= null
trigger gg_trg_Fateful_Strike= null
trigger gg_trg_Banshee_Scream_Cast= null
trigger gg_trg_Banshee_Scream_Start= null
trigger gg_trg_Grave_Blow= null
trigger gg_trg_Blight_Aura= null
trigger gg_trg_Punish_New= null
trigger gg_trg_Punish= null
trigger gg_trg_Corpse_Consume= null
trigger gg_trg_Contract_Kill= null
trigger gg_trg_AI_Grave_Blow= null
trigger gg_trg_AI_Dread= null
trigger gg_trg_AI_Fateful_Strike= null
trigger gg_trg_AI_Life_Drain= null
trigger gg_trg_AI_Remorseless= null
trigger gg_trg_AI_Banshee_Scream= null
trigger gg_trg_AI_Punish= null
trigger gg_trg_AI_Death_Bound= null
trigger gg_trg_AI_Vile_Blast= null
trigger gg_trg_AI_Plague= null
trigger gg_trg_AI_Greater_Abomination= null
trigger gg_trg_AI_Remedy_Splash= null
trigger gg_trg_AI_Potent_Remedy= null
trigger gg_trg_AI_Acerbic_Potion= null
trigger gg_trg_AI_Forsaken_Concoction= null
trigger gg_trg_AI_Death_Fumes= null
trigger gg_trg_AI_Hook= null
trigger gg_trg_AI_Deranged= null
trigger gg_trg_AI_Corpse_Pile= null
trigger gg_trg_AI_Remaining_Spirit= null
trigger gg_trg_AI_Necrotic_Oath= null
trigger gg_trg_AI_Forlorn_Cell= null
trigger gg_trg_AI_Consume= null
trigger gg_trg_AI_Consume_NEW= null
trigger gg_trg_AI_Fade= null
trigger gg_trg_AI_Petrify= null
trigger gg_trg_AI_Sentient= null
trigger gg_trg_AI_Salubrious= null
trigger gg_trg_AI_Undead_Embrace= null
trigger gg_trg_Magical_Skin= null
trigger gg_trg_Murloc_Acid= null
trigger gg_trg_Couatl_Dies= null
trigger gg_trg_Couatl_Egg_Dies= null
trigger gg_trg_Sunken_Wave= null
trigger gg_trg_Siren_Aura= null
trigger gg_trg_Malediction= null
trigger gg_trg_Gust= null
trigger gg_trg_Ravage= null
trigger gg_trg_Kraken_Shell= null
trigger gg_trg_Termal_Eruption= null
trigger gg_trg_Aqua_Burst= null
trigger gg_trg_Vortex_Aura= null
trigger gg_trg_Razor_Edge= null
trigger gg_trg_Razor_Edge_Periodic= null
trigger gg_trg_Retreat= null
trigger gg_trg_Retreat_Surface= null
trigger gg_trg_Retreat_Periodic= null
trigger gg_trg_AI_Termal_Eruption= null
trigger gg_trg_AI_Aqua_Burst= null
trigger gg_trg_AI_Curse_of_the_Depth= null
trigger gg_trg_AI_Gust= null
trigger gg_trg_AI_Ravage= null
trigger gg_trg_AI_Sunken_Wave= null
trigger gg_trg_AI_Healing_Water= null
trigger gg_trg_AI_Monsoon= null
trigger gg_trg_AI_Mist= null
trigger gg_trg_AI_Malediction= null
trigger gg_trg_AI_Frenzy= null
trigger gg_trg_AI_Retreat= null
trigger gg_trg_AI_Razor_Edge= null
trigger gg_trg_AI_Hunter_Instincts= null
trigger gg_trg_AI_Hunter_Instincts_2= null
trigger gg_trg_Hunter_Instincts_Unit_Dies= null
trigger gg_trg_Myrmidon_Commander_Dies= null
trigger gg_trg_AI_Weapon_Change= null
trigger gg_trg_AI_Weapon_Change_Check= null
trigger gg_trg_AI_Weapon_Change_OnChangeBack= null
trigger gg_trg_AI_Typhoon= null
trigger gg_trg_AI_Mending_Water= null
trigger gg_trg_AI_Madness= null
trigger gg_trg_AI_Water_Shield= null
trigger gg_trg_AI_Drain_Magic= null
trigger gg_trg_AI_Suffocate= null
trigger gg_trg_AI_Spell_Lock= null
trigger gg_trg_AI_Spell_Lock_Attack= null
trigger gg_trg_AI_Devour= null
trigger gg_trg_AI_Crystalized= null
trigger gg_trg_AI_Submerge= null
trigger gg_trg_AI_Submerge_OnCast= null
trigger gg_trg_AI_Submerge_Scan= null
trigger gg_trg_AI_Submerge_OnSurface= null
trigger gg_trg_Place_Racial_Building= null
trigger gg_trg_Move_Racial_Building= null
trigger gg_trg_Move_Racial_Building_Prevent= null
trigger gg_trg_Arcane_Tower_Start= null
trigger gg_trg_Reconstruction_Tower_Start= null
trigger gg_trg_Dalaran_Tower_Finish= null
trigger gg_trg_Dalaran_Tower_Cancel= null
trigger gg_trg_AI_Wrath_of_The_Phoenix= null
trigger gg_trg_Wrath_of_the_Phoenix_Cast= null
trigger gg_trg_Unit_Builds_Phoenix= null
trigger gg_trg_Wrath_of_the_Phoenix= null
trigger gg_trg_Wrath_of_the_Phoenix_move= null
trigger gg_trg_Fury_of_the_Sunwell= null
trigger gg_trg_Dark_Ladys_Vengeance_Start= null
trigger gg_trg_Dark_Ladys_Vengeance_Finish= null
trigger gg_trg_Dark_Ladys_Vengeance_Effect= null
trigger gg_trg_Pale_Ladys_Gaze= null
trigger gg_trg_Cult_of_Forgotten_Shadow_Start= null
trigger gg_trg_Cult_of_Forgotten_Shadow_Finish= null
trigger gg_trg_Cult_of_Forgotten_Shadow_Effect= null
trigger gg_trg_Super_Plague_Start= null
trigger gg_trg_Super_Plague_Finish= null
trigger gg_trg_Forsaken_Mastery_Cancel= null
trigger gg_trg_Toxic_Murgul_Reaver= null
trigger gg_trg_Evolved_Naga_Siren= null
trigger gg_trg_Ember_Snap_Dragon= null
trigger gg_trg_Evolved_Couatl= null
trigger gg_trg_Evolved_Dragon_Turtle= null
trigger gg_trg_Evolved_Naga_Myrmidon= null
trigger gg_trg_Evolved_Ancient_Hydra= null
trigger gg_trg_Set_Map_Music= null
trigger gg_trg_Initialization= null
trigger gg_trg_Initializatize_Scripts= null
trigger gg_trg_Start_Game= null
trigger gg_trg_Info_Init= null
trigger gg_trg_Info_Prompt= null
trigger gg_trg_Load_Building_Models= null
trigger gg_trg_Reset_Game= null
trigger gg_trg_Setup_Fortress_and_Watch_Tower_etc= null
trigger gg_trg_Camera_Zoom= null
trigger gg_trg_Spawn= null
trigger gg_trg_Player_Leaves= null
trigger gg_trg_Tower_Team_1_Dies= null
trigger gg_trg_Tower_Team_2_Dies= null
trigger gg_trg_Game_Over= null
trigger gg_trg_Show_Scoreboard= null
trigger gg_trg_Research= null
trigger gg_trg_Unit_Constructs_Building= null
trigger gg_trg_Summon_Hero_Builder= null
trigger gg_trg_Construct_Hero= null
trigger gg_trg_Hero_Building_Dies= null
trigger gg_trg_Hero_Building_Set_Mana_Zero= null
trigger gg_trg_Move_Building= null
trigger gg_trg_Sell_Building_100= null
trigger gg_trg_Sell_Building_75= null
trigger gg_trg_Build_Footman= null
trigger gg_trg_Build_Priest= null
trigger gg_trg_Build_Grunt= null
trigger gg_trg_Build_Headhunter= null
trigger gg_trg_Build_Witch_Doctor= null
trigger gg_trg_Build_Raider= null
trigger gg_trg_Build_Kodo_Beast= null
trigger gg_trg_Build_Crypt_Fiend= null
trigger gg_trg_Build_Ghoul= null
trigger gg_trg_Build_Necromancer= null
trigger gg_trg_Build_Banshee= null
trigger gg_trg_Build_Frost_Wyrm= null
trigger gg_trg_Build_Huntress= null
trigger gg_trg_Build_Glaive_Thrower= null
trigger gg_trg_Build_Mountain_Giant= null
trigger gg_trg_Basic_Income= null
trigger gg_trg_Extra_Income= null
trigger gg_trg_Gold_Extractor_Add= null
trigger gg_trg_Gold_Extractor_Cooldown_Expires= null
trigger gg_trg_Team_1_Enters_Middle= null
trigger gg_trg_Team_2_Enters_Middle= null
trigger gg_trg_Middle_Check= null
trigger gg_trg_Unit_Dies= null
trigger gg_trg_Idle_Check= null
trigger gg_trg_Unit_Timed_Life= null
trigger gg_trg_Update_Unit_TT= null
trigger gg_trg_Hero_Dies= null
trigger gg_trg_Hero_XP_Gain= null
trigger gg_trg_Hero_Learn_Spells= null
trigger gg_trg_Hero_Uses_Spell= null
trigger gg_trg_Staging_Area_Anti_Stuck= null
trigger gg_trg_Timer_Update= null
trigger gg_trg_Twenty_Minutes_In= null
trigger gg_trg_Archer_Hippo_Merge= null
trigger gg_trg_Shop_Select= null
trigger gg_trg_Multiboard_Setup= null
trigger gg_trg_TEST_RANDOM_BUILDER= null
trigger gg_trg_TEST_SET_SKIN= null
trigger gg_trg_TEST_SAVE= null
trigger gg_trg_TEST_LEAVE= null
trigger gg_trg_SPAWN_TEST= null
trigger gg_trg_TEST_LEVEL_UP= null
trigger gg_trg_test_own= null
trigger gg_trg_TEST_SELECT_UNIT= null
trigger gg_trg_TEST_GROUND_UNIT= null
trigger gg_trg_test_move= null
trigger gg_trg_DEBUG_ORDERS= null
trigger gg_trg_TEST_SPAWN= null
trigger gg_trg_Leak_Detector= null
trigger gg_trg_TEST_LEAK= null
trigger gg_trg_TEST_RESET= null
trigger gg_trg_TEST_ORDER= null
trigger gg_trg_TEST= null
trigger gg_trg_TEST_DESTRUCTIBLE= null
trigger gg_trg_TEST_KILLS= null
trigger gg_trg_TEST_CUSTOM_VALUE= null
boolean array isVisibleAbilityMenu
boolean array isVisibleNeutralAbilityMenu
// processed:     image array gridEffect[6][96]
framehandle btnGrid
boolean array isGridOn
integer array currentGold
boolean array isAFK
timer array afkTimer
trigger trigAFKCheck

integer AFK_GOLD_THRESHOLD= 1200

framehandle frameParentAFK
framehandle frameAFKSplat
framehandle frameParentAFKText
framehandle btnNotAfk
constant integer DS_RACES_MAX= 8

    // Units
constant integer UNIT_RAIDER= 'orai'
constant integer UNIT_SILVERMOON_GUARD= 'u00C'
constant integer UNIT_HERO_BANSHEE_MAIDEN= 'U010'
    
    // Abilities
constant integer ABILITY_FOCUSED_ARROW= 'A0A6'

    // Buffs
constant integer BUFF_BARRIER= 'B036'
    
framehandle btnAbilityControl
framehandle array abilityMenu
framehandle frameHeroAbilityText
framehandle array btnNeutralHeroes
framehandle neutralAbilityMenu

// processed:     framehandle array btnAbilityEnabled[4][33] // (race, ability)
// processed:     string array btnAbilityImgEnabled[4][33]
// processed:     framehandle array btnAbilityDisabled[4][33] // (race, ability)
// processed:     string array btnAbilityImgDisabled[4][33]
framehandle array frameAbilityName
framehandle array frameAbilityState
// processed:     string array abilityName[4][33]

framehandle array btnNeutralAbilityEnabled
string array btnNeutralAbilityImgEnabled
framehandle array btnNeutralAbilityDisabled
string array btnNeutralAbilityImgDisabled
string array neutralAbilityName
framehandle frameNeutralAbilityState
framehandle frameNeutralAbilityName

boolean gl_state
integer gl_player

string tempOrder
hashtable barrierHashtable
framehandle frameClassicSelection
framehandle frameCustomSelection
framehandle frameSelectRace
// processed:     framehandle array frameRaceImage[5]
// processed:     framehandle array frameRaceBanner[5]
// processed:     framehandle array btnRaceClassic[5]
framehandle array btnRaceCustom
// processed:     string array textureNumber[10]
framehandle frameTimeRemainingRace
// processed:     framehandle array frameClassicTimeRemaining[2]
// processed:     framehandle array frameCustomTimeRemaining[2]

// processed:     boolean array isRaceSelected[6]
// processed:     framehandle array framePlayerHasSelectedClassic[6]
// processed:     framehandle array framePlayerHasSelectedCustom[6]
integer timeRemainingRace

// processed:     string array raceImg[5]
// processed:     string array raceImgBanner[5]
// processed:     string array raceName[5]
timer timerGameMode
timer timerGameModeDelay
framehandle frameGameModeSelection
framehandle frameClassicText
framehandle frameCustomText
framehandle frameClassicCrests
framehandle frameCustomCrests
framehandle frameBannerLeft
framehandle frameBannerRight
framehandle frameClassicDesc
framehandle frameCustomDesc
framehandle array frameTimeRemaining
framehandle btnClassic
trigger trigClassic
framehandle btnCustom
trigger trigCustom
framehandle frameHost
framehandle frameHostLight
framehandle frameTimeRemainingMode
trigger trigTimer
trigger trigTimerDelay
trigger trigInitiateRaceSelection
integer timeRemaining

string array textureNumber
integer ds_MAX_LEVEL= 1000
// processed:     integer array experience[6][4] // experience per player
// processed:     integer array playerLevels[6][4] // experience per player
// processed:     integer array levels[1000] // experience needed per level
// processed:     integer array equippedSkinHum[6][5] // (player, skin)
// processed:     integer array equippedSkinOrc[6][5]
// processed:     integer array equippedSkinUnd[6][5]
// processed:     integer array equippedSkinNig[6][5]
// processed:     boolean array isVisibleProgressionMenu[6]

// processed:     framehandle array XPBarMainUI[4]
// processed:     framehandle array XPBarFillMainUI[4]
// processed:     framehandle array frameXPBarTextMainUI[4]
framehandle frameLevelUpBlob
framehandle frameLevelUpText
framehandle btnProgressionMenu
framehandle progressionMenu
framehandle frameSkinsText
// processed:     framehandle array XPBarRaces[4]
// processed:     framehandle array XPBarFill[4]
// processed:     framehandle array frameXPBarRaceText[4]
// processed:     string array XPBarRaceText[4]
// processed:     framehandle array frameMatchStats[4]
framehandle textUnits
framehandle textHeroes
framehandle progressionMenuDialog
framehandle btnCloseSkinDialog
framehandle frameTextSkin
framehandle btnEquipSkin

// processed:     framehandle array frameBtnUnit[4][9]
// processed:     string array frameImgUnit[4][9]
// processed:     framehandle array frameBtnSkinHum[9][5]
// processed:     framehandle array frameBtnSkinOrc[9][5]
// processed:     framehandle array frameBtnSkinUnd[9][5]
// processed:     framehandle array frameBtnSkinNig[9][5]
integer frameImgSkin
integer textSkin
// processed:     framehandle array frameSkinHighlight[4][9]
integer unitSkin
integer abilityLookup

integer array selectedUnitType
integer array selectedSkin
integer array selectedSkinBtn
integer array selectedCustomValue
string frameImgSkinDisabled
integer frameSkinDisabled
integer skinLevelRequirement

framehandle frameSkinTimer
framehandle scoreboard
framehandle frameIconHuman
framehandle frameIconOrc
framehandle frameIconUndead
framehandle frameIconNightElves
framehandle victory
framehandle defeat
framehandle continue
framehandle extraRound
framehandle xrVotesText
string totalColor= "|cffff7c7c"
string array raceNameWithColor

// processed: 	framehandle array pName[6]
// processed: 	framehandle array pScore[6]
// processed: 	framehandle array pKills[6]
// processed: 	framehandle array pDamage[6]
// processed: 	framehandle array pUnitsSpawned[6]
// processed: 	framehandle array pGoldEarned[6]
// processed: 	framehandle array pVote[6]
// processed: 	framehandle array pVoteYes[6]
// processed: 	framehandle array pBar[6]

framehandle scoreTeam1
framehandle killsTeam1
framehandle damageTeam1
framehandle unitsTeam1
framehandle goldTeam1
framehandle scoreTeam2
framehandle killsTeam2
framehandle damageTeam2
framehandle unitsTeam2
framehandle goldTeam2
framehandle zoomIn
framehandle zoomOut
framehandle resetCamera
string originalTooltip
string NormalBase
string array RandomBase
// processed: 	integer array spawnPlayer[6]
// processed: 	integer array unitSpawns[6][65] // legacy code from Desert Strike
// processed: 	integer array unitSpawnCounter[6][65] // legacy code from Desert Strike
integer totalVotes

// processed: 	framehandle array timerText[6] // text displayed on the minimap

// processed: 	framehandle array frameWatchTower[2]
// processed: 	framehandle array frameTowerHealth[2]
// processed: 	framehandle array frameTowerFill[2]

// processed: 	framehandle array frameFortress[2]
// processed: 	framehandle array frameFortressHealth[2]
// processed: 	framehandle array frameFortressFill[2]

// processed: 	integer array frameFortressCounter[2]
// processed: 	real array frameFortDim[2]
// processed: 	real array frameFortAncorX[2]
// processed: 	real array frameFortAncorY[2]

integer timeRemainingRound
integer noPlayersOnRoundEnd
// processed: 	integer array xrVotes[6]

// processed: 	integer array totalScore[2]
// processed: 	integer array totalKills[2]
// processed: 	integer array totalDamage[2]
// processed: 	integer array totalUnits[2]
// processed: 	integer array totalGold[2]

// processed: 	string array pColor[6]
integer array racialTowerType
real array racialTowerX
real array racialTowerY
boolean array racialTowerIsDead

trigger l__library_init

//JASSHelper struct globals:
constant integer si__Ascii__Inits=22
constant integer si__MMD__QueueNode=23
integer si__MMD__QueueNode_F=0
integer si__MMD__QueueNode_I=0
integer array si__MMD__QueueNode_V
real array s__MMD__QueueNode_timeout
string array s__MMD__QueueNode_msg
integer array s__MMD__QueueNode_checksum
string array s__MMD__QueueNode_key
integer array s__MMD__QueueNode_next
constant integer si__Table___dex=24
constant integer si__Table___handles=25
constant integer si__Table___agents=26
constant integer si__Table___reals=27
constant integer si__Table___booleans=28
constant integer si__Table___strings=29
constant integer si__Table___integers=30
constant integer si__Table___players=31
constant integer si__Table___widgets=32
constant integer si__Table___destructables=33
constant integer si__Table___items=34
constant integer si__Table___units=35
constant integer si__Table___abilitys=36
constant integer si__Table___timers=37
constant integer si__Table___triggers=38
constant integer si__Table___triggerconditions=39
constant integer si__Table___triggeractions=40
constant integer si__Table___events=41
constant integer si__Table___forces=42
constant integer si__Table___groups=43
constant integer si__Table___locations=44
constant integer si__Table___rects=45
constant integer si__Table___boolexprs=46
constant integer si__Table___sounds=47
constant integer si__Table___effects=48
constant integer si__Table___unitpools=49
constant integer si__Table___itempools=50
constant integer si__Table___quests=51
constant integer si__Table___questitems=52
constant integer si__Table___defeatconditions=53
constant integer si__Table___timerdialogs=54
constant integer si__Table___leaderboards=55
constant integer si__Table___multiboards=56
constant integer si__Table___multiboarditems=57
constant integer si__Table___trackables=58
constant integer si__Table___dialogs=59
constant integer si__Table___buttons=60
constant integer si__Table___texttags=61
constant integer si__Table___lightnings=62
constant integer si__Table___images=63
constant integer si__Table___ubersplats=64
constant integer si__Table___regions=65
constant integer si__Table___fogstates=66
constant integer si__Table___fogmodifiers=67
constant integer si__Table___hashtables=68
constant integer si__Table___framehandles=69
constant integer si__Table=70
constant integer si__TableArray=71
integer s__TableArray_tempTable
integer s__TableArray_tempEnd
constant integer si__HashTable=72
constant integer si__Array=73
constant integer si__MultidimensionalArray__Type=74
constant integer s__MultidimensionalArray__Type_index=4
constant integer si__Array1D=75
constant integer si__Array2D=76
constant integer si__Array3D=77
constant integer si__Array4D=78
constant integer si__Array5D=79
constant integer si__Integer1D=80
constant integer si__Integer2D=81
constant integer si__Integer3D=82
constant integer si__Integer4D=83
constant integer si__Integer5D=84
constant integer si__Real1D=85
constant integer si__Real2D=86
constant integer si__Real3D=87
constant integer si__Real4D=88
constant integer si__Real5D=89
constant integer si__Str1D=90
constant integer si__Str2D=91
constant integer si__Str3D=92
constant integer si__Str4D=93
constant integer si__Str5D=94
constant integer si__Boolean1D=95
constant integer si__Boolean2D=96
constant integer si__Boolean3D=97
constant integer si__Boolean4D=98
constant integer si__Boolean5D=99
constant integer si__Player1D=100
constant integer si__Player2D=101
constant integer si__Player3D=102
constant integer si__Player4D=103
constant integer si__Player5D=104
constant integer si__Widget1D=105
constant integer si__Widget2D=106
constant integer si__Widget3D=107
constant integer si__Widget4D=108
constant integer si__Widget5D=109
constant integer si__Destructable1D=110
constant integer si__Destructable2D=111
constant integer si__Destructable3D=112
constant integer si__Destructable4D=113
constant integer si__Destructable5D=114
constant integer si__Item1D=115
constant integer si__Item2D=116
constant integer si__Item3D=117
constant integer si__Item4D=118
constant integer si__Item5D=119
constant integer si__Unit1D=120
constant integer si__Unit2D=121
constant integer si__Unit3D=122
constant integer si__Unit4D=123
constant integer si__Unit5D=124
constant integer si__Ability1D=125
constant integer si__Ability2D=126
constant integer si__Ability3D=127
constant integer si__Ability4D=128
constant integer si__Ability5D=129
constant integer si__Timer1D=130
constant integer si__Timer2D=131
constant integer si__Timer3D=132
constant integer si__Timer4D=133
constant integer si__Timer5D=134
constant integer si__Trigger1D=135
constant integer si__Trigger2D=136
constant integer si__Trigger3D=137
constant integer si__Trigger4D=138
constant integer si__Trigger5D=139
constant integer si__TriggerCondition1D=140
constant integer si__TriggerCondition2D=141
constant integer si__TriggerCondition3D=142
constant integer si__TriggerCondition4D=143
constant integer si__TriggerCondition5D=144
constant integer si__TriggerAction1D=145
constant integer si__TriggerAction2D=146
constant integer si__TriggerAction3D=147
constant integer si__TriggerAction4D=148
constant integer si__TriggerAction5D=149
constant integer si__TriggerEvent1D=150
constant integer si__TriggerEvent2D=151
constant integer si__TriggerEvent3D=152
constant integer si__TriggerEvent4D=153
constant integer si__TriggerEvent5D=154
constant integer si__Force1D=155
constant integer si__Force2D=156
constant integer si__Force3D=157
constant integer si__Force4D=158
constant integer si__Force5D=159
constant integer si__Group1D=160
constant integer si__Group2D=161
constant integer si__Group3D=162
constant integer si__Group4D=163
constant integer si__Group5D=164
constant integer si__Location1D=165
constant integer si__Location2D=166
constant integer si__Location3D=167
constant integer si__Location4D=168
constant integer si__Location5D=169
constant integer si__Rect1D=170
constant integer si__Rect2D=171
constant integer si__Rect3D=172
constant integer si__Rect4D=173
constant integer si__Rect5D=174
constant integer si__BooleanExpr1D=175
constant integer si__BooleanExpr2D=176
constant integer si__BooleanExpr3D=177
constant integer si__BooleanExpr4D=178
constant integer si__BooleanExpr5D=179
constant integer si__Sound1D=180
constant integer si__Sound2D=181
constant integer si__Sound3D=182
constant integer si__Sound4D=183
constant integer si__Sound5D=184
constant integer si__Effect1D=185
constant integer si__Effect2D=186
constant integer si__Effect3D=187
constant integer si__Effect4D=188
constant integer si__Effect5D=189
constant integer si__UnitPool1D=190
constant integer si__UnitPool2D=191
constant integer si__UnitPool3D=192
constant integer si__UnitPool4D=193
constant integer si__UnitPool5D=194
constant integer si__ItemPool1D=195
constant integer si__ItemPool2D=196
constant integer si__ItemPool3D=197
constant integer si__ItemPool4D=198
constant integer si__ItemPool5D=199
constant integer si__Quest1D=200
constant integer si__Quest2D=201
constant integer si__Quest3D=202
constant integer si__Quest4D=203
constant integer si__Quest5D=204
constant integer si__QuestItem1D=205
constant integer si__QuestItem2D=206
constant integer si__QuestItem3D=207
constant integer si__QuestItem4D=208
constant integer si__QuestItem5D=209
constant integer si__DefeatCondition1D=210
constant integer si__DefeatCondition2D=211
constant integer si__DefeatCondition3D=212
constant integer si__DefeatCondition4D=213
constant integer si__DefeatCondition5D=214
constant integer si__TimerDialog1D=215
constant integer si__TimerDialog2D=216
constant integer si__TimerDialog3D=217
constant integer si__TimerDialog4D=218
constant integer si__TimerDialog5D=219
constant integer si__Leaderboard1D=220
constant integer si__Leaderboard2D=221
constant integer si__Leaderboard3D=222
constant integer si__Leaderboard4D=223
constant integer si__Leaderboard5D=224
constant integer si__Multiboard1D=225
constant integer si__Multiboard2D=226
constant integer si__Multiboard3D=227
constant integer si__Multiboard4D=228
constant integer si__Multiboard5D=229
constant integer si__MultiboardItem1D=230
constant integer si__MultiboardItem2D=231
constant integer si__MultiboardItem3D=232
constant integer si__MultiboardItem4D=233
constant integer si__MultiboardItem5D=234
constant integer si__Trackable1D=235
constant integer si__Trackable2D=236
constant integer si__Trackable3D=237
constant integer si__Trackable4D=238
constant integer si__Trackable5D=239
constant integer si__Dialog1D=240
constant integer si__Dialog2D=241
constant integer si__Dialog3D=242
constant integer si__Dialog4D=243
constant integer si__Dialog5D=244
constant integer si__Button1D=245
constant integer si__Button2D=246
constant integer si__Button3D=247
constant integer si__Button4D=248
constant integer si__Button5D=249
constant integer si__TextTag1D=250
constant integer si__TextTag2D=251
constant integer si__TextTag3D=252
constant integer si__TextTag4D=253
constant integer si__TextTag5D=254
constant integer si__Lightning1D=255
constant integer si__Lightning2D=256
constant integer si__Lightning3D=257
constant integer si__Lightning4D=258
constant integer si__Lightning5D=259
constant integer si__Image1D=260
constant integer si__Image2D=261
constant integer si__Image3D=262
constant integer si__Image4D=263
constant integer si__Image5D=264
constant integer si__Ubersplat1D=265
constant integer si__Ubersplat2D=266
constant integer si__Ubersplat3D=267
constant integer si__Ubersplat4D=268
constant integer si__Ubersplat5D=269
constant integer si__Region1D=270
constant integer si__Region2D=271
constant integer si__Region3D=272
constant integer si__Region4D=273
constant integer si__Region5D=274
constant integer si__FogState1D=275
constant integer si__FogState2D=276
constant integer si__FogState3D=277
constant integer si__FogState4D=278
constant integer si__FogState5D=279
constant integer si__FogModifier1D=280
constant integer si__FogModifier2D=281
constant integer si__FogModifier3D=282
constant integer si__FogModifier4D=283
constant integer si__FogModifier5D=284
constant integer si__Hashtable1D=285
constant integer si__Hashtable2D=286
constant integer si__Hashtable3D=287
constant integer si__Hashtable4D=288
constant integer si__Hashtable5D=289
constant integer si__Framehandle1D=290
constant integer si__Framehandle2D=291
constant integer si__Framehandle3D=292
constant integer si__Framehandle4D=293
constant integer si__Framehandle5D=294
string array s__udg_MMD_RaceName
integer array s__udg_MMD_Wins
integer array s__udg_MMD_Losses
integer array s__udg_MMD_Score
integer array s__udg_MMD_Score_Final
real array s__udg_MMD_Bonus
integer array s__udg_MMD_MiddleTime
integer array s__udg_MMD_MiddleTimeTotal
integer array s__udg_TasItemShop_Mats
fogmodifier array s__udg_VisibilityModifier
hashtable array s__udg_SkinTable
timer array s__udg_LevelUpTimerBlob
timer array s__udg_LevelUpTimerText
integer array s__udg_LevelUpTimerBlobCounter
integer array s__udg_LevelUpTimerTextCounter
timer array s__udg_SkinEquipTimer
integer array s__udg_totalHuman
integer array s__udg_totalOrc
integer array s__udg_totalUndead
integer array s__udg_totalNightElf
integer array s__udg_totalNaga
integer array s__udg_totalDemon
integer array s__udg_winsHuman
integer array s__udg_winsOrc
integer array s__udg_winsUndead
integer array s__udg_winsNightElf
integer array s__udg_winsNaga
integer array s__udg_winsDemon
unit array s__udg_BlackStrike
boolean array s__udg_activeDefend
boolean array s__udg_activeSlow
boolean array s__udg_activeInvisibility
boolean array s__udg_activePolymorph
boolean array s__udg_activeFlare
boolean array s__udg_activeHeal
boolean array s__udg_activeDispelMagic
boolean array s__udg_activeInnerFire
boolean array s__udg_activeControlMagic
boolean array s__udg_activeAerialShackles
boolean array s__udg_activeHolyLight
boolean array s__udg_activeDivineShield
boolean array s__udg_activeResurrection
boolean array s__udg_activeBlizzard
boolean array s__udg_activeWaterElemental
boolean array s__udg_activeTornado
boolean array s__udg_activeStormBolt
boolean array s__udg_activeThunderClap
boolean array s__udg_activeAvatar
boolean array s__udg_activeFlamestrike
boolean array s__udg_activeBanish
boolean array s__udg_activeSiphonMana
boolean array s__udg_activePhoenix
unit array s__udg_WindWalkUnit
boolean array s__udg_isBladestormOn
unit array s__udg_BladestormVisualUnit
timer array s__udg_BladestormVisualTimer
location array s__udg_EarthquakePoint
boolean array s__udg_EarthquakeActive
boolean array s__udg_activeBerserk
boolean array s__udg_activePurge
boolean array s__udg_activeLightningShield
boolean array s__udg_activeBloodlust
boolean array s__udg_activeEnsnare
boolean array s__udg_activeSentryWard
boolean array s__udg_activeStasisTrap
boolean array s__udg_activeHealingWard
boolean array s__udg_activeSpiritLink
boolean array s__udg_activeDisenchant
boolean array s__udg_activeAncestralSpirit
boolean array s__udg_activeUnstableConcoction
boolean array s__udg_activeDevour
boolean array s__udg_activeWindWalk
boolean array s__udg_activeMirrorImage
boolean array s__udg_activeBladestorm
boolean array s__udg_activeChainLightning
boolean array s__udg_activeFirebolt
boolean array s__udg_activeSpiritWolves
boolean array s__udg_activeEarthquake
boolean array s__udg_activeShockwave
boolean array s__udg_activeWarStomp
boolean array s__udg_activeHealingWave
boolean array s__udg_activeHex
boolean array s__udg_activeSerpentWard
boolean array s__udg_activeBigBadVoodoo
location array s__udg_DeathAndDecayPoint
boolean array s__udg_DeathAndDecayActive
boolean array s__udg_activeWeb
boolean array s__udg_activeBurrow
boolean array s__udg_activeCurse
boolean array s__udg_activeAntiMagicShell
boolean array s__udg_activePossession
boolean array s__udg_activeSpiritTouch
boolean array s__udg_activeEssenceOfBlight
boolean array s__udg_activeStoneForm
boolean array s__udg_activeRaiseDead
boolean array s__udg_activeUnholyFrenzy
boolean array s__udg_activeCripple
boolean array s__udg_activeDevourMagic
boolean array s__udg_activeOrbOfAnnihilation
boolean array s__udg_activeAbsorbMana
boolean array s__udg_activeDeathCoil
boolean array s__udg_activeDeathPact
boolean array s__udg_activeAnimateDead
boolean array s__udg_activeFrostNova
boolean array s__udg_activeFrostShield
boolean array s__udg_activeDarkRitual
boolean array s__udg_activeDeathAndDecay
boolean array s__udg_activeCarrionSwarm
boolean array s__udg_activeSleep
boolean array s__udg_activeInferno
boolean array s__udg_activeImpale
boolean array s__udg_activeCarrionBeetles
boolean array s__udg_activeLocustSwarm
integer array s__udg_ImmolationCounter
boolean array s__udg_activeSentinel
boolean array s__udg_activeAbolishMagic
boolean array s__udg_activeRoar
boolean array s__udg_activeRejuvenation
boolean array s__udg_activeBearForm
boolean array s__udg_activeFaerieFire
boolean array s__udg_activeCrowForm
boolean array s__udg_activeCyclone
boolean array s__udg_activePhaseShift
boolean array s__udg_activeManaFlare
boolean array s__udg_activeTaunt
boolean array s__udg_activeEntanglingRoots
boolean array s__udg_activeForceOfNature
boolean array s__udg_activeTranquility
boolean array s__udg_activeSilence
boolean array s__udg_activeSearingArrows
boolean array s__udg_activeStarfall
boolean array s__udg_activeManaBurn
boolean array s__udg_activeImmolation
boolean array s__udg_activeMetamorphosis
boolean array s__udg_activeFanOfKnives
boolean array s__udg_activeBlink
boolean array s__udg_activeShadowStrike
boolean array s__udg_activeVengeance
unit array s__udg_StormWindWalkUnit
location array s__udg_VolcanoPoint
boolean array s__udg_VolcanoActive
boolean array s__udg_activeHealingSpray
boolean array s__udg_activeChemicalRage
boolean array s__udg_activeAcidBomb
boolean array s__udg_activeTransmute
boolean array s__udg_activeForkedLightning
boolean array s__udg_activeFrostArrows
boolean array s__udg_activeManaShield
boolean array s__udg_activeTornadoNeutral
boolean array s__udg_activePocketFactory
boolean array s__udg_activeClusterRockets
boolean array s__udg_activeRoboGoblin
boolean array s__udg_activeSummonBear
boolean array s__udg_activeSummonQuilbeast
boolean array s__udg_activeSummonHawk
boolean array s__udg_activeStampede
boolean array s__udg_activeBreathOfFire
boolean array s__udg_activeDrunkenHaze
boolean array s__udg_activeStormEarthFire
boolean array s__udg_activeSilenceNeutral
boolean array s__udg_activeBlackArrow
boolean array s__udg_activeLifeDrain
boolean array s__udg_activeCharm
boolean array s__udg_activeSoulBurn
boolean array s__udg_activeLavaSpawn
boolean array s__udg_activeVolcano
boolean array s__udg_activeRainOfFire
boolean array s__udg_activeHowlOfTerror
boolean array s__udg_activeDoom
location array s__udg_PointPermafrost
integer array s__udg_PrismaticShieldCounter
boolean array s__udg_activeMagicShield
boolean array s__udg_activeProtectiveField
boolean array s__udg_activeDefendDalaran
boolean array s__udg_activeManaShieldDalaran
boolean array s__udg_activeEnergyWhip
boolean array s__udg_activeDalaranRune
boolean array s__udg_activeEliminateMagic
boolean array s__udg_activeWeaken
boolean array s__udg_activeBarrierDalaran
boolean array s__udg_activeAbsorbManaDalaran
boolean array s__udg_activeFusion
boolean array s__udg_activeInversion
boolean array s__udg_activeWisdomEmbrace
boolean array s__udg_activePolymorphDalaran
boolean array s__udg_activeMagicalDestruction
boolean array s__udg_activeBurn
boolean array s__udg_activeLivingBomb
boolean array s__udg_activeFuryOfTheFlame
boolean array s__udg_activeEarthfall
boolean array s__udg_activeBurstOfRoots
boolean array s__udg_activeMetamorphicForm
boolean array s__udg_activeArcaneField
boolean array s__udg_activeFrostPillar
boolean array s__udg_activeAquaElemental
boolean array s__udg_activeAbsorbMagic
boolean array s__udg_activeArcaneLeash
boolean array s__udg_activeBlinkDalaran
boolean array s__udg_activeSummonEarthElemental
boolean array s__udg_activeSummonWaterEleDALARAN
boolean array s__udg_activeSummonAetherElemental
boolean array s__udg_activeSummonFireElemental
boolean array s__udg_activeArcaneArrow
boolean array s__udg_activeEnchantedQuiver
boolean array s__udg_activeTurmoilOfMagic
boolean array s__udg_activeImplode
boolean array s__udg_activeUnstablePortal
boolean array s__udg_activeBlinkHighWizard
boolean array s__udg_activeBlinkMage
boolean array s__udg_activeManaWard
boolean array s__udg_activeDisruption
boolean array s__udg_activeArcaneWave
boolean array s__udg_activePrismaticShield
boolean array s__udg_activeTemporalGuard
boolean array s__udg_activeAntiEnergy
boolean array s__udg_activeOverpower
boolean array s__udg_activeEpicenter
boolean array s__udg_activeFrostBolt
boolean array s__udg_activeMassFrostArmor
boolean array s__udg_activePermafrost
integer array s__udg_PhoenixSlashTick
effect array s__udg_ShieldBashChargeEffect
unit array s__udg_MeldUnit
boolean array s__udg_activeConcentration
boolean array s__udg_activeDoppelganger
boolean array s__udg_activeSlowBloodElf
boolean array s__udg_activeSilverEdgeForm
boolean array s__udg_activePetalWard
boolean array s__udg_activeSunBlast
boolean array s__udg_activeManaDecay
boolean array s__udg_activeMagicHunger
boolean array s__udg_activeArcaneRush
boolean array s__udg_activeArcaneShield
boolean array s__udg_activeSpellSteal
boolean array s__udg_activeVerbisVirtus
boolean array s__udg_activeLiberateShield
boolean array s__udg_activePiercingCharge
boolean array s__udg_activeBattlecry
boolean array s__udg_activeEmberCannonMode
boolean array s__udg_activeRefraction
boolean array s__udg_activeMeld
boolean array s__udg_activePoisonTrap
boolean array s__udg_activeHolyBolt
boolean array s__udg_activeHavok
boolean array s__udg_activeUltimateStrength
boolean array s__udg_activeBerserkersCall
boolean array s__udg_activeShieldBash
boolean array s__udg_activeRallying
boolean array s__udg_activeStandUnited
boolean array s__udg_activeRainOfChaos
boolean array s__udg_activeLiberate
boolean array s__udg_activeSiphonLifeMana
boolean array s__udg_activeBladestormBELF
boolean array s__udg_activeSinDoreiBlades
boolean array s__udg_activeManaBurnBELF
boolean array s__udg_isCastingBansheeScream
boolean array s__udg_isRunningBansheeScream
unit array s__udg_BansheeScreamCaster
effect array s__udg_BansheeScreamEffect
timer array s__udg_BansheeScreamInitTimer
group array s__udg_BlightAuraGroup
integer array s__udg_BlightAuraLevelTemp
timer array s__udg_PunishTimer
boolean array s__udg_activePhaseStrike
boolean array s__udg_activePotentRemedy
boolean array s__udg_activeAcerbicPotion
boolean array s__udg_activeForsakenConcoction
boolean array s__udg_activeDeathFumes
boolean array s__udg_activeHook
boolean array s__udg_activeCorpsePile
boolean array s__udg_activeRemainingSpirit
boolean array s__udg_activeNecroticOath
boolean array s__udg_activeForlornCell
boolean array s__udg_activeShadowsCall
boolean array s__udg_activeConsume
boolean array s__udg_activeFade
boolean array s__udg_activePetrify
boolean array s__udg_activeSentient
boolean array s__udg_activeSalubrious
boolean array s__udg_activeRaiseFromGraves
boolean array s__udg_activeUndeadEmbrace
boolean array s__udg_activeGraveBlow
boolean array s__udg_activeDread
boolean array s__udg_activeShadowAscendant
boolean array s__udg_activeFatefulStrike
boolean array s__udg_activeLifeDrainForsaken
boolean array s__udg_activeRemorseless
boolean array s__udg_activeBansheeScream
boolean array s__udg_activePunish
boolean array s__udg_activeShift
boolean array s__udg_activeDeathBound
boolean array s__udg_activeVileBlast
boolean array s__udg_activeVirus
boolean array s__udg_activePlague
boolean array s__udg_activeGreaterAbomination
boolean array s__udg_isSunkenWaveOn
location array s__udg_SunkenWaveEndLoc
boolean array s__udg_isRazorEdgeOn
unit array s__udg_RazorEdgeCaster
group array s__udg_RazorEdgeTargets
location array s__udg_RazorEdgeEndLoc
boolean array s__udg_isRetreatOn
unit array s__udg_RetreatCaster
location array s__udg_RetreatEndLoc
unit array s__udg_HunterInstinctsUnit
boolean array s__udg_activeWeaponChange
boolean array s__udg_activeDevourNaga
boolean array s__udg_activeParasite
boolean array s__udg_activeWaterShield
boolean array s__udg_activeTyphoon
boolean array s__udg_activeMadness
boolean array s__udg_activeDrainMagic
boolean array s__udg_activeSuffocate
boolean array s__udg_activeSpellLock
boolean array s__udg_activeMendingWater
boolean array s__udg_activeCrystalized
boolean array s__udg_activeSubmerge
boolean array s__udg_activeThermalEruption
boolean array s__udg_activeAquaBurst
boolean array s__udg_activeCurseOfTheDepth
boolean array s__udg_activeGust
boolean array s__udg_activeRavage
boolean array s__udg_activeSunkenWave
boolean array s__udg_activeMist
boolean array s__udg_activeMonsoon
boolean array s__udg_activeMalediction
boolean array s__udg_activeRazorEdge
boolean array s__udg_activeRetreat
boolean array s__udg_activeHealingWater
boolean array s__udg_activeHunterInstinct
effect array s__udg_WrathOfThePhoenixEffect
boolean array s__udg_WrathOfThePhoenixBool
group array s__udg_WrathOfThePhoenixDamageGroup
boolean array s__udg_isCultOfForgottenResearched
string array s__udg_PlayerColors
integer array s__udg_PlayerRace
integer array s__udg_PlayerRacePrevious
integer array s__udg_BuilderType
integer array s__udg_MainBuildingType
integer array s__udg_ResearchBuilding1Type
integer array s__udg_ResearchBuilding2Type
rect array s__udg_WorkerRegion
rect array s__udg_SpawnTimerRegion
texttag array s__udg_SpawnTimerTextTags
rect array s__udg_RockRegions
destructable array s__udg_Rocks
camerasetup array s__udg_PlayerCameras
boolean array s__udg_XRVoteClickCheck
real array s__udg_CameraZoom
group array s__udg_UnitGroupBuildings
integer array s__udg_TableBuildingTypes
integer array s__udg_TableUnitTypes
integer array s__udg_PlayerQueue
integer array s__udg_SpawnPlayers
rect array s__udg_SpawnRegions
timer array s__udg_SpawnDelayTimer
integer array s__udg_TotalUnits
integer array s__udg_TotalKills
real array s__udg_TotalDamage
integer array s__udg_TotalUnitsSpawned
integer array s__udg_TotalScore
integer array s__udg_TotalGoldEarned
timer array s__udg_FrameFortressTimer
boolean array s__udg_ActivePlayers
force array s__udg_Teams
unit array s__udg_Fortress
unit array s__udg_WatchTower
boolean array s__udg_Victory
unit array s__udg_MainBuilding
rect array s__udg_BuildRegion
rect array s__udg_UpgradeRegion
rect array s__udg_ResearchRegion
rect array s__udg_ResearchRegion2
rect array s__udg_ItemShopRegion
boolean array s__udg_UnitBuildingSwap
integer array s__udg_Income
string array s__udg_IncomeNoMiddleText
string array s__udg_IncomeMiddleText
integer array s__udg_MiddleIncome
real array s__udg_MiddleIncome2
real array s__udg_AddedTime
integer array s__udg_GoldExtractorCost
integer array s__udg_GoldExtractorNumber
timer array s__udg_GoldExtractorCooldown
boolean array s__udg_GoldExtractorCooldownBoolean
group array s__udg_UnitsOnTheirHalf
group array s__udg_UnitsOnEnemyHalf
rect array s__udg_MiddleRegions
rect array s__udg_AttackRegions
group array s__udg_IdleUnits
integer array s__udg_TotalHeroes
integer array s__udg_UnitXP
integer array s__udg_HeroXP
boolean array s__udg_isShopOpen
timer array s__udg_UnitExpirationTimer
multiboard array s__udg_Multiboard
image array s__gridEffect
framehandle array s__btnAbilityEnabled
string array s__btnAbilityImgEnabled
framehandle array s__btnAbilityDisabled
string array s__btnAbilityImgDisabled
string array s__abilityName
framehandle array s__frameRaceImage
framehandle array s__frameRaceBanner
framehandle array s__btnRaceClassic
string array s__textureNumber
framehandle array s__frameClassicTimeRemaining
framehandle array s__frameCustomTimeRemaining
boolean array s__isRaceSelected
framehandle array s__framePlayerHasSelectedClassic
framehandle array s__framePlayerHasSelectedCustom
string array s__raceImg
string array s__raceImgBanner
string array s__raceName
integer array s__experience
integer array s__playerLevels
integer array s__levels
integer array s__equippedSkinHum
integer array s__equippedSkinOrc
integer array s__equippedSkinUnd
integer array s__equippedSkinNig
boolean array s__isVisibleProgressionMenu
framehandle array s__XPBarMainUI
framehandle array s__XPBarFillMainUI
framehandle array s__frameXPBarTextMainUI
framehandle array s__XPBarRaces
framehandle array s__XPBarFill
framehandle array s__frameXPBarRaceText
string array s__XPBarRaceText
framehandle array s__frameMatchStats
framehandle array s__frameBtnUnit
string array s__frameImgUnit
framehandle array s__frameBtnSkinHum
framehandle array s__frameBtnSkinOrc
framehandle array s__frameBtnSkinUnd
framehandle array s__frameBtnSkinNig
framehandle array s__frameSkinHighlight
framehandle array s__pName
framehandle array s__pScore
framehandle array s__pKills
framehandle array s__pDamage
framehandle array s__pUnitsSpawned
framehandle array s__pGoldEarned
framehandle array s__pVote
framehandle array s__pVoteYes
framehandle array s__pBar
integer array s__spawnPlayer
integer array s__unitSpawns
integer array s__unitSpawnCounter
framehandle array s__timerText
framehandle array s__frameWatchTower
framehandle array s__frameTowerHealth
framehandle array s__frameTowerFill
framehandle array s__frameFortress
framehandle array s__frameFortressHealth
framehandle array s__frameFortressFill
integer array s__frameFortressCounter
real array s__frameFortDim
real array s__frameFortAncorX
real array s__frameFortAncorY
integer array s__xrVotes
integer array s__totalScore
integer array s__totalKills
integer array s__totalDamage
integer array s__totalUnits
integer array s__totalGold
string array s__pColor
trigger st__MMD__QueueNode_onDestroy
integer f__arg_this

endglobals
native GetUnitGoldCost      takes integer unitid                        returns integer
native GetUnitWoodCost takes integer rawCode returns integer


//Generated method caller for MMD__QueueNode.onDestroy
function sc__MMD__QueueNode_onDestroy takes integer this returns nothing
            call FlushStoredInteger(MMD__gc, MMD__M_KEY_VAL + s__MMD__QueueNode_key[this], s__MMD__QueueNode_msg[this])
            call FlushStoredInteger(MMD__gc, MMD__M_KEY_CHK + s__MMD__QueueNode_key[this], s__MMD__QueueNode_key[this])
            set s__MMD__QueueNode_msg[this]=null
            set s__MMD__QueueNode_key[this]=null
            set s__MMD__QueueNode_next[this]=0
endfunction

//Generated allocator of MMD__QueueNode
function s__MMD__QueueNode__allocate takes nothing returns integer
 local integer this=si__MMD__QueueNode_F
    if (this!=0) then
        set si__MMD__QueueNode_F=si__MMD__QueueNode_V[this]
    else
        set si__MMD__QueueNode_I=si__MMD__QueueNode_I+1
        set this=si__MMD__QueueNode_I
    endif
    if (this>8190) then
        return 0
    endif

   set s__MMD__QueueNode_next[this]= 0
    set si__MMD__QueueNode_V[this]=-1
 return this
endfunction

//Generated destructor of MMD__QueueNode
function sc__MMD__QueueNode_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__MMD__QueueNode_V[this]!=-1) then
        return
    endif
    set f__arg_this=this
    call TriggerEvaluate(st__MMD__QueueNode_onDestroy)
    set si__MMD__QueueNode_V[this]=si__MMD__QueueNode_F
    set si__MMD__QueueNode_F=this
endfunction

//library Ascii:
    function Char2Ascii takes string p returns integer
        local integer z= Ascii__i[StringHash(p) / 0x1F0748 + 0x40D]
        if ( Ascii__c[z] != p ) then
            if ( Ascii__c[z - 32] != p ) then
                if ( Ascii__c[Ascii__h[z]] != p ) then
                    if ( Ascii__c[Ascii__y[z]] != p ) then
                        if ( Ascii__c[83] != p ) then
                            return 0
                        endif
                        return 83
                    endif
                    return Ascii__y[z]
                endif
                return Ascii__h[z]
            endif
            return z - 32
        endif
        return z
    endfunction
    function Ascii2Char takes integer a returns string
        return Ascii__c[a]
    endfunction
    function A2S takes integer a returns string
        local string s=""
        loop
            set s=Ascii__c[a - a / 256 * 256] + s
            set a=a / 256
            exitwhen 0 == a
        endloop
        return s
    endfunction
    function S2A takes string s returns integer
        local integer a=0
        local integer l=StringLength(s)
        local integer j=0
        local string m
        local integer l__Ascii__h
        loop
            exitwhen j == l
            set a=a * 256 + Char2Ascii(SubString(s, j, j + 1))
            set j=j + 1
        endloop
        return a
    endfunction
//Implemented from module Ascii__Init:
        function s__Ascii__Inits_Ascii__Init___onInit takes nothing returns nothing
            set Ascii__i[966]=8
            set Ascii__i[1110]=9
            set Ascii__i[1621]=10
            set Ascii__i[1375]=12
            set Ascii__i[447]=13
            set Ascii__i[233]=32
            set Ascii__i[2014]=33
            set Ascii__i[1348]=34
            set Ascii__i[1038]=35
            set Ascii__i[1299]=36
            set Ascii__i[1018]=37
            set Ascii__i[1312]=38
            set Ascii__i[341]=39
            set Ascii__i[939]=40
            set Ascii__i[969]=41
            set Ascii__i[952]=42
            set Ascii__i[2007]=43
            set Ascii__i[1415]=44
            set Ascii__i[2020]=45
            set Ascii__i[904]=46
            set Ascii__i[1941]=47
            set Ascii__i[918]=48
            set Ascii__i[1593]=49
            set Ascii__i[719]=50
            set Ascii__i[617]=51
            set Ascii__i[703]=52
            set Ascii__i[573]=53
            set Ascii__i[707]=54
            set Ascii__i[1208]=55
            set Ascii__i[106]=56
            set Ascii__i[312]=57
            set Ascii__i[124]=58
            set Ascii__i[1176]=59
            set Ascii__i[74]=60
            set Ascii__i[1206]=61
            set Ascii__i[86]=62
            set Ascii__i[340]=63
            set Ascii__i[35]=64
            set Ascii__i[257]=65
            set Ascii__i[213]=66
            set Ascii__i[271]=67
            set Ascii__i[219]=68
            set Ascii__i[1330]=69
            set Ascii__i[1425]=70
            set Ascii__i[1311]=71
            set Ascii__i[238]=72
            set Ascii__i[1349]=73
            set Ascii__i[244]=74
            set Ascii__i[1350]=75
            set Ascii__i[205]=76
            set Ascii__i[1392]=77
            set Ascii__i[1378]=78
            set Ascii__i[1432]=79
            set Ascii__i[1455]=80
            set Ascii__i[1454]=81
            set Ascii__i[1431]=82
            set Ascii__i[1409]=83
            set Ascii__i[1442]=84
            set Ascii__i[534]=85
            set Ascii__i[1500]=86
            set Ascii__i[771]=87
            set Ascii__i[324]=88
            set Ascii__i[1021]=89
            set Ascii__i[73]=90
            set Ascii__i[1265]=91
            set Ascii__i[1941]=92
            set Ascii__i[1671]=93
            set Ascii__i[1451]=94
            set Ascii__i[1952]=95
            set Ascii__i[252]=96
            set Ascii__i[257]=97
            set Ascii__i[213]=98
            set Ascii__i[271]=99
            set Ascii__i[219]=100
            set Ascii__i[1330]=101
            set Ascii__i[1425]=102
            set Ascii__i[1311]=103
            set Ascii__i[238]=104
            set Ascii__i[1349]=105
            set Ascii__i[244]=106
            set Ascii__i[1350]=107
            set Ascii__i[205]=108
            set Ascii__i[1392]=109
            set Ascii__i[1378]=110
            set Ascii__i[1432]=111
            set Ascii__i[1455]=112
            set Ascii__i[1454]=113
            set Ascii__i[1431]=114
            set Ascii__i[1409]=115
            set Ascii__i[1442]=116
            set Ascii__i[534]=117
            set Ascii__i[1500]=118
            set Ascii__i[771]=119
            set Ascii__i[324]=120
            set Ascii__i[1021]=121
            set Ascii__i[73]=122
            set Ascii__i[868]=123
            set Ascii__i[1254]=124
            set Ascii__i[588]=125
            set Ascii__i[93]=126
            set Ascii__i[316]=161
            set Ascii__i[779]=162
            set Ascii__i[725]=163
            set Ascii__i[287]=164
            set Ascii__i[212]=165
            set Ascii__i[7]=166
            set Ascii__i[29]=167
            set Ascii__i[1958]=168
            set Ascii__i[1009]=169
            set Ascii__i[1580]=170
            set Ascii__i[1778]=171
            set Ascii__i[103]=172
            set Ascii__i[400]=174
            set Ascii__i[1904]=175
            set Ascii__i[135]=176
            set Ascii__i[1283]=177
            set Ascii__i[469]=178
            set Ascii__i[363]=179
            set Ascii__i[550]=180
            set Ascii__i[1831]=181
            set Ascii__i[1308]=182
            set Ascii__i[1234]=183
            set Ascii__i[1017]=184
            set Ascii__i[1093]=185
            set Ascii__i[1577]=186
            set Ascii__i[606]=187
            set Ascii__i[1585]=188
            set Ascii__i[1318]=189
            set Ascii__i[980]=190
            set Ascii__i[1699]=191
            set Ascii__i[1292]=192
            set Ascii__i[477]=193
            set Ascii__i[709]=194
            set Ascii__i[1600]=195
            set Ascii__i[2092]=196
            set Ascii__i[50]=197
            set Ascii__i[546]=198
            set Ascii__i[408]=199
            set Ascii__i[853]=200
            set Ascii__i[205]=201
            set Ascii__i[411]=202
            set Ascii__i[1311]=203
            set Ascii__i[1422]=204
            set Ascii__i[1808]=205
            set Ascii__i[457]=206
            set Ascii__i[1280]=207
            set Ascii__i[614]=208
            set Ascii__i[1037]=209
            set Ascii__i[237]=210
            set Ascii__i[1409]=211
            set Ascii__i[1023]=212
            set Ascii__i[1361]=213
            set Ascii__i[695]=214
            set Ascii__i[161]=215
            set Ascii__i[1645]=216
            set Ascii__i[1822]=217
            set Ascii__i[644]=218
            set Ascii__i[1395]=219
            set Ascii__i[677]=220
            set Ascii__i[1677]=221
            set Ascii__i[881]=222
            set Ascii__i[861]=223
            set Ascii__i[1408]=224
            set Ascii__i[1864]=225
            set Ascii__i[1467]=226
            set Ascii__i[1819]=227
            set Ascii__i[1971]=228
            set Ascii__i[949]=229
            set Ascii__i[774]=230
            set Ascii__i[1828]=231
            set Ascii__i[865]=232
            set Ascii__i[699]=233
            set Ascii__i[786]=234
            set Ascii__i[1806]=235
            set Ascii__i[1286]=236
            set Ascii__i[1128]=237
            set Ascii__i[1490]=238
            set Ascii__i[1720]=239
            set Ascii__i[1817]=240
            set Ascii__i[729]=241
            set Ascii__i[1191]=242
            set Ascii__i[1164]=243
            set Ascii__i[413]=244
            set Ascii__i[349]=245
            set Ascii__i[1409]=246
            set Ascii__i[660]=247
            set Ascii__i[2016]=248
            set Ascii__i[1087]=249
            set Ascii__i[1497]=250
            set Ascii__i[753]=251
            set Ascii__i[1579]=252
            set Ascii__i[1456]=253
            set Ascii__i[606]=254
            set Ascii__i[1625]=255
            set Ascii__h[92]=47
            set Ascii__h[201]=108
            set Ascii__h[201]=76
            set Ascii__h[203]=103
            set Ascii__h[203]=71
            set Ascii__h[246]=115
            set Ascii__h[246]=83
            set Ascii__h[246]=211
            set Ascii__h[254]=187
            set Ascii__y[201]=108
            set Ascii__y[203]=103
            set Ascii__y[246]=115

            //set c[8]="\b" // W3protect does not like this
            set Ascii__c[9]="\t"
            set Ascii__c[10]="\n"
            //set c[12]="\f" // W3protect does not like this
            set Ascii__c[13]="\r"
            set Ascii__c[32]=" "
            set Ascii__c[33]="!"
            set Ascii__c[34]="\""
            set Ascii__c[35]="#"
            set Ascii__c[36]="$"
            set Ascii__c[37]="%"
            set Ascii__c[38]="&"
            set Ascii__c[39]="'"
            set Ascii__c[40]="("
            set Ascii__c[41]=")"
            set Ascii__c[42]="*"
            set Ascii__c[43]="+"
            set Ascii__c[44]=","
            set Ascii__c[45]="-"
            set Ascii__c[46]="."
            set Ascii__c[47]="/"
            set Ascii__c[48]="0"
            set Ascii__c[49]="1"
            set Ascii__c[50]="2"
            set Ascii__c[51]="3"
            set Ascii__c[52]="4"
            set Ascii__c[53]="5"
            set Ascii__c[54]="6"
            set Ascii__c[55]="7"
            set Ascii__c[56]="8"
            set Ascii__c[57]="9"
            set Ascii__c[58]=":"
            set Ascii__c[59]=";"
            set Ascii__c[60]="<"
            set Ascii__c[61]="="
            set Ascii__c[62]=">"
            set Ascii__c[63]="?"
            set Ascii__c[64]="@"
            set Ascii__c[65]="A"
            set Ascii__c[66]="B"
            set Ascii__c[67]="C"
            set Ascii__c[68]="D"
            set Ascii__c[69]="E"
            set Ascii__c[70]="F"
            set Ascii__c[71]="G"
            set Ascii__c[72]="H"
            set Ascii__c[73]="I"
            set Ascii__c[74]="J"
            set Ascii__c[75]="K"
            set Ascii__c[76]="L"
            set Ascii__c[77]="M"
            set Ascii__c[78]="N"
            set Ascii__c[79]="O"
            set Ascii__c[80]="P"
            set Ascii__c[81]="Q"
            set Ascii__c[82]="R"
            set Ascii__c[83]="S"
            set Ascii__c[84]="T"
            set Ascii__c[85]="U"
            set Ascii__c[86]="V"
            set Ascii__c[87]="W"
            set Ascii__c[88]="X"
            set Ascii__c[89]="Y"
            set Ascii__c[90]="Z"
            set Ascii__c[91]="["
            set Ascii__c[92]="\\"
            set Ascii__c[93]="]"
            set Ascii__c[94]="^"
            set Ascii__c[95]="_"
            set Ascii__c[96]="`"
            set Ascii__c[97]="a"
            set Ascii__c[98]="b"
            set Ascii__c[99]="c"
            set Ascii__c[100]="d"
            set Ascii__c[101]="e"
            set Ascii__c[102]="f"
            set Ascii__c[103]="g"
            set Ascii__c[104]="h"
            set Ascii__c[105]="i"
            set Ascii__c[106]="j"
            set Ascii__c[107]="k"
            set Ascii__c[108]="l"
            set Ascii__c[109]="m"
            set Ascii__c[110]="n"
            set Ascii__c[111]="o"
            set Ascii__c[112]="p"
            set Ascii__c[113]="q"
            set Ascii__c[114]="r"
            set Ascii__c[115]="s"
            set Ascii__c[116]="t"
            set Ascii__c[117]="u"
            set Ascii__c[118]="v"
            set Ascii__c[119]="w"
            set Ascii__c[120]="x"
            set Ascii__c[121]="y"
            set Ascii__c[122]="z"
            set Ascii__c[123]="{"
            set Ascii__c[124]="|"
            set Ascii__c[125]="}"
            set Ascii__c[126]="~"
            set Ascii__c[128]="€"
            set Ascii__c[130]="‚"
            set Ascii__c[131]="ƒ"
            set Ascii__c[132]="„"
            set Ascii__c[133]="…"
            set Ascii__c[134]="†"
            set Ascii__c[135]="‡"
            set Ascii__c[136]="ˆ"
            set Ascii__c[137]="‰"
            set Ascii__c[138]="Š"
            set Ascii__c[139]="‹"
            set Ascii__c[140]="Œ"
            set Ascii__c[142]="Ž"
            set Ascii__c[145]="‘"
            set Ascii__c[146]="’"
            set Ascii__c[147]="“"
            set Ascii__c[148]="”"
            set Ascii__c[149]="•"
            set Ascii__c[150]="–"
            set Ascii__c[151]="—"
            set Ascii__c[152]="˜"
            set Ascii__c[153]="™"
            set Ascii__c[154]="š"
            set Ascii__c[155]="›"
            set Ascii__c[156]="œ"
            set Ascii__c[158]="ž"
            set Ascii__c[159]="Ÿ"
            set Ascii__c[160]=" "
            set Ascii__c[161]="¡"
            set Ascii__c[162]="¢"
            set Ascii__c[163]="£"
            set Ascii__c[164]="¤"
            set Ascii__c[165]="¥"
            set Ascii__c[166]="¦"
            set Ascii__c[167]="§"
            set Ascii__c[168]="¨"
            set Ascii__c[169]="©"
            set Ascii__c[170]="ª"
            set Ascii__c[171]="«"
            set Ascii__c[172]="¬"
            set Ascii__c[174]="®"
            set Ascii__c[175]="¯"
            set Ascii__c[176]="°"
            set Ascii__c[177]="±"
            set Ascii__c[178]="²"
            set Ascii__c[179]="³"
            set Ascii__c[180]="´"
            set Ascii__c[181]="µ"
            set Ascii__c[182]="¶"
            set Ascii__c[183]="·"
            set Ascii__c[184]="¸"
            set Ascii__c[185]="¹"
            set Ascii__c[186]="º"
            set Ascii__c[187]="»"
            set Ascii__c[188]="¼"
            set Ascii__c[189]="½"
            set Ascii__c[190]="¾"
            set Ascii__c[191]="¿"
            set Ascii__c[192]="À"
            set Ascii__c[193]="Á"
            set Ascii__c[194]="Â"
            set Ascii__c[195]="Ã"
            set Ascii__c[196]="Ä"
            set Ascii__c[197]="Å"
            set Ascii__c[198]="Æ"
            set Ascii__c[199]="Ç"
            set Ascii__c[200]="È"
            set Ascii__c[201]="É"
            set Ascii__c[202]="Ê"
            set Ascii__c[203]="Ë"
            set Ascii__c[204]="Ì"
            set Ascii__c[205]="Í"
            set Ascii__c[206]="Î"
            set Ascii__c[207]="Ï"
            set Ascii__c[208]="Ð"
            set Ascii__c[209]="Ñ"
            set Ascii__c[210]="Ò"
            set Ascii__c[211]="Ó"
            set Ascii__c[212]="Ô"
            set Ascii__c[213]="Õ"
            set Ascii__c[214]="Ö"
            set Ascii__c[215]="×"
            set Ascii__c[216]="Ø"
            set Ascii__c[217]="Ù"
            set Ascii__c[218]="Ú"
            set Ascii__c[219]="Û"
            set Ascii__c[220]="Ü"
            set Ascii__c[221]="Ý"
            set Ascii__c[222]="Þ"
            set Ascii__c[223]="ß"
            set Ascii__c[224]="à"
            set Ascii__c[225]="á"
            set Ascii__c[226]="â"
            set Ascii__c[227]="ã"
            set Ascii__c[228]="ä"
            set Ascii__c[229]="å"
            set Ascii__c[230]="æ"
            set Ascii__c[231]="ç"
            set Ascii__c[232]="è"
            set Ascii__c[233]="é"
            set Ascii__c[234]="ê"
            set Ascii__c[235]="ë"
            set Ascii__c[236]="ì"
            set Ascii__c[237]="í"
            set Ascii__c[238]="î"
            set Ascii__c[239]="ï"
            set Ascii__c[240]="ð"
            set Ascii__c[241]="ñ"
            set Ascii__c[242]="ò"
            set Ascii__c[243]="ó"
            set Ascii__c[244]="ô"
            set Ascii__c[245]="õ"
            set Ascii__c[246]="ö"
            set Ascii__c[247]="÷"
            set Ascii__c[248]="ø"
            set Ascii__c[249]="ù"
            set Ascii__c[250]="ú"
            set Ascii__c[251]="û"
            set Ascii__c[252]="ü"
            set Ascii__c[253]="ý"
            set Ascii__c[254]="þ"
            set Ascii__c[255]="ÿ"
        endfunction

//library Ascii ends
//library DamageDetection:
    
   function DamageDetectCOND takes nothing returns boolean
      if ( GetConvertedPlayerId(GetOwningPlayer(GetEventDamageSource())) <= 12 ) then
         return true
      endif
      return false
   endfunction
   
   function DamageDetect takes nothing returns nothing
      local integer p= GetConvertedPlayerId(GetOwningPlayer(GetEventDamageSource())) - 6
      set s__udg_TotalDamage[p]= s__udg_TotalDamage[p] + GetEventDamage()
   endfunction
   
   function SetupDamageDetect takes nothing returns nothing
      local trigger trig= CreateTrigger()
      call TriggerRegisterAnyUnitEventBJ(trig, EVENT_PLAYER_UNIT_DAMAGED)
      call TriggerAddCondition(trig, Condition(function DamageDetectCOND))
      call TriggerAddAction(trig, function DamageDetect)
   endfunction
   

//library DamageDetection ends
//library FrameLoader:
// in 1.31 and upto 1.32.9 PTR (when I wrote this). Frames are not correctly saved and loaded, breaking the game.
// This library runs all functions added to it with a 0s delay after the game was loaded.
// function FrameLoaderAdd takes code func returns nothing
    // func runs when the game is loaded.
    function FrameLoaderAdd takes code func returns nothing
        call TriggerAddAction(FrameLoader__actionTrigger, func)
    endfunction

    function FrameLoader__timerAction takes nothing returns nothing
        call TriggerExecute(FrameLoader__actionTrigger)
    endfunction
    function FrameLoader__eventAction takes nothing returns nothing
        call TimerStart(FrameLoader__t, 0, false, function FrameLoader__timerAction)
    endfunction
    function FrameLoader__init_function takes nothing returns nothing
        call TriggerRegisterGameEvent(FrameLoader__eventTrigger, EVENT_GAME_LOADED)
        call TriggerAddAction(FrameLoader__eventTrigger, function FrameLoader__eventAction)
    endfunction

//library FrameLoader ends
//library LibArcaneBarrier:
    
    function LibArcaneBarrier___ArcaneBarrierCond takes nothing returns boolean
        if ( GetUnitTypeId(BlzGetEventDamageTarget()) == UNIT_SILVERMOON_GUARD and BlzGetEventAttackType() == ATTACK_TYPE_MAGIC and GetUnitState(BlzGetEventDamageTarget(), UNIT_STATE_MANA) > GetEventDamage() ) then
            return true
        endif

        return false
    endfunction

    function LibArcaneBarrier___ArcaneBarrierAction takes nothing returns nothing
        local effect eff
        local location locTarget= GetUnitLoc(BlzGetEventDamageTarget())
        local location locSource= GetUnitLoc(GetEventDamageSource())
        local real angle= AngleBetweenPoints(locTarget, locSource)
        local location locOffset= PolarProjectionBJ(locTarget, 35, angle)

        call SetUnitState(BlzGetEventDamageTarget(), UNIT_STATE_MANA, GetUnitState(BlzGetEventDamageTarget(), UNIT_STATE_MANA) - GetEventDamage())
        call BlzSetEventDamage(0)
        set eff=AddSpecialEffectLoc("Flicker.mdx", locOffset)
        call DestroyEffect(eff)

        call RemoveLocation(locTarget)
        call RemoveLocation(locSource)
        call RemoveLocation(locOffset)
    endfunction
    
    function LibArcaneBarrier___InitArcaneBarrier takes nothing returns nothing
        local trigger trig

        set trig=CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(trig, EVENT_PLAYER_UNIT_DAMAGED)
		call TriggerAddCondition(trig, Condition(function LibArcaneBarrier___ArcaneBarrierCond))
		call TriggerAddAction(trig, function LibArcaneBarrier___ArcaneBarrierAction)

    endfunction

//library LibArcaneBarrier ends
//library LibCounterStrike:

 function LibCounterStrike___CounterStrikeAction takes nothing returns nothing
        call BlzSetEventDamage(GetEventDamage() + 0.05 * ( GetUnitStateSwap(UNIT_STATE_MAX_LIFE, GetEventDamageSource()) - GetUnitStateSwap(UNIT_STATE_LIFE, GetEventDamageSource()) ))
        //call DisplayTextToForce( GetPlayersAll(), I2S(GetHandleIdBJ(BlzGetEventDamageTarget())) )
	endfunction

 function LibCounterStrike___CounterStrikeCond takes nothing returns boolean
		if ( GetUnitTypeId(GetEventDamageSource()) == 'o00I' and GetPlayerTechCountSimple('R01Q', GetOwningPlayer(GetEventDamageSource())) == 1 ) then
			return true
		endif

		return false
	endfunction
    
 function LibCounterStrike___InitCounterStrike takes nothing returns nothing
  local trigger trig

		set trig=CreateTrigger()
		call TriggerRegisterAnyUnitEventBJ(trig, EVENT_PLAYER_UNIT_DAMAGING)
		call TriggerAddCondition(trig, Condition(function LibCounterStrike___CounterStrikeCond))
		call TriggerAddAction(trig, function LibCounterStrike___CounterStrikeAction)

	endfunction


//library LibCounterStrike ends
//library LibPhaseStrike:

 function LibPhaseStrike___PhaseStrikeAction takes nothing returns nothing
  local unit u= GetTriggerUnit()
  local location locSource= GetUnitLoc(GetTriggerUnit())
  local location locTarget= GetUnitLoc(GetSpellTargetUnit())
  local effect eff
		
		set eff=AddSpecialEffectLoc("Abilities\\Spells\\NightElf\\Blink\\BlinkTarget.mdl", locSource)
		call DestroyEffect(eff)
		set eff=AddSpecialEffectLoc("Abilities\\Spells\\NightElf\\Blink\\BlinkTarget.mdl", locTarget)
		call DestroyEffect(eff)
		call SetUnitPositionLoc(GetTriggerUnit(), locTarget)
		call BlzStartUnitAbilityCooldown(GetTriggerUnit(), GetSpellAbilityId(), 25) // normal cooldown gets ignored in this trigger, therefore this line exists
		call UnitAddAbility(GetTriggerUnit(), 'A0D0')

		call RemoveLocation(locSource)
		call RemoveLocation(locTarget)

		// remove invis after delay
		call PolledWait(3)
		call UnitRemoveAbility(u, 'A0D0')
	endfunction

 function LibPhaseStrike___PhaseStrikeCond takes nothing returns boolean
		if ( GetSpellAbilityId() == 'A001' ) then
			return true
		endif

		return false
	endfunction
    
 function LibPhaseStrike___InitPhaseStrike takes nothing returns nothing
  local trigger trig

		set trig=CreateTrigger()
		call TriggerRegisterAnyUnitEventBJ(trig, EVENT_PLAYER_UNIT_SPELL_EFFECT)
		call TriggerAddCondition(trig, Condition(function LibPhaseStrike___PhaseStrikeCond))
		call TriggerAddAction(trig, function LibPhaseStrike___PhaseStrikeAction)

	endfunction


//library LibPhaseStrike ends
//library LibRequired:
    function LibRequired__init takes nothing returns nothing
    endfunction
        
    function GetActivePlayers takes nothing returns integer
        local integer n= 0
        local integer i= 1
        local integer endIndex= 6
        loop
            exitwhen i > endIndex
            if ( s__udg_ActivePlayers[i] == true ) then
                set n=n + 1
            endif
            set i=i + 1
        endloop

        return n
    endfunction

    function GetShortPlayerName takes player p returns string
        local string pn= GetPlayerName(p)
        local integer i= 0
        loop
            exitwhen i >= StringLength(pn)
            if SubString(pn, i, i + 1) == "#" then
                return SubString(pn, 0, i)
            endif
            set i=i + 1
        endloop
        return pn
    endfunction

    function UnitMoveLoc takes unit u returns nothing
        local player v_player= GetOwningPlayer(u)
        local location point= GetUnitLoc(u)
        local location point2= null
        local real angle= 180
        local real real1
        local real real2
        local real real3
        local real real4
        local location loc

        if ( IsPlayerInForce(v_player, s__udg_Teams[1]) == true ) then
            set point2=GetRectCenter(gg_rct_Fortress_Team_2)
        else
            set point2=GetRectCenter(gg_rct_Fortress_Team_1)
        endif
        set real1=DistanceBetweenPoints(point, point2)
        set real2=AngleBetweenPoints(point, point2)
        set real3=real2 - angle
        set real4=real1 * CosBJ(real3)
        set loc=PolarProjectionBJ(point, real4, 180)

        call IssuePointOrderLoc(u, "attack", loc)
        call RemoveLocation(point)
        call RemoveLocation(point2)
        call RemoveLocation(loc)
    endfunction


//library LibRequired ends
//library MMD:

    ///////////////////////////////////////////////////////////////
    /// Private variables and constants
    ///////////////////////////////////////////////////////////////
    
    ///////////////////////////////////////////////////////////////
    /// Private functions
    ///////////////////////////////////////////////////////////////
    
    ///Triggered when tampering is detected. Increases the number of safeguards against tampering.
    function MMD_RaiseGuard takes string reason returns nothing
        set MMD__num_senders=MMD__NUM_SENDERS_SAFE //increase number of players voting on each message
    endfunction

    ///Returns seconds elapsed in game time
    function MMD__time takes nothing returns real
        return TimerGetElapsed(MMD__clock)
    endfunction
    
    ///Initializes the char-to-int conversion
    function MMD__prepC2I takes nothing returns nothing
        local integer i= 0
        local string id
        loop
            exitwhen i >= MMD__num_chars
            set id=SubString(MMD__chars, i, i + 1)
            if id == StringCase(id, true) then
                set id=id + "U"
            endif
            call StoreInteger(MMD__gc, "c2i", id, i)
            set i=i + 1
        endloop
    endfunction
    ///Converts a character to an integer
    function MMD__C2I takes string c returns integer
        local integer i
        local string id= c
        if id == StringCase(id, true) then
            set id=id + "U"
        endif
        set i=GetStoredInteger(MMD__gc, "c2i", id)
        if ( i < 0 or i >= MMD__num_chars or SubString(MMD__chars, i, i + 1) != c ) and HaveStoredInteger(MMD__gc, "c2i", id) then
            //A cheater sent a fake sync to screw with the cached values
            set i=0
            loop
                exitwhen i >= MMD__num_chars //just a weird character
                if c == SubString(MMD__chars, i, i + 1) then //cheating!
                    call MMD_RaiseGuard("c2i poisoned")
                    call StoreInteger(MMD__gc, "c2i", id, i)
                    exitwhen true
                endif
                set i=i + 1
            endloop
        endif
        return i
    endfunction

    ///Computes a weak hash value, hopefully secure enough for our purposes
    function MMD__poor_hash takes string s,integer seed returns integer
        local integer n= StringLength(s)
        local integer m= n + seed
        local integer i= 0
        loop
            exitwhen i >= n
            set m=m * 41 + MMD__C2I(SubString(s, i, i + 1))
            set i=i + 1
        endloop
        return m
    endfunction

    ///Stores previously sent messages for tamper detection purposes
        function s__MMD__QueueNode_create takes integer id,string msg returns integer
            local integer this= s__MMD__QueueNode__allocate()
            set s__MMD__QueueNode_timeout[this]=(TimerGetElapsed(MMD__clock)) + 7.0 + GetRandomReal(0, 2 + 0.1 * GetPlayerId(GetLocalPlayer())) // INLINED!!
            set s__MMD__QueueNode_msg[this]=msg
            set s__MMD__QueueNode_checksum[this]=MMD__poor_hash(s__MMD__QueueNode_msg[this] , id)
            set s__MMD__QueueNode_key[this]=I2S(id)
            return this
        endfunction
        function s__MMD__QueueNode_onDestroy takes integer this returns nothing
            call FlushStoredInteger(MMD__gc, MMD__M_KEY_VAL + s__MMD__QueueNode_key[this], s__MMD__QueueNode_msg[this])
            call FlushStoredInteger(MMD__gc, MMD__M_KEY_CHK + s__MMD__QueueNode_key[this], s__MMD__QueueNode_key[this])
            set s__MMD__QueueNode_msg[this]=null
            set s__MMD__QueueNode_key[this]=null
            set s__MMD__QueueNode_next[this]=0
        endfunction

//Generated destructor of MMD__QueueNode
function s__MMD__QueueNode_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__MMD__QueueNode_V[this]!=-1) then
        return
    endif
    call s__MMD__QueueNode_onDestroy(this)
    set si__MMD__QueueNode_V[this]=si__MMD__QueueNode_F
    set si__MMD__QueueNode_F=this
endfunction
        function s__MMD__QueueNode_send takes integer this returns nothing
            call StoreInteger(MMD__gc, MMD__M_KEY_VAL + s__MMD__QueueNode_key[this], s__MMD__QueueNode_msg[this], s__MMD__QueueNode_checksum[this])
            call StoreInteger(MMD__gc, MMD__M_KEY_CHK + s__MMD__QueueNode_key[this], s__MMD__QueueNode_key[this], s__MMD__QueueNode_checksum[this])
            call SyncStoredInteger(MMD__gc, MMD__M_KEY_VAL + s__MMD__QueueNode_key[this], s__MMD__QueueNode_msg[this])
            call SyncStoredInteger(MMD__gc, MMD__M_KEY_CHK + s__MMD__QueueNode_key[this], s__MMD__QueueNode_key[this])
        endfunction
    
    ///Returns true for a fixed size uniform random subset of players in the game
    function MMD__isEmitter takes nothing returns boolean
        local integer i= 0
        local integer n= 0
        local integer r
        local integer array picks
        local boolean array pick_flags
        loop
            exitwhen i >= 24
            if GetPlayerController(Player(i)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING then
                if n < MMD__num_senders then //initializing picks
                    set picks[n]=i
                    set pick_flags[i]=true
                else //maintain the invariant 'P(being picked) = c/n'
                    set r=GetRandomInt(0, n)
                    if r < MMD__num_senders then
                        set pick_flags[picks[r]]=false
                        set picks[r]=i
                        set pick_flags[i]=true
                    endif
                endif
                set n=n + 1
            endif
            set i=i + 1
        endloop
        return pick_flags[GetPlayerId(GetLocalPlayer())]
    endfunction
    
    ///Places meta-data in the replay and in network traffic
    function MMD__emit takes string message returns nothing
        local integer q
        if not MMD__initialized then
            call BJDebugMsg("MMD Emit Error: Library not initialized yet.")
            return
        endif
        
        //remember sent messages for tamper check
        set q=s__MMD__QueueNode_create(MMD__num_msg , message)
        if MMD__q_head == 0 then
            set MMD__q_head=q
        else
            set s__MMD__QueueNode_next[MMD__q_tail]=q
        endif
        set MMD__q_tail=q
                
        //send new message
        set MMD__num_msg=MMD__num_msg + 1
        if MMD__isEmitter() then
            call s__MMD__QueueNode_send(q)
        endif
    endfunction

    ///Performs tamper checks
    function MMD__tick takes nothing returns nothing
        local integer q
        local integer i
        
        //check previously sent messages for tampering
        set q=MMD__q_head
        loop
            exitwhen q == 0 or s__MMD__QueueNode_timeout[q] >= (TimerGetElapsed(MMD__clock)) // INLINED!!
            if not HaveStoredInteger(MMD__gc, MMD__M_KEY_VAL + s__MMD__QueueNode_key[q], s__MMD__QueueNode_msg[q]) then
                call MMD_RaiseGuard("message skipping")
                call s__MMD__QueueNode_send(q)
            elseif not HaveStoredInteger(MMD__gc, MMD__M_KEY_CHK + s__MMD__QueueNode_key[q], s__MMD__QueueNode_key[q]) then
                call MMD_RaiseGuard("checksum skipping")
                call s__MMD__QueueNode_send(q)
            elseif GetStoredInteger(MMD__gc, MMD__M_KEY_VAL + s__MMD__QueueNode_key[q], s__MMD__QueueNode_msg[q]) != s__MMD__QueueNode_checksum[q] then
                call MMD_RaiseGuard("message tampering")
                call s__MMD__QueueNode_send(q)
            elseif GetStoredInteger(MMD__gc, MMD__M_KEY_CHK + s__MMD__QueueNode_key[q], s__MMD__QueueNode_key[q]) != s__MMD__QueueNode_checksum[q] then
                call MMD_RaiseGuard("checksum tampering")
                call s__MMD__QueueNode_send(q)
            endif
            set MMD__q_head=s__MMD__QueueNode_next[q]
            call s__MMD__QueueNode_deallocate(q)
            set q=MMD__q_head
        endloop
        if MMD__q_head == 0 then
            set MMD__q_tail=0
        endif
        
        //check for future message tampering
        set i=0
        loop
            exitwhen not HaveStoredInteger(MMD__gc, MMD__M_KEY_CHK + I2S(MMD__num_msg), I2S(MMD__num_msg))
            call MMD_RaiseGuard("message insertion")
            call MMD__emit("Blank")
            set i=i + 1
            exitwhen i >= 10
        endloop
    endfunction
    
    ///Replaces control characters with escape sequences
    function MMD__pack takes string value returns string
        local integer j
        local integer i= 0
        local string result= ""
        local string c
        loop //for each character in argument string
            exitwhen i >= StringLength(value)
            set c=SubString(value, i, i + 1)
            set j=0
            loop //for each character in escaped chars string
                exitwhen j >= StringLength(MMD__ESCAPED_CHARS)
                //escape control characters
                if c == SubString(MMD__ESCAPED_CHARS, j, j + 1) then
                    set c="\\" + c
                    exitwhen true
                endif
                set j=j + 1
            endloop
            set result=result + c
            set i=i + 1
        endloop
        return result
    endfunction
    
    ///Updates the value of a defined variable for a given player
    function MMD__update_value takes string name,player p,string op,string value,integer val_type returns nothing
        local integer id= GetPlayerId(p)
        if p == null or id < 0 or id >= 24 then
            //call BJDebugMsg("MMD Set Error: Invalid player. Must be P1 to P24.")
        elseif val_type != GetStoredInteger(MMD__gc, "types", name) then
            call BJDebugMsg("MMD Set Error: Updated value of undefined variable or used value of incorrect type.")
        elseif StringLength(op) == 0 then
            call BJDebugMsg("MMD Set Error: Unrecognized operation type.")
        elseif StringLength(name) > 50 then
            call BJDebugMsg("MMD Set Error: Variable name is too long.")
        elseif StringLength(name) == 0 then
            call BJDebugMsg("MMD Set Error: Variable name is empty.")
        else
            //call BJDebugMsg ("MMD Update: [name: " + name + "] [pid: " + I2S (GetPlayerId (p)) + "] [op: " + op + "] [value: " + value + "] [val_type: " + I2S (val_type) + "]")
            call MMD__emit("VarP " + I2S(id) + " " + MMD__pack(name) + " " + op + " " + value)
        endif
    endfunction

    ///Defines an event's arguments and format
    function MMD__DefineEvent takes string name,integer num_args,string format,string arg_data returns nothing
        if GetStoredInteger(MMD__gc, "events", name) != 0 then
            call BJDebugMsg("MMD DefEvent Error: Event redefined.")
        else
            call StoreInteger(MMD__gc, "events", name, num_args + 1)
            call MMD__emit("DefEvent " + MMD__pack(name) + " " + I2S(num_args) + " " + arg_data + MMD__pack(format))
        endif
    endfunction
    
    ///Places an event in the meta-data
    function MMD__LogEvent takes string name,integer num_args,string data returns nothing
        if GetStoredInteger(MMD__gc, "events", name) != num_args + 1 then
            call BJDebugMsg("MMD LogEvent Error: Event not defined or defined with different # of args.")
        else
            call MMD__emit("Event " + MMD__pack(name) + data)
        endif
    endfunction

    ///////////////////////////////////////////////////////////////
    /// Public functions
    ///////////////////////////////////////////////////////////////

    ///Sets a player flag like "win_on_leave"
    function MMD_FlagPlayer takes player p,integer flag_type returns nothing
        local string flag= MMD__flags[flag_type]
        local integer id= GetPlayerId(p)
        if p == null or id < 0 or id >= 24 then
            call BJDebugMsg("MMD Flag Error: Invalid player. Must be P1 to P24.")
        elseif StringLength(flag) == 0 then
            call BJDebugMsg("MMD Flag Error: Unrecognized flag type.")
        elseif GetPlayerController(Player(id)) == MAP_CONTROL_USER then
            call MMD__emit("FlagP " + I2S(id) + " " + flag)
        endif
    endfunction

    ///Defines a variable to store things in
    function MMD_DefineValue takes string name,integer value_type,integer goal_type,integer suggestion_type returns nothing
        local string goal= MMD__goals[goal_type]
        local string vtype= MMD__types[value_type]
        local string stype= MMD__suggestions[suggestion_type]
        if goal == null then
            call BJDebugMsg("MMD Def Error: Unrecognized goal type.")
        elseif vtype == null then
            call BJDebugMsg("MMD Def Error: Unrecognized value type.")
        elseif stype == null then
            call BJDebugMsg("Stats Def Error: Unrecognized suggestion type.")
        elseif StringLength(name) > 32 then
            call BJDebugMsg("MMD Def Error: Variable name is too long.")
        elseif StringLength(name) == 0 then
            call BJDebugMsg("MMD Def Error: Variable name is empty.")
        elseif value_type == MMD_TYPE_STRING and goal_type != MMD_GOAL_NONE then
            call BJDebugMsg("MMD Def Error: Strings must have goal type of none.")
        elseif GetStoredInteger(MMD__gc, "types", name) != 0 then
            call BJDebugMsg("MMD Def Error: Value redefined.")
        else
            call StoreInteger(MMD__gc, "types", name, value_type)
            call MMD__emit("DefVarP " + MMD__pack(name) + " " + vtype + " " + goal + " " + stype)
        endif
    endfunction

    ///Updates the value of an integer variable
    function MMD_UpdateValueInt takes string name,player p,integer op,integer value returns nothing
        call MMD__update_value(name , p , MMD__ops[op] , I2S(value) , MMD_TYPE_INT)
    endfunction
    
    ///Updates the value of a real variable
    function MMD_UpdateValueReal takes string name,player p,integer op,real value returns nothing
        call MMD__update_value(name , p , MMD__ops[op] , R2S(value) , MMD_TYPE_REAL)
    endfunction
    
    ///Updates the value of a string variable
    function MMD_UpdateValueString takes string name,player p,string value returns nothing
        local string q= "\""
        call MMD__update_value(name , p , MMD__ops[MMD_OP_SET] , q + MMD__pack(value) + q , MMD_TYPE_STRING)
    endfunction    
    
    function MMD_DefineEvent0 takes string name,string format returns nothing
        call MMD__DefineEvent(name , 0 , format , "")
    endfunction
    function MMD_DefineEvent1 takes string name,string format,string argName0 returns nothing
        call MMD__DefineEvent(name , 1 , format , MMD__pack(argName0) + " ")
    endfunction
    function MMD_DefineEvent2 takes string name,string format,string argName0,string argName1 returns nothing
        call MMD__DefineEvent(name , 2 , format , MMD__pack(argName0) + " " + MMD__pack(argName1) + " ")
    endfunction
    function MMD_DefineEvent3 takes string name,string format,string argName0,string argName1,string argName2 returns nothing
        call MMD__DefineEvent(name , 3 , format , MMD__pack(argName0) + " " + MMD__pack(argName1) + " " + MMD__pack(argName2) + " ")
    endfunction
    
    function MMD_LogEvent0 takes string name returns nothing
        call MMD__LogEvent(name , 0 , "")
    endfunction
    function MMD_LogEvent1 takes string name,string arg0 returns nothing
        call MMD__LogEvent(name , 1 , " " + MMD__pack(arg0))
    endfunction
    function MMD_LogEvent2 takes string name,string arg0,string arg1 returns nothing
        call MMD__LogEvent(name , 2 , " " + MMD__pack(arg0) + " " + MMD__pack(arg1))
    endfunction
    function MMD_LogEvent3 takes string name,string arg0,string arg1,string arg2 returns nothing
        call MMD__LogEvent(name , 3 , " " + MMD__pack(arg0) + " " + MMD__pack(arg1) + " " + MMD__pack(arg2))
    endfunction

    ///Emits meta-data which parsers will ignore unless they are customized to understand it
    function MMD_LogCustom takes string unique_identifier,string data returns nothing
        call MMD__emit("custom " + MMD__pack(unique_identifier) + " " + MMD__pack(data))
    endfunction

    ///////////////////////////////////////////////////////////////
    /// Initialization
    ///////////////////////////////////////////////////////////////
    
    ///Emits initialization data
    function MMD__init2 takes nothing returns nothing
        local integer i
        local trigger t
        set MMD__initialized=true
        
        call MMD__emit("init version " + I2S(MMD__MINIMUM_PARSER_VERSION) + " " + I2S(MMD__CURRENT_VERSION))

        set i=0
        loop
            exitwhen i >= 24
            if GetPlayerController(Player(i)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING then
                call MMD__emit("init pid " + I2S(i) + " " + MMD__pack(GetPlayerName(Player(i))))
            endif
            set i=i + 1
        endloop
        
        set t=CreateTrigger()
        call TriggerAddAction(t, function MMD__tick)
        call TriggerRegisterTimerEvent(t, 0.37, true)
    endfunction
    
    ///Places init2 on a timer, initializes game cache, and translates constants
    function MMD__init takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterTimerEvent(t, 0, false)
        call TriggerAddAction(t, function MMD__init2)
        
        set MMD__goals[MMD_GOAL_NONE]="none"
        set MMD__goals[MMD_GOAL_HIGH]="high"
        set MMD__goals[MMD_GOAL_LOW]="low"
        
        set MMD__types[MMD_TYPE_INT]="int"
        set MMD__types[MMD_TYPE_REAL]="real"
        set MMD__types[MMD_TYPE_STRING]="string"

        set MMD__suggestions[MMD_SUGGEST_NONE]="none"
        set MMD__suggestions[MMD_SUGGEST_TRACK]="track"
        set MMD__suggestions[MMD_SUGGEST_LEADERBOARD]="leaderboard"

        set MMD__ops[MMD_OP_ADD]="+="
        set MMD__ops[MMD_OP_SUB]="-="
        set MMD__ops[MMD_OP_SET]="="

        set MMD__flags[MMD_FLAG_DRAWER]="drawer"
        set MMD__flags[MMD_FLAG_LOSER]="loser"
        set MMD__flags[MMD_FLAG_WINNER]="winner"
        set MMD__flags[MMD_FLAG_LEAVER]="leaver"
        set MMD__flags[MMD_FLAG_PRACTICING]="practicing"

        call FlushGameCache(InitGameCache(MMD__FILENAME))
        set MMD__gc=InitGameCache(MMD__FILENAME)
        call TimerStart(MMD__clock, 999999999, false, null)
        call MMD__prepC2I()
    endfunction

//library MMD ends
//library Power2:
    function GetPower2Value takes integer i returns integer
        return Power2__data[i]
    endfunction
    function Power2__init_function takes nothing returns nothing
        local integer index= 1
        local integer value= 1
        loop
            set Power2__data[index]=value
            set index=index + 1
            set value=value * 2
            exitwhen index == 32
            // body
        endloop
    endfunction

//library Power2 ends
//library RaceSounds:
function RaceSounds__init_function takes nothing returns nothing
    local integer index
    set index=GetHandleId(RACE_HUMAN)
    set SoundNoGold[index]=CreateSound("Sound\\Interface\\Warning\\Human\\KnightNoGold1.wav", false, false, false, 10, 10, "")
    call SetSoundParamsFromLabel(SoundNoGold[index], "NoGoldHuman")
    call SetSoundDuration(SoundNoGold[index], 1618)
    set SoundNoLumber[index]=CreateSound("Sound\\Interface\\Warning\\Human\\KnightNoLumber1.wav", false, false, false, 10, 10, "")
    call SetSoundParamsFromLabel(SoundNoLumber[index], "NoLumberHuman")
    call SetSoundDuration(SoundNoLumber[index], 1903)

    set index=GetHandleId(ConvertRace(11))
    set SoundNoGold[index]=CreateSound("Sound\\Interface\\Warning\\Naga\\NagaNoGold1.wav", false, false, false, 10, 10, "")
    call SetSoundParamsFromLabel(SoundNoGold[index], "NoGoldNaga")
    call SetSoundDuration(SoundNoGold[index], 2690)
    set SoundNoLumber[index]=CreateSound("Sound\\Interface\\Warning\\Naga\\NagaNoLumber1.wav", false, false, false, 10, 10, "")
    call SetSoundParamsFromLabel(SoundNoLumber[index], "NoLumberNaga")
    call SetSoundDuration(SoundNoLumber[index], 2011)

    set index=GetHandleId(RACE_ORC)
    set SoundNoGold[index]=CreateSound("Sound\\Interface\\Warning\\Orc\\GruntNoGold1.wav", false, false, false, 10, 10, "")
    call SetSoundParamsFromLabel(SoundNoGold[index], "NoGoldOrc")
    call SetSoundDuration(SoundNoGold[index], 1450)
    set SoundNoLumber[index]=CreateSound("Sound\\Interface\\Warning\\Orc\\GruntNoLumber1.wav", false, false, false, 10, 10, "")
    call SetSoundParamsFromLabel(SoundNoLumber[index], "NoLumberOrc")
    call SetSoundDuration(SoundNoLumber[index], 1219)

    set index=GetHandleId(RACE_NIGHTELF)
    set SoundNoGold[index]=CreateSound("Sound\\Interface\\Warning\\NightElf\\SentinelNoGold1.wav", false, false, false, 10, 10, "")
    call SetSoundParamsFromLabel(SoundNoGold[index], "NoGoldNightElf")
    call SetSoundDuration(SoundNoGold[index], 1229)
    set SoundNoLumber[index]=CreateSound("Sound\\Interface\\Warning\\NightElf\\SentinelNoLumber1.wav", false, false, false, 10, 10, "")
    call SetSoundParamsFromLabel(SoundNoLumber[index], "NoLumberNightElf")
    call SetSoundDuration(SoundNoLumber[index], 1454)

    set index=GetHandleId(RACE_UNDEAD)
    set SoundNoGold[index]=CreateSound("Sound\\Interface\\Warning\\Undead\\NecromancerNoGold1.wav", false, false, false, 10, 10, "")
    call SetSoundParamsFromLabel(SoundNoGold[index], "NoGoldUndead")
    call SetSoundDuration(SoundNoGold[index], 2005)
    set SoundNoLumber[index]=CreateSound("Sound\\Interface\\Warning\\Undead\\NecromancerNoLumber1.wav", false, false, false, 10, 10, "")
    call SetSoundParamsFromLabel(SoundNoLumber[index], "NoLumberUndead")
    call SetSoundDuration(SoundNoLumber[index], 2005)
endfunction

//library RaceSounds ends
//library RacialTowers:

 function ReviveRacialTowers takes nothing returns nothing
  local integer p
  local integer i
  local unit u
  local effect eff

		set i=1
		loop
		exitwhen i > 2
			set p=s__udg_SpawnPlayers[i]
			if ( racialTowerType[p] != 0 and racialTowerIsDead[p] == true ) then
				set racialTowerIsDead[p]=false
				set u=CreateUnit(Player(p - 1), racialTowerType[p], racialTowerX[p], racialTowerY[p], 270)
				set eff=AddSpecialEffect("WarpIn.mdx", racialTowerX[p], racialTowerY[p])
				call DestroyEffect(eff)
			endif
			
			set i=i + 1
		endloop

		set u=null
		set eff=null
	endfunction

 function RacialTowerDiesAction takes nothing returns nothing
  local integer p= GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))
		set racialTowerType[p]=GetUnitTypeId(GetTriggerUnit())
		set racialTowerX[p]=GetUnitX(GetTriggerUnit())
		set racialTowerY[p]=GetUnitY(GetTriggerUnit())

		set racialTowerIsDead[p]=true
	endfunction

 function RacialTowerDiesCondition takes nothing returns boolean
		if ( GetUnitTypeId(GetTriggerUnit()) == 'h014' or GetUnitTypeId(GetTriggerUnit()) == 'h015' or GetUnitTypeId(GetTriggerUnit()) == 'h016' or GetUnitTypeId(GetTriggerUnit()) == 'h017' ) then
			return true
		endif

		return false
	endfunction

 function RacialTowerInit takes nothing returns nothing
  local trigger trig= CreateTrigger()
		call TriggerRegisterAnyUnitEventBJ(trig, EVENT_PLAYER_UNIT_DEATH)
		call TriggerAddCondition(trig, Condition(function RacialTowerDiesCondition))
		call TriggerAddAction(trig, function RacialTowerDiesAction)
	endfunction


//library RacialTowers ends
//library RaiderPillage:
    
    function RaiderPillage__PillageCOND takes nothing returns boolean
        if ( GetUnitTypeId(GetEventDamageSource()) == UNIT_RAIDER and IsUnitType(BlzGetEventDamageTarget(), UNIT_TYPE_STRUCTURE) == true ) then
            return true
        endif

        return false
    endfunction

    function PillageACTION takes nothing returns nothing
        local location loc= GetUnitLoc(GetEventDamageSource())
        local integer gold= 10
        local integer p= GetConvertedPlayerId(GetOwningPlayer(GetEventDamageSource())) - 6
        call AdjustPlayerStateBJ(gold, Player(p - 1), PLAYER_STATE_RESOURCE_GOLD)

        call CreateTextTagLocBJ("+" + I2S(gold), loc, 0, 10, 100, 100, 0.00, 0)
        call SetTextTagVelocityBJ(GetLastCreatedTextTag(), 64, 90)
        call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
        call SetTextTagLifespanBJ(GetLastCreatedTextTag(), 1.00)

        call RemoveLocation(loc)
    endfunction
    
    function RaiderPillage__init takes nothing returns nothing
        local trigger trig= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(trig, EVENT_PLAYER_UNIT_DAMAGED)
        call TriggerAddCondition(trig, Condition(function RaiderPillage__PillageCOND))
        call TriggerAddAction(trig, function PillageACTION)
    
        set trig=null
    endfunction

//library RaiderPillage ends
//library SimpleTooltip:
    function CreateSimpleTooltip takes framehandle frame,string text returns framehandle
        // this FRAME is important when the Box is outside of 4:3 it can be limited to 4:3.
        local framehandle toolTipParent= BlzCreateFrameByType("FRAME", "", frame, "", 0)
        local framehandle toolTipBox= BlzCreateFrame("EscMenuControlBackdropTemplate", toolTipParent, 0, 0)
        local framehandle toolTip= BlzCreateFrame("TasButtonTextTemplate", toolTipBox, 0, 0)
        call BlzFrameSetPoint(toolTip, FRAMEPOINT_BOTTOM, frame, FRAMEPOINT_TOP, 0, 0.008)
        call BlzFrameSetPoint(toolTipBox, FRAMEPOINT_TOPLEFT, toolTip, FRAMEPOINT_TOPLEFT, - 0.008, 0.008)
        call BlzFrameSetPoint(toolTipBox, FRAMEPOINT_BOTTOMRIGHT, toolTip, FRAMEPOINT_BOTTOMRIGHT, 0.008, - 0.008)
        call BlzFrameSetText(toolTip, text)
        call BlzFrameSetTooltip(frame, toolTipParent)
        return toolTip
    endfunction

//library SimpleTooltip ends
//library SpellFocusedArrow:

    function SpellFocusedArrow___FocusedArrowCOND takes nothing returns boolean
        if ( GetUnitTypeId(GetEventDamageSource()) == UNIT_HERO_BANSHEE_MAIDEN and BlzGetEventIsAttack() ) then
            return true
        endif

        return false
    endfunction

    function SpellFocusedArrow___FocusedArrowAction takes nothing returns nothing
        if ( GetUnitAbilityLevel(GetEventDamageSource(), ABILITY_FOCUSED_ARROW) == 3 and GetRandomInt(1, 100) <= 20 ) then
            call BlzSetEventDamage(GetEventDamage() + 12)
            call DestroyEffect(AddSpecialEffectTarget("BlueGlowStampedeMissileDeath.mdx", BlzGetEventDamageTarget(), "chest"))
        else
            if ( GetUnitAbilityLevel(GetEventDamageSource(), ABILITY_FOCUSED_ARROW) == 2 and GetRandomInt(1, 100) <= 16 ) then
                call BlzSetEventDamage(GetEventDamage() + 10)
                call DestroyEffect(AddSpecialEffectTarget("BlueGlowStampedeMissileDeath.mdx", BlzGetEventDamageTarget(), "chest"))
            else
                if ( GetUnitAbilityLevel(GetEventDamageSource(), ABILITY_FOCUSED_ARROW) == 1 and GetRandomInt(1, 100) <= 12 ) then
                    call BlzSetEventDamage(GetEventDamage() + 7)
                    call DestroyEffect(AddSpecialEffectTarget("BlueGlowStampedeMissileDeath.mdx", BlzGetEventDamageTarget(), "chest"))
                endif
            endif
        endif

    endfunction
    
    function SpellFocusedArrow___InitFocusedArrow takes nothing returns nothing
        local trigger trig

        set trig=CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(trig, EVENT_PLAYER_UNIT_DAMAGING)
        call TriggerAddCondition(trig, Condition(function SpellFocusedArrow___FocusedArrowCOND))
        call TriggerAddAction(trig, function SpellFocusedArrow___FocusedArrowAction)
    endfunction


//library SpellFocusedArrow ends
//library String:
//String functions v1.04
//made by MaskedPoptart
//--------------------IMPORTANT FUNCTIONS------------------------
  
    function FindIndexFrom takes string mainString,string stringToFind,integer startingIndex returns integer
        local integer msLength= StringLength(mainString)
        local integer sfLength= StringLength(stringToFind)
        local integer i= startingIndex
        if ( sfLength > msLength or i < 0 ) then
            return - 1
        endif
        loop
            exitwhen i > msLength - sfLength
            if ( SubString(mainString, i, i + sfLength) == stringToFind ) then
                return i
            endif
            set i=i + 1
        endloop
        return - 1
    endfunction

    function FindIndex takes string mainString,string stringToFind returns integer
        return FindIndexFrom(mainString , stringToFind , 0)
    endfunction
  
    function FindLastIndexFrom takes string mainString,string stringToFind,integer startingIndex returns integer
        local integer msLength= StringLength(mainString)
        local integer sfLength= StringLength(stringToFind)
        local integer i= msLength - sfLength
        if ( startingIndex < i ) then
            set i=startingIndex
        endif
        if ( sfLength > msLength ) then
            return - 1
        endif
        loop
            exitwhen i < 0
            if ( SubString(mainString, i, i + sfLength) == stringToFind ) then
                return i
            endif
            set i=i - 1
        endloop
        return - 1
    endfunction

    function FindLastIndex takes string mainString,string stringToFind returns integer
        return FindLastIndexFrom(mainString , stringToFind , 2147483647)
    endfunction
  
//-----------------------COLOR FUNCTIONS ------------------------

    function String__Init takes nothing returns nothing
        local integer i= 0
        loop
            exitwhen i >= 12
            set String__PLAYER_COLORS[i]=ConvertPlayerColor(i)
            set i=i + 1
        endloop
        set String__PLAYER_COLOR_STRINGS[0]="|cffff0303"
        set String__PLAYER_COLOR_STRINGS[1]="|cff0042ff"
        set String__PLAYER_COLOR_STRINGS[2]="|cff1ce6b9"
        set String__PLAYER_COLOR_STRINGS[3]="|cff540081"
        set String__PLAYER_COLOR_STRINGS[4]="|cfffffc01"
        set String__PLAYER_COLOR_STRINGS[5]="|cfffe8a0e"
        set String__PLAYER_COLOR_STRINGS[6]="|cff20c000"
        set String__PLAYER_COLOR_STRINGS[7]="|cffe55bb0"
        set String__PLAYER_COLOR_STRINGS[8]="|cff959697"
        set String__PLAYER_COLOR_STRINGS[9]="|cff7ebff1"
        set String__PLAYER_COLOR_STRINGS[10]="|cff106246"
        set String__PLAYER_COLOR_STRINGS[11]="|cff4e2a04"
        set String__PLAYER_COLOR_STRINGS[12]="|cff272727"
        set String__PLAYER_COLOR_STRINGS[13]="|cff272727"
        set String__PLAYER_COLOR_STRINGS[14]="|cff272727"
    endfunction

    function PlayerColor2ColorString takes playercolor pc returns string
        local integer i= 0
        loop
            exitwhen i >= 12
            if ( String__PLAYER_COLORS[i] == pc ) then
                return String__PLAYER_COLOR_STRINGS[i]
            endif
            set i=i + 1
        endloop
        return String__PLAYER_COLOR_STRINGS[12]
    endfunction

    function GetPlayerColorString takes player p returns string
        return PlayerColor2ColorString(GetPlayerColor(p))
    endfunction

    function GetPlayerNameColored takes player p returns string
        return (PlayerColor2ColorString(GetPlayerColor((p)))) + GetPlayerName(p) + String__COLOR_ENDING // INLINED!!
    endfunction


    //please use responsibly
    function RemoveColorCode takes string mainString returns string
        local integer msLength= StringLength(mainString)
        if ( msLength < 12 ) then
            return mainString
        endif
        return SubString(mainString, 10, msLength - 2)
    endfunction

    function IBase2S takes integer base10Num,integer newBase returns string
        local integer placeNum
        local string newBaseString= ""
        loop
            exitwhen base10Num == 0
            set placeNum=ModuloInteger(base10Num, newBase)
            set newBaseString=SubString(String__HEX_CHARS, placeNum, placeNum + 1) + newBaseString
            set base10Num=base10Num / newBase
        endloop
        if ( newBaseString == "" ) then
            return "0"
        endif
        return newBaseString
    endfunction

    function SBase2I takes string oldBaseString,integer oldBase returns integer
        local integer base10Num= 0
        local integer placeNum
        local integer placeIndex= 0
        local integer i= StringLength(oldBaseString) - 1
        loop
            exitwhen i < 0
            set placeNum=FindLastIndexFrom(String__HEX_CHARS , SubString(oldBaseString, i, i + 1) , oldBase - 1)
            set base10Num=base10Num + placeNum * R2I(Pow(oldBase, placeIndex))
            set placeIndex=placeIndex + 1
            set i=i - 1
        endloop
        return base10Num
    endfunction

    function ConvertRGBToColorString takes integer red,integer green,integer blue returns string
        local string RR
        local string GG
        local string BB
        if ( red > 255 ) then
            set red=255
        endif
        if ( green > 255 ) then
            set green=255
        endif
        if ( blue > 255 ) then
            set blue=255
        endif
        set RR=IBase2S(red , 16)
        set GG=IBase2S(green , 16)
        set BB=IBase2S(blue , 16)
        if ( StringLength(RR) < 2 ) then
            set RR="0" + RR
        endif
        if ( StringLength(GG) < 2 ) then
            set GG="0" + GG
        endif
        if ( StringLength(BB) < 2 ) then
            set BB="0" + BB
        endif
        return "|cff" + RR + GG + BB
    endfunction

    function GetColoredString takes string str,integer r,integer g,integer b returns string
        return ConvertRGBToColorString(r , g , b) + str + String__COLOR_ENDING
    endfunction


//----------------------CHAT EVENT FUNCTIONS------------------------------

    function RemoveString takes string mainString,string toRemove returns string
        local integer i= 0
        local string currentString
        local integer msLength= StringLength(mainString)
        local integer trLength= StringLength(toRemove)
        if ( trLength > msLength ) then
            return mainString
        endif
        loop
            exitwhen i + trLength > msLength
            set currentString=SubString(mainString, i, i + trLength)
            if ( currentString == toRemove ) then
                if ( i + trLength <= msLength ) then
                    set mainString=SubString(mainString, 0, i) + SubString(mainString, i + trLength, msLength)
                else
                    set mainString=SubString(mainString, 0, i)
                endif
                set i=i - trLength
            endif
            set i=i + 1
        endloop
        return mainString
    endfunction

    function NumOccurances takes string mainString,string stringToFind returns integer
        local integer count= 0
        local integer i= 0
        local integer msLength= StringLength(mainString)
        local integer sfLength= StringLength(stringToFind)
        loop
            exitwhen ( i + sfLength ) > msLength
            if ( SubString(mainString, i, i + sfLength) == stringToFind ) then
                set count=count + 1
            endif
            set i=i + 1
        endloop
        return count
    endfunction

    function S2B takes string word returns boolean
        if ( word == "true" ) then
            return true
        endif
        return false
    endfunction 

    function S2Player takes string word returns player
        return Player(S2I(SubString(word, 1, StringLength(word))))
    endfunction
  
    function S2RawCode takes string str returns integer
        local integer rawCode= 0
        local integer placeNum
        local integer placeIndex= 0
        local integer i= StringLength(str) - 1
        loop
            exitwhen i < 0
            set placeNum=String__MIN_RAW_CODE + (FindIndexFrom((String__RAW_CHARS ) , ( SubString(str, i, i + 1)) , 0)) // INLINED!!
            //the char at index 0 of RAW_CHARS has ASCII value 32, so we need to offset each FindIndex by 32.
            set rawCode=rawCode + placeNum * R2I(Pow(256., placeIndex))
            set placeIndex=placeIndex + 1
            set i=i - 1
        endloop
        return rawCode
    endfunction

//-----------------------DEBUG FUNCTIONS-------------------------

    function B2S takes boolean bool returns string
        if ( bool ) then
            return "true"
        endif
        return "false"
    endfunction

    function Player2S takes player p returns string
        return "Player(" + I2S(GetPlayerId(p)) + ")"
    endfunction

    function Unit2S takes unit u returns string
        return GetUnitName(u) + "_" + I2S(GetHandleId(u) - 0x100000)
    endfunction

    function RawCode2S takes integer rawCode returns string
        local integer placeNum
        local string str= ""
        if ( rawCode < String__MIN_RAW_CODE ) then
            return str
        endif
        loop
            exitwhen rawCode == 0
            set placeNum=ModuloInteger(rawCode, 256) - String__MIN_RAW_CODE
            set str=SubString(String__RAW_CHARS, placeNum, placeNum + 1) + str
            set rawCode=rawCode / 256
        endloop
        return str
    endfunction

//library String ends
//library SuperPlague:

    function SuperPlagueEffectAction takes nothing returns nothing
        local location loc= GetUnitLoc(BlzGetEventDamageTarget())
        call SetBlightLoc(Player(PLAYER_NEUTRAL_PASSIVE), loc, 128, true)
        call RemoveLocation(loc)
    endfunction

    function SuperPlagueEffectCondition takes nothing returns boolean
        if ( GetUnitState(BlzGetEventDamageTarget(), UNIT_STATE_LIFE) <= GetEventDamage() and UnitHasBuffBJ(GetTriggerUnit(), 'B01A') ) then
            return true
        endif

        return false
    endfunction

    function SuperPlagueEffect takes nothing returns nothing
        local trigger trig= CreateTrigger()
        call TriggerRegisterAnyUnitEventBJ(trig, EVENT_PLAYER_UNIT_DAMAGED)
        call TriggerAddCondition(trig, Condition(function SuperPlagueEffectCondition))
        call TriggerAddAction(trig, function SuperPlagueEffectAction)
    endfunction


//library SuperPlague ends
//library Table:
   
   
    function s__Table___dex__get_size takes nothing returns integer
        return Table___sizeK
    endfunction
    function s__Table___dex__get_list takes nothing returns integer
        return Table___listK
    endfunction
   
    function s__Table___handles_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___handles_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
   
    function s__Table___agents__setindex takes integer this,integer key,agent value returns nothing
        call SaveAgentHandle(Table___ht, this, key, value)
    endfunction
   
   
   
//Run these textmacros to include the entire hashtable API as wrappers.
//Don't be intimidated by the number of macros - Vexorian's map optimizer is
//supposed to kill functions which inline (all of these functions inline).
//textmacro instance: NEW_ARRAY_BASIC("Real", "Real", "real")
    function s__Table___reals__getindex takes integer this,integer key returns real
        return LoadReal(Table___ht, this, key)
    endfunction
    function s__Table___reals__setindex takes integer this,integer key,real value returns nothing
        call SaveReal(Table___ht, this, key, value)
    endfunction
    function s__Table___reals_has takes integer this,integer key returns boolean
        return HaveSavedReal(Table___ht, this, key)
    endfunction
    function s__Table___reals_remove takes integer this,integer key returns nothing
        call RemoveSavedReal(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY_BASIC("Real", "Real", "real")
//textmacro instance: NEW_ARRAY_BASIC("Boolean", "Boolean", "boolean")
    function s__Table___booleans__getindex takes integer this,integer key returns boolean
        return LoadBoolean(Table___ht, this, key)
    endfunction
    function s__Table___booleans__setindex takes integer this,integer key,boolean value returns nothing
        call SaveBoolean(Table___ht, this, key, value)
    endfunction
    function s__Table___booleans_has takes integer this,integer key returns boolean
        return HaveSavedBoolean(Table___ht, this, key)
    endfunction
    function s__Table___booleans_remove takes integer this,integer key returns nothing
        call RemoveSavedBoolean(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY_BASIC("Boolean", "Boolean", "boolean")
//textmacro instance: NEW_ARRAY_BASIC("String", "Str", "string")
    function s__Table___strings__getindex takes integer this,integer key returns string
        return LoadStr(Table___ht, this, key)
    endfunction
    function s__Table___strings__setindex takes integer this,integer key,string value returns nothing
        call SaveStr(Table___ht, this, key, value)
    endfunction
    function s__Table___strings_has takes integer this,integer key returns boolean
        return HaveSavedString(Table___ht, this, key)
    endfunction
    function s__Table___strings_remove takes integer this,integer key returns nothing
        call RemoveSavedString(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY_BASIC("String", "Str", "string")
//New textmacro to allow table.integer[] syntax for compatibility with textmacros that might desire it.
//textmacro instance: NEW_ARRAY_BASIC("Integer", "Integer", "integer")
    function s__Table___integers__getindex takes integer this,integer key returns integer
        return LoadInteger(Table___ht, this, key)
    endfunction
    function s__Table___integers__setindex takes integer this,integer key,integer value returns nothing
        call SaveInteger(Table___ht, this, key, value)
    endfunction
    function s__Table___integers_has takes integer this,integer key returns boolean
        return HaveSavedInteger(Table___ht, this, key)
    endfunction
    function s__Table___integers_remove takes integer this,integer key returns nothing
        call RemoveSavedInteger(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY_BASIC("Integer", "Integer", "integer")
   
//textmacro instance: NEW_ARRAY("Player", "player")
    function s__Table___players__getindex takes integer this,integer key returns player
        return LoadPlayerHandle(Table___ht, this, key)
    endfunction
    function s__Table___players__setindex takes integer this,integer key,player value returns nothing
        call SavePlayerHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___players_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___players_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Player", "player")
//textmacro instance: NEW_ARRAY("Widget", "widget")
    function s__Table___widgets__getindex takes integer this,integer key returns widget
        return LoadWidgetHandle(Table___ht, this, key)
    endfunction
    function s__Table___widgets__setindex takes integer this,integer key,widget value returns nothing
        call SaveWidgetHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___widgets_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___widgets_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Widget", "widget")
//textmacro instance: NEW_ARRAY("Destructable", "destructable")
    function s__Table___destructables__getindex takes integer this,integer key returns destructable
        return LoadDestructableHandle(Table___ht, this, key)
    endfunction
    function s__Table___destructables__setindex takes integer this,integer key,destructable value returns nothing
        call SaveDestructableHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___destructables_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___destructables_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Destructable", "destructable")
//textmacro instance: NEW_ARRAY("Item", "item")
    function s__Table___items__getindex takes integer this,integer key returns item
        return LoadItemHandle(Table___ht, this, key)
    endfunction
    function s__Table___items__setindex takes integer this,integer key,item value returns nothing
        call SaveItemHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___items_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___items_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Item", "item")
//textmacro instance: NEW_ARRAY("Unit", "unit")
    function s__Table___units__getindex takes integer this,integer key returns unit
        return LoadUnitHandle(Table___ht, this, key)
    endfunction
    function s__Table___units__setindex takes integer this,integer key,unit value returns nothing
        call SaveUnitHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___units_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___units_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Unit", "unit")
//textmacro instance: NEW_ARRAY("Ability", "ability")
    function s__Table___abilitys__getindex takes integer this,integer key returns ability
        return LoadAbilityHandle(Table___ht, this, key)
    endfunction
    function s__Table___abilitys__setindex takes integer this,integer key,ability value returns nothing
        call SaveAbilityHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___abilitys_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___abilitys_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Ability", "ability")
//textmacro instance: NEW_ARRAY("Timer", "timer")
    function s__Table___timers__getindex takes integer this,integer key returns timer
        return LoadTimerHandle(Table___ht, this, key)
    endfunction
    function s__Table___timers__setindex takes integer this,integer key,timer value returns nothing
        call SaveTimerHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___timers_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___timers_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Timer", "timer")
//textmacro instance: NEW_ARRAY("Trigger", "trigger")
    function s__Table___triggers__getindex takes integer this,integer key returns trigger
        return LoadTriggerHandle(Table___ht, this, key)
    endfunction
    function s__Table___triggers__setindex takes integer this,integer key,trigger value returns nothing
        call SaveTriggerHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___triggers_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___triggers_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Trigger", "trigger")
//textmacro instance: NEW_ARRAY("TriggerCondition", "triggercondition")
    function s__Table___triggerconditions__getindex takes integer this,integer key returns triggercondition
        return LoadTriggerConditionHandle(Table___ht, this, key)
    endfunction
    function s__Table___triggerconditions__setindex takes integer this,integer key,triggercondition value returns nothing
        call SaveTriggerConditionHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___triggerconditions_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___triggerconditions_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("TriggerCondition", "triggercondition")
//textmacro instance: NEW_ARRAY("TriggerAction", "triggeraction")
    function s__Table___triggeractions__getindex takes integer this,integer key returns triggeraction
        return LoadTriggerActionHandle(Table___ht, this, key)
    endfunction
    function s__Table___triggeractions__setindex takes integer this,integer key,triggeraction value returns nothing
        call SaveTriggerActionHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___triggeractions_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___triggeractions_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("TriggerAction", "triggeraction")
//textmacro instance: NEW_ARRAY("TriggerEvent", "event")
    function s__Table___events__getindex takes integer this,integer key returns event
        return LoadTriggerEventHandle(Table___ht, this, key)
    endfunction
    function s__Table___events__setindex takes integer this,integer key,event value returns nothing
        call SaveTriggerEventHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___events_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___events_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("TriggerEvent", "event")
//textmacro instance: NEW_ARRAY("Force", "force")
    function s__Table___forces__getindex takes integer this,integer key returns force
        return LoadForceHandle(Table___ht, this, key)
    endfunction
    function s__Table___forces__setindex takes integer this,integer key,force value returns nothing
        call SaveForceHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___forces_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___forces_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Force", "force")
//textmacro instance: NEW_ARRAY("Group", "group")
    function s__Table___groups__getindex takes integer this,integer key returns group
        return LoadGroupHandle(Table___ht, this, key)
    endfunction
    function s__Table___groups__setindex takes integer this,integer key,group value returns nothing
        call SaveGroupHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___groups_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___groups_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Group", "group")
//textmacro instance: NEW_ARRAY("Location", "location")
    function s__Table___locations__getindex takes integer this,integer key returns location
        return LoadLocationHandle(Table___ht, this, key)
    endfunction
    function s__Table___locations__setindex takes integer this,integer key,location value returns nothing
        call SaveLocationHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___locations_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___locations_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Location", "location")
//textmacro instance: NEW_ARRAY("Rect", "rect")
    function s__Table___rects__getindex takes integer this,integer key returns rect
        return LoadRectHandle(Table___ht, this, key)
    endfunction
    function s__Table___rects__setindex takes integer this,integer key,rect value returns nothing
        call SaveRectHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___rects_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___rects_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Rect", "rect")
//textmacro instance: NEW_ARRAY("BooleanExpr", "boolexpr")
    function s__Table___boolexprs__getindex takes integer this,integer key returns boolexpr
        return LoadBooleanExprHandle(Table___ht, this, key)
    endfunction
    function s__Table___boolexprs__setindex takes integer this,integer key,boolexpr value returns nothing
        call SaveBooleanExprHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___boolexprs_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___boolexprs_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("BooleanExpr", "boolexpr")
//textmacro instance: NEW_ARRAY("Sound", "sound")
    function s__Table___sounds__getindex takes integer this,integer key returns sound
        return LoadSoundHandle(Table___ht, this, key)
    endfunction
    function s__Table___sounds__setindex takes integer this,integer key,sound value returns nothing
        call SaveSoundHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___sounds_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___sounds_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Sound", "sound")
//textmacro instance: NEW_ARRAY("Effect", "effect")
    function s__Table___effects__getindex takes integer this,integer key returns effect
        return LoadEffectHandle(Table___ht, this, key)
    endfunction
    function s__Table___effects__setindex takes integer this,integer key,effect value returns nothing
        call SaveEffectHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___effects_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___effects_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Effect", "effect")
//textmacro instance: NEW_ARRAY("UnitPool", "unitpool")
    function s__Table___unitpools__getindex takes integer this,integer key returns unitpool
        return LoadUnitPoolHandle(Table___ht, this, key)
    endfunction
    function s__Table___unitpools__setindex takes integer this,integer key,unitpool value returns nothing
        call SaveUnitPoolHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___unitpools_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___unitpools_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("UnitPool", "unitpool")
//textmacro instance: NEW_ARRAY("ItemPool", "itempool")
    function s__Table___itempools__getindex takes integer this,integer key returns itempool
        return LoadItemPoolHandle(Table___ht, this, key)
    endfunction
    function s__Table___itempools__setindex takes integer this,integer key,itempool value returns nothing
        call SaveItemPoolHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___itempools_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___itempools_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("ItemPool", "itempool")
//textmacro instance: NEW_ARRAY("Quest", "quest")
    function s__Table___quests__getindex takes integer this,integer key returns quest
        return LoadQuestHandle(Table___ht, this, key)
    endfunction
    function s__Table___quests__setindex takes integer this,integer key,quest value returns nothing
        call SaveQuestHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___quests_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___quests_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Quest", "quest")
//textmacro instance: NEW_ARRAY("QuestItem", "questitem")
    function s__Table___questitems__getindex takes integer this,integer key returns questitem
        return LoadQuestItemHandle(Table___ht, this, key)
    endfunction
    function s__Table___questitems__setindex takes integer this,integer key,questitem value returns nothing
        call SaveQuestItemHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___questitems_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___questitems_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("QuestItem", "questitem")
//textmacro instance: NEW_ARRAY("DefeatCondition", "defeatcondition")
    function s__Table___defeatconditions__getindex takes integer this,integer key returns defeatcondition
        return LoadDefeatConditionHandle(Table___ht, this, key)
    endfunction
    function s__Table___defeatconditions__setindex takes integer this,integer key,defeatcondition value returns nothing
        call SaveDefeatConditionHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___defeatconditions_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___defeatconditions_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("DefeatCondition", "defeatcondition")
//textmacro instance: NEW_ARRAY("TimerDialog", "timerdialog")
    function s__Table___timerdialogs__getindex takes integer this,integer key returns timerdialog
        return LoadTimerDialogHandle(Table___ht, this, key)
    endfunction
    function s__Table___timerdialogs__setindex takes integer this,integer key,timerdialog value returns nothing
        call SaveTimerDialogHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___timerdialogs_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___timerdialogs_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("TimerDialog", "timerdialog")
//textmacro instance: NEW_ARRAY("Leaderboard", "leaderboard")
    function s__Table___leaderboards__getindex takes integer this,integer key returns leaderboard
        return LoadLeaderboardHandle(Table___ht, this, key)
    endfunction
    function s__Table___leaderboards__setindex takes integer this,integer key,leaderboard value returns nothing
        call SaveLeaderboardHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___leaderboards_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___leaderboards_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Leaderboard", "leaderboard")
//textmacro instance: NEW_ARRAY("Multiboard", "multiboard")
    function s__Table___multiboards__getindex takes integer this,integer key returns multiboard
        return LoadMultiboardHandle(Table___ht, this, key)
    endfunction
    function s__Table___multiboards__setindex takes integer this,integer key,multiboard value returns nothing
        call SaveMultiboardHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___multiboards_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___multiboards_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Multiboard", "multiboard")
//textmacro instance: NEW_ARRAY("MultiboardItem", "multiboarditem")
    function s__Table___multiboarditems__getindex takes integer this,integer key returns multiboarditem
        return LoadMultiboardItemHandle(Table___ht, this, key)
    endfunction
    function s__Table___multiboarditems__setindex takes integer this,integer key,multiboarditem value returns nothing
        call SaveMultiboardItemHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___multiboarditems_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___multiboarditems_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("MultiboardItem", "multiboarditem")
//textmacro instance: NEW_ARRAY("Trackable", "trackable")
    function s__Table___trackables__getindex takes integer this,integer key returns trackable
        return LoadTrackableHandle(Table___ht, this, key)
    endfunction
    function s__Table___trackables__setindex takes integer this,integer key,trackable value returns nothing
        call SaveTrackableHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___trackables_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___trackables_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Trackable", "trackable")
//textmacro instance: NEW_ARRAY("Dialog", "dialog")
    function s__Table___dialogs__getindex takes integer this,integer key returns dialog
        return LoadDialogHandle(Table___ht, this, key)
    endfunction
    function s__Table___dialogs__setindex takes integer this,integer key,dialog value returns nothing
        call SaveDialogHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___dialogs_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___dialogs_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Dialog", "dialog")
//textmacro instance: NEW_ARRAY("Button", "button")
    function s__Table___buttons__getindex takes integer this,integer key returns button
        return LoadButtonHandle(Table___ht, this, key)
    endfunction
    function s__Table___buttons__setindex takes integer this,integer key,button value returns nothing
        call SaveButtonHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___buttons_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___buttons_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Button", "button")
//textmacro instance: NEW_ARRAY("TextTag", "texttag")
    function s__Table___texttags__getindex takes integer this,integer key returns texttag
        return LoadTextTagHandle(Table___ht, this, key)
    endfunction
    function s__Table___texttags__setindex takes integer this,integer key,texttag value returns nothing
        call SaveTextTagHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___texttags_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___texttags_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("TextTag", "texttag")
//textmacro instance: NEW_ARRAY("Lightning", "lightning")
    function s__Table___lightnings__getindex takes integer this,integer key returns lightning
        return LoadLightningHandle(Table___ht, this, key)
    endfunction
    function s__Table___lightnings__setindex takes integer this,integer key,lightning value returns nothing
        call SaveLightningHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___lightnings_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___lightnings_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Lightning", "lightning")
//textmacro instance: NEW_ARRAY("Image", "image")
    function s__Table___images__getindex takes integer this,integer key returns image
        return LoadImageHandle(Table___ht, this, key)
    endfunction
    function s__Table___images__setindex takes integer this,integer key,image value returns nothing
        call SaveImageHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___images_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___images_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Image", "image")
//textmacro instance: NEW_ARRAY("Ubersplat", "ubersplat")
    function s__Table___ubersplats__getindex takes integer this,integer key returns ubersplat
        return LoadUbersplatHandle(Table___ht, this, key)
    endfunction
    function s__Table___ubersplats__setindex takes integer this,integer key,ubersplat value returns nothing
        call SaveUbersplatHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___ubersplats_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___ubersplats_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Ubersplat", "ubersplat")
//textmacro instance: NEW_ARRAY("Region", "region")
    function s__Table___regions__getindex takes integer this,integer key returns region
        return LoadRegionHandle(Table___ht, this, key)
    endfunction
    function s__Table___regions__setindex takes integer this,integer key,region value returns nothing
        call SaveRegionHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___regions_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___regions_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Region", "region")
//textmacro instance: NEW_ARRAY("FogState", "fogstate")
    function s__Table___fogstates__getindex takes integer this,integer key returns fogstate
        return LoadFogStateHandle(Table___ht, this, key)
    endfunction
    function s__Table___fogstates__setindex takes integer this,integer key,fogstate value returns nothing
        call SaveFogStateHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___fogstates_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___fogstates_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("FogState", "fogstate")
//textmacro instance: NEW_ARRAY("FogModifier", "fogmodifier")
    function s__Table___fogmodifiers__getindex takes integer this,integer key returns fogmodifier
        return LoadFogModifierHandle(Table___ht, this, key)
    endfunction
    function s__Table___fogmodifiers__setindex takes integer this,integer key,fogmodifier value returns nothing
        call SaveFogModifierHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___fogmodifiers_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___fogmodifiers_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("FogModifier", "fogmodifier")
//textmacro instance: NEW_ARRAY("Hashtable", "hashtable")
    function s__Table___hashtables__getindex takes integer this,integer key returns hashtable
        return LoadHashtableHandle(Table___ht, this, key)
    endfunction
    function s__Table___hashtables__setindex takes integer this,integer key,hashtable value returns nothing
        call SaveHashtableHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___hashtables_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___hashtables_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Hashtable", "hashtable")
//textmacro instance: NEW_ARRAY("Frame", "framehandle")
    function s__Table___framehandles__getindex takes integer this,integer key returns framehandle
        return LoadFrameHandle(Table___ht, this, key)
    endfunction
    function s__Table___framehandles__setindex takes integer this,integer key,framehandle value returns nothing
        call SaveFrameHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___framehandles_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___framehandles_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Frame", "framehandle")
   
   
    // Implement modules for intuitive syntax (tb.handle; tb.unit; etc.)
//Implemented from module Table___realm:
    function s__Table__get_real takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___integerm:
    function s__Table__get_integer takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___booleanm:
    function s__Table__get_boolean takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___stringm:
    function s__Table__get_string takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___playerm:
    function s__Table__get_player takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___widgetm:
    function s__Table__get_widget takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___destructablem:
    function s__Table__get_destructable takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___itemm:
    function s__Table__get_item takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___unitm:
    function s__Table__get_unit takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___abilitym:
    function s__Table__get_ability takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___timerm:
    function s__Table__get_timer takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___triggerm:
    function s__Table__get_trigger takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___triggerconditionm:
    function s__Table__get_triggercondition takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___triggeractionm:
    function s__Table__get_triggeraction takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___eventm:
    function s__Table__get_event takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___forcem:
    function s__Table__get_force takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___groupm:
    function s__Table__get_group takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___locationm:
    function s__Table__get_location takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___rectm:
    function s__Table__get_rect takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___boolexprm:
    function s__Table__get_boolexpr takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___soundm:
    function s__Table__get_sound takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___effectm:
    function s__Table__get_effect takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___unitpoolm:
    function s__Table__get_unitpool takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___itempoolm:
    function s__Table__get_itempool takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___questm:
    function s__Table__get_quest takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___questitemm:
    function s__Table__get_questitem takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___defeatconditionm:
    function s__Table__get_defeatcondition takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___timerdialogm:
    function s__Table__get_timerdialog takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___leaderboardm:
    function s__Table__get_leaderboard takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___multiboardm:
    function s__Table__get_multiboard takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___multiboarditemm:
    function s__Table__get_multiboarditem takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___trackablem:
    function s__Table__get_trackable takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___dialogm:
    function s__Table__get_dialog takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___buttonm:
    function s__Table__get_button takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___texttagm:
    function s__Table__get_texttag takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___lightningm:
    function s__Table__get_lightning takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___imagem:
    function s__Table__get_image takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___ubersplatm:
    function s__Table__get_ubersplat takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___regionm:
    function s__Table__get_region takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___fogstatem:
    function s__Table__get_fogstate takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___fogmodifierm:
    function s__Table__get_fogmodifier takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___hashtablem:
    function s__Table__get_hashtable takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___framehandlem:
    function s__Table__get_framehandle takes integer this returns integer
        return this
    endfunction
   
    function s__Table__get_handle takes integer this returns integer
        return this
    endfunction
   
    function s__Table__get_agent takes integer this returns integer
        return this
    endfunction
   
    //set this = tb[GetSpellAbilityId()]
    function s__Table__getindex takes integer this,integer key returns integer
        return LoadInteger(Table___ht, this, key) //return this.integer[key]
    endfunction
   
    //set tb[389034] = 8192
    function s__Table__setindex takes integer this,integer key,integer tb returns nothing
        call SaveInteger(Table___ht, this, key, tb) //set this.integer[key] = tb
    endfunction
   
    //set b = tb.has(2493223)
    function s__Table_has takes integer this,integer key returns boolean
        return HaveSavedInteger(Table___ht, this, key) //return this.integer.has(key)
    endfunction
   
    //call tb.remove(294080)
    function s__Table_remove takes integer this,integer key returns nothing
        call RemoveSavedInteger(Table___ht, this, key) //call this.integer.remove(key)
    endfunction
   
    //Remove all data from a Table instance
    function s__Table_flush takes integer this returns nothing
        call FlushChildHashtable(Table___ht, this)
    endfunction
   
    //local Table tb = Table.create()
    function s__Table_create takes nothing returns integer
        local integer this= (LoadInteger(Table___ht, ((Table___listK)), (0))) // INLINED!!
       
        if this == 0 then
            set this=Table___more + 1
            set Table___more=this
        else
            call SaveInteger(Table___ht, ((Table___listK)), (0), ( (LoadInteger(Table___ht, ((Table___listK)), (this))))) // INLINED!!
            call RemoveSavedInteger(Table___ht, ((Table___listK)), (this)) //Clear hashed memory // INLINED!!
        endif
       
        return this
    endfunction
   
    // Removes all data from a Table instance and recycles its index.
    //
    //     call tb.destroy()
    //
    function s__Table_destroy takes integer this returns nothing
       
        call FlushChildHashtable(Table___ht, (this)) // INLINED!!
       
        call SaveInteger(Table___ht, ((Table___listK)), (this), ( (LoadInteger(Table___ht, ((Table___listK)), (0))))) // INLINED!!
        call SaveInteger(Table___ht, ((Table___listK)), (0), ( this)) // INLINED!!
    endfunction
   
//ignored textmacro command: TABLE_BC_METHODS()
   
//ignored textmacro command: TABLE_BC_STRUCTS()
   
   
    //Returns a new TableArray to do your bidding. Simply use:
    //
    //    local TableArray ta = TableArray[array_size]
    //
    function s__TableArray__staticgetindex takes integer array_size returns integer
        local integer tb= (LoadInteger(Table___ht, ((Table___sizeK)), (array_size))) // INLINED!!
        local integer this= (LoadInteger(Table___ht, (tb), (0))) // INLINED!!
       
       
        if this == 0 then
            set this=Table___less - array_size
            set Table___less=this
        else
            call SaveInteger(Table___ht, (tb), (0), ( (LoadInteger(Table___ht, (tb), (this))))) //Set the last destroyed to the last-last destroyed // INLINED!!
            call RemoveSavedInteger(Table___ht, (tb), (this)) //Clear hashed memory // INLINED!!
        endif
       
        call SaveInteger(Table___ht, ((Table___sizeK)), (this), ( array_size)) //This remembers the array size // INLINED!!
        return this
    endfunction
   
    //Returns the size of the TableArray
    function s__TableArray__get_size takes integer this returns integer
        return (LoadInteger(Table___ht, ((Table___sizeK)), (this))) // INLINED!!
    endfunction
   
    //This magic method enables two-dimensional[array][syntax] for Tables,
    //similar to the two-dimensional utility provided by hashtables them-
    //selves.
    //
    //ta[integer a].unit[integer b] = unit u
    //ta[integer a][integer c] = integer d
    //
    //Inline-friendly when not running in debug mode
    //
    function s__TableArray__getindex takes integer this,integer key returns integer










        return this + key
    endfunction
   
    //Destroys a TableArray without flushing it; I assume you call .flush()
    //if you want it flushed too. This is a public method so that you don't
    //have to loop through all TableArray indices to flush them if you don't
    //need to (ie. if you were flushing all child-keys as you used them).
    //
    function s__TableArray_destroy takes integer this returns nothing
        local integer tb= (LoadInteger(Table___ht, ((Table___sizeK)), ((LoadInteger(Table___ht, ((Table___sizeK)), ((this))))))) // INLINED!!
       
       
        if tb == 0 then
            //Create a Table to index recycled instances with their array size
            set tb=s__Table_create()
            call SaveInteger(Table___ht, ((Table___sizeK)), ((LoadInteger(Table___ht, ((Table___sizeK)), ((this))))), ( tb)) // INLINED!!
        endif
       
        call RemoveSavedInteger(Table___ht, ((Table___sizeK)), (this)) //Clear the array size from hash memory // INLINED!!
       
        call SaveInteger(Table___ht, (tb), (this), ( (LoadInteger(Table___ht, (tb), (0))))) // INLINED!!
        call SaveInteger(Table___ht, (tb), (0), ( this)) // INLINED!!
    endfunction
   
   
    //Avoids hitting the op limit
    function s__TableArray_clean takes nothing returns nothing
        local integer tb= s__TableArray_tempTable
        local integer end= tb + 0x1000
        if end < s__TableArray_tempEnd then
            set s__TableArray_tempTable=end
            call ForForce(bj_FORCE_PLAYER[0], function s__TableArray_clean)
        else
            set end=s__TableArray_tempEnd
        endif
        loop
            call FlushChildHashtable(Table___ht, (tb)) // INLINED!!
            set tb=tb + 1
            exitwhen tb == end
        endloop
    endfunction
   
    //Flushes the TableArray and also destroys it. Doesn't get any more
    //similar to the FlushParentHashtable native than this.
    //
    function s__TableArray_flush takes integer this returns nothing
        set s__TableArray_tempTable=this
        set s__TableArray_tempEnd=this + (LoadInteger(Table___ht, ((Table___sizeK)), ((this)))) // INLINED!!
        call ForForce(bj_FORCE_PLAYER[0], function s__TableArray_clean)
        call s__TableArray_destroy(this)
    endfunction
   
   
//NEW: Added in Table 4.0. A fairly simple struct but allows you to do more
//than that which was previously possible.

    //Enables myHash[parentKey][childKey] syntax.
    //Basically, it creates a Table in the place of the parent key if
    //it didn't already get created earlier.
    function s__HashTable__getindex takes integer this,integer index returns integer
        local integer t= (LoadInteger(Table___ht, ((this)), (index))) // INLINED!!
        if t == 0 then
            set t=s__Table_create()
            call SaveInteger(Table___ht, ((this)), (index), ( t)) //whoops! Forgot that line. I'm out of practice! // INLINED!!
        endif
        return t
    endfunction

    //You need to call this on each parent key that you used if you
    //intend to destroy the HashTable or simply no longer need that key.
    function s__HashTable_remove takes integer this,integer index returns nothing
        local integer t= (LoadInteger(Table___ht, ((this)), (index))) // INLINED!!
        if t != 0 then
            call s__Table_destroy(t)
            call RemoveSavedInteger(Table___ht, ((this)), (index)) // INLINED!!
        endif
    endfunction
   
    //Added in version 4.1
    function s__HashTable_has takes integer this,integer index returns boolean
        return (HaveSavedInteger(Table___ht, ((this)), (index))) // INLINED!!
    endfunction
   
    //HashTables are just fancy Table indices.
    function s__HashTable_destroy takes integer this returns nothing
        call s__Table_destroy((this))
    endfunction
   
    //Like I said above...
    function s__HashTable_create takes nothing returns integer
        return s__Table_create()
    endfunction



//library Table ends
//library TasItemCost:

    //function TasItemCaclCost takes integer itemCode returns nothing
    //function TasItemGetCostGold takes integer itemCode returns integer
    //function TasItemGetCostLumber takes integer itemCode returns integer
        function TasItemCost__ClearItem takes nothing returns nothing
            //call BJDebugMsg("Enum " + GetItemName(GetEnumItem()))
            call RemoveItem(GetEnumItem())
        endfunction
        
        function TasItemCost__ClearItemStart takes nothing returns nothing
            //call BJDebugMsg("ClearItemStart")
            call EnumItemsInRect(TasItemCost__shopRect, null, function TasItemCost__ClearItem)
        endfunction
        function TasItemCost__TasItemCalcDestroy takes nothing returns nothing
            call EnumItemsInRect(TasItemCost__shopRect, null, function TasItemCost__ClearItem) // INLINED!!
            call ShowUnit(TasItemCost__shop, true)
            call RemoveUnit(TasItemCost__shop)
            call RemoveRect(TasItemCost__shopRect)
        endfunction
        function TasItemCost__Start takes nothing returns nothing
            local integer itemCode= TasItemCost__Test[1]
            local integer gold
            local integer lumber
            local item i
            call AddItemToStock(TasItemCost__shop, itemCode, 1, 1)
            call SetPlayerState(TasItemCost__shopOwner, PLAYER_STATE_RESOURCE_GOLD, 99999999)
            call SetPlayerState(TasItemCost__shopOwner, PLAYER_STATE_RESOURCE_LUMBER, 99999999)
            set gold=GetPlayerState(TasItemCost__shopOwner, PLAYER_STATE_RESOURCE_GOLD)
            set lumber=GetPlayerState(TasItemCost__shopOwner, PLAYER_STATE_RESOURCE_LUMBER)
            call IssueNeutralImmediateOrderById(TasItemCost__shopOwner, TasItemCost__shop, itemCode)
            
            call SaveInteger(TasItemHash, itemCode, TasItemCost__HASH_GOLD, gold - GetPlayerState(TasItemCost__shopOwner, PLAYER_STATE_RESOURCE_GOLD))
            call SaveInteger(TasItemHash, itemCode, TasItemCost__HASH_LUMBER, lumber - GetPlayerState(TasItemCost__shopOwner, PLAYER_STATE_RESOURCE_LUMBER))
            set i=CreateItem(itemCode, 0, 0)
            call SaveInteger(TasItemHash, itemCode, TasItemCost__HASH_CHARGE, GetItemCharges(i))
            call RemoveItem(i)
            set i=null
            call RemoveItemFromStock(TasItemCost__shop, itemCode)
            // testing order does not matter much, simple reindex
            set TasItemCost__Test[1]=TasItemCost__Test[TasItemCost__TestCount]
            set TasItemCost__TestCount=TasItemCost__TestCount - 1
            
            call EnumItemsInRect(TasItemCost__shopRect, null, function TasItemCost__ClearItem) // INLINED!!
            if TasItemCost__TestCount > 0 then
                call TasItemCost__Start()
            else
                //call TimerStart(t, 1, false, function ClearItemStart)	
            endif
            
        endfunction
    
        function TasItemCaclCost takes integer itemCode returns nothing
            local item i
            // if there is already data for that itemcode, skip it
            if not HaveSavedInteger(TasItemHash, itemCode, TasItemCost__HASH_GOLD) then
                    // is this a valid itemCode? Create it, if that fails skip testing it
                set i=CreateItem(itemCode, 0, 0)
                if GetHandleId(i) > 0 then
                    call RemoveItem(i)
                    set TasItemCost__TestCount=TasItemCost__TestCount + 1
                    set TasItemCost__Test[TasItemCost__TestCount]=itemCode
                endif
                if TasItemCost__TestCount > 0 then
                    call TasItemCost__Start()
                endif
                set i=null
            endif
        endfunction
            
        function TasItemGetCostGold takes integer itemCode returns integer
            call TasItemCaclCost(itemCode)
            return LoadInteger(TasItemHash, itemCode, TasItemCost__HASH_GOLD)
        endfunction
        function TasItemGetCostLumber takes integer itemCode returns integer
            call TasItemCaclCost(itemCode)
            return LoadInteger(TasItemHash, itemCode, TasItemCost__HASH_LUMBER)
        endfunction
        function TasItemGetCharges takes integer itemCode returns integer
            call TasItemCaclCost(itemCode)
            return LoadInteger(TasItemHash, itemCode, TasItemCost__HASH_CHARGE)
        endfunction
        function TasItemCost__Init takes nothing returns nothing
            set TasItemCost__shopRect=Rect(0, 0, TasItemCost__shopRectSize, TasItemCost__shopRectSize)
            set TasItemCost__shop=CreateUnit(TasItemCost__shopOwner, 'nmrk', TasItemCost__shopRectX, TasItemCost__shopRectY, 0)
            call SetUnitX(TasItemCost__shop, TasItemCost__shopRectX)
            call SetUnitY(TasItemCost__shop, TasItemCost__shopRectY)
            call MoveRectTo(TasItemCost__shopRect, TasItemCost__shopRectX, TasItemCost__shopRectY)
            call UnitAddAbility(TasItemCost__shop, 'AInv')
            call IssueNeutralTargetOrder(TasItemCost__shopOwner, TasItemCost__shop, "smart", TasItemCost__shop)
            call ShowUnit(TasItemCost__shop, false)
        endfunction

//library TasItemCost ends
//library IsRightClick:
// function IsRightClick takes player p returns boolean
// tells you if the last click was current a rightclick, meant to be used inside a FrameEventMouseUp
    function IsRightClick takes player p returns boolean
        return IsRightClick__isRight[GetPlayerId(p)]
    endfunction
    function IsRightClick__Action takes nothing returns nothing
        set IsRightClick__isRight[GetPlayerId(GetTriggerPlayer())]=BlzGetTriggerPlayerMouseButton() == MOUSE_BUTTON_TYPE_RIGHT
    endfunction
    function IsRightClick__FrameAction takes nothing returns nothing
        // when the game is paused reset the lastClick Flag. This has to be done because EVENT_PLAYER_MOUSE_UP does not trigger during Pause
        local integer i= 0
        loop
            set IsRightClick__isRight[i]=false
            set i=i + 1
            exitwhen i == bj_MAX_PLAYERS
        endloop
    endfunction
    function IsRightClick__FrameInit takes nothing returns nothing
        call BlzTriggerRegisterFrameEvent(IsRightClick__frameTrigger, BlzGetFrameByName("PauseButton", 0), FRAMEEVENT_CONTROL_CLICK)
    endfunction
    function IsRightClick__Init takes nothing returns nothing
        local trigger t= CreateTrigger()
        local integer i= 0
        set IsRightClick__frameTrigger=CreateTrigger()
        call TriggerAddAction(IsRightClick__frameTrigger, function IsRightClick__FrameAction)
        call TriggerAddAction(t, function IsRightClick__Action)
        loop
            call TriggerRegisterPlayerEvent(t, Player(i), EVENT_PLAYER_MOUSE_UP)
            set i=i + 1
            exitwhen i == bj_MAX_PLAYERS
        endloop

            call TriggerAddAction(FrameLoader__actionTrigger, (function IsRightClick__FrameInit)) // INLINED!!

	call TriggerAddAction(FrameLoader__actionTrigger, (function IsRightClick__FrameInit)) // INLINED!!
    endfunction

//library IsRightClick ends
//library ItemHolder:
    function ItemHolder_get takes item i returns unit
        return (LoadUnitHandle(Table___ht, (((ItemHolder__data))), (GetHandleId(i)))) // INLINED!!
    endfunction
    function ItemHolder__gain takes nothing returns nothing
        call SaveUnitHandle(Table___ht, (((ItemHolder__data))), (GetHandleId(GetManipulatedItem())), ( GetTriggerUnit())) // INLINED!!

    endfunction
    function ItemHolder__lose takes nothing returns nothing
        call SaveUnitHandle(Table___ht, (((ItemHolder__data))), (GetHandleId(GetManipulatedItem())), ( null)) // INLINED!!
    endfunction
    function ItemHolder__init_function takes nothing returns nothing
        local trigger t
        set ItemHolder__data=s__Table_create()
        set t=CreateTrigger()
        call TriggerAddAction(t, function ItemHolder__gain)
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_PICKUP_ITEM)

        set t=CreateTrigger()
        call TriggerAddAction(t, function ItemHolder__lose)
        call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_DROP_ITEM)
    endfunction

//library ItemHolder ends
//library LibAFKSystem:
    
    function LibAFKSystem__CheckAFK takes nothing returns nothing
        local integer p= 1

        loop
            exitwhen p > 6
            set currentGold[p]=GetPlayerState(Player(p - 1), PLAYER_STATE_RESOURCE_GOLD)

            if ( currentGold[p] > AFK_GOLD_THRESHOLD and isAFK[p] == false ) then
                set isAFK[p]=true
                call StartTimerBJ(afkTimer[p], false, 30)
                
                if ( GetLocalPlayer() == Player(p - 1) ) then
                    call BlzFrameSetVisible(frameParentAFK, true)
                endif
            endif
            //if(currentGold[p] > 1600) then
            //    call CustomDefeatBJ(Player(p - 1), "You were AFK")
            //    call DisplayTextToForce(GetPlayersAll(), GetShortPlayerName(Player(p - 1)) + " was AFK")
            //endif

            set p=p + 1
        endloop
    endfunction

    function LibAFKSystem__BtnNotAFK_OnClick takes nothing returns nothing
        local integer p= GetConvertedPlayerId(GetTriggerPlayer())

        set isAFK[p]=false
        call PauseTimer(afkTimer[p])

        if ( GetLocalPlayer() == GetTriggerPlayer() ) then
            call BlzFrameSetVisible(frameParentAFK, false)
        endif
    endfunction

    function KickPlayerFromGame takes nothing returns nothing
        local integer p= 1

        loop
            exitwhen p > 6
            
            if ( GetExpiredTimer() == afkTimer[p] ) then
                call CustomDefeatBJ(Player(p - 1), "You were AFK")
                set udg_EventPlayerLeave=Player(p - 1)
                set udg_PlayerLeavesEventReal=1.00
                call DisplayTextToForce(GetPlayersAll(), s__pColor[p] + GetShortPlayerName(Player(p - 1)) + "|r was AFK")
            endif

            set p=p + 1
        endloop

    endfunction

    function LibAFKSystem__init takes nothing returns nothing
        local trigger trig
        local integer p= 1

        if ( bj_isSinglePlayer == true ) then
            return
        endif
            

        // AFK check
        set trigAFKCheck=CreateTrigger()
        call TriggerRegisterTimerEventPeriodic(trigAFKCheck, 30)
        call TriggerAddAction(trigAFKCheck, function LibAFKSystem__CheckAFK)

        
        set frameParentAFK=BlzCreateFrameByType("TEXT", "", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), "", 0)
        call BlzFrameSetAbsPoint(frameParentAFK, FRAMEPOINT_CENTER, 0.4, 0.3)
        call BlzFrameSetLevel(frameParentAFK, 10)
        call BlzFrameSetVisible(frameParentAFK, false)

        set frameAFKSplat=BlzCreateFrameByType("BACKDROP", "", frameParentAFK, "", 0)
        call BlzFrameSetSize(frameAFKSplat, 0.3, 0.3)
        call BlzFrameSetAbsPoint(frameAFKSplat, FRAMEPOINT_CENTER, 0.41, 0.31)
        call BlzFrameSetTexture(frameAFKSplat, "war3mapImported\\splat.dds", 0, true)

        set frameParentAFKText=BlzCreateFrameByType("TEXT", "", frameParentAFK, "", 0)
        call BlzFrameSetAbsPoint(frameParentAFKText, FRAMEPOINT_CENTER, 0.4, 0.33)
        call BlzFrameSetText(frameParentAFKText, "|cffff3714AFK WARNING|r")
        call BlzFrameSetScale(frameParentAFKText, 1.5)

        set btnNotAfk=BlzCreateFrame("ScriptDialogButton", frameParentAFK, 0, 0)
        call BlzFrameSetSize(btnNotAfk, 0.15, 0.05)
        call BlzFrameSetAbsPoint(btnNotAfk, FRAMEPOINT_CENTER, 0.4, 0.3)
        call BlzFrameSetText(btnNotAfk, "I'm not AFK")

        // Not AFK button click
        set trig=CreateTrigger()
        call BlzTriggerRegisterFrameEvent(trig, btnNotAfk, FRAMEEVENT_CONTROL_CLICK)
        call TriggerAddAction(trig, function LibAFKSystem__BtnNotAFK_OnClick)

        // AFK timer init
        loop
            exitwhen p > 6
            set afkTimer[p]=CreateTimer()
            set trig=CreateTrigger()
            call TriggerRegisterTimerExpireEvent(trig, afkTimer[p])
            call TriggerAddAction(trig, function KickPlayerFromGame)
            
            set p=p + 1
        endloop

    endfunction


//library LibAFKSystem ends
//library MultidimensionalArray:










    function MultidimensionalArray__AllocateIndex takes integer this,integer index returns integer
        return s__HashTable__getindex((this),index)
    endfunction

    
        function s__Array_create takes nothing returns integer





                return s__Table_create()

        endfunction
    

    
    

    


        function s__MultidimensionalArray__Type__set_agent takes integer this,agent value returns nothing
            call SaveAgentHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction


//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("integer")
        function s__MultidimensionalArray__Type__get_integer takes integer this returns integer
            return (LoadInteger(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_integer takes integer this,integer value returns nothing
            call SaveInteger(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("integer")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("real")
        function s__MultidimensionalArray__Type__get_real takes integer this returns real
            return (LoadReal(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_real takes integer this,real value returns nothing
            call SaveReal(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), (( value)*1.0)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("real")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("string")
        function s__MultidimensionalArray__Type__get_string takes integer this returns string
            return (LoadStr(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_string takes integer this,string value returns nothing
            call SaveStr(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("string")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("boolean")
        function s__MultidimensionalArray__Type__get_boolean takes integer this returns boolean
            return (LoadBoolean(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_boolean takes integer this,boolean value returns nothing
            call SaveBoolean(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("boolean")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("player")
        function s__MultidimensionalArray__Type__get_player takes integer this returns player
            return (LoadPlayerHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_player takes integer this,player value returns nothing
            call SavePlayerHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("player")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("widget")
        function s__MultidimensionalArray__Type__get_widget takes integer this returns widget
            return (LoadWidgetHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_widget takes integer this,widget value returns nothing
            call SaveWidgetHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("widget")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("destructable")
        function s__MultidimensionalArray__Type__get_destructable takes integer this returns destructable
            return (LoadDestructableHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_destructable takes integer this,destructable value returns nothing
            call SaveDestructableHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("destructable")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("item")
        function s__MultidimensionalArray__Type__get_item takes integer this returns item
            return (LoadItemHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_item takes integer this,item value returns nothing
            call SaveItemHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("item")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("unit")
        function s__MultidimensionalArray__Type__get_unit takes integer this returns unit
            return (LoadUnitHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_unit takes integer this,unit value returns nothing
            call SaveUnitHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("unit")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("ability")
        function s__MultidimensionalArray__Type__get_ability takes integer this returns ability
            return (LoadAbilityHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_ability takes integer this,ability value returns nothing
            call SaveAbilityHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("ability")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("timer")
        function s__MultidimensionalArray__Type__get_timer takes integer this returns timer
            return (LoadTimerHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_timer takes integer this,timer value returns nothing
            call SaveTimerHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("timer")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("trigger")
        function s__MultidimensionalArray__Type__get_trigger takes integer this returns trigger
            return (LoadTriggerHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_trigger takes integer this,trigger value returns nothing
            call SaveTriggerHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("trigger")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("triggercondition")
        function s__MultidimensionalArray__Type__get_triggercondition takes integer this returns triggercondition
            return (LoadTriggerConditionHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_triggercondition takes integer this,triggercondition value returns nothing
            call SaveTriggerConditionHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("triggercondition")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("triggeraction")
        function s__MultidimensionalArray__Type__get_triggeraction takes integer this returns triggeraction
            return (LoadTriggerActionHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_triggeraction takes integer this,triggeraction value returns nothing
            call SaveTriggerActionHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("triggeraction")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("event")
        function s__MultidimensionalArray__Type__get_event takes integer this returns event
            return (LoadTriggerEventHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_event takes integer this,event value returns nothing
            call SaveTriggerEventHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("event")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("force")
        function s__MultidimensionalArray__Type__get_force takes integer this returns force
            return (LoadForceHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_force takes integer this,force value returns nothing
            call SaveForceHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("force")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("group")
        function s__MultidimensionalArray__Type__get_group takes integer this returns group
            return (LoadGroupHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_group takes integer this,group value returns nothing
            call SaveGroupHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("group")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("location")
        function s__MultidimensionalArray__Type__get_location takes integer this returns location
            return (LoadLocationHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_location takes integer this,location value returns nothing
            call SaveLocationHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("location")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("rect")
        function s__MultidimensionalArray__Type__get_rect takes integer this returns rect
            return (LoadRectHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_rect takes integer this,rect value returns nothing
            call SaveRectHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("rect")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("boolexpr")
        function s__MultidimensionalArray__Type__get_boolexpr takes integer this returns boolexpr
            return (LoadBooleanExprHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_boolexpr takes integer this,boolexpr value returns nothing
            call SaveBooleanExprHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("boolexpr")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("sound")
        function s__MultidimensionalArray__Type__get_sound takes integer this returns sound
            return (LoadSoundHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_sound takes integer this,sound value returns nothing
            call SaveSoundHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("sound")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("effect")
        function s__MultidimensionalArray__Type__get_effect takes integer this returns effect
            return (LoadEffectHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_effect takes integer this,effect value returns nothing
            call SaveEffectHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("effect")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("unitpool")
        function s__MultidimensionalArray__Type__get_unitpool takes integer this returns unitpool
            return (LoadUnitPoolHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_unitpool takes integer this,unitpool value returns nothing
            call SaveUnitPoolHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("unitpool")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("itempool")
        function s__MultidimensionalArray__Type__get_itempool takes integer this returns itempool
            return (LoadItemPoolHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_itempool takes integer this,itempool value returns nothing
            call SaveItemPoolHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("itempool")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("quest")
        function s__MultidimensionalArray__Type__get_quest takes integer this returns quest
            return (LoadQuestHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_quest takes integer this,quest value returns nothing
            call SaveQuestHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("quest")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("questitem")
        function s__MultidimensionalArray__Type__get_questitem takes integer this returns questitem
            return (LoadQuestItemHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_questitem takes integer this,questitem value returns nothing
            call SaveQuestItemHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("questitem")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("defeatcondition")
        function s__MultidimensionalArray__Type__get_defeatcondition takes integer this returns defeatcondition
            return (LoadDefeatConditionHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_defeatcondition takes integer this,defeatcondition value returns nothing
            call SaveDefeatConditionHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("defeatcondition")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("timerdialog")
        function s__MultidimensionalArray__Type__get_timerdialog takes integer this returns timerdialog
            return (LoadTimerDialogHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_timerdialog takes integer this,timerdialog value returns nothing
            call SaveTimerDialogHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("timerdialog")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("leaderboard")
        function s__MultidimensionalArray__Type__get_leaderboard takes integer this returns leaderboard
            return (LoadLeaderboardHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_leaderboard takes integer this,leaderboard value returns nothing
            call SaveLeaderboardHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("leaderboard")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("multiboard")
        function s__MultidimensionalArray__Type__get_multiboard takes integer this returns multiboard
            return (LoadMultiboardHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_multiboard takes integer this,multiboard value returns nothing
            call SaveMultiboardHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("multiboard")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("multiboarditem")
        function s__MultidimensionalArray__Type__get_multiboarditem takes integer this returns multiboarditem
            return (LoadMultiboardItemHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_multiboarditem takes integer this,multiboarditem value returns nothing
            call SaveMultiboardItemHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("multiboarditem")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("trackable")
        function s__MultidimensionalArray__Type__get_trackable takes integer this returns trackable
            return (LoadTrackableHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_trackable takes integer this,trackable value returns nothing
            call SaveTrackableHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("trackable")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("dialog")
        function s__MultidimensionalArray__Type__get_dialog takes integer this returns dialog
            return (LoadDialogHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_dialog takes integer this,dialog value returns nothing
            call SaveDialogHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("dialog")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("button")
        function s__MultidimensionalArray__Type__get_button takes integer this returns button
            return (LoadButtonHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_button takes integer this,button value returns nothing
            call SaveButtonHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("button")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("texttag")
        function s__MultidimensionalArray__Type__get_texttag takes integer this returns texttag
            return (LoadTextTagHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_texttag takes integer this,texttag value returns nothing
            call SaveTextTagHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("texttag")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("lightning")
        function s__MultidimensionalArray__Type__get_lightning takes integer this returns lightning
            return (LoadLightningHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_lightning takes integer this,lightning value returns nothing
            call SaveLightningHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("lightning")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("image")
        function s__MultidimensionalArray__Type__get_image takes integer this returns image
            return (LoadImageHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_image takes integer this,image value returns nothing
            call SaveImageHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("image")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("ubersplat")
        function s__MultidimensionalArray__Type__get_ubersplat takes integer this returns ubersplat
            return (LoadUbersplatHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_ubersplat takes integer this,ubersplat value returns nothing
            call SaveUbersplatHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("ubersplat")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("region")
        function s__MultidimensionalArray__Type__get_region takes integer this returns region
            return (LoadRegionHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_region takes integer this,region value returns nothing
            call SaveRegionHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("region")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("fogstate")
        function s__MultidimensionalArray__Type__get_fogstate takes integer this returns fogstate
            return (LoadFogStateHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_fogstate takes integer this,fogstate value returns nothing
            call SaveFogStateHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("fogstate")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("fogmodifier")
        function s__MultidimensionalArray__Type__get_fogmodifier takes integer this returns fogmodifier
            return (LoadFogModifierHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_fogmodifier takes integer this,fogmodifier value returns nothing
            call SaveFogModifierHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("fogmodifier")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("hashtable")
        function s__MultidimensionalArray__Type__get_hashtable takes integer this returns hashtable
            return (LoadHashtableHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_hashtable takes integer this,hashtable value returns nothing
            call SaveHashtableHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("hashtable")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("framehandle")
        function s__MultidimensionalArray__Type__get_framehandle takes integer this returns framehandle
            return (LoadFrameHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))))) // INLINED!!
        endfunction
        function s__MultidimensionalArray__Type__set_framehandle takes integer this,framehandle value returns nothing
            call SaveFrameHandle(Table___ht, ((((this)))), ((LoadInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index)))), ( value)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_OPERATORS("framehandle")


//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_METHODS("Integer", "integer")
        function s__Array1D_hasInteger takes integer this,integer index returns boolean
            return (HaveSavedInteger(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Array1D_removeInteger takes integer this,integer index returns nothing
            call RemoveSavedInteger(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_METHODS("Integer", "integer")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_METHODS("Real", "real")
        function s__Array1D_hasReal takes integer this,integer index returns boolean
            return (HaveSavedReal(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Array1D_removeReal takes integer this,integer index returns nothing
            call RemoveSavedReal(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_METHODS("Real", "real")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_METHODS("String", "string")
        function s__Array1D_hasString takes integer this,integer index returns boolean
            return (HaveSavedString(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Array1D_removeString takes integer this,integer index returns nothing
            call RemoveSavedString(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_METHODS("String", "string")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_METHODS("Boolean", "boolean")
        function s__Array1D_hasBoolean takes integer this,integer index returns boolean
            return (HaveSavedBoolean(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Array1D_removeBoolean takes integer this,integer index returns nothing
            call RemoveSavedBoolean(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_METHODS("Boolean", "boolean")
//textmacro instance: GENERIC_DIMENSIONAL_ARRAY_METHODS("Handle", "handle")
        function s__Array1D_hasHandle takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Array1D_removeHandle takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
//end of: GENERIC_DIMENSIONAL_ARRAY_METHODS("Handle", "handle")
        function s__Array1D_has takes integer this,integer index returns boolean
            return (HaveSavedInteger(Table___ht, (((((this))))), ((index)))) or (HaveSavedReal(Table___ht, (((((this))))), ((index)))) or (HaveSavedString(Table___ht, (((((this))))), ((index)))) or (HaveSavedBoolean(Table___ht, (((((this))))), ((index)))) or (HaveSavedHandle(Table___ht, (((((this))))), ((index)))) // INLINED!!
        endfunction
        function s__Array1D_remove takes integer this,integer index returns nothing
            call RemoveSavedInteger(Table___ht, (((((this))))), ((index))) // INLINED!!
            call RemoveSavedReal(Table___ht, (((((this))))), ((index))) // INLINED!!
            call RemoveSavedString(Table___ht, (((((this))))), ((index))) // INLINED!!
            call RemoveSavedBoolean(Table___ht, (((((this))))), ((index))) // INLINED!!
            call RemoveSavedHandle(Table___ht, (((((this))))), ((index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Array1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Array1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Array1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Array1D__getindex takes integer this,integer index returns integer
            call SaveInteger(Table___ht, ((this)), (s__MultidimensionalArray__Type_index), ( index)) // INLINED!!
            return this
        endfunction


//textmacro instance: NEW_DIMENSIONAL_ARRAY_STRUCT("2", "1")
//Implemented from module MultidimensionalArray__Methods:
        function s__Array2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Array2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Array2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Array2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Array2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Array2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY_STRUCT("2", "1")
//textmacro instance: NEW_DIMENSIONAL_ARRAY_STRUCT("3", "2")
//Implemented from module MultidimensionalArray__Methods:
        function s__Array3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Array3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Array3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Array3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Array3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Array3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY_STRUCT("3", "2")
//textmacro instance: NEW_DIMENSIONAL_ARRAY_STRUCT("4", "3")
//Implemented from module MultidimensionalArray__Methods:
        function s__Array4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Array4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Array4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Array4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Array4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Array4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY_STRUCT("4", "3")
//textmacro instance: NEW_DIMENSIONAL_ARRAY_STRUCT("5", "4")
//Implemented from module MultidimensionalArray__Methods:
        function s__Array5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Array5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Array5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Array5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Array5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Array5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY_STRUCT("5", "4")
    // If you want to increase the maximum number of available
    // dimensions, just run the textmacros above once again like:
    // runtextmacro NEW_DIMENSIONAL_ARRAY_STRUCT("LAST_MAX_DIM + 1", "LAST_MAX_DIM")
    

    
    // If you want to increase the maximum number of available
    // dimensions, just copy the last struct above and increase the
    // number of dimension in the struct name and the returned struct
    // of the operator [] by 1.
    

    
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Integer", "integer")
        function s__Integer1D_remove takes integer this,integer index returns nothing
            call RemoveSavedInteger(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Integer1D_has takes integer this,integer index returns boolean
            return (HaveSavedInteger(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Integer1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Integer1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Integer1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Integer1D__getindex takes integer this,integer index returns integer
            return (LoadInteger(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Integer1D__setindex takes integer this,integer index,integer value returns nothing
            call SaveInteger(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Integer2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Integer2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Integer2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Integer2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Integer2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Integer2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Integer3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Integer3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Integer3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Integer3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Integer3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Integer3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Integer4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Integer4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Integer4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Integer4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Integer4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Integer4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Integer5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Integer5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Integer5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Integer5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Integer5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Integer5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Integer", "integer")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Real", "real")
        function s__Real1D_remove takes integer this,integer index returns nothing
            call RemoveSavedReal(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Real1D_has takes integer this,integer index returns boolean
            return (HaveSavedReal(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Real1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Real1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Real1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Real1D__getindex takes integer this,integer index returns real
            return (LoadReal(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Real1D__setindex takes integer this,integer index,real value returns nothing
            call SaveReal(Table___ht, ((((this)))), (index), (( value)*1.0)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Real2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Real2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Real2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Real2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Real2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Real2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Real3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Real3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Real3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Real3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Real3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Real3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Real4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Real4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Real4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Real4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Real4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Real4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Real5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Real5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Real5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Real5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Real5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Real5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Real", "real")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Str", "string")
        function s__Str1D_remove takes integer this,integer index returns nothing
            call RemoveSavedString(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Str1D_has takes integer this,integer index returns boolean
            return (HaveSavedString(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Str1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Str1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Str1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Str1D__getindex takes integer this,integer index returns string
            return (LoadStr(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Str1D__setindex takes integer this,integer index,string value returns nothing
            call SaveStr(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Str2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Str2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Str2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Str2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Str2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Str2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Str3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Str3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Str3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Str3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Str3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Str3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Str4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Str4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Str4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Str4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Str4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Str4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Str5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Str5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Str5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Str5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Str5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Str5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Str", "string")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Boolean", "boolean")
        function s__Boolean1D_remove takes integer this,integer index returns nothing
            call RemoveSavedBoolean(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Boolean1D_has takes integer this,integer index returns boolean
            return (HaveSavedBoolean(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Boolean1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Boolean1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Boolean1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Boolean1D__getindex takes integer this,integer index returns boolean
            return (LoadBoolean(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Boolean1D__setindex takes integer this,integer index,boolean value returns nothing
            call SaveBoolean(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Boolean2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Boolean2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Boolean2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Boolean2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Boolean2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Boolean2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Boolean3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Boolean3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Boolean3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Boolean3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Boolean3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Boolean3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Boolean4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Boolean4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Boolean4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Boolean4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Boolean4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Boolean4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Boolean5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Boolean5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Boolean5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Boolean5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Boolean5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Boolean5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Boolean", "boolean")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Player", "player")
        function s__Player1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Player1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Player1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Player1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Player1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Player1D__getindex takes integer this,integer index returns player
            return (LoadPlayerHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Player1D__setindex takes integer this,integer index,player value returns nothing
            call SavePlayerHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Player2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Player2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Player2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Player2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Player2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Player2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Player3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Player3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Player3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Player3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Player3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Player3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Player4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Player4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Player4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Player4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Player4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Player4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Player5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Player5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Player5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Player5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Player5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Player5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Player", "player")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Widget", "widget")
        function s__Widget1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Widget1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Widget1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Widget1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Widget1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Widget1D__getindex takes integer this,integer index returns widget
            return (LoadWidgetHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Widget1D__setindex takes integer this,integer index,widget value returns nothing
            call SaveWidgetHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Widget2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Widget2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Widget2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Widget2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Widget2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Widget2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Widget3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Widget3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Widget3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Widget3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Widget3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Widget3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Widget4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Widget4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Widget4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Widget4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Widget4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Widget4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Widget5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Widget5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Widget5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Widget5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Widget5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Widget5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Widget", "widget")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Destructable", "destructable")
        function s__Destructable1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Destructable1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Destructable1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Destructable1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Destructable1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Destructable1D__getindex takes integer this,integer index returns destructable
            return (LoadDestructableHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Destructable1D__setindex takes integer this,integer index,destructable value returns nothing
            call SaveDestructableHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Destructable2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Destructable2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Destructable2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Destructable2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Destructable2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Destructable2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Destructable3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Destructable3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Destructable3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Destructable3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Destructable3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Destructable3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Destructable4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Destructable4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Destructable4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Destructable4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Destructable4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Destructable4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Destructable5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Destructable5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Destructable5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Destructable5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Destructable5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Destructable5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Destructable", "destructable")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Item", "item")
        function s__Item1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Item1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Item1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Item1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Item1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Item1D__getindex takes integer this,integer index returns item
            return (LoadItemHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Item1D__setindex takes integer this,integer index,item value returns nothing
            call SaveItemHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Item2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Item2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Item2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Item2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Item2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Item2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Item3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Item3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Item3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Item3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Item3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Item3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Item4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Item4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Item4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Item4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Item4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Item4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Item5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Item5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Item5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Item5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Item5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Item5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Item", "item")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Unit", "unit")
        function s__Unit1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Unit1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Unit1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Unit1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Unit1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Unit1D__getindex takes integer this,integer index returns unit
            return (LoadUnitHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Unit1D__setindex takes integer this,integer index,unit value returns nothing
            call SaveUnitHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Unit2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Unit2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Unit2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Unit2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Unit2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Unit2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Unit3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Unit3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Unit3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Unit3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Unit3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Unit3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Unit4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Unit4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Unit4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Unit4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Unit4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Unit4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Unit5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Unit5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Unit5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Unit5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Unit5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Unit5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Unit", "unit")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Ability", "ability")
        function s__Ability1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Ability1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Ability1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Ability1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Ability1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Ability1D__getindex takes integer this,integer index returns ability
            return (LoadAbilityHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Ability1D__setindex takes integer this,integer index,ability value returns nothing
            call SaveAbilityHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Ability2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Ability2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Ability2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Ability2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Ability2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Ability2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Ability3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Ability3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Ability3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Ability3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Ability3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Ability3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Ability4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Ability4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Ability4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Ability4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Ability4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Ability4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Ability5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Ability5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Ability5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Ability5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Ability5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Ability5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Ability", "ability")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Timer", "timer")
        function s__Timer1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Timer1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Timer1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Timer1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Timer1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Timer1D__getindex takes integer this,integer index returns timer
            return (LoadTimerHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Timer1D__setindex takes integer this,integer index,timer value returns nothing
            call SaveTimerHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Timer2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Timer2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Timer2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Timer2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Timer2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Timer2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Timer3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Timer3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Timer3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Timer3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Timer3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Timer3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Timer4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Timer4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Timer4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Timer4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Timer4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Timer4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Timer5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Timer5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Timer5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Timer5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Timer5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Timer5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Timer", "timer")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Trigger", "trigger")
        function s__Trigger1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Trigger1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Trigger1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Trigger1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Trigger1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Trigger1D__getindex takes integer this,integer index returns trigger
            return (LoadTriggerHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Trigger1D__setindex takes integer this,integer index,trigger value returns nothing
            call SaveTriggerHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Trigger2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Trigger2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Trigger2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Trigger2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Trigger2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Trigger2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Trigger3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Trigger3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Trigger3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Trigger3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Trigger3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Trigger3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Trigger4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Trigger4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Trigger4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Trigger4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Trigger4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Trigger4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Trigger5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Trigger5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Trigger5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Trigger5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Trigger5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Trigger5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Trigger", "trigger")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("TriggerCondition", "triggercondition")
        function s__TriggerCondition1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__TriggerCondition1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__TriggerCondition1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__TriggerCondition1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TriggerCondition1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TriggerCondition1D__getindex takes integer this,integer index returns triggercondition
            return (LoadTriggerConditionHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__TriggerCondition1D__setindex takes integer this,integer index,triggercondition value returns nothing
            call SaveTriggerConditionHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__TriggerCondition2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__TriggerCondition2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__TriggerCondition2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__TriggerCondition2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TriggerCondition2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TriggerCondition2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__TriggerCondition3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__TriggerCondition3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__TriggerCondition3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__TriggerCondition3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TriggerCondition3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TriggerCondition3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__TriggerCondition4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__TriggerCondition4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__TriggerCondition4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__TriggerCondition4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TriggerCondition4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TriggerCondition4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__TriggerCondition5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__TriggerCondition5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__TriggerCondition5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__TriggerCondition5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TriggerCondition5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TriggerCondition5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("TriggerCondition", "triggercondition")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("TriggerAction", "triggeraction")
        function s__TriggerAction1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__TriggerAction1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__TriggerAction1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__TriggerAction1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TriggerAction1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TriggerAction1D__getindex takes integer this,integer index returns triggeraction
            return (LoadTriggerActionHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__TriggerAction1D__setindex takes integer this,integer index,triggeraction value returns nothing
            call SaveTriggerActionHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__TriggerAction2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__TriggerAction2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__TriggerAction2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__TriggerAction2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TriggerAction2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TriggerAction2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__TriggerAction3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__TriggerAction3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__TriggerAction3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__TriggerAction3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TriggerAction3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TriggerAction3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__TriggerAction4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__TriggerAction4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__TriggerAction4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__TriggerAction4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TriggerAction4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TriggerAction4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__TriggerAction5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__TriggerAction5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__TriggerAction5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__TriggerAction5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TriggerAction5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TriggerAction5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("TriggerAction", "triggeraction")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("TriggerEvent", "event")
        function s__TriggerEvent1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__TriggerEvent1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__TriggerEvent1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__TriggerEvent1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TriggerEvent1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TriggerEvent1D__getindex takes integer this,integer index returns event
            return (LoadTriggerEventHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__TriggerEvent1D__setindex takes integer this,integer index,event value returns nothing
            call SaveTriggerEventHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__TriggerEvent2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__TriggerEvent2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__TriggerEvent2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__TriggerEvent2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TriggerEvent2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TriggerEvent2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__TriggerEvent3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__TriggerEvent3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__TriggerEvent3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__TriggerEvent3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TriggerEvent3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TriggerEvent3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__TriggerEvent4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__TriggerEvent4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__TriggerEvent4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__TriggerEvent4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TriggerEvent4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TriggerEvent4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__TriggerEvent5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__TriggerEvent5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__TriggerEvent5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__TriggerEvent5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TriggerEvent5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TriggerEvent5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("TriggerEvent", "event")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Force", "force")
        function s__Force1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Force1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Force1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Force1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Force1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Force1D__getindex takes integer this,integer index returns force
            return (LoadForceHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Force1D__setindex takes integer this,integer index,force value returns nothing
            call SaveForceHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Force2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Force2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Force2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Force2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Force2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Force2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Force3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Force3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Force3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Force3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Force3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Force3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Force4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Force4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Force4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Force4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Force4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Force4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Force5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Force5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Force5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Force5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Force5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Force5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Force", "force")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Group", "group")
        function s__Group1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Group1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Group1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Group1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Group1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Group1D__getindex takes integer this,integer index returns group
            return (LoadGroupHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Group1D__setindex takes integer this,integer index,group value returns nothing
            call SaveGroupHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Group2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Group2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Group2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Group2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Group2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Group2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Group3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Group3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Group3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Group3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Group3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Group3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Group4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Group4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Group4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Group4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Group4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Group4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Group5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Group5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Group5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Group5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Group5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Group5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Group", "group")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Location", "location")
        function s__Location1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Location1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Location1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Location1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Location1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Location1D__getindex takes integer this,integer index returns location
            return (LoadLocationHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Location1D__setindex takes integer this,integer index,location value returns nothing
            call SaveLocationHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Location2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Location2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Location2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Location2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Location2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Location2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Location3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Location3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Location3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Location3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Location3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Location3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Location4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Location4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Location4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Location4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Location4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Location4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Location5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Location5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Location5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Location5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Location5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Location5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Location", "location")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Rect", "rect")
        function s__Rect1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Rect1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Rect1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Rect1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Rect1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Rect1D__getindex takes integer this,integer index returns rect
            return (LoadRectHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Rect1D__setindex takes integer this,integer index,rect value returns nothing
            call SaveRectHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Rect2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Rect2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Rect2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Rect2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Rect2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Rect2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Rect3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Rect3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Rect3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Rect3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Rect3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Rect3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Rect4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Rect4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Rect4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Rect4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Rect4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Rect4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Rect5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Rect5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Rect5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Rect5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Rect5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Rect5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Rect", "rect")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("BooleanExpr", "boolexpr")
        function s__BooleanExpr1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__BooleanExpr1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__BooleanExpr1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__BooleanExpr1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__BooleanExpr1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__BooleanExpr1D__getindex takes integer this,integer index returns boolexpr
            return (LoadBooleanExprHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__BooleanExpr1D__setindex takes integer this,integer index,boolexpr value returns nothing
            call SaveBooleanExprHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__BooleanExpr2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__BooleanExpr2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__BooleanExpr2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__BooleanExpr2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__BooleanExpr2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__BooleanExpr2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__BooleanExpr3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__BooleanExpr3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__BooleanExpr3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__BooleanExpr3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__BooleanExpr3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__BooleanExpr3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__BooleanExpr4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__BooleanExpr4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__BooleanExpr4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__BooleanExpr4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__BooleanExpr4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__BooleanExpr4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__BooleanExpr5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__BooleanExpr5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__BooleanExpr5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__BooleanExpr5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__BooleanExpr5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__BooleanExpr5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("BooleanExpr", "boolexpr")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Sound", "sound")
        function s__Sound1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Sound1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Sound1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Sound1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Sound1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Sound1D__getindex takes integer this,integer index returns sound
            return (LoadSoundHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Sound1D__setindex takes integer this,integer index,sound value returns nothing
            call SaveSoundHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Sound2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Sound2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Sound2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Sound2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Sound2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Sound2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Sound3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Sound3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Sound3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Sound3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Sound3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Sound3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Sound4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Sound4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Sound4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Sound4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Sound4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Sound4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Sound5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Sound5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Sound5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Sound5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Sound5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Sound5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Sound", "sound")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Effect", "effect")
        function s__Effect1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Effect1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Effect1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Effect1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Effect1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Effect1D__getindex takes integer this,integer index returns effect
            return (LoadEffectHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Effect1D__setindex takes integer this,integer index,effect value returns nothing
            call SaveEffectHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Effect2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Effect2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Effect2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Effect2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Effect2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Effect2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Effect3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Effect3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Effect3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Effect3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Effect3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Effect3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Effect4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Effect4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Effect4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Effect4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Effect4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Effect4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Effect5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Effect5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Effect5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Effect5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Effect5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Effect5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Effect", "effect")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("UnitPool", "unitpool")
        function s__UnitPool1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__UnitPool1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__UnitPool1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__UnitPool1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__UnitPool1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__UnitPool1D__getindex takes integer this,integer index returns unitpool
            return (LoadUnitPoolHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__UnitPool1D__setindex takes integer this,integer index,unitpool value returns nothing
            call SaveUnitPoolHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__UnitPool2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__UnitPool2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__UnitPool2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__UnitPool2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__UnitPool2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__UnitPool2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__UnitPool3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__UnitPool3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__UnitPool3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__UnitPool3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__UnitPool3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__UnitPool3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__UnitPool4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__UnitPool4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__UnitPool4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__UnitPool4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__UnitPool4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__UnitPool4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__UnitPool5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__UnitPool5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__UnitPool5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__UnitPool5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__UnitPool5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__UnitPool5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("UnitPool", "unitpool")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("ItemPool", "itempool")
        function s__ItemPool1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__ItemPool1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__ItemPool1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__ItemPool1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__ItemPool1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__ItemPool1D__getindex takes integer this,integer index returns itempool
            return (LoadItemPoolHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__ItemPool1D__setindex takes integer this,integer index,itempool value returns nothing
            call SaveItemPoolHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__ItemPool2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__ItemPool2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__ItemPool2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__ItemPool2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__ItemPool2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__ItemPool2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__ItemPool3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__ItemPool3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__ItemPool3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__ItemPool3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__ItemPool3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__ItemPool3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__ItemPool4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__ItemPool4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__ItemPool4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__ItemPool4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__ItemPool4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__ItemPool4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__ItemPool5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__ItemPool5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__ItemPool5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__ItemPool5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__ItemPool5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__ItemPool5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("ItemPool", "itempool")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Quest", "quest")
        function s__Quest1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Quest1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Quest1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Quest1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Quest1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Quest1D__getindex takes integer this,integer index returns quest
            return (LoadQuestHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Quest1D__setindex takes integer this,integer index,quest value returns nothing
            call SaveQuestHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Quest2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Quest2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Quest2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Quest2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Quest2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Quest2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Quest3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Quest3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Quest3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Quest3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Quest3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Quest3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Quest4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Quest4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Quest4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Quest4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Quest4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Quest4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Quest5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Quest5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Quest5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Quest5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Quest5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Quest5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Quest", "quest")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("QuestItem", "questitem")
        function s__QuestItem1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__QuestItem1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__QuestItem1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__QuestItem1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__QuestItem1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__QuestItem1D__getindex takes integer this,integer index returns questitem
            return (LoadQuestItemHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__QuestItem1D__setindex takes integer this,integer index,questitem value returns nothing
            call SaveQuestItemHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__QuestItem2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__QuestItem2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__QuestItem2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__QuestItem2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__QuestItem2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__QuestItem2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__QuestItem3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__QuestItem3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__QuestItem3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__QuestItem3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__QuestItem3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__QuestItem3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__QuestItem4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__QuestItem4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__QuestItem4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__QuestItem4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__QuestItem4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__QuestItem4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__QuestItem5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__QuestItem5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__QuestItem5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__QuestItem5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__QuestItem5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__QuestItem5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("QuestItem", "questitem")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("DefeatCondition", "defeatcondition")
        function s__DefeatCondition1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__DefeatCondition1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__DefeatCondition1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__DefeatCondition1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__DefeatCondition1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__DefeatCondition1D__getindex takes integer this,integer index returns defeatcondition
            return (LoadDefeatConditionHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__DefeatCondition1D__setindex takes integer this,integer index,defeatcondition value returns nothing
            call SaveDefeatConditionHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__DefeatCondition2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__DefeatCondition2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__DefeatCondition2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__DefeatCondition2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__DefeatCondition2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__DefeatCondition2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__DefeatCondition3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__DefeatCondition3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__DefeatCondition3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__DefeatCondition3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__DefeatCondition3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__DefeatCondition3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__DefeatCondition4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__DefeatCondition4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__DefeatCondition4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__DefeatCondition4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__DefeatCondition4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__DefeatCondition4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__DefeatCondition5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__DefeatCondition5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__DefeatCondition5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__DefeatCondition5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__DefeatCondition5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__DefeatCondition5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("DefeatCondition", "defeatcondition")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("TimerDialog", "timerdialog")
        function s__TimerDialog1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__TimerDialog1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__TimerDialog1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__TimerDialog1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TimerDialog1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TimerDialog1D__getindex takes integer this,integer index returns timerdialog
            return (LoadTimerDialogHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__TimerDialog1D__setindex takes integer this,integer index,timerdialog value returns nothing
            call SaveTimerDialogHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__TimerDialog2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__TimerDialog2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__TimerDialog2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__TimerDialog2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TimerDialog2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TimerDialog2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__TimerDialog3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__TimerDialog3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__TimerDialog3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__TimerDialog3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TimerDialog3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TimerDialog3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__TimerDialog4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__TimerDialog4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__TimerDialog4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__TimerDialog4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TimerDialog4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TimerDialog4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__TimerDialog5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__TimerDialog5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__TimerDialog5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__TimerDialog5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TimerDialog5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TimerDialog5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("TimerDialog", "timerdialog")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Leaderboard", "leaderboard")
        function s__Leaderboard1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Leaderboard1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Leaderboard1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Leaderboard1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Leaderboard1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Leaderboard1D__getindex takes integer this,integer index returns leaderboard
            return (LoadLeaderboardHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Leaderboard1D__setindex takes integer this,integer index,leaderboard value returns nothing
            call SaveLeaderboardHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Leaderboard2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Leaderboard2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Leaderboard2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Leaderboard2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Leaderboard2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Leaderboard2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Leaderboard3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Leaderboard3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Leaderboard3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Leaderboard3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Leaderboard3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Leaderboard3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Leaderboard4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Leaderboard4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Leaderboard4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Leaderboard4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Leaderboard4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Leaderboard4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Leaderboard5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Leaderboard5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Leaderboard5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Leaderboard5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Leaderboard5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Leaderboard5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Leaderboard", "leaderboard")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Multiboard", "multiboard")
        function s__Multiboard1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Multiboard1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Multiboard1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Multiboard1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Multiboard1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Multiboard1D__getindex takes integer this,integer index returns multiboard
            return (LoadMultiboardHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Multiboard1D__setindex takes integer this,integer index,multiboard value returns nothing
            call SaveMultiboardHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Multiboard2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Multiboard2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Multiboard2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Multiboard2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Multiboard2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Multiboard2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Multiboard3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Multiboard3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Multiboard3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Multiboard3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Multiboard3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Multiboard3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Multiboard4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Multiboard4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Multiboard4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Multiboard4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Multiboard4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Multiboard4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Multiboard5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Multiboard5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Multiboard5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Multiboard5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Multiboard5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Multiboard5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Multiboard", "multiboard")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("MultiboardItem", "multiboarditem")
        function s__MultiboardItem1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__MultiboardItem1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__MultiboardItem1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__MultiboardItem1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__MultiboardItem1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__MultiboardItem1D__getindex takes integer this,integer index returns multiboarditem
            return (LoadMultiboardItemHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__MultiboardItem1D__setindex takes integer this,integer index,multiboarditem value returns nothing
            call SaveMultiboardItemHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__MultiboardItem2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__MultiboardItem2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__MultiboardItem2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__MultiboardItem2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__MultiboardItem2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__MultiboardItem2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__MultiboardItem3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__MultiboardItem3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__MultiboardItem3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__MultiboardItem3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__MultiboardItem3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__MultiboardItem3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__MultiboardItem4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__MultiboardItem4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__MultiboardItem4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__MultiboardItem4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__MultiboardItem4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__MultiboardItem4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__MultiboardItem5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__MultiboardItem5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__MultiboardItem5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__MultiboardItem5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__MultiboardItem5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__MultiboardItem5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("MultiboardItem", "multiboarditem")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Trackable", "trackable")
        function s__Trackable1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Trackable1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Trackable1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Trackable1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Trackable1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Trackable1D__getindex takes integer this,integer index returns trackable
            return (LoadTrackableHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Trackable1D__setindex takes integer this,integer index,trackable value returns nothing
            call SaveTrackableHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Trackable2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Trackable2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Trackable2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Trackable2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Trackable2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Trackable2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Trackable3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Trackable3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Trackable3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Trackable3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Trackable3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Trackable3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Trackable4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Trackable4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Trackable4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Trackable4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Trackable4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Trackable4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Trackable5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Trackable5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Trackable5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Trackable5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Trackable5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Trackable5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Trackable", "trackable")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Dialog", "dialog")
        function s__Dialog1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Dialog1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Dialog1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Dialog1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Dialog1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Dialog1D__getindex takes integer this,integer index returns dialog
            return (LoadDialogHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Dialog1D__setindex takes integer this,integer index,dialog value returns nothing
            call SaveDialogHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Dialog2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Dialog2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Dialog2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Dialog2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Dialog2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Dialog2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Dialog3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Dialog3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Dialog3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Dialog3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Dialog3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Dialog3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Dialog4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Dialog4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Dialog4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Dialog4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Dialog4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Dialog4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Dialog5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Dialog5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Dialog5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Dialog5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Dialog5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Dialog5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Dialog", "dialog")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Button", "button")
        function s__Button1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Button1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Button1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Button1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Button1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Button1D__getindex takes integer this,integer index returns button
            return (LoadButtonHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Button1D__setindex takes integer this,integer index,button value returns nothing
            call SaveButtonHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Button2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Button2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Button2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Button2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Button2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Button2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Button3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Button3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Button3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Button3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Button3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Button3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Button4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Button4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Button4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Button4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Button4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Button4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Button5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Button5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Button5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Button5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Button5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Button5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Button", "button")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("TextTag", "texttag")
        function s__TextTag1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__TextTag1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__TextTag1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__TextTag1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TextTag1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TextTag1D__getindex takes integer this,integer index returns texttag
            return (LoadTextTagHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__TextTag1D__setindex takes integer this,integer index,texttag value returns nothing
            call SaveTextTagHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__TextTag2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__TextTag2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__TextTag2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__TextTag2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TextTag2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TextTag2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__TextTag3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__TextTag3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__TextTag3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__TextTag3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TextTag3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TextTag3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__TextTag4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__TextTag4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__TextTag4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__TextTag4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TextTag4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TextTag4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__TextTag5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__TextTag5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__TextTag5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__TextTag5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__TextTag5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__TextTag5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("TextTag", "texttag")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Lightning", "lightning")
        function s__Lightning1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Lightning1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Lightning1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Lightning1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Lightning1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Lightning1D__getindex takes integer this,integer index returns lightning
            return (LoadLightningHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Lightning1D__setindex takes integer this,integer index,lightning value returns nothing
            call SaveLightningHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Lightning2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Lightning2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Lightning2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Lightning2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Lightning2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Lightning2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Lightning3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Lightning3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Lightning3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Lightning3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Lightning3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Lightning3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Lightning4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Lightning4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Lightning4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Lightning4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Lightning4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Lightning4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Lightning5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Lightning5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Lightning5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Lightning5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Lightning5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Lightning5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Lightning", "lightning")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Image", "image")
        function s__Image1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Image1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Image1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Image1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Image1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Image1D__getindex takes integer this,integer index returns image
            return (LoadImageHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Image1D__setindex takes integer this,integer index,image value returns nothing
            call SaveImageHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Image2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Image2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Image2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Image2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Image2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Image2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Image3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Image3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Image3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Image3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Image3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Image3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Image4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Image4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Image4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Image4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Image4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Image4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Image5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Image5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Image5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Image5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Image5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Image5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Image", "image")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Ubersplat", "ubersplat")
        function s__Ubersplat1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Ubersplat1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Ubersplat1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Ubersplat1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Ubersplat1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Ubersplat1D__getindex takes integer this,integer index returns ubersplat
            return (LoadUbersplatHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Ubersplat1D__setindex takes integer this,integer index,ubersplat value returns nothing
            call SaveUbersplatHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Ubersplat2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Ubersplat2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Ubersplat2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Ubersplat2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Ubersplat2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Ubersplat2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Ubersplat3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Ubersplat3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Ubersplat3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Ubersplat3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Ubersplat3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Ubersplat3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Ubersplat4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Ubersplat4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Ubersplat4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Ubersplat4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Ubersplat4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Ubersplat4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Ubersplat5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Ubersplat5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Ubersplat5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Ubersplat5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Ubersplat5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Ubersplat5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Ubersplat", "ubersplat")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Region", "region")
        function s__Region1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Region1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Region1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Region1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Region1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Region1D__getindex takes integer this,integer index returns region
            return (LoadRegionHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Region1D__setindex takes integer this,integer index,region value returns nothing
            call SaveRegionHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Region2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Region2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Region2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Region2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Region2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Region2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Region3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Region3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Region3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Region3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Region3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Region3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Region4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Region4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Region4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Region4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Region4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Region4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Region5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Region5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Region5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Region5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Region5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Region5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Region", "region")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("FogState", "fogstate")
        function s__FogState1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__FogState1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__FogState1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__FogState1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__FogState1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__FogState1D__getindex takes integer this,integer index returns fogstate
            return (LoadFogStateHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__FogState1D__setindex takes integer this,integer index,fogstate value returns nothing
            call SaveFogStateHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__FogState2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__FogState2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__FogState2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__FogState2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__FogState2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__FogState2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__FogState3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__FogState3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__FogState3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__FogState3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__FogState3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__FogState3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__FogState4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__FogState4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__FogState4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__FogState4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__FogState4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__FogState4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__FogState5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__FogState5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__FogState5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__FogState5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__FogState5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__FogState5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("FogState", "fogstate")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("FogModifier", "fogmodifier")
        function s__FogModifier1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__FogModifier1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__FogModifier1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__FogModifier1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__FogModifier1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__FogModifier1D__getindex takes integer this,integer index returns fogmodifier
            return (LoadFogModifierHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__FogModifier1D__setindex takes integer this,integer index,fogmodifier value returns nothing
            call SaveFogModifierHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__FogModifier2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__FogModifier2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__FogModifier2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__FogModifier2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__FogModifier2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__FogModifier2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__FogModifier3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__FogModifier3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__FogModifier3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__FogModifier3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__FogModifier3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__FogModifier3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__FogModifier4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__FogModifier4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__FogModifier4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__FogModifier4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__FogModifier4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__FogModifier4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__FogModifier5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__FogModifier5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__FogModifier5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__FogModifier5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__FogModifier5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__FogModifier5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("FogModifier", "fogmodifier")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Hashtable", "hashtable")
        function s__Hashtable1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Hashtable1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Hashtable1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Hashtable1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Hashtable1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Hashtable1D__getindex takes integer this,integer index returns hashtable
            return (LoadHashtableHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Hashtable1D__setindex takes integer this,integer index,hashtable value returns nothing
            call SaveHashtableHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Hashtable2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Hashtable2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Hashtable2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Hashtable2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Hashtable2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Hashtable2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Hashtable3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Hashtable3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Hashtable3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Hashtable3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Hashtable3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Hashtable3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Hashtable4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Hashtable4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Hashtable4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Hashtable4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Hashtable4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Hashtable4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Hashtable5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Hashtable5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Hashtable5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Hashtable5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Hashtable5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Hashtable5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Hashtable", "hashtable")
//textmacro instance: NEW_DIMENSIONAL_ARRAY("Framehandle", "framehandle")
        function s__Framehandle1D_remove takes integer this,integer index returns nothing
            call RemoveSavedHandle(Table___ht, ((((this)))), (index)) // INLINED!!
        endfunction
        function s__Framehandle1D_has takes integer this,integer index returns boolean
            return (HaveSavedHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
//Implemented from module MultidimensionalArray__Methods:
        function s__Framehandle1D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction










        function s__Framehandle1D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Framehandle1D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Framehandle1D__getindex takes integer this,integer index returns framehandle
            return (LoadFrameHandle(Table___ht, ((((this)))), (index))) // INLINED!!
        endfunction
        function s__Framehandle1D__setindex takes integer this,integer index,framehandle value returns nothing
            call SaveFrameHandle(Table___ht, ((((this)))), (index), ( value)) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Framehandle2D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Framehandle2D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Framehandle2D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Framehandle2D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Framehandle2D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Framehandle2D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Framehandle3D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Framehandle3D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Framehandle3D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Framehandle3D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Framehandle3D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Framehandle3D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Framehandle4D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Framehandle4D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Framehandle4D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Framehandle4D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Framehandle4D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Framehandle4D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction

//Implemented from module MultidimensionalArray__Methods:
        function s__Framehandle5D_create takes nothing returns integer
            return (s__Table_create()) // INLINED!!
        endfunction

            function s__Framehandle5D_remove takes integer this,integer index returns nothing
                call s__HashTable_remove((this),index)
            endfunction


            function s__Framehandle5D_has takes integer this,integer index returns boolean
                return (HaveSavedInteger(Table___ht, ((((this)))), ((index)))) // INLINED!!
            endfunction

        function s__Framehandle5D_flush takes integer this returns nothing
            call FlushChildHashtable(Table___ht, ((this))) // INLINED!!
        endfunction
        function s__Framehandle5D_destroy takes integer this returns nothing
            call s__Table_destroy((this))
        endfunction
        function s__Framehandle5D__getindex takes integer this,integer index returns integer
            return (s__HashTable__getindex(((this )),( index))) // INLINED!!
        endfunction
//end of: NEW_DIMENSIONAL_ARRAY("Framehandle", "framehandle")
    



//library MultidimensionalArray ends
//library TasItemFusion:
// function TasItemFusionAdd takes integer result, integer mat returns nothing
//  function TasItemFusionAdd2 takes integer result, integer a, integer b returns nothing
//  function TasItemFusionAdd3 takes integer result, integer a, integer b, integer c returns nothing
//  function TasItemFusionAdd4 takes integer result, integer a, integer b, integer c, integer d returns nothing
//  function TasItemFusionAdd5 takes integer result, integer a, integer b, integer c, integer d, integer e returns nothing
//  function TasItemFusionAdd6 takes integer result, integer a, integer b, integer c, integer d, integer e, integer f returns nothing
// function TasItemFusionGetUseableItems takes player p , group units, boolean checkOwner returns nothing
// function TasItemFusionGetUseableMaterial takes player p, integer result, boolean reset returns nothing
// function TasItemFusionCalc player p, integer result returns nothing
// function TasItemFusionGetMissingMaterial takes player p, integer result, boolean reset returns nothing


    function TasItemFusionAdd takes integer result,integer mat returns nothing
        local integer materialCount
        local integer builtWayCount
        local integer count
        
        set TasItemFusion_FusionCount=TasItemFusion_FusionCount + 1
        set TasItemFusion_FusionResult[TasItemFusion_FusionCount]=result

        set count=(LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,result)), (0))) + 1 // INLINED!!
        call SaveInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,result)), (0), ( count)) // INLINED!!
        call SaveInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,result)), (count), ( mat)) // INLINED!!
        
        if not (HaveSavedBoolean(Table___ht, (((s__HashTable__getindex(TasItemFusion_UsedIn,mat)))), (result))) then // INLINED!!
            call SaveBoolean(Table___ht, (((s__HashTable__getindex(TasItemFusion_UsedIn,mat)))), (result), ( true)) // INLINED!!
            set count=(LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_UsedIn,mat)), (0))) + 1 // INLINED!!
            call SaveInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_UsedIn,mat)), (0), ( count)) // INLINED!!
            call SaveInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_UsedIn,mat)), (count), ( result)) // INLINED!!
            call TasItemCaclCost(mat)
        endif
        
        call TasItemCaclCost(result)
    endfunction

    function TasItemFusionAdd2 takes integer result,integer a,integer b returns nothing
        call TasItemFusionAdd(result , a)
        call TasItemFusionAdd(result , b)
    endfunction

    function TasItemFusionAdd3 takes integer result,integer a,integer b,integer c returns nothing
        call TasItemFusionAdd(result , a)
        call TasItemFusionAdd(result , b)
        call TasItemFusionAdd(result , c)
    endfunction

    function TasItemFusionAdd4 takes integer result,integer a,integer b,integer c,integer d returns nothing
        call TasItemFusionAdd(result , a)
        call TasItemFusionAdd(result , b)
        call TasItemFusionAdd(result , c)
        call TasItemFusionAdd(result , d)
    endfunction

    function TasItemFusionAdd5 takes integer result,integer a,integer b,integer c,integer d,integer e returns nothing
        call TasItemFusionAdd(result , a)
        call TasItemFusionAdd(result , b)
        call TasItemFusionAdd(result , c)
        call TasItemFusionAdd(result , d)
        call TasItemFusionAdd(result , e)
    endfunction

    function TasItemFusionAdd6 takes integer result,integer a,integer b,integer c,integer d,integer e,integer f returns nothing
        call TasItemFusionAdd(result , a)
        call TasItemFusionAdd(result , b)
        call TasItemFusionAdd(result , c)
        call TasItemFusionAdd(result , d)
        call TasItemFusionAdd(result , e)
        call TasItemFusionAdd(result , f)
    endfunction
 

    function TasItemFusionGetUseableItemsEnum takes nothing returns nothing
        local integer index= 0
        local item i
        local unit u= GetEnumUnit()
        local integer count
        local integer itemCode
        loop
            set i=UnitItemInSlot(u, index)
            if i != null and ( not TasItemFusion__CheckOwner or ( GetItemPlayer(i) == TasItemFusion__Owner or GetItemPlayer(i) == Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
                set count=(LoadInteger(Table___ht, (TasItemFusion_PlayerItems[TasItemFusion__OwnerIndex]), (0))) + 1 // INLINED!!
                call SaveInteger(Table___ht, (TasItemFusion_PlayerItems[TasItemFusion__OwnerIndex]), (0), ( count)) // INLINED!!
                call SaveItemHandle(Table___ht, (((TasItemFusion_PlayerItems[TasItemFusion__OwnerIndex]))), (count), ( i)) // INLINED!!
                set itemCode=GetItemTypeId(i)
                call SaveInteger(Table___ht, (TasItemFusion_PlayerItems[TasItemFusion__OwnerIndex]), (itemCode), ( (LoadInteger(Table___ht, (TasItemFusion_PlayerItems[TasItemFusion__OwnerIndex]), (itemCode))) + 1)) // INLINED!!
            endif
            set index=index + 1
            exitwhen index >= bj_MAX_INVENTORY
        endloop

        set u=null
        set i=null
    endfunction
    function TasItemFusionGetUseableItems takes player p,group units,boolean checkOwner returns nothing
        // give the units which inventory is useable
        local integer playerIndex= GetPlayerId(p)
        call FlushChildHashtable(Table___ht, (TasItemFusion_PlayerItems[playerIndex])) // INLINED!!
        
        set TasItemFusion__OwnerIndex=playerIndex
        set TasItemFusion__Owner=p
        set TasItemFusion__CheckOwner=checkOwner
        call ForGroup(units, function TasItemFusionGetUseableItemsEnum)
    endfunction

    // returns a list of material that can be used for result.
    function TasItemFusionGetUseableMaterial takes player p,integer result,boolean reset,boolean quick returns nothing
        local integer playerIndex= GetPlayerId(p)
        local item i
        local boolean canBeFound
        local integer loopA
        local integer loopB
        local integer itemCode
        local integer count
        if reset then
            call FlushChildHashtable(Table___ht, (TasItemFusion_PlayerMaterial[playerIndex])) // INLINED!!
            //set UpdateCounter = UpdateCounter + 1
            //call BlzFrameSetText(UpdateCounterText, I2S(UpdateCounter))
        endif

        set loopA=(LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,result)), (0))) // INLINED!!
        loop
            exitwhen loopA < 1
            set itemCode=(LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,result)), (loopA))) // INLINED!!
            // have more total then yet found
            set canBeFound=( (LoadInteger(Table___ht, (((TasItemFusion_PlayerItems[playerIndex]))), (itemCode))) > (LoadInteger(Table___ht, (((TasItemFusion_PlayerMaterial[playerIndex]))), (itemCode))) ) // INLINED!!
            
            if canBeFound then
                if quick then
                    set count=(LoadInteger(Table___ht, (TasItemFusion_PlayerMaterial[playerIndex]), (0))) + 1 // INLINED!!
                    call SaveInteger(Table___ht, (TasItemFusion_PlayerMaterial[playerIndex]), (0), ( count)) // INLINED!!
                    call SaveInteger(Table___ht, (TasItemFusion_PlayerMaterial[playerIndex]), (count), ( itemCode)) // INLINED!!
                    call SaveInteger(Table___ht, (TasItemFusion_PlayerMaterial[playerIndex]), (itemCode), ( (LoadInteger(Table___ht, (TasItemFusion_PlayerMaterial[playerIndex]), (itemCode))) + 1)) // INLINED!!
                else
                    set loopB=(LoadInteger(Table___ht, (TasItemFusion_PlayerItems[playerIndex]), (0))) // INLINED!!
                    loop
                        exitwhen loopB < 1
                        set i=(LoadItemHandle(Table___ht, (((TasItemFusion_PlayerItems[playerIndex]))), (loopB))) // INLINED!!
                        if GetItemTypeId(i) == itemCode and not (LoadBoolean(Table___ht, (((TasItemFusion_PlayerMaterial[playerIndex]))), (GetHandleId(i)))) then // INLINED!!
                            call SaveBoolean(Table___ht, (((TasItemFusion_PlayerMaterial[playerIndex]))), (GetHandleId(i)), ( true)) // INLINED!!
                            call SaveInteger(Table___ht, (TasItemFusion_PlayerMaterial[playerIndex]), (itemCode), ( (LoadInteger(Table___ht, (TasItemFusion_PlayerMaterial[playerIndex]), (itemCode))) + 1)) // INLINED!!
                            set count=(LoadInteger(Table___ht, (TasItemFusion_PlayerMaterial[playerIndex]), (0))) + 1 // INLINED!!
                            call SaveInteger(Table___ht, (TasItemFusion_PlayerMaterial[playerIndex]), (0), ( count)) // INLINED!!
                            call SaveItemHandle(Table___ht, (((TasItemFusion_PlayerMaterial[playerIndex]))), (count), ( i)) // INLINED!!
                            exitwhen true
                        endif
                        set loopB=loopB - 1
                    endloop
                endif
            elseif (LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,itemCode)), (0))) > 0 then // INLINED!!
                call TasItemFusionGetUseableMaterial(p , itemCode , false , quick)
            endif

            set loopA=loopA - 1
        endloop
        set i=null
    endfunction


// returns the total gold cost and the used material from useAble
    function TasItemFusionCalc takes player p,integer result,boolean quick returns nothing
        // find all useable fusion material
        local integer playerIndex= GetPlayerId(p)
        local integer gold= TasItemGetCostGold(result)
        local integer lumber= TasItemGetCostLumber(result)
        local integer gold2
        local integer lumber2
        local integer count
        call TasItemFusionGetUseableMaterial(p , result , true , quick)
        // reduce total gold cost by the useables
        set count=(LoadInteger(Table___ht, (TasItemFusion_PlayerMaterial[playerIndex]), (0))) // INLINED!!
        loop
            exitwhen count < 1
            if quick then
                set gold2=TasItemGetCostGold((LoadInteger(Table___ht, (TasItemFusion_PlayerMaterial[playerIndex]), (count)))) // INLINED!!
                set lumber2=TasItemGetCostLumber((LoadInteger(Table___ht, (TasItemFusion_PlayerMaterial[playerIndex]), (count)))) // INLINED!!
            else
                set gold2=TasItemGetCostGold(GetItemTypeId((LoadItemHandle(Table___ht, (((TasItemFusion_PlayerMaterial[playerIndex]))), (count))))) // INLINED!!
                set lumber2=TasItemGetCostLumber(GetItemTypeId((LoadItemHandle(Table___ht, (((TasItemFusion_PlayerMaterial[playerIndex]))), (count))))) // INLINED!!
            endif
            set gold=gold - gold2
            set lumber=lumber - lumber2
            set count=count - 1
        endloop
        // "return values"
        set TasItemFusionGold=gold
        set TasItemFusionLumber=lumber
    endfunction


    // returns a table of the material missing
    // call it that way TasItemFusionGetMissingMaterial(useAble, result)
    function TasItemFusionGetMissingMaterial takes player p,integer result,boolean reset returns nothing
        local item i
        local integer playerIndex= GetPlayerId(p)
        local boolean found
        local integer loopA
        local integer loopB
        local integer itemCode
        local integer count
        if reset then
            call FlushChildHashtable(Table___ht, (TasItemFusion_PlayerMissing[playerIndex])) // INLINED!!
            call FlushChildHashtable(Table___ht, (TasItemFusion_PlayerMissingUsed[playerIndex])) // INLINED!!
        endif
        set loopA=(LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,result)), (0))) // INLINED!!
        loop
            exitwhen loopA < 1
            set found=false
            set itemCode=(LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,result)), (loopA))) // INLINED!!
            set loopB=(LoadInteger(Table___ht, (TasItemFusion_PlayerItems[playerIndex]), (0))) // INLINED!!
            
            loop
                exitwhen loopB < 1
                set i=(LoadItemHandle(Table___ht, (((TasItemFusion_PlayerItems[playerIndex]))), (loopB))) // INLINED!!
                if GetItemTypeId(i) == itemCode and not (LoadBoolean(Table___ht, (((TasItemFusion_PlayerMissingUsed[playerIndex]))), (GetHandleId(i)))) then // INLINED!!
                    call SaveBoolean(Table___ht, (((TasItemFusion_PlayerMissingUsed[playerIndex]))), (GetHandleId(i)), ( true)) // INLINED!!
                    set count=(LoadInteger(Table___ht, (TasItemFusion_PlayerMissingUsed[playerIndex]), (0))) + 1 // INLINED!!
                    call SaveInteger(Table___ht, (TasItemFusion_PlayerMissingUsed[playerIndex]), (0), ( count)) // INLINED!!
                    call SaveItemHandle(Table___ht, (((TasItemFusion_PlayerMissingUsed[playerIndex]))), (count), ( i)) // INLINED!!
                    set found=true
                    exitwhen true
                endif
                set loopB=loopB - 1
            endloop
            if not found and not (LoadBoolean(Table___ht, (((TasItemFusion_PlayerMissing[playerIndex]))), (itemCode))) then // INLINED!!
                set count=(LoadInteger(Table___ht, (TasItemFusion_PlayerMissing[playerIndex]), (0))) + 1 // INLINED!!
                call SaveInteger(Table___ht, (TasItemFusion_PlayerMissing[playerIndex]), (0), ( count)) // INLINED!!
                call SaveInteger(Table___ht, (TasItemFusion_PlayerMissing[playerIndex]), (count), ( itemCode)) // INLINED!!
                call SaveBoolean(Table___ht, (((TasItemFusion_PlayerMissing[playerIndex]))), (itemCode), ( true)) // INLINED!!
                if (LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,itemCode)), (0))) > 0 then // INLINED!!
                    call TasItemFusionGetMissingMaterial(p , itemCode , false)
                endif
            endif

            set loopA=loopA - 1
        endloop
        
    endfunction

    function TasItemFusion__Init takes nothing returns nothing
        local integer loopA= 0
        set TasItemFusion_UsedIn=(s__Table_create()) // allows to find Fusions from a Mat // INLINED!!
        set TasItemFusion_BuiltWay=(s__Table_create()) // find Fusions from the result // INLINED!!
        loop
            set TasItemFusion_PlayerItems[loopA]=s__Table_create()
            set TasItemFusion_PlayerMaterial[loopA]=s__Table_create() //contains material used
            set TasItemFusion_PlayerMissing[loopA]=s__Table_create()
            set TasItemFusion_PlayerMissingUsed[loopA]=s__Table_create()
            set loopA=loopA + 1
            exitwhen loopA == bj_MAX_PLAYER_SLOTS
            // body
        endloop
        
        
    endfunction


//library TasItemFusion ends
//library ToggleIconButton:
// function CreateToggleIconButton takes framehandle parent, integer valueOn, string text, string textureOn, integer mode, string textureOff, string textOff returns integer
// function CreateToggleIconButtonSimple takes framehandle parent, integer valueOn, string text, string textureOn returns integer
// function ToggleIconButtonSetValue takes integer object, player p, boolean enable returns nothing
// function ToggleIconButtonAddAction takes integer object, code action returns nothing
// function ToggleIconButtonGetValue takes integer object, player p returns integer
    function ToggleIconButton__GetDisabledIcon takes string icon returns string
        //ReplaceableTextures\CommandButtons\BTNHeroPaladin.tga -> ReplaceableTextures\CommandButtonsDisabled\DISBTNHeroPaladin.tga
        if SubString(icon, 34, 35) != "\\" then
            return icon
        endif //this string has not enough chars return it
        //string.len(icon) < 34 then return icon end //this string has not enough chars return it
        return SubString(icon, 0, 34) + "Disabled\\DIS" + SubString(icon, 35, StringLength(icon))
    endfunction
    function ToggleIconButtonGetKey takes integer object,player p returns integer
        if ToggleIconButton_Mode[object] == ToggleIconButton_MODE_SHARED then
            return 0
        else
            return (Power2__data[(GetPlayerId(p) + 1)]) // INLINED!!
        endif
    endfunction

    function ToggleIconButtonSetValue takes integer object,player p,boolean enable returns nothing
        local integer key= ToggleIconButtonGetKey(object , p)
        if enable and BlzBitAnd(ToggleIconButton_Value[object], key) == 0 then
            set ToggleIconButton_Value[object]=ToggleIconButton_Value[object] + key
        elseif not enable and BlzBitAnd(ToggleIconButton_Value[object], key) > 0 then
            set ToggleIconButton_Value[object]=ToggleIconButton_Value[object] - key
        endif
        
        // update visual
        if ToggleIconButton_Mode[object] == ToggleIconButton_MODE_SHARED or GetLocalPlayer() == p then
            if not enable then
                call BlzFrameSetTexture(ToggleIconButton_Icon[object], ToggleIconButton_TextureOff[object], 0, false)
                call BlzFrameSetTexture(ToggleIconButton_IconPushed[object], ToggleIconButton_TextureOff[object], 0, false)
                call BlzFrameSetText(ToggleIconButton_ToolTip[object], ToggleIconButton_TextOff[object])
            else
                call BlzFrameSetTexture(ToggleIconButton_Icon[object], ToggleIconButton_Texture[object], 0, false)
                call BlzFrameSetTexture(ToggleIconButton_IconPushed[object], ToggleIconButton_Texture[object], 0, false)
                call BlzFrameSetText(ToggleIconButton_ToolTip[object], ToggleIconButton_Text[object])
            endif
        endif
    endfunction
    

    function ToggleIconButtonGetValue takes integer object,player p returns integer
        if BlzBitAnd(ToggleIconButton_Value[object], ToggleIconButtonGetKey(object , p)) > 0 then
            return ToggleIconButton_ValueOn[object]
        else
            return 0
        endif
    endfunction

    

    function ToggleIconButtonDefaultSize takes real x,real y returns nothing
        set ToggleIconButton_DefaultSizeX=x
        set ToggleIconButton_DefaultSizeY=y
    endfunction


    
    function CreateToggleIconButton takes framehandle parent,integer valueOn,string text,string textureOn,integer mode,string textureOff,string textOff returns integer
        set ToggleIconButton_Counter=ToggleIconButton_Counter + 1
        set ToggleIconButton_Button[ToggleIconButton_Counter]=BlzCreateFrame("TasItemShopCatButton", parent, 0, 0)
        set ToggleIconButton_Icon[ToggleIconButton_Counter]=BlzGetFrameByName("TasItemShopCatButtonBackdrop", 0)
        set ToggleIconButton_IconPushed[ToggleIconButton_Counter]=BlzGetFrameByName("TasItemShopCatButtonBackdropPushed", 0)
        call BlzFrameSetText(ToggleIconButton_Button[ToggleIconButton_Counter], I2S(ToggleIconButton_Counter))
        call BlzFrameSetSize(ToggleIconButton_Button[ToggleIconButton_Counter], ToggleIconButton_DefaultSizeX, ToggleIconButton_DefaultSizeY)
        call BlzFrameSetTexture(ToggleIconButton_Icon[ToggleIconButton_Counter], textureOff, 0, false)
        call BlzFrameSetTexture(ToggleIconButton_IconPushed[ToggleIconButton_Counter], textureOff, 0, false)
        
        call BlzTriggerRegisterFrameEvent(ToggleIconButton__Trigger, ToggleIconButton_Button[ToggleIconButton_Counter], FRAMEEVENT_CONTROL_CLICK)

        set ToggleIconButton_ToolTip[ToggleIconButton_Counter]=CreateSimpleTooltip(ToggleIconButton_Button[ToggleIconButton_Counter] , textOff)
        set ToggleIconButton_Mode[ToggleIconButton_Counter]=mode
        set ToggleIconButton_Value[ToggleIconButton_Counter]=0
        set ToggleIconButton_ValueOn[ToggleIconButton_Counter]=valueOn
        set ToggleIconButton_Texture[ToggleIconButton_Counter]=textureOn
        set ToggleIconButton_TextureOff[ToggleIconButton_Counter]=textureOff
        set ToggleIconButton_Text[ToggleIconButton_Counter]=text
        set ToggleIconButton_TextOff[ToggleIconButton_Counter]=textOff
        set ToggleIconButton_Action[ToggleIconButton_Counter]=CreateTrigger()
        return ToggleIconButton_Counter
    endfunction
    function ToggleIconButtonAddAction takes integer object,code action returns nothing
        call TriggerAddCondition(ToggleIconButton_Action[object], Filter(action))
    endfunction
    function CreateToggleIconButtonSimple takes framehandle parent,integer valueOn,string text,string textureOn returns integer
        return CreateToggleIconButton(parent , valueOn , text , textureOn , ToggleIconButton_MODE_DEFAULT , ToggleIconButton__GetDisabledIcon(textureOn) , text)
    endfunction

    function ToggleIconButton__TriggerAction takes nothing returns nothing
        local framehandle frame= BlzGetTriggerFrame()
        local integer object= S2I(BlzFrameGetText(frame))
        local player p= GetTriggerPlayer()
        local integer key= ToggleIconButtonGetKey(object , p)
        //StartSoundForPlayerBJ(player, ToggleIconButton.Sound)
        
        call ToggleIconButtonSetValue(object , p , BlzBitAnd(ToggleIconButton_Value[object], key) == 0)
        if ( ToggleIconButton_Mode[object] != ToggleIconButton_MODE_LOCAL or GetLocalPlayer() == p ) then
            set ToggleIconButton_Index=object
            set ToggleIconButton_Player=p
            set ToggleIconButton_Enabled=ToggleIconButtonGetValue(object , p) == ToggleIconButton_ValueOn[object]
            call TriggerEvaluate(ToggleIconButton_Action[object])
        endif
        // remove focus
        call BlzFrameSetEnable(frame, false)
        call BlzFrameSetEnable(frame, true)
    endfunction
    function ToggleIconButton__Init takes nothing returns nothing
        set ToggleIconButton_Sound=CreateSound("Sound\\Interface\\MouseClick1.wav", false, false, false, 10, 10, "")
        call SetSoundParamsFromLabel(ToggleIconButton_Sound, "InterfaceClick")
        call SetSoundDuration(ToggleIconButton_Sound, 239)
        call BlzLoadTOCFile("war3mapImported\\Templates.toc")
        call TriggerAddAction(ToggleIconButton__Trigger, function ToggleIconButton__TriggerAction)
    endfunction

//library ToggleIconButton ends
//library TasButtonList:
// TasButtonList10b (CC) by Tasyen

//function CreateTasButtonList10 takes string buttonName, integer cols, integer rows, framehandle parent, code buttonAction, code rightClickAction, code updateAction, code searchAction, code filterAction, code asyncAction, code asyncRigthAction, real colGap, real rowGap returns integer
//function CreateTasButtonListEx takes string buttonName, integer cols, integer rows, framehandle parent, code buttonAction, code rightClickAction, code updateAction, code searchAction, code filterAction returns integer
 //create a new List
 //parent is the container of this Frame it will attach itself to its TOP.
 //the given functions are called over Triggers
 //buttonAction is the function that executes when an option is clicked.
 //when your data are unit-RawCodes then you can skip updateAction & searchAction.
 //updateAction runs for each Button and is used to set the diplayed content.

 //searchAction is a function that returns true if the current data matches the searchText.
 //filterAction is meant to be used when one wants an addtional non text based filtering, with returning true allowing data or false rejecting it.
 //searchAction , udateAction & filterAction are async this functions should not do anything that alters the game state/flow.

//function CreateTasButtonList takes integer buttonCount, framehandle parent, code buttonAction, code updateAction, code searchAction, code filterAction returns integer
  // wrapper for CreateTasButtonListEx, 1 col, buttonCount rows.
//function CreateTasButtonListV2 takes integer rowCount, framehandle parent, code buttonAction, code updateAction, code searchAction, code filterAction returns integer
  //  2 Buttons each Row, takes more Height then the other Versions
//function CreateTasButtonListV3 takes integer rowCount, framehandle parent, code buttonAction, code updateAction, code searchAction, code filterAction returns integer
  //  3 Buttons each Row, only Icon, and Costs

//function TasButtonListClearDataEx takes integer listIndex, integer playerIndex returns nothing
//function TasButtonListClearData takes integer listIndex returns nothing
  //  remove all data
//function TasButtonListRemoveDataEx takes integer listIndex, integer data, integer playerIndex returns nothing
//function TasButtonListRemoveData takes integer listIndex, integer data returns nothing
  //  search for data and remove it
//function TasButtonListAddDataEx takes integer listIndex, integer data, integer playerIndex returns nothing
//function TasButtonListAddData takes integer listIndex, integer data returns nothing
  //  add data for one Button
//function TasButtonListCopyDataEx takes integer writeObject, integer readObject, integer playerIndex returns nothing
//function TasButtonListCopyData takes integer writeObject, integer readObject returns nothing
  //  writeObject uses the same data as readObject and calls UpdateButtonList.
//function UpdateTasButtonList takes integer listIndex returns nothing
  //  update the displayed Content should be done after Data was added or removed was used.
//function TasButtonListSearch takes integer listIndex, string text returns nothing
    // The buttonList will search it's data for the given text, if nil is given as text it will search for what the user currently has in its box.
    // This will also update the buttonList



// update the shown content
function UpdateTasButtonList takes integer listIndex returns nothing
    local integer dataHash= GetHandleId(LoadLocationHandle(TasButtonList_Hash, GetHandleId(TasButtonListDataList[listIndex]), GetPlayerId(GetLocalPlayer())))
    local integer filteredDataHash= GetHandleId(TasButtonListDataListFiltered[listIndex])
    local integer dataFilteredCount= LoadInteger(TasButtonList_Hash, filteredDataHash, 0)
    
    local integer i= 1
    set TasButtonListIndex=listIndex
    call BlzFrameSetVisible(TasButtonListSlider[listIndex], dataFilteredCount > TasButtonListButtonCount[listIndex])
    loop
        exitwhen i > TasButtonListButtonCount[listIndex]
        set TasButtonListFrame=BlzGetFrameByName(TasButtonListButtonName[listIndex], TasButtonListCreateContext[listIndex] + i)
        
        if dataFilteredCount >= i then
            set TasButtonListData=LoadInteger(TasButtonList_Hash, dataHash, LoadInteger(TasButtonList_Hash, filteredDataHash, i + TasButtonListViewPoint[listIndex]))
            call TriggerEvaluate(TasButtonListUpdateAction[listIndex])
            call BlzFrameSetVisible(TasButtonListFrame, true)
        else
            call BlzFrameSetVisible(TasButtonListFrame, false)
        endif
        set i=i + 1
    endloop

endfunction

function TasButtonListSearch takes integer listIndex,string text returns nothing
    local integer filteredDataHash= GetHandleId(TasButtonListDataListFiltered[listIndex])
    local integer dataHash= GetHandleId(LoadLocationHandle(TasButtonList_Hash, GetHandleId(TasButtonListDataList[listIndex]), GetPlayerId(GetLocalPlayer())))
    local integer filteredDataCount

    local integer i
    local integer iEnd
    if text == null or text == "" then
        set text=BlzFrameGetText(TasButtonListInputFrame[listIndex])
    endif
    if GetLocalPlayer() == GetTriggerPlayer() then
        set TasButtonListText=text
        set TasButtonListIndex=listIndex
        call FlushChildHashtable(TasButtonList_Hash, filteredDataHash)
        set filteredDataCount=0
        if text != "" then
            set TasButtonListIsSearching=true
            set iEnd=LoadInteger(TasButtonList_Hash, dataHash, 0)
            set i=1
            loop
                exitwhen i > iEnd
                set TasButtonListData=LoadInteger(TasButtonList_Hash, dataHash, i)
                if TriggerEvaluate(TasButtonListSearchAction[listIndex]) and TriggerEvaluate(TasButtonListFilterAction[listIndex]) then
                    set filteredDataCount=filteredDataCount + 1
                    call SaveInteger(TasButtonList_Hash, filteredDataHash, filteredDataCount, i)
                endif
                set i=i + 1
            endloop
            call SaveInteger(TasButtonList_Hash, filteredDataHash, 0, filteredDataCount)
        else
            set TasButtonListIsSearching=false
            set iEnd=LoadInteger(TasButtonList_Hash, dataHash, 0)
            set i=1
            loop
                exitwhen i > iEnd
                set TasButtonListData=LoadInteger(TasButtonList_Hash, dataHash, i)
                if TriggerEvaluate(TasButtonListFilterAction[listIndex]) then
                    set filteredDataCount=filteredDataCount + 1
                    call SaveInteger(TasButtonList_Hash, filteredDataHash, filteredDataCount, i)
                endif
                set i=i + 1
            endloop
            call SaveInteger(TasButtonList_Hash, filteredDataHash, 0, filteredDataCount)
        endif
        

        //update Slider, with that also update
        call BlzFrameSetMinMaxValue(TasButtonListSlider[listIndex], TasButtonListButtonCount[listIndex], filteredDataCount)
        call BlzFrameSetValue(TasButtonListSlider[listIndex], 999999)
    endif
endfunction

function TasButtonListTriggerActionSync takes nothing returns nothing
    local integer listIndex= LoadInteger(TasButtonList_Hash, GetHandleId(BlzGetTriggerFrame()), 0)
    local integer dataIndex= R2I(BlzGetTriggerFrameValue() + 0.5)

    set TasButtonListData=LoadInteger(TasButtonList_Hash, GetHandleId(LoadLocationHandle(TasButtonList_Hash, GetHandleId(TasButtonListDataList[listIndex]), GetPlayerId(GetTriggerPlayer()))), dataIndex)
    set TasButtonListIndex=listIndex
    call TriggerExecute(TasButtonListButtonAction[listIndex])

    call UpdateTasButtonList(listIndex)
endfunction

function TasButtonListTriggerActionButton takes nothing returns nothing
    local framehandle frame= BlzGetTriggerFrame()
    local integer buttonIndex= LoadInteger(TasButtonList_Hash, GetHandleId(frame), 1)
    local integer listIndex= LoadInteger(TasButtonList_Hash, GetHandleId(frame), 0)
    local integer dataIndex= LoadInteger(TasButtonList_Hash, GetHandleId(TasButtonListDataListFiltered[listIndex]), buttonIndex + TasButtonListViewPoint[listIndex])
    local integer data= LoadInteger(TasButtonList_Hash, GetHandleId(LoadLocationHandle(TasButtonList_Hash, GetHandleId(TasButtonListDataList[listIndex]), GetPlayerId(GetTriggerPlayer()))), dataIndex)
    call BlzFrameSetEnable(frame, false)
    call BlzFrameSetEnable(frame, true)
    set TasButtonListData=data
    set TasButtonListIndex=listIndex
    set TasButtonListFrame=frame
    if GetLocalPlayer() == GetTriggerPlayer() then
       call TriggerEvaluate(TasButtonListAsyncAction[listIndex])
       call BlzFrameSetValue(TasButtonListSyncFrame[listIndex], dataIndex)
    endif
    set frame=null
endfunction

function TasButtonListTriggerActionSearch takes nothing returns nothing
    call TasButtonListSearch(LoadInteger(TasButtonList_Hash, GetHandleId(BlzGetTriggerFrame()), 0) , null)
endfunction

// scrolling while pointing on Buttons
function TasButtonListTriggerActionButtonScroll takes nothing returns nothing
    local integer listIndex= LoadInteger(TasButtonList_Hash, GetHandleId(BlzGetTriggerFrame()), 0)
    local framehandle frame= TasButtonListSlider[listIndex]

    if GetLocalPlayer() == GetTriggerPlayer() then
        if BlzGetTriggerFrameValue() > 0 then
            call BlzFrameSetValue(frame, BlzFrameGetValue(frame) + TasButtonListStepSize[listIndex])
        else
            call BlzFrameSetValue(frame, BlzFrameGetValue(frame) - TasButtonListStepSize[listIndex])
        endif
    endif
    set frame=null
endfunction

// scrolling while pointing on slider aswell as calling
function TasButtonListTriggerActionSlider takes nothing returns nothing
    local integer listIndex= LoadInteger(TasButtonList_Hash, GetHandleId(BlzGetTriggerFrame()), 0)
    local integer filteredDataHash= GetHandleId(TasButtonListDataListFiltered[listIndex])
    local integer dataFilteredCount= LoadInteger(TasButtonList_Hash, filteredDataHash, 0)

    local framehandle frame= BlzGetTriggerFrame()
    if GetLocalPlayer() == GetTriggerPlayer() then
        if BlzGetTriggerFrameEvent() == FRAMEEVENT_MOUSE_WHEEL then
            if BlzGetTriggerFrameValue() > 0 then
                call BlzFrameSetValue(frame, BlzFrameGetValue(frame) + TasButtonListStepSize[listIndex])
            else
                call BlzFrameSetValue(frame, BlzFrameGetValue(frame) - TasButtonListStepSize[listIndex])
            endif
        else
            // when there is enough data use viewPoint. the Viewpoint is reduced from the data to make top being top.
            if dataFilteredCount > TasButtonListButtonCount[listIndex] then
                set TasButtonListViewPoint[listIndex]=dataFilteredCount - R2I(BlzGetTriggerFrameValue())
            else
                set TasButtonListViewPoint[listIndex]=0
            endif

            if TasButtonListSliderText[listIndex] != null then
                call BlzFrameSetText(TasButtonListSliderText[listIndex], I2S(R2I(0.5 + dataFilteredCount - BlzFrameGetValue(frame))) + "/" + I2S(R2I(0.5 + dataFilteredCount - TasButtonListButtonCount[listIndex])))
            endif
            call UpdateTasButtonList(listIndex)
        endif
    endif
    set frame=null
endfunction

// runs once for each button shown
function UpdateTasButtonListDefaultObject takes nothing returns nothing
//TasButtonListFrame
//TasButtonListData
//TasButtonListIndex
    local integer frameHandle= GetHandleId(TasButtonListFrame)
    local integer data= TasButtonListData
    local integer buttonIndex= LoadInteger(TasButtonList_Hash, frameHandle, 1)
    local integer listIndex= LoadInteger(TasButtonList_Hash, frameHandle, 0)
    local integer lumber
    local integer gold
    local integer context= TasButtonListCreateContext[listIndex] + buttonIndex

    call BlzFrameSetTexture(BlzGetFrameByName("TasButtonIcon", context), BlzGetAbilityIcon(data), 0, false)
    call BlzFrameSetText(BlzGetFrameByName("TasButtonText", context), GetObjectName(data))

    call BlzFrameSetTexture(BlzGetFrameByName("TasButtonListTooltipIcon", context), BlzGetAbilityIcon(data), 0, false)
    call BlzFrameSetText(BlzGetFrameByName("TasButtonListTooltipName", context), GetObjectName(data))
    call BlzFrameSetText(BlzGetFrameByName("TasButtonListTooltipText", context), BlzGetAbilityExtendedTooltip(data, 0))

    if not IsUnitIdType(data, UNIT_TYPE_HERO) then
        // GetUnitWoodCost GetUnitGoldCost CRASH with heroes
        set lumber=GetUnitWoodCost(data)
        set gold=GetUnitGoldCost(data)
        if GetPlayerState(GetLocalPlayer(), PLAYER_STATE_RESOURCE_GOLD) >= gold then
            call BlzFrameSetText(BlzGetFrameByName("TasButtonTextGold", context), I2S(GetUnitGoldCost(data)))
        else
            call BlzFrameSetText(BlzGetFrameByName("TasButtonTextGold", context), "|cffff2010" + I2S(GetUnitGoldCost(data)))
        endif
        
        if GetPlayerState(GetLocalPlayer(), PLAYER_STATE_RESOURCE_LUMBER) >= lumber then
           call BlzFrameSetText(BlzGetFrameByName("TasButtonTextLumber", context), I2S(GetUnitWoodCost(data)))
        else
           call BlzFrameSetText(BlzGetFrameByName("TasButtonTextLumber", context), "|cffff2010" + I2S(GetUnitWoodCost(data)))
        endif
    else
        call BlzFrameSetText(BlzGetFrameByName("TasButtonTextLumber", context), "0")
        call BlzFrameSetText(BlzGetFrameByName("TasButtonTextGold", context), "0")
    endif
endfunction

function SearchTasButtonListDefaultObject takes nothing returns boolean
//TasButtonListText
//TasButtonListData
//TasButtonListIndex
    return (FindIndexFrom((GetObjectName(TasButtonListData) ) , ( TasButtonListText) , 0)) >= 0 // INLINED!!
endfunction

function InitTasButtonListObject8c takes framehandle parent,code buttonAction,code rightClickAction,code updateAction,code searchAction,code filterAction,code asyncAction,code asyncRigthAction returns integer
    local framehandle frame
    local integer playerIndex= 0
    set TasButtonList__Counter=TasButtonList__Counter + 1
    // the locations are created to have an unique slot in the hash which are used as something like a Lua table.
    set TasButtonListDataList[TasButtonList__Counter]=Location(0, 0) //
    // each player also got an own list
    loop
        call SaveLocationHandle(TasButtonList_Hash, GetHandleId(TasButtonListDataList[TasButtonList__Counter]), playerIndex, Location(0, 0))
        set playerIndex=playerIndex + 1
        exitwhen playerIndex == bj_MAX_PLAYER_SLOTS
    endloop
    set TasButtonListDataListFiltered[TasButtonList__Counter]=Location(0, 0) //
    set TasButtonListParent[TasButtonList__Counter]=parent
    set TasButtonListViewPoint[TasButtonList__Counter]=0

    set TasButtonListButtonAction[TasButtonList__Counter]=CreateTrigger() //call this inside the SyncAction after a button is clicked
    set TasButtonListUpdateAction[TasButtonList__Counter]=CreateTrigger() //function defining how to display stuff (async)
    set TasButtonListFilterAction[TasButtonList__Counter]=CreateTrigger() //function to return the searched Text (async)
    set TasButtonListSearchAction[TasButtonList__Counter]=CreateTrigger()
    set TasButtonListRightAction[TasButtonList__Counter]=CreateTrigger()
    set TasButtonListAsyncAction[TasButtonList__Counter]=CreateTrigger()
    set TasButtonListAsyncRightAction[TasButtonList__Counter]=CreateTrigger()
    
    call TriggerAddAction(TasButtonListButtonAction[TasButtonList__Counter], buttonAction)
    if rightClickAction != null then
        call TriggerAddAction(TasButtonListRightAction[TasButtonList__Counter], rightClickAction)
    endif
    
    // update is a condition with it can be run with TriggerEvaluate in localPlayer code. TriggerExecute would desync
    if updateAction == null then
        call TriggerAddCondition(TasButtonListUpdateAction[TasButtonList__Counter], Filter(function UpdateTasButtonListDefaultObject))
    else
        call TriggerAddCondition(TasButtonListUpdateAction[TasButtonList__Counter], Filter(updateAction))
    endif

    if searchAction == null then
        call TriggerAddCondition(TasButtonListSearchAction[TasButtonList__Counter], Filter(function SearchTasButtonListDefaultObject))
    else
        call TriggerAddCondition(TasButtonListSearchAction[TasButtonList__Counter], Filter(searchAction))
    endif
    if filterAction != null then
        call TriggerAddCondition(TasButtonListFilterAction[TasButtonList__Counter], Filter(filterAction))
    endif

    if asyncAction != null then
        call TriggerAddCondition(TasButtonListAsyncAction[TasButtonList__Counter], Filter(asyncAction))
    endif

    if asyncRigthAction != null then
        call TriggerAddCondition(TasButtonListAsyncRightAction[TasButtonList__Counter], Filter(asyncRigthAction))
    endif
    
    set frame=BlzCreateFrameByType("SLIDER", "", parent, "", 0)
    set TasButtonListSyncFrame[TasButtonList__Counter]=frame
    call BlzFrameSetMinMaxValue(frame, 0, 9999999)
    call BlzFrameSetStepSize(frame, 1.0)
    call BlzTriggerRegisterFrameEvent(TasButtonList__SyncTrigger, frame, FRAMEEVENT_SLIDER_VALUE_CHANGED)
    call BlzFrameSetVisible(frame, false)
    call SaveInteger(TasButtonList_Hash, GetHandleId(frame), 0, TasButtonList__Counter)

    set frame=BlzCreateFrameByType("SLIDER", "", parent, "", 0)
    set TasButtonListSyncFrameRight[TasButtonList__Counter]=frame
    call BlzFrameSetMinMaxValue(frame, 0, 9999999)
    call BlzFrameSetStepSize(frame, 1.0)
    call BlzTriggerRegisterFrameEvent(TasButtonList__SyncRightTrigger, frame, FRAMEEVENT_SLIDER_VALUE_CHANGED)
    call BlzFrameSetVisible(frame, false)
    call SaveInteger(TasButtonList_Hash, GetHandleId(frame), 0, TasButtonList__Counter)

    set frame=BlzCreateFrame("TasEditBox", parent, 0, 0)
    set TasButtonListInputFrame[TasButtonList__Counter]=frame
    call BlzTriggerRegisterFrameEvent(TasButtonList__SearchTrigger, frame, FRAMEEVENT_EDITBOX_TEXT_CHANGED)
    call BlzFrameSetPoint(frame, FRAMEPOINT_TOPRIGHT, parent, FRAMEPOINT_TOPRIGHT, 0, 0)
    call SaveInteger(TasButtonList_Hash, GetHandleId(frame), 0, TasButtonList__Counter)

    set frame=null
    return TasButtonList__Counter
endfunction

// this should have beend called InitTasButtonListObject8
function InitTasButtonListObjectEx takes framehandle parent,code buttonAction,code rightClickAction,code updateAction,code searchAction,code filterAction returns integer
    return InitTasButtonListObject8c(parent , buttonAction , rightClickAction , updateAction , searchAction , filterAction , null , null)
endfunction

function InitTasButtonListObject takes framehandle parent,code buttonAction,code updateAction,code searchAction,code filterAction returns integer
    return (InitTasButtonListObject8c((parent ) , ( buttonAction ) , ( null ) , ( updateAction ) , ( searchAction ) , ( filterAction) , null , null)) // INLINED!!
endfunction

function InitTasButtonListSlider10a takes integer listIndex,integer stepSize,integer rowCount,real colGap,real rowGap returns nothing
    local framehandle frame= BlzCreateFrameByType("SLIDER", "FrameListSlider", TasButtonListParent[listIndex], "QuestMainListScrollBar", 0)
    local framehandle buttonFrame= BlzGetFrameByName(TasButtonListButtonName[listIndex], TasButtonListCreateContext[listIndex] + stepSize)
    set TasButtonListSlider[listIndex]=frame
    call SaveInteger(TasButtonList_Hash, GetHandleId(frame), 0, listIndex) // the slider nows the TasButtonListobject
    set TasButtonListStepSize[listIndex]=stepSize
    
    call BlzFrameSetStepSize(frame, stepSize)
    call BlzFrameClearAllPoints(frame)
    call BlzFrameSetVisible(frame, true)
    call BlzFrameSetMinMaxValue(frame, 0, 0)
    call BlzFrameSetPoint(frame, FRAMEPOINT_TOPLEFT, buttonFrame, FRAMEPOINT_TOPRIGHT, 0, 0)
    call BlzFrameSetSize(frame, 0.012, BlzFrameGetHeight(buttonFrame) * rowCount + rowGap * ( rowCount - 1 ))
    call BlzTriggerRegisterFrameEvent(TasButtonList__SliderTrigger, frame, FRAMEEVENT_SLIDER_VALUE_CHANGED)
    call BlzTriggerRegisterFrameEvent(TasButtonList__SliderTrigger, frame, FRAMEEVENT_MOUSE_WHEEL)


        set TasButtonListSliderText[listIndex]=CreateSimpleTooltip(TasButtonListSlider[listIndex] , "1000/1000")
        call BlzFrameClearAllPoints(TasButtonListSliderText[listIndex])
        call BlzFrameSetPoint(TasButtonListSliderText[listIndex], FRAMEPOINT_BOTTOMRIGHT, TasButtonListSlider[listIndex], FRAMEPOINT_TOPLEFT, 0, 0)

    
endfunction

function InitTasButtonListSlider takes integer listIndex,integer stepSize,integer rowCount returns nothing
    call InitTasButtonListSlider10a(listIndex , stepSize , rowCount , 0 , 0)
endfunction

//Demo Creators
function CreateTasButtonTooltip takes framehandle frameButton,framehandle parent,integer createContext returns nothing
    local framehandle frameParent= BlzCreateFrame("TasButtonListTooltipBoxFrame", frameButton, 0, createContext)
    local framehandle frame= BlzGetFrameByName("TasButtonListTooltipBox", createContext)
    local framehandle frameText= BlzGetFrameByName("TasButtonListTooltipText", createContext)
    call BlzGetFrameByName("TasButtonListTooltipIcon", createContext)
    call BlzGetFrameByName("TasButtonListTooltipName", createContext)
    call BlzGetFrameByName("TasButtonListTooltipSeperator", createContext)
    call BlzFrameSetTooltip(frameButton, frameParent)

    call BlzFrameSetPoint(frameText, FRAMEPOINT_TOPRIGHT, parent, FRAMEPOINT_TOPLEFT, - 0.001, - 0.052)
    call BlzFrameSetPoint(frame, FRAMEPOINT_TOPLEFT, BlzGetFrameByName("TasButtonListTooltipIcon", createContext), FRAMEPOINT_TOPLEFT, - 0.005, 0.005)
    call BlzFrameSetPoint(frame, FRAMEPOINT_BOTTOMRIGHT, frameText, FRAMEPOINT_BOTTOMRIGHT, 0.005, - 0.005)
endfunction

function CreateTasButtonList10 takes string buttonName,integer cols,integer rows,framehandle parent,code buttonAction,code rightClickAction,code updateAction,code searchAction,code filterAction,code asyncAction,code asyncRigthAction,real colGap,real rowGap returns integer
    local integer buttonCount= rows * cols
    local integer listIndex= InitTasButtonListObject8c(parent , buttonAction , rightClickAction , updateAction , searchAction , filterAction , asyncAction , asyncRigthAction)
    local integer i= 1
    local framehandle frame
    local integer frameHandle

    local integer rowRemain= cols
    set TasButtonListButtonName[listIndex]=buttonName
    set TasButtonListCreateContext[listIndex]=TasButtonList_CreateContextCounter
    set TasButtonListButtonCount[listIndex]=buttonCount
    loop
        exitwhen i > buttonCount
        set TasButtonList_CreateContextCounter=TasButtonList_CreateContextCounter + 1
        set frame=BlzCreateFrame(buttonName, parent, 0, TasButtonList_CreateContextCounter)
        set frameHandle=GetHandleId(frame)
        if frameHandle == 0 then
            call BJDebugMsg("TasButtonList - Error - can't create Button:" + buttonName)
            //return 0
        endif
        call SaveInteger(TasButtonList_Hash, frameHandle, 1, i)
        call SaveInteger(TasButtonList_Hash, frameHandle, 0, listIndex)
        
        call BlzFrameSetText(frame, I2S(i))
        // for some reason in a lan test with same Pc the BlzFrameGetText was not set for the second User.
        // restarting warcraft 3 fixed it.
        //call BJDebugMsg("TasButtonList " + I2S(i) + " "+ BlzFrameGetText(frame))
        //call SaveInteger(Hash, frameHandle, 2, CreateContextCounter)
        call BlzTriggerRegisterFrameEvent(TasButtonList__ButtonTrigger, frame, FRAMEEVENT_CONTROL_CLICK)
        call BlzTriggerRegisterFrameEvent(TasButtonList__ButtonRightTrigger, frame, FRAMEEVENT_MOUSE_UP)
        call BlzTriggerRegisterFrameEvent(TasButtonList__ButtonScrollTrigger, frame, FRAMEEVENT_MOUSE_WHEEL)
        //give these handleIds to no desync when calling them in a async manner
        call BlzGetFrameByName("TasButtonIcon", TasButtonList_CreateContextCounter)
        call BlzGetFrameByName("TasButtonText", TasButtonList_CreateContextCounter)
        call BlzGetFrameByName("TasButtonIconGold", TasButtonList_CreateContextCounter)
        call BlzGetFrameByName("TasButtonTextGold", TasButtonList_CreateContextCounter)
        call BlzGetFrameByName("TasButtonIconLumber", TasButtonList_CreateContextCounter)
        call BlzGetFrameByName("TasButtonTextLumber", TasButtonList_CreateContextCounter)

        call CreateTasButtonTooltip(frame , parent , TasButtonList_CreateContextCounter)

        if i > 1 then
            if rowRemain == 0 then
                call BlzFrameSetPoint(frame, FRAMEPOINT_TOP, BlzGetFrameByName(buttonName, TasButtonList_CreateContextCounter - cols), FRAMEPOINT_BOTTOM, 0, - rowGap)
                set rowRemain=cols
            else
                //call BlzFrameSetPoint(frame, FRAMEPOINT_RIGHT, BlzGetFrameByName(buttonName, CreateContextCounter - 1), FRAMEPOINT_LEFT, -colGap, 0)
                call BlzFrameSetPoint(frame, FRAMEPOINT_LEFT, BlzGetFrameByName(buttonName, TasButtonList_CreateContextCounter - 1), FRAMEPOINT_RIGHT, colGap, 0)
            endif
        else
            call BlzFrameSetPoint(frame, FRAMEPOINT_TOPRIGHT, TasButtonListInputFrame[listIndex], FRAMEPOINT_BOTTOMRIGHT, - BlzFrameGetWidth(frame) * cols - colGap * ( cols - 1 ), 0)
            //call BlzFrameSetPoint(frame, FRAMEPOINT_TOPRIGHT, TasButtonListInputFrame[listIndex], FRAMEPOINT_BOTTOMRIGHT, 0, 0)
        endif
        set rowRemain=rowRemain - 1


        set i=i + 1
    endloop
    call InitTasButtonListSlider10a(listIndex , cols , rows , colGap , rowGap)
    set frame=null
    return listIndex
endfunction

function CreateTasButtonList8c takes string buttonName,integer cols,integer rows,framehandle parent,code buttonAction,code rightClickAction,code updateAction,code searchAction,code filterAction,code asyncAction,code asyncRigthAction returns integer
    return CreateTasButtonList10(buttonName , cols , rows , parent , buttonAction , rightClickAction , updateAction , searchAction , filterAction , asyncAction , asyncRigthAction , TasButtonListGapCol , TasButtonListGapRow)
endfunction


function CreateTasButtonListEx takes string buttonName,integer cols,integer rows,framehandle parent,code buttonAction,code rightClickAction,code updateAction,code searchAction,code filterAction returns integer
    return (CreateTasButtonList10((buttonName ) , ( cols ) , ( rows ) , ( parent ) , ( buttonAction ) , ( rightClickAction ) , ( updateAction ) , ( searchAction ) , ( filterAction ) , ( null ) , ( null) , TasButtonListGapCol , TasButtonListGapRow)) // INLINED!!
endfunction

function CreateTasButtonList takes integer buttonCount,framehandle parent,code buttonAction,code updateAction,code searchAction,code filterAction returns integer
    return (CreateTasButtonList10((("TasButton" ) ) , ( ( 1 ) ) , ( ( buttonCount ) ) , ( ( parent ) ) , ( ( buttonAction ) ) , ( ( null ) ) , ( ( updateAction ) ) , ( ( searchAction ) ) , ( ( filterAction) ) , ( null ) , ( null) , TasButtonListGapCol , TasButtonListGapRow)) // INLINED!!
endfunction

function CreateTasButtonListV2 takes integer rowCount,framehandle parent,code buttonAction,code updateAction,code searchAction,code filterAction returns integer
    return (CreateTasButtonList10((("TasButtonSmall" ) ) , ( ( 2 ) ) , ( ( rowCount ) ) , ( ( parent ) ) , ( ( buttonAction ) ) , ( ( null ) ) , ( ( updateAction ) ) , ( ( searchAction ) ) , ( ( filterAction) ) , ( null ) , ( null) , TasButtonListGapCol , TasButtonListGapRow)) // INLINED!!
endfunction

function CreateTasButtonListV3 takes integer rowCount,framehandle parent,code buttonAction,code updateAction,code searchAction,code filterAction returns integer
    return (CreateTasButtonList10((("TasButtonGrid" ) ) , ( ( 3 ) ) , ( ( rowCount ) ) , ( ( parent ) ) , ( ( buttonAction ) ) , ( ( null ) ) , ( ( updateAction ) ) , ( ( searchAction ) ) , ( ( filterAction) ) , ( null ) , ( null) , TasButtonListGapCol , TasButtonListGapRow)) // INLINED!!
endfunction

function TasButtonListAddDataEx takes integer listIndex,integer data,integer playerIndex returns nothing
    local integer listHandle= GetHandleId(LoadLocationHandle(TasButtonList_Hash, GetHandleId(TasButtonListDataList[listIndex]), playerIndex))
    local integer index= LoadInteger(TasButtonList_Hash, listHandle, 0) + 1
    call SaveInteger(TasButtonList_Hash, listHandle, 0, index)
    call SaveInteger(TasButtonList_Hash, listHandle, index, data)
    if GetLocalPlayer() == Player(playerIndex) then
        // add to current filtered for local player only
        set listHandle=GetHandleId(TasButtonListDataListFiltered[listIndex])
        call SaveInteger(TasButtonList_Hash, listHandle, 0, index)
        call SaveInteger(TasButtonList_Hash, listHandle, index, index)
        call BlzFrameSetMinMaxValue(TasButtonListSlider[listIndex], TasButtonListButtonCount[listIndex], index)
    endif
endfunction

function TasButtonListAddData takes integer listIndex,integer data returns nothing
    local integer playerIndex= 0
    loop
        call TasButtonListAddDataEx(listIndex , data , playerIndex)
        set playerIndex=playerIndex + 1
        exitwhen playerIndex == bj_MAX_PLAYER_SLOTS
    endloop
endfunction

function TasButtonListCopyDataEx takes integer writeObject,integer readObject,integer playerIndex returns nothing
    local integer i= LoadInteger(TasButtonList_Hash, GetHandleId(TasButtonListDataListFiltered[readObject]), 0)
    local integer listHandleRead= GetHandleId(LoadLocationHandle(TasButtonList_Hash, GetHandleId(TasButtonListDataList[readObject]), playerIndex))
    local integer listHandleWrite= GetHandleId(LoadLocationHandle(TasButtonList_Hash, GetHandleId(TasButtonListDataList[writeObject]), playerIndex))
    call FlushChildHashtable(TasButtonList_Hash, listHandleWrite)
    call RemoveLocation(TasButtonListDataList[writeObject])

    loop
        exitwhen i < 0
        call SaveInteger(TasButtonList_Hash, listHandleWrite, i, LoadInteger(TasButtonList_Hash, listHandleRead, i))
        set i=i - 1
    endloop
    if GetLocalPlayer() == Player(playerIndex) then
        call BlzFrameSetMinMaxValue(TasButtonListSlider[writeObject], TasButtonListButtonCount[writeObject], LoadInteger(TasButtonList_Hash, listHandleRead, 0))
        call UpdateTasButtonList(writeObject)
    endif
endfunction

function TasButtonListCopyData takes integer writeObject,integer readObject returns nothing
    local integer playerIndex= 0
    loop
        call TasButtonListCopyDataEx(writeObject , readObject , playerIndex)
        set playerIndex=playerIndex + 1
        exitwhen playerIndex == bj_MAX_PLAYER_SLOTS
    endloop
endfunction

function TasButtonListRemoveDataEx takes integer listIndex,integer data,integer playerIndex returns nothing
    local integer listHandle= GetHandleId(LoadLocationHandle(TasButtonList_Hash, GetHandleId(TasButtonListDataList[listIndex]), playerIndex))
    local integer i= LoadInteger(TasButtonList_Hash, listHandle, 0)
    local integer max= LoadInteger(TasButtonList_Hash, listHandle, 0)
    local integer temp
    loop
        exitwhen i <= 0
        if LoadInteger(TasButtonList_Hash, listHandle, 0) == data then
            call SaveInteger(TasButtonList_Hash, listHandle, i, LoadInteger(TasButtonList_Hash, listHandle, max))
            call SaveInteger(TasButtonList_Hash, listHandle, 0, max - 1)
            call RemoveSavedInteger(TasButtonList_Hash, listHandle, max)
            exitwhen true
        endif
        set i=i - 1
    endloop
    if GetLocalPlayer() == Player(playerIndex) then
        call BlzFrameSetMinMaxValue(TasButtonListSlider[listIndex], TasButtonListButtonCount[listIndex], LoadInteger(TasButtonList_Hash, listHandle, 0))
    endif
endfunction

function TasButtonListRemoveData takes integer listIndex,integer data returns nothing
    local integer playerIndex= 0
    loop
        call TasButtonListRemoveDataEx(listIndex , data , playerIndex)
        set playerIndex=playerIndex + 1
        exitwhen playerIndex == bj_MAX_PLAYER_SLOTS
    endloop
endfunction

function TasButtonListClearDataEx takes integer listIndex,integer playerIndex returns nothing
    call FlushChildHashtable(TasButtonList_Hash, GetHandleId(LoadLocationHandle(TasButtonList_Hash, GetHandleId(TasButtonListDataList[listIndex]), playerIndex)))
    if GetLocalPlayer() == Player(playerIndex) then
        call FlushChildHashtable(TasButtonList_Hash, GetHandleId(TasButtonListDataListFiltered[listIndex]))
        call BlzFrameSetMinMaxValue(TasButtonListSlider[listIndex], 0, 0)
    endif
endfunction

function TasButtonListClearData takes integer listIndex returns nothing
    local integer playerIndex= 0
    loop
        call TasButtonListClearDataEx(listIndex , playerIndex)
        set playerIndex=playerIndex + 1
        exitwhen playerIndex == bj_MAX_PLAYER_SLOTS
    endloop
endfunction

    function TasButtonList__SyncRightTriggerAction takes nothing returns nothing
        local integer listIndex= LoadInteger(TasButtonList_Hash, GetHandleId(BlzGetTriggerFrame()), 0)
        local integer dataIndex= R2I(BlzGetTriggerFrameValue() + 0.5)
        set TasButtonListData=LoadInteger(TasButtonList_Hash, GetHandleId(LoadLocationHandle(TasButtonList_Hash, GetHandleId(TasButtonListDataList[listIndex]), GetPlayerId(GetTriggerPlayer()))), dataIndex)
        set TasButtonListIndex=listIndex
        call TriggerExecute(TasButtonListRightAction[listIndex])

        call UpdateTasButtonList(listIndex)
    endfunction
    function TasButtonList__ButtonRightClickTriggerAction takes nothing returns nothing
    local framehandle frame= BlzGetTriggerFrame()
    local integer buttonIndex= LoadInteger(TasButtonList_Hash, GetHandleId(frame), 1)
    local integer listIndex= LoadInteger(TasButtonList_Hash, GetHandleId(frame), 0)
    local integer dataIndex= LoadInteger(TasButtonList_Hash, GetHandleId(TasButtonListDataListFiltered[listIndex]), buttonIndex + TasButtonListViewPoint[listIndex])
    local integer data= LoadInteger(TasButtonList_Hash, GetHandleId(LoadLocationHandle(TasButtonList_Hash, GetHandleId(TasButtonListDataList[listIndex]), GetPlayerId(GetTriggerPlayer()))), dataIndex)

    set TasButtonListData=data
    set TasButtonListIndex=listIndex
    set TasButtonListFrame=frame

        if (IsRightClick__isRight[GetPlayerId((GetTriggerPlayer()))]) and GetLocalPlayer() == GetTriggerPlayer() then // INLINED!!
            call TriggerEvaluate(TasButtonListAsyncRightAction[listIndex])
            call StartSound(TasButtonList__RightClickSound)
            call BlzFrameSetValue(TasButtonListSyncFrameRight[listIndex], dataIndex)
        endif
    endfunction

 function TasButtonList__LoadToc takes nothing returns nothing
    // this function should be Repeated when the game is loaded
    call BlzLoadTOCFile("war3mapimported\\TasButtonList.toc")
    set TasButtonList_CreateContextCounter=0
 endfunction
 function TasButtonList__Init takes nothing returns nothing
    local integer loopA= 0
    
    call TasButtonList__LoadToc()

        call TriggerAddAction(FrameLoader__actionTrigger, (function TasButtonList__LoadToc)) // INLINED!!


    call TriggerAddAction(TasButtonList__SyncTrigger, function TasButtonListTriggerActionSync)
    call TriggerAddAction(TasButtonList__ButtonTrigger, function TasButtonListTriggerActionButton)
    call TriggerAddAction(TasButtonList__SearchTrigger, function TasButtonListTriggerActionSearch)
    call TriggerAddAction(TasButtonList__ButtonScrollTrigger, function TasButtonListTriggerActionButtonScroll)
    call TriggerAddAction(TasButtonList__SliderTrigger, function TasButtonListTriggerActionSlider)
    call TriggerAddAction(TasButtonList__SyncRightTrigger, function TasButtonList__SyncRightTriggerAction)
    call TriggerAddAction(TasButtonList__ButtonRightTrigger, function TasButtonList__ButtonRightClickTriggerAction)

    set TasButtonList__RightClickSound=CreateSound("Sound\\Interface\\MouseClick1.wav", false, false, false, 10, 10, "")
    call SetSoundParamsFromLabel(TasButtonList__RightClickSound, "InterfaceClick")
    call SetSoundDuration(TasButtonList__RightClickSound, 239)
    
endfunction


//library TasButtonList ends
//library ToggleIconButtonGroup:
// function ToggleIconButtonGroupGetValue takes integer groupObject, player p returns integer
// function ToggleIconButtonGroupClear takes integer groupObject, player p returns nothing
// function ToggleIconButtonGroupAddButton takes integer groupObject, integer buttonObject returns nothing
// function ToggleIconButtonGroupClearButton takes integer groupObject, framehandle parent, string iconPath returns framehandle
// function ToggleIconButtonGroupClearButtonSimple takes integer groupObject returns framehandle
// function CreateToggleIconButtonGroup takes code action returns integer

    
    function ToggleIconButtonGroupGetValue takes integer groupObject,player p returns integer
        local integer returnValue= 0
        local integer loopA= ToggleIconButtonGroup_IndexStart[groupObject]
        loop
            exitwhen loopA > ToggleIconButtonGroup_IndexEnd[groupObject]
            set returnValue=returnValue + ToggleIconButtonGetValue(loopA , p)
            set loopA=loopA + 1
        endloop
        return returnValue
    endfunction

    function ToggleIconButtonGroupClear takes integer groupObject,player p returns nothing
        local integer loopA= ToggleIconButtonGroup_IndexStart[groupObject]
        loop
            exitwhen loopA > ToggleIconButtonGroup_IndexEnd[groupObject]
            call ToggleIconButtonSetValue(loopA , p , false)
            set loopA=loopA + 1
        endloop
    endfunction
    
    function ToggleIconButtonGroup__GroupTriggerAction takes nothing returns nothing
        local integer groupObject= ToggleIconButtonGroup_groupIndex[ToggleIconButton_Index]
        set ToggleIconButtonGroup_Index=groupObject
        set ToggleIconButtonGroup_Value=ToggleIconButtonGroupGetValue(groupObject , ToggleIconButton_Player)
        call TriggerEvaluate(ToggleIconButtonGroup_Action[groupObject])
    endfunction


    function ToggleIconButtonGroupAddButton takes integer groupObject,integer buttonObject returns nothing
        if ToggleIconButtonGroup_IndexStart[groupObject] == 0 then
            set ToggleIconButtonGroup_IndexStart[groupObject]=buttonObject
        endif
        set ToggleIconButtonGroup_IndexEnd[groupObject]=buttonObject
        call TriggerAddCondition(ToggleIconButton_Action[(buttonObject )], Filter(( function ToggleIconButtonGroup__GroupTriggerAction))) // INLINED!!
        set ToggleIconButtonGroup_groupIndex[buttonObject]=groupObject
        call BlzTriggerRegisterFrameEvent(ToggleIconButtonGroup__RightClickTrigger, ToggleIconButton_Button[buttonObject], FRAMEEVENT_MOUSE_UP)
    endfunction

    function ToggleIconButtonGroupClearButton takes integer groupObject,framehandle parent,string iconPath returns framehandle
        local framehandle but= BlzCreateFrame("TasItemShopCatButton", parent, 0, 0)
        local framehandle icon= BlzGetFrameByName("TasItemShopCatButtonBackdrop", 0)
        local framehandle iconPushed= BlzGetFrameByName("TasItemShopCatButtonBackdropPushed", 0)
        // only one clearButton
        if ToggleIconButtonGroup_ClearButton[groupObject] == null then
            set but=BlzCreateFrame("TasItemShopCatButton", parent, 0, 0)
            set icon=BlzGetFrameByName("TasItemShopCatButtonBackdrop", 0)
            set iconPushed=BlzGetFrameByName("TasItemShopCatButtonBackdropPushed", 0)
            call BlzFrameSetSize(but, ToggleIconButton_DefaultSizeX, ToggleIconButton_DefaultSizeY)
            call BlzFrameSetTexture(icon, iconPath, 0, false)
            call BlzFrameSetTexture(iconPushed, iconPath, 0, false)
            call CreateSimpleTooltip(but , "Clear")
            call BlzFrameSetText(but, I2S(groupObject))
            set ToggleIconButtonGroup_ClearButton[groupObject]=but
            set ToggleIconButtonGroup_ClearButtonIcon[groupObject]=icon
            set ToggleIconButtonGroup_ClearButtonIconPushed[groupObject]=iconPushed
            
            call BlzTriggerRegisterFrameEvent(ToggleIconButtonGroup__ClearTrigger, but, FRAMEEVENT_CONTROL_CLICK)
            return but
        else
            return ToggleIconButtonGroup_ClearButton[groupObject]
        endif
    endfunction

    function ToggleIconButtonGroupClearButtonSimple takes integer groupObject returns framehandle
        return ToggleIconButtonGroupClearButton(groupObject , BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0) , "ReplaceableTextures\\CommandButtons\\BTNCancel")
    endfunction

    function CreateToggleIconButtonGroup takes code action returns integer
        set ToggleIconButtonGroup_Count=ToggleIconButtonGroup_Count + 1
        set ToggleIconButtonGroup_Action[ToggleIconButtonGroup_Count]=CreateTrigger()
        call TriggerAddCondition(ToggleIconButtonGroup_Action[ToggleIconButtonGroup_Count], Filter(action))
        return ToggleIconButtonGroup_Count
    endfunction

    function ToggleIconButtonGroup__RightClickTriggerAction takes nothing returns nothing
        local player p= GetTriggerPlayer()
        local framehandle frame= BlzGetTriggerFrame()
        local integer buttonObject
        local integer groupObject
        if (IsRightClick__isRight[GetPlayerId((p))]) then // INLINED!!
            set buttonObject=S2I(BlzFrameGetText(frame))
            set groupObject=ToggleIconButtonGroup_groupIndex[buttonObject]
            call StartSoundForPlayerBJ(p, ToggleIconButton_Sound)
            call ToggleIconButtonGroupClear(groupObject , p)
            call ToggleIconButtonSetValue(buttonObject , p , true)
            set ToggleIconButton_Index=buttonObject
            set ToggleIconButtonGroup_Index=groupObject
            set ToggleIconButton_Player=p
            set ToggleIconButtonGroup_Value=ToggleIconButtonGroupGetValue(groupObject , p)
            call TriggerEvaluate(ToggleIconButtonGroup_Action[groupObject])
        endif
    endfunction

    function ToggleIconButtonGroup__ClearTriggerAction takes nothing returns nothing
        local framehandle but= BlzGetTriggerFrame()
        local integer groupObject= S2I(BlzFrameGetText(but))
        local player p= GetTriggerPlayer()
        call ToggleIconButtonGroupClear(groupObject , p)
        // remove focus
        call BlzFrameSetEnable(but, false)
        call BlzFrameSetEnable(but, true)

        set ToggleIconButton_Index=0
        set ToggleIconButtonGroup_Index=groupObject
        set ToggleIconButton_Player=p
        set ToggleIconButtonGroup_Value=ToggleIconButtonGroupGetValue(groupObject , p)
        call TriggerEvaluate(ToggleIconButtonGroup_Action[groupObject])
    endfunction

    function ToggleIconButtonGroup__init_function takes nothing returns nothing
        set ToggleIconButtonGroup__Trigger=CreateTrigger()
        call TriggerAddAction(ToggleIconButtonGroup__Trigger, function ToggleIconButtonGroup__GroupTriggerAction)
        call TriggerAddAction(ToggleIconButtonGroup__ClearTrigger, function ToggleIconButtonGroup__ClearTriggerAction)
        call TriggerAddAction(ToggleIconButtonGroup__RightClickTrigger, function ToggleIconButtonGroup__RightClickTriggerAction)
    endfunction

//library ToggleIconButtonGroup ends
//library TasItemShop:
    // TasItemShopV4f by Tasyen
    // TasItemSetCategory(itemCode, category)
    // TasItemShopAdd(itemCode, category)
        // adds itemCode to the common Buyable Item pool and sets the category
    // TasItemShopAdd5(itemCodeA, itemCodeB, itemCodeC, itemCodeD, itemCodeE)
        // adds 5 itemCodes to the common Buyable Item pool and sets the category to none
        // wrapper for TasItemShopAdd
    // TasItemShopAddCategory(icon, text)
        // define a new Category, should be done before the UI is created.
        // Returns the value of the new category
    // TasItemShopCreateShop(unitCode, whiteList, goldFactor, lumberFactor, goldFunction, lumberFunction)
    // TasItemShopAddShop(unitCode, itemCode)
        // adds itemcode for that specific shop
    // TasItemShopAddShop5(unitCode, itemCodeA, itemCodeB, itemCodeC, itemCodeD, itemCodeE)
        // add 5 itemCodes to that shop
        // // wrapper for TasItemShopAddShop
    // TasItemShopGoldFactor(unitCode, factor, itemCode)
        // sets the goldFactor for that shop to the given data
        // use 0 to change the default
    // TasItemShopLumberFactor(unitCode, factor, itemCode)
        // lumberFactor ^^
    // TasItemShopAddHaggleSkill(skill, goldBase, lumberBase, goldAdd, lumberAdd)
        // adds a new Skill which will affect the costs in TasItemShop.
    
    
    // TasItemShop_SetQuickLink(player, integer itemCode)
        // add/remove itemCode from quickLink for player
    // TasItemShop_ClearQuickLink(player)
    
    // TasItemShopUIShow(player, shop, shopperGroup, mainShoper)
        // TasItemShopUIShow(player) hides the shop for player
        // shopperGroup are all units providing items, if you use null the current shoppergroup remains intact. When giving something else the group contains only mainShoper.
        // mainShoper is the unit consider for haggel and gains the items. If you gave a group then you can skip mainShoper then a random is taken.
        // with player and shop the shoppers are kept but the shop updates.
        // Beaware that this System does only update on user input it will not check distance/live or anything.
    
    // from TasItemFusion Add2 to Add6 are wrappers that call TasItemFusionAdd multiple times.
    // TasItemFusionAdd onto the same result adds more mats.
    // function TasItemFusionAdd takes integer result, integer mat returns nothing
    // function TasItemFusionAdd2 takes integer result, integer a, integer b returns nothing
    // function TasItemFusionAdd3 takes integer result, integer a, integer b, integer c returns nothing
    // function TasItemFusionAdd4 takes integer result, integer a, integer b, integer c, integer d returns nothing
    // function TasItemFusionAdd5 takes integer result, integer a, integer b, integer c, integer d, integer e returns nothing
    // function TasItemFusionAdd6 takes integer result, integer a, integer b, integer c, integer d, integer e, integer f returns nothing
    
        function TasItemShop_GetParent takes nothing returns framehandle
            local framehandle parent
            if TasItemShop_IsReforged then
                set parent=BlzGetFrameByName("ConsoleUIBackdrop", 0)
            else
                call CreateLeaderboardBJ(bj_FORCE_ALL_PLAYERS, "title")
                set parent=BlzGetFrameByName("Leaderboard", 0)
                call BlzFrameSetSize(parent, 0, 0)
                call BlzFrameSetVisible(BlzGetFrameByName("LeaderboardBackdrop", 0), false)
                call BlzFrameSetVisible(BlzGetFrameByName("LeaderboardTitle", 0), false)
            endif
            return parent
        endfunction
        function TasItemShop_CostModifier takes real gold,real lumber,integer itemCode,unit buyer,unit shop,integer shopObject returns nothing
            local integer loopA
            local integer level
            local integer skill
            // this function is called for each Button that shows costs in the shop UI and right before buying the item.
            // Beaware that this function is also called in a async manner -> no sideeffects or state changes.
            // buyer got the Haggling skill?
            set loopA=TasItemShop_HaggleCount
            
            loop
                exitwhen loopA < 1
                set skill=TasItemShop_HaggleSkill[loopA]
                set level=GetUnitAbilityLevel(buyer, skill)
                if level > 0 then
                    set gold=gold * ( TasItemShop_HaggleGold[loopA] + TasItemShop_HaggleGoldAdd[loopA] * level )
                    set lumber=lumber * ( TasItemShop_HaggleLumber[loopA] + TasItemShop_HaggleLumberAdd[loopA] * level )
                endif
                set loopA=loopA - 1
            endloop
    
            if shopObject > 0 then
                if (HaveSavedReal(Table___ht, (((s__HashTable__getindex(TasItemShop_ShopsGold,shopObject)))), (itemCode))) then // INLINED!!
                    set gold=gold * (LoadReal(Table___ht, (((s__HashTable__getindex(TasItemShop_ShopsGold,shopObject)))), (itemCode))) // INLINED!!
                    set lumber=lumber * (LoadReal(Table___ht, (((s__HashTable__getindex(TasItemShop_ShopsLumber,shopObject)))), (itemCode))) // INLINED!!
                else
                    set gold=gold * (LoadReal(Table___ht, (((s__HashTable__getindex(TasItemShop_ShopsGold,shopObject)))), (0))) // INLINED!!
                    set lumber=lumber * (LoadReal(Table___ht, (((s__HashTable__getindex(TasItemShop_ShopsLumber,shopObject)))), (0))) // INLINED!!
                endif
                set TasItemShop_TempGoldR=gold
                set TasItemShop_TempLumberR=lumber
                call TriggerEvaluate(TasItemShop_ShopCostAction[(LoadInteger(Table___ht, (TasItemShop_Shops), (shopObject)))]) // INLINED!!
            endif
    
            set TasItemShop_TempGold=R2I(gold + 0.5)
            set TasItemShop_TempLumber=R2I(lumber + 0.5)
        endfunction
    
        function TasItemShop_GetItemSellCosts takes unit u,unit shop,item i returns nothing
            local integer itemCode= GetItemTypeId(i)
            local integer gold
            local integer lumber
            local integer charges
            set gold=R2I(TasItemGetCostGold(itemCode) * TasItemShop_SellFactor)
            set lumber=R2I(TasItemGetCostLumber(itemCode) * TasItemShop_SellFactor)
            if TasItemShop_SellUsesCostModifier then
                call TasItemShop_CostModifier(gold , lumber , itemCode , u , shop , GetUnitTypeId(shop))
                set gold=TasItemShop_TempGold
                set lumber=TasItemShop_TempLumber
            endif
            set charges=TasItemGetCharges(itemCode)
            if charges > 0 then
                set gold=GetItemCharges(i) * gold / charges
                set lumber=GetItemCharges(i) * lumber / charges
            endif
            set TasItemShop_TempGold=gold
            set TasItemShop_TempLumber=lumber
        endfunction
    
        function TasItemShop_IsValidShopper takes player p,unit shop,unit u,real range returns boolean
            if not IsUnitOwnedByPlayer(u, p) then
                //print("IsUnitOwnedByPlayer")
                return false
            endif
            if UnitInventorySize(u) < 1 then
                //print("UnitInventorySize")
                return false
            endif
            if IsUnitType(u, UNIT_TYPE_DEAD) then
                //print("UNIT_TYPE_DEAD")
                return false
            endif
            if IsUnitPaused(u) then
                //print("IsUnitPaused")
                return false
            endif
            if IsUnitHidden(u) then
                //print("IsUnitHidden")
                return false
            endif
            if IsUnitIllusion(u) then
                //print("IsUnitIllusion")
                return false
            endif
            if not IsUnitInRange(shop, u, range) then
                //print("not IsUnitInRange")
                return false
            endif
            return true
        endfunction
        
        function TasItemShop_ShowSprite takes framehandle frame,player p returns nothing
            if GetLocalPlayer() != p then
               return
            endif
            call BlzFrameSetVisible(TasItemShop_FrameSpriteParent, true)
            call BlzFrameSetModel(TasItemShop_FrameSprite, TasItemShop_spriteModel, 0)
            call BlzFrameSetSpriteAnimate(TasItemShop_FrameSprite, TasItemShop_spriteAnimationIndex, 0)
            call BlzFrameSetPoint(TasItemShop_FrameSprite, FRAMEPOINT_CENTER, frame, FRAMEPOINT_CENTER, 0, 0)
        endfunction
        
        function TasItemSetCategory takes integer itemCode,integer category returns nothing
            call SaveInteger(Table___ht, (TasItemShop_TasItemCategory), (itemCode), ( category)) // INLINED!!
        endfunction
    
        function TasItemShopAdd takes integer itemCode,integer category returns nothing
            if itemCode <= 0 then
                return
            endif
            call SaveInteger(Table___ht, (TasItemShop_TasItemCategory), ((itemCode )), ( ( category))) // INLINED!!
            set TasItemShop_BUY_ABLE_ITEMS_Count=TasItemShop_BUY_ABLE_ITEMS_Count + 1
            set TasItemShop_BUY_ABLE_ITEMS[TasItemShop_BUY_ABLE_ITEMS_Count]=itemCode
            call TasItemCaclCost(itemCode)
        endfunction
    
        function TasItemShopAdd5 takes integer a,integer b,integer c,integer d,integer e returns nothing
            call TasItemShopAdd(a , 0)
            call TasItemShopAdd(b , 0)
            call TasItemShopAdd(c , 0)
            call TasItemShopAdd(d , 0)
            call TasItemShopAdd(e , 0)
        endfunction
    
        function TasItemShopAddHaggleSkill takes integer skill,real goldBase,real lumberBase,real goldAdd,real lumberAdd returns nothing
            set TasItemShop_HaggleCount=TasItemShop_HaggleCount + 1
            set TasItemShop_HaggleSkill[TasItemShop_HaggleCount]=skill
            set TasItemShop_HaggleGold[TasItemShop_HaggleCount]=goldBase
            set TasItemShop_HaggleGoldAdd[TasItemShop_HaggleCount]=goldAdd
            set TasItemShop_HaggleLumber[TasItemShop_HaggleCount]=lumberBase
            set TasItemShop_HaggleLumberAdd[TasItemShop_HaggleCount]=lumberAdd
        endfunction
    
        function TasItemShopAddCategory takes string icon,string text returns integer
            if TasItemShop_CategoryCount >= 31 then
                call BJDebugMsg("To many Categories!! new category " + text + ", " + icon)
            endif
            set TasItemShop_CategoryCount=TasItemShop_CategoryCount + 1
            set TasItemShop_CategoryIcon[TasItemShop_CategoryCount]=icon
            set TasItemShop_CategoryText[TasItemShop_CategoryCount]=text
            set TasItemShop_CategoryValues[TasItemShop_CategoryCount]=(Power2__data[(TasItemShop_CategoryCount)]) // INLINED!!
            return TasItemShop_CategoryValues[TasItemShop_CategoryCount]
        endfunction
    
    
        function TasItemShopCreateShop takes integer unitCode,boolean whiteList,real goldFactor,real lumberFactor,code costFunction returns integer
            if not (HaveSavedInteger(Table___ht, (TasItemShop_Shops), (unitCode))) then // INLINED!!
                set TasItemShop_ShopCount=TasItemShop_ShopCount + 1
                call SaveInteger(Table___ht, (TasItemShop_Shops), (unitCode), ( TasItemShop_ShopCount)) // INLINED!!
                set TasItemShop_ShopWhiteList[TasItemShop_ShopCount]=whiteList
                set TasItemShop_ShopCostAction[TasItemShop_ShopCount]=CreateTrigger()
                if costFunction != null then
                    call TriggerAddCondition(TasItemShop_ShopCostAction[TasItemShop_ShopCount], Filter(costFunction))
                endif
                call SaveReal(Table___ht, (((s__HashTable__getindex(TasItemShop_ShopsGold,unitCode)))), (0), (( goldFactor)*1.0)) // INLINED!!
                call SaveReal(Table___ht, (((s__HashTable__getindex(TasItemShop_ShopsLumber,unitCode)))), (0), (( lumberFactor)*1.0)) // INLINED!!
            endif
            return (LoadInteger(Table___ht, (TasItemShop_Shops), (unitCode))) // INLINED!!
        endfunction
    
        function TasItemShopSetMode takes integer unitCode,boolean whiteList returns nothing
            set TasItemShop_ShopWhiteList[(LoadInteger(Table___ht, (TasItemShop_Shops), (unitCode)))]=whiteList // INLINED!!
        endfunction
    
        function TasItemShopAddShop takes integer unitCode,integer itemCode returns nothing
            if itemCode <= 0 then
                return
            endif
            call TasItemShopCreateShop(unitCode , false , 1.0 , 1.0 , null)
            call TasItemCaclCost(itemCode)
            call SaveBoolean(Table___ht, (((s__HashTable__getindex(TasItemShop_ShopsItems,unitCode)))), (itemCode), ( true)) // INLINED!!
            call SaveInteger(Table___ht, (s__HashTable__getindex(TasItemShop_ShopsItems,unitCode)), (0), ( (LoadInteger(Table___ht, (s__HashTable__getindex(TasItemShop_ShopsItems,unitCode)), (0))) + 1)) // INLINED!!
            call SaveInteger(Table___ht, (s__HashTable__getindex(TasItemShop_ShopsItems,unitCode)), ((LoadInteger(Table___ht, (s__HashTable__getindex(TasItemShop_ShopsItems,unitCode)), (0)))), ( itemCode)) // INLINED!!
        endfunction
    
        function TasItemShopAddShop5 takes integer unitCode,integer a,integer b,integer c,integer d,integer e returns nothing
            call TasItemShopAddShop(unitCode , a)
            call TasItemShopAddShop(unitCode , b)
            call TasItemShopAddShop(unitCode , c)
            call TasItemShopAddShop(unitCode , d)
            call TasItemShopAddShop(unitCode , e)
        endfunction
        
    
        function TasItemShopGoldFactor takes integer unitCode,real factor,integer itemCode returns nothing
            call TasItemShopCreateShop(unitCode , false , 1.0 , 1.0 , null)
            call SaveReal(Table___ht, (((s__HashTable__getindex(TasItemShop_ShopsGold,unitCode)))), (itemCode), (( factor)*1.0)) // INLINED!!
        endfunction
    
        function TasItemShopLumberFactor takes integer unitCode,real factor,integer itemCode returns nothing
            call TasItemShopCreateShop(unitCode , false , 1.0 , 1.0 , null)
            call SaveReal(Table___ht, (((s__HashTable__getindex(TasItemShop_ShopsLumber,unitCode)))), (itemCode), (( factor)*1.0)) // INLINED!!
        endfunction
    
        function TasItemShop_ClearQuickLink takes player p returns nothing
            call FlushChildHashtable(Table___ht, (TasItemShop_QuickLink[GetPlayerId(p)])) // INLINED!!
        endfunction
    
        function TasItemShop_SetQuickLink takes player p,integer itemCode returns nothing
            local integer playerIndex= GetPlayerId(p)
            local integer loopA
            //print("TasItemShopUI.SetQuickLink")
            // have that data already?
            if (LoadBoolean(Table___ht, (((TasItemShop_QuickLink[playerIndex]))), (itemCode))) then // INLINED!!
                set loopA=(LoadInteger(Table___ht, (TasItemShop_QuickLink[playerIndex]), (0))) // INLINED!!
                loop
                    exitwhen loopA <= 0
                    if (LoadInteger(Table___ht, (TasItemShop_QuickLink[playerIndex]), (loopA))) == itemCode then // INLINED!!
                        call SaveInteger(Table___ht, (TasItemShop_QuickLink[playerIndex]), (loopA), ( (LoadInteger(Table___ht, (TasItemShop_QuickLink[playerIndex]), ((LoadInteger(Table___ht, (TasItemShop_QuickLink[playerIndex]), (0)))))))) // INLINED!!
                        call SaveInteger(Table___ht, (TasItemShop_QuickLink[playerIndex]), (0), ( (LoadInteger(Table___ht, (TasItemShop_QuickLink[playerIndex]), (0))) - 1)) // INLINED!!
                        call SaveBoolean(Table___ht, (((TasItemShop_QuickLink[playerIndex]))), (itemCode), ( false)) // INLINED!!
                        // reset offset when falling out of Page 2
                        if (LoadInteger(Table___ht, (TasItemShop_QuickLink[playerIndex]), (0))) <= TasItemShop_refButtonCountQuickLink then // INLINED!!
                            set TasItemShop_CurrentOffSetQuickLink[playerIndex]=0
                        endif
                        exitwhen true
                    endif
                    
                    set loopA=loopA - 1
                    // body
                endloop
            else
                // no, add it
                call SaveInteger(Table___ht, (TasItemShop_QuickLink[playerIndex]), (0), ( (LoadInteger(Table___ht, (TasItemShop_QuickLink[playerIndex]), (0))) + 1)) // INLINED!!
                call SaveInteger(Table___ht, (TasItemShop_QuickLink[playerIndex]), ((LoadInteger(Table___ht, (TasItemShop_QuickLink[playerIndex]), (0)))), ( itemCode)) // INLINED!!
                call SaveBoolean(Table___ht, (((TasItemShop_QuickLink[playerIndex]))), (itemCode), ( true)) // INLINED!!
            endif
        endfunction
        function TasItemShop_CanBuyItem takes integer itemCode,integer shopObject,player p returns boolean
            local boolean whilteList
            if shopObject > 0 then
                set whilteList=TasItemShop_ShopWhiteList[(LoadInteger(Table___ht, (TasItemShop_Shops), (shopObject)))] // INLINED!!
                // do not allow this itemCode or do exclude this itemCode => disallow
                if ( not (LoadBoolean(Table___ht, (((s__HashTable__getindex(TasItemShop_ShopsItems,shopObject)))), (itemCode))) and whilteList ) or ( (LoadBoolean(Table___ht, (((s__HashTable__getindex(TasItemShop_ShopsItems,shopObject)))), (itemCode))) and not whilteList ) then // INLINED!!
                    return false
                endif
                // allow this for this shop?
                if (LoadBoolean(Table___ht, (((s__HashTable__getindex(TasItemShop_ShopsItems,shopObject)))), (itemCode))) and whilteList then // INLINED!!
                    return true
                endif
            endif
            return (LoadBoolean(Table___ht, (((s__HashTable__getindex(TasItemShop_BuyAbleMarked,GetPlayerId(p))))), (itemCode))) // INLINED!!
        endfunction
        function TasItemShop_AllMatsProvided takes player p,integer itemCode,integer shopObject returns boolean
            local integer loopA= 0
            local integer playerIndex= GetPlayerId(p)
            local integer v
            set TasItemShop_MissingCount=0
            call TasItemFusionGetMissingMaterial(p , itemCode , true)
            set loopA=(LoadInteger(Table___ht, (TasItemFusion_PlayerMissing[playerIndex]), (0))) // INLINED!!
            loop
                exitwhen loopA <= 0
                set v=(LoadInteger(Table___ht, (TasItemFusion_PlayerMissing[playerIndex]), (loopA))) // INLINED!!
                if not TasItemShop_CanBuyItem(v , shopObject , p) then
                    set TasItemShop_MissingCount=TasItemShop_MissingCount + 1
                    set TasItemShop_MissingItemCode[TasItemShop_MissingCount]=v
                endif
                set loopA=loopA - 1
            endloop
            return TasItemShop_MissingCount == 0
        endfunction
    
        function TasItemShop_updateItemFrame takes integer createContext,integer data,boolean showGold,boolean showLumber returns nothing
            local integer lumber
            local integer gold
            local integer playerIndex= GetPlayerId(GetLocalPlayer())
            if createContext != TasItemShop_CREATE_CONTEXT_CURRENT then
                call BlzFrameSetVisible(BlzGetFrameByName(TasItemShop_buttonListHighLightFrameName, createContext), (LoadBoolean(Table___ht, (((TasItemShop_MarkedItemCodes))), (data)))) // INLINED!!
            endif
            //set UpdateCounter = UpdateCounter + 1
            //call BlzFrameSetText(UpdateCounterText, I2S(UpdateCounter))
    
            call BlzFrameSetTexture(BlzGetFrameByName("TasButtonIcon", createContext), BlzGetAbilityIcon(data), 0, false)
            call BlzFrameSetText(BlzGetFrameByName("TasButtonText", createContext), GetObjectName(data))
    
            call BlzFrameSetTexture(BlzGetFrameByName("TasButtonListTooltipIcon", createContext), BlzGetAbilityIcon(data), 0, false)
            call BlzFrameSetText(BlzGetFrameByName("TasButtonListTooltipName", createContext), GetObjectName(data))
            call BlzFrameSetText(BlzGetFrameByName("TasButtonListTooltipText", createContext), BlzGetAbilityExtendedTooltip(data, 0))
    
            if StringLength(BlzGetAbilityExtendedTooltip(data, 0)) >= TasItemShop_toolTipLimitBig then
                call BlzFrameSetSize(BlzGetFrameByName("TasButtonListTooltipText", createContext), TasItemShop_toolTipSizeXBig, 0)
            else
                call BlzFrameSetSize(BlzGetFrameByName("TasButtonListTooltipText", createContext), TasItemShop_toolTipSizeX, 0)
            endif
    
            if showGold or showLumber then
                // has material -> Fusion
                if (LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,data)), (0))) > 0 then // INLINED!!
                    call TasItemFusionCalc(GetLocalPlayer() , data , true)
                    set gold=TasItemFusionGold
                    set lumber=TasItemFusionLumber
                else
                    set gold=TasItemGetCostGold(data)
                    set lumber=TasItemGetCostLumber(data)
                endif
                call TasItemShop_CostModifier(gold , lumber , data , TasItemShop_ShoperMain[playerIndex] , TasItemShop_CurrentShop[playerIndex] , TasItemShop_LocalShopObject)
                set gold=TasItemShop_TempGold
                set lumber=TasItemShop_TempLumber
    
                call BlzFrameSetVisible(BlzGetFrameByName("TasButtonTextGold", createContext), showGold)
                call BlzFrameSetVisible(BlzGetFrameByName("TasButtonIconGold", createContext), showGold)
                if showGold then
                    if GetPlayerState(GetLocalPlayer(), PLAYER_STATE_RESOURCE_GOLD) >= gold then
                        call BlzFrameSetText(BlzGetFrameByName("TasButtonTextGold", createContext), I2S(gold))
                    else
                        call BlzFrameSetText(BlzGetFrameByName("TasButtonTextGold", createContext), "|cffff2010" + I2S(gold))
                    endif
                else
                call BlzFrameSetText(BlzGetFrameByName("TasButtonTextGold", createContext), "0")
                endif
                call BlzFrameSetVisible(BlzGetFrameByName("TasButtonTextLumber", createContext), showLumber)
                call BlzFrameSetVisible(BlzGetFrameByName("TasButtonIconLumber", createContext), showLumber)
                if showLumber then
                    if GetPlayerState(GetLocalPlayer(), PLAYER_STATE_RESOURCE_LUMBER) >= lumber then
                        call BlzFrameSetText(BlzGetFrameByName("TasButtonTextLumber", createContext), I2S(lumber))
                    else
                        call BlzFrameSetText(BlzGetFrameByName("TasButtonTextLumber", createContext), "|cffff2010" + I2S(lumber))
                    endif
                else
                    call BlzFrameSetText(BlzGetFrameByName("TasButtonTextLumber", createContext), "0")
                endif
            else
                call BlzFrameSetVisible(BlzGetFrameByName("TasButtonTextGold", createContext), false)
                call BlzFrameSetVisible(BlzGetFrameByName("TasButtonIconGold", createContext), false)
                call BlzFrameSetVisible(BlzGetFrameByName("TasButtonTextLumber", createContext), false)
                call BlzFrameSetVisible(BlzGetFrameByName("TasButtonIconLumber", createContext), false)
            endif
        endfunction
        function TasItemShop_updateItemFrameAction takes nothing returns nothing
         //TasButtonListFrame
        //TasButtonListData
        //TasButtonListIndex
            local integer buttonIndex= S2I(BlzFrameGetText(TasButtonListFrame))
            local integer context= TasButtonListCreateContext[TasButtonListIndex] + buttonIndex
            
            //call BJDebugMsg("updateItemFrameAction" + " context: " + I2S(context) + " buttonIndex: " + I2S(buttonIndex))
            call TasItemShop_updateItemFrame(context , TasButtonListData , TasItemShop_buttonListShowGold , TasItemShop_buttonListShowLumber)
        endfunction
        function TasItemShop_updateUndoButton takes integer data,string actionName returns nothing
            
            call BlzFrameSetTexture(TasItemShop_FrameUndoButtonIcon, BlzGetAbilityIcon(data), 0, false)
            call BlzFrameSetTexture(TasItemShop_FrameUndoButtonIconPushed, BlzGetAbilityIcon(data), 0, false)
            call BlzFrameSetText(TasItemShop_FrameUndoText, GetLocalizedString(TasItemShop_textUndo) + actionName + "\n" + GetObjectName(data))
        endfunction
    
        function TasItemShop_CreateUndo takes player p,integer itemCode,integer gold,integer lumber,string actionName returns integer
            local integer playerIndex= GetPlayerId(p)
            local integer index
            set TasItemShop_UndoPlayerCount[playerIndex]=TasItemShop_UndoPlayerCount[playerIndex] + 1
            set index=TasItemShop_UndoPlayerCount[playerIndex] + playerIndex * TasItemShop_UndoPlayerSize
            if TasItemShop_UndoItems[index] == null then
                set TasItemShop_UndoItems[index]=s__Table_create()
            endif
            if TasItemShop_UndoResults[index] == null then
                set TasItemShop_UndoResults[index]=s__Table_create()
            endif
            set TasItemShop_UndoActionName[index]=actionName
            set TasItemShop_UndoResultCode[index]=itemCode
            set TasItemShop_UndoGold[index]=gold
            set TasItemShop_UndoLumber[index]=lumber
    
            if GetLocalPlayer() == p then
                call BlzFrameSetVisible(TasItemShop_FrameUndoBox, true)
                call TasItemShop_updateUndoButton(itemCode , actionName)
            endif
            return index
        endfunction
        function TasItemShop_updateRefButton takes integer buttonIndex,integer data,unit u returns nothing
         //   call BJDebugMsg(I2S(buttonIndex)+" "+ GetObjectName(data) + " " + GetUnitName(u))
            if data > 0 then
                call BlzFrameSetVisible(TasItemShop_RefButton[buttonIndex], true)
                call BlzFrameSetTexture(TasItemShop_RefButtonIcon[buttonIndex], BlzGetAbilityIcon(data), 0, false)
                call BlzFrameSetTexture(TasItemShop_RefButtonIconPushed[buttonIndex], BlzGetAbilityIcon(data), 0, false)
                call BlzFrameSetTexture(TasItemShop_RefButtonToolTipIcon[buttonIndex], BlzGetAbilityIcon(data), 0, false)
                
                if TasItemShop_RefButtonToolTipName[buttonIndex] != TasItemShop_RefButtonToolTipText[buttonIndex] then
                    call BlzFrameSetText(TasItemShop_RefButtonToolTipName[buttonIndex], GetObjectName(data))
                    call BlzFrameSetText(TasItemShop_RefButtonToolTipText[buttonIndex], BlzGetAbilityExtendedTooltip(data, 0))
                    if StringLength(BlzGetAbilityExtendedTooltip(data, 0)) >= TasItemShop_toolTipLimitBig then
                        call BlzFrameSetSize(TasItemShop_RefButtonToolTipText[buttonIndex], TasItemShop_toolTipSizeXBig, 0)
                    else
                        call BlzFrameSetSize(TasItemShop_RefButtonToolTipText[buttonIndex], TasItemShop_toolTipSizeX, 0)
                    endif
                else
                    call BlzFrameSetText(TasItemShop_RefButtonToolTipText[buttonIndex], GetObjectName(data))
                endif
                
            
                if u != null and IsUnitType(u, UNIT_TYPE_HERO) then
                    call BlzFrameSetText(TasItemShop_RefButtonToolTipText[buttonIndex], BlzFrameGetText(TasItemShop_RefButtonToolTipText[buttonIndex]) + "\n" + GetHeroProperName(u))
                endif
            else
                call BlzFrameSetVisible(TasItemShop_RefButton[buttonIndex], false)
            endif
        endfunction
        function TasItemShop_updateRefButtonsInventory takes player p returns integer
            local integer playerIndex= GetPlayerId(p)
            local integer count= (LoadInteger(Table___ht, (TasItemFusion_PlayerItems[playerIndex]), (0))) // INLINED!!
            local boolean valid
            local integer offSet= TasItemShop_CurrentOffSetInventory[playerIndex]
            local integer validCounter= 0
            local integer loopA= 1
            local integer buttonIndex
            local item i
            
    
            call BlzFrameSetVisible(TasItemShop_FrameInventoryBox, true)
            call BlzFrameSetText(TasItemShop_FrameInventoryPageText, I2S(offSet / TasItemShop_refButtonCountInv + 1))
            call BlzFrameSetVisible(TasItemShop_FrameInventoryPage, not TasItemShop_inventoryShowMainOnly and count > TasItemShop_refButtonCountInv)
            loop
                
                set buttonIndex=loopA + TasItemShop_RefButtonInventoryStart
                if not TasItemShop_inventoryShowMainOnly then
                    set valid=( loopA + offSet <= count )
                    call BlzFrameSetVisible(TasItemShop_RefButton[buttonIndex], valid)
                    if valid then
                        set validCounter=validCounter + 1
                        call TasItemShop_updateRefButton(buttonIndex , GetItemTypeId((LoadItemHandle(Table___ht, (((TasItemFusion_PlayerItems[playerIndex]))), (loopA + offSet)))) , null) // INLINED!!
                        call BlzFrameSetVisible(TasItemShop_RefButtonOverlay[buttonIndex], (LoadItemHandle(Table___ht, (((TasItemFusion_PlayerItems[playerIndex]))), (loopA + offSet))) == TasItemShop_SelectedItem[playerIndex]) // INLINED!!
                    endif
                else
                    set i=UnitItemInSlot(TasItemShop_ShoperMain[playerIndex], loopA - 1)
                    call TasItemShop_updateRefButton(buttonIndex , GetItemTypeId(i) , null)
                    call BlzFrameSetVisible(TasItemShop_RefButtonOverlay[buttonIndex], i == TasItemShop_SelectedItem[playerIndex])
                    if i != null then
                        set validCounter=validCounter + 1
                    endif
                endif
    
                set loopA=loopA + 1
                exitwhen loopA > TasItemShop_refButtonCountInv
    
                // body
            endloop
            
            set i=null
            return validCounter
        endfunction
        
    
        function TasItemShop_updateRefButtonsMaterial takes player p,integer result returns integer
            local integer playerIndex= GetPlayerId(p)
            local integer count= (LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,result)), (0))) // INLINED!!
            local boolean valid
            local integer offSet= TasItemShop_CurrentOffSetMaterial[playerIndex]
            local integer validCounter= 0
            local integer loopA= 1
            local integer buttonIndex
    
            call BlzFrameSetVisible(TasItemShop_FrameMaterialBox, true)
            call BlzFrameSetText(TasItemShop_FrameMaterialPageText, I2S(offSet / TasItemShop_refButtonCountMats + 1))
            call BlzFrameSetVisible(TasItemShop_FrameMaterialPage, count > TasItemShop_refButtonCountMats)
            loop
                set buttonIndex=loopA + TasItemShop_RefButtonMaterialStart
                set valid=( loopA + offSet <= count )
                call BlzFrameSetVisible(TasItemShop_RefButton[buttonIndex], valid)
                if valid then
                    set validCounter=validCounter + 1
                    call TasItemShop_updateRefButton(buttonIndex , (LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,result)), (loopA + offSet))) , null) // INLINED!!
                endif
    
                set loopA=loopA + 1
                exitwhen loopA > TasItemShop_refButtonCountMats
    
                // body
            endloop
            
            return validCounter
        endfunction
    
    
        function TasItemShop_updateRefButtonsUpgrades takes player p,integer result returns integer
            local integer playerIndex= GetPlayerId(p)
            local integer count= (LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_UsedIn,result)), (0))) // INLINED!!
            local boolean valid
            local integer offSet= TasItemShop_CurrentOffSetUpgrade[playerIndex]
            local integer validCounter= 0
            local integer loopA= 1
            local integer buttonIndex
    
            call BlzFrameSetVisible(TasItemShop_FrameUpgradeBox, true)
            call BlzFrameSetText(TasItemShop_FrameUpgradePageText, I2S(offSet / TasItemShop_refButtonCountUp + 1))
            call BlzFrameSetVisible(TasItemShop_FrameUpgradePage, count > TasItemShop_refButtonCountUp)
            loop
                set buttonIndex=loopA + TasItemShop_RefButtonUpgradeStart
                set valid=( loopA + offSet <= count )
                call BlzFrameSetVisible(TasItemShop_RefButton[buttonIndex], valid)
                if valid then
                    set validCounter=validCounter + 1
                    call TasItemShop_updateRefButton(buttonIndex , (LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_UsedIn,result)), (loopA + offSet))) , null) // INLINED!!
                    call BlzFrameSetVisible(TasItemShop_RefButtonOverlay2[buttonIndex], BlzFrameIsVisible(TasItemShop_RefButton[buttonIndex]) and not TasItemShop_CanBuyItem((LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_UsedIn,result)), (loopA + offSet))) , TasItemShop_LocalShopObject , p)) // INLINED!!
                endif
    
                set loopA=loopA + 1
                exitwhen loopA > TasItemShop_refButtonCountUp
    
                // body
            endloop
            
            return validCounter
        endfunction
    
        function TasItemShop_updateRefButtonsQuickLink takes player p returns integer
            local integer playerIndex= GetPlayerId(p)
            local integer count= (LoadInteger(Table___ht, (TasItemShop_QuickLink[playerIndex]), (0))) // INLINED!!
            local boolean valid
            local integer offSet= TasItemShop_CurrentOffSetQuickLink[playerIndex]
            local integer validCounter= 0
            local integer loopA= 1
            local integer buttonIndex
    
            call BlzFrameSetVisible(TasItemShop_FrameQuickLinkBox, true)
            call BlzFrameSetText(TasItemShop_FrameQuickLinkPageText, I2S(offSet / TasItemShop_refButtonCountQuickLink + 1))
            call BlzFrameSetVisible(TasItemShop_FrameQuickLinkPage, count > TasItemShop_refButtonCountQuickLink)
            loop
                
                set buttonIndex=loopA + TasItemShop_RefButtonQuickLinkStart
                set valid=( loopA + offSet <= count )
                call BlzFrameSetVisible(TasItemShop_RefButton[buttonIndex], valid)
                if valid then
                    set validCounter=validCounter + 1
                    call TasItemShop_updateRefButton(buttonIndex , (LoadInteger(Table___ht, (TasItemShop_QuickLink[playerIndex]), (loopA + offSet))) , null) // INLINED!!
                    call BlzFrameSetVisible(TasItemShop_RefButtonOverlay2[buttonIndex], BlzFrameIsVisible(TasItemShop_RefButton[buttonIndex]) and not TasItemShop_CanBuyItem((LoadInteger(Table___ht, (TasItemShop_QuickLink[playerIndex]), (loopA + offSet))) , TasItemShop_LocalShopObject , p)) // INLINED!!
                endif
    
                set loopA=loopA + 1
                exitwhen loopA > TasItemShop_refButtonCountQuickLink
            endloop
            
            return validCounter
        endfunction
    
        function TasItemShop_updateRefButtonsUser takes player p returns integer
            local integer playerIndex= GetPlayerId(p)
            local integer count= BlzGroupGetSize(TasItemShop_Shoper[playerIndex])
            local boolean valid
            local integer offSet= TasItemShop_CurrentOffSetUser[playerIndex]
            local unit u
            local integer validCounter= 0
            local integer loopA= 1
            local integer buttonIndex
    
            call BlzFrameSetVisible(TasItemShop_FrameUserBox, true)
            call BlzFrameSetText(TasItemShop_FrameUserPageText, I2S(offSet / TasItemShop_refButtonCountUser + 1))
            call BlzFrameSetVisible(TasItemShop_FrameUserPage, count > TasItemShop_refButtonCountUser)
            
            loop
                set buttonIndex=loopA + TasItemShop_RefButtonUserStart
                set valid=( loopA + offSet <= count )
                call BlzFrameSetVisible(TasItemShop_RefButton[buttonIndex], valid)
                if valid then
                    set validCounter=validCounter + 1
                    set u=BlzGroupUnitAt(TasItemShop_Shoper[playerIndex], loopA + offSet - 1)
                    call TasItemShop_updateRefButton(buttonIndex , GetUnitTypeId(u) , u)
                endif
    
                set loopA=loopA + 1
                exitwhen loopA > TasItemShop_refButtonCountUser
    
                // body
            endloop
            set u=null
            
            return validCounter
        endfunction
    
    
        function TasItemShop_updateHaveMats takes player p,integer data returns nothing
            local integer playerIndex= GetPlayerId(p)
            local integer mat
            local integer offset= TasItemShop_CurrentOffSetMaterial[playerIndex]
            local integer loopA= 1
            local integer buttonIndex
            call FlushChildHashtable(Table___ht, (TasItemShop_TempTable)) // INLINED!!
            //call TasItemFusionGetUseableMaterial(p, data, true, true)
            loop
                set buttonIndex=loopA + TasItemShop_RefButtonMaterialStart
                
                if BlzFrameIsVisible(TasItemShop_RefButton[buttonIndex]) then
                    
                    set mat=(LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,data)), (loopA + offset))) // INLINED!!
                    call SaveInteger(Table___ht, (TasItemShop_TempTable), (mat), ( (LoadInteger(Table___ht, (TasItemShop_TempTable), (mat))) + 1)) // INLINED!!
                    
                    call BlzFrameSetVisible(TasItemShop_RefButtonOverlay[buttonIndex], (LoadInteger(Table___ht, (TasItemShop_TempTable), (mat))) <= (LoadInteger(Table___ht, (TasItemFusion_PlayerItems[playerIndex]), (mat)))) // INLINED!!
                    call BlzFrameSetVisible(TasItemShop_RefButtonOverlay2[buttonIndex], not BlzFrameIsVisible(TasItemShop_RefButtonOverlay[buttonIndex]) and not TasItemShop_CanBuyItem(mat , TasItemShop_LocalShopObject , p))
                    
                endif
                set loopA=loopA + 1
                exitwhen loopA > TasItemShop_refButtonCountMats
            endloop
            
        endfunction
        function TasItemShop_updateOverLayMainSelected takes player p returns nothing
            local integer playerIndex= GetPlayerId(p)
            local integer loopA= 1
            local integer offset= TasItemShop_CurrentOffSetUser[playerIndex]
            local integer buttonIndex
            loop
                exitwhen loopA > TasItemShop_refButtonCountUser
                set buttonIndex=loopA + TasItemShop_RefButtonUserStart
                call BlzFrameSetVisible(TasItemShop_RefButtonOverlay[buttonIndex], BlzFrameIsVisible(TasItemShop_RefButton[buttonIndex]) and TasItemShop_ShoperMain[playerIndex] == BlzGroupUnitAt(TasItemShop_Shoper[playerIndex], loopA - 1 + offset))
                set loopA=loopA + 1
            endloop
            
        endfunction
    
        function TasItemShop_GiveItem takes unit u,item i,integer undo returns nothing
            local integer oldCharges= GetItemCharges(i)
            local integer itemCode= GetItemTypeId(i)
            local integer loopA= 0
            local item i2
            //call BJDebugMsg("GiveItem: "+ GetUnitName(u) + " give " + GetItemName(i))
            call UnitAddItem(u, i)
            // when there are charges and undo
            if oldCharges > 0 and undo > 0 then
                // when the item's charges changed then it probably was stacked
                if GetItemCharges(i) != oldCharges then
                    loop
                        set i2=UnitItemInSlot(u, loopA)
                        if GetItemTypeId(i2) == itemCode and i2 != i then
                            set TasItemShop_UndoStackGainer[undo]=i2
                            set TasItemShop_UndoStackGained[undo]=oldCharges - GetItemCharges(i)
                        endif
                        set loopA=loopA + 1
                        exitwhen loopA >= bj_MAX_INVENTORY
                    endloop
                endif
            endif
            set i2=null
        endfunction
    
        function TasItemShop_GiveItemGroup takes player p,item i,integer undoIndex returns nothing
            local boolean found
            local unit u
            local integer playerIndex= GetPlayerId(p)
            local integer loopA
            call SetItemPlayer(i, p, true)
            call TasItemShop_GiveItem(TasItemShop_ShoperMain[playerIndex] , i , undoIndex)
            
            // other units can get the item when the mainShopper can not hold it?
            // Check if item still exists and mainshopper does not have it.
            if TasItemShop_canProviderGetItem and GetHandleId(i) > 0 and not UnitHasItem(TasItemShop_ShoperMain[playerIndex], i) then
                // loop all mat provider try to give it to each, when that succeds finished.
                set found=false
                set loopA=BlzGroupGetSize(TasItemShop_Shoper[playerIndex]) - 1
                loop
                    exitwhen loopA <= 0
                    set u=BlzGroupUnitAt(TasItemShop_Shoper[playerIndex], loopA)
                    call TasItemShop_GiveItem(u , i , undoIndex)
                    if GetHandleId(i) == 0 or UnitHasItem(u, i) then
                        if TasItemShop_canUndo then
                            call SaveInteger(Table___ht, (TasItemShop_UndoResults[undoIndex]), (0), ( (LoadInteger(Table___ht, (TasItemShop_UndoResults[undoIndex]), (0))) + 1)) // INLINED!!
                            call SaveItemHandle(Table___ht, (((TasItemShop_UndoResults[undoIndex]))), ((LoadInteger(Table___ht, (TasItemShop_UndoResults[undoIndex]), (0)))), ( i)) // INLINED!!
                            call SaveUnitHandle(Table___ht, (((TasItemShop_UndoResults[undoIndex]))), (- (LoadInteger(Table___ht, (TasItemShop_UndoResults[undoIndex]), (0)))), ( u)) // INLINED!!
                        endif
                        set found=true
                        exitwhen true
                    endif
                    set loopA=loopA - 1
                endloop
                if not found and TasItemShop_canUndo then
                    call SaveInteger(Table___ht, (TasItemShop_UndoResults[undoIndex]), (0), ( (LoadInteger(Table___ht, (TasItemShop_UndoResults[undoIndex]), (0))) + 1)) // INLINED!!
                    call SaveItemHandle(Table___ht, (((TasItemShop_UndoResults[undoIndex]))), ((LoadInteger(Table___ht, (TasItemShop_UndoResults[undoIndex]), (0)))), ( i)) // INLINED!!
                    call SaveUnitHandle(Table___ht, (((TasItemShop_UndoResults[undoIndex]))), (- (LoadInteger(Table___ht, (TasItemShop_UndoResults[undoIndex]), (0)))), ( u)) // INLINED!!
                endif
            else
                if TasItemShop_canUndo then
                    call SaveInteger(Table___ht, (TasItemShop_UndoResults[undoIndex]), (0), ( (LoadInteger(Table___ht, (TasItemShop_UndoResults[undoIndex]), (0))) + 1)) // INLINED!!
                    call SaveItemHandle(Table___ht, (((TasItemShop_UndoResults[undoIndex]))), ((LoadInteger(Table___ht, (TasItemShop_UndoResults[undoIndex]), (0)))), ( i)) // INLINED!!
                    call SaveUnitHandle(Table___ht, (((TasItemShop_UndoResults[undoIndex]))), (- (LoadInteger(Table___ht, (TasItemShop_UndoResults[undoIndex]), (0)))), ( TasItemShop_ShoperMain[playerIndex])) // INLINED!!
                endif
            endif
            set u=null
        endfunction
    
        
    
        function TasItemShop_setSelected takes player p,integer data returns nothing
            local integer playerIndex= GetPlayerId(p)
            local integer oldData= TasItemShop_Selected[playerIndex]
            local integer loopA
            local integer buttonIndex
            set TasItemShop_Selected[playerIndex]=data
            // Reset RefPage only when a new data is selected
            
            if oldData != data then
                //call BJDebugMsg(GetObjectName(oldData) + " -> " + GetObjectName(data))
                set TasItemShop_CurrentOffSetUpgrade[playerIndex]=0
                set TasItemShop_CurrentOffSetMaterial[playerIndex]=0
                set TasItemShop_SelectedItem[playerIndex]=null
                
                if p == GetLocalPlayer() then
                    if TasItemShop_canDefuse then
                        call BlzFrameSetEnable(TasItemShop_FrameDefuseButton, false)
                    endif
                    if TasItemShop_canSellItems then
                        call BlzFrameSetEnable(TasItemShop_FrameSellButton, false)
                    endif
                    call SaveBoolean(Table___ht, (((TasItemShop_MarkedItemCodes))), (oldData), ( false)) // INLINED!!
                    call SaveBoolean(Table___ht, (((TasItemShop_MarkedItemCodes))), (data), ( true)) // INLINED!!
                endif
            endif
            if p == GetLocalPlayer() then
                if TasItemShop_refButtonCountUp > 0 then
                    if (LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_UsedIn,data)), (0))) > 0 then // INLINED!!
                        call TasItemShop_updateRefButtonsUpgrades(p , data)
                    else
                        call BlzFrameSetVisible(TasItemShop_FrameUpgradeBox, false)
                    endif
                endif
                if TasItemShop_refButtonCountMats > 0 then
                    if (LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,data)), (0))) > 0 then // INLINED!!
                        call TasItemShop_updateRefButtonsMaterial(p , data)
                        call TasItemShop_updateHaveMats(p , data)
                    else
                        call BlzFrameSetVisible(TasItemShop_FrameMaterialBox, false)
                    endif
                endif
                if TasItemShop_refButtonCountInv > 0 then
                    if (LoadInteger(Table___ht, (TasItemFusion_PlayerItems[playerIndex]), (0))) > 0 then // INLINED!!
                        call TasItemShop_updateRefButtonsInventory(p)
                    else
                        call BlzFrameSetVisible(TasItemShop_FrameInventoryBox, false)
                    endif
                endif
                if TasItemShop_refButtonCountQuickLink > 0 then
                    call TasItemShop_updateRefButtonsQuickLink(p)
                endif
                if TasItemShop_refButtonCountUser > 0 then
                    call TasItemShop_updateRefButtonsUser(p)
                    call TasItemShop_updateOverLayMainSelected(p)
                endif
                
                call TasItemShop_updateItemFrame(TasItemShop_CREATE_CONTEXT_CURRENT , data , TasItemShop_buyButtonShowGold , TasItemShop_buyButtonShowLumber)
                if ( TasItemShop_buyButtonShowGold or TasItemShop_buyButtonShowLumber ) and not TasItemShop_flexibleShop and ( not TasItemShop_CanBuyItem(data , TasItemShop_LocalShopObject , p) or ( (LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,data)), (0))) > 0 and not TasItemShop_AllMatsProvided(p , data , TasItemShop_LocalShopObject) ) ) then // INLINED!!
                    call BlzFrameSetText(BlzGetFrameByName("TasButtonTextGold", TasItemShop_CREATE_CONTEXT_CURRENT), GetLocalizedString(TasItemShop_textUnBuyable))
                    call BlzFrameSetText(BlzGetFrameByName("TasButtonTextLumber", TasItemShop_CREATE_CONTEXT_CURRENT), GetLocalizedString(TasItemShop_textUnBuyable))
                endif
            endif
        endfunction
    
        
        function TasItemShop_setSelectedItem takes player p,item i returns nothing
            local integer playerIndex= GetPlayerId(p)
            local integer itemCode= GetItemTypeId(i)
            set TasItemShop_SelectedItem[playerIndex]=i
            if i != null then
                if GetLocalPlayer() == p then
                    if TasItemShop_canDefuse then
                        call BlzFrameSetText(TasItemShop_FrameDefuseText, GetLocalizedString(TasItemShop_textDefuse) + "\n" + BlzGetAbilityTooltip(itemCode, 0))
                        call BlzFrameSetEnable(TasItemShop_FrameDefuseButton, (LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,itemCode)), (0))) > 0) // INLINED!!
                    endif
    
                    if TasItemShop_canSellItems then
                        call TasItemShop_GetItemSellCosts(TasItemShop_ShoperMain[playerIndex] , TasItemShop_CurrentShop[playerIndex] , i)
    
                        call BlzFrameSetText(TasItemShop_FrameSellText, GetLocalizedString(TasItemShop_textSell) + " " + GetItemName(i) + "\n" + GetLocalizedString("GOLD") + " " + I2S(TasItemShop_TempGold) + "\n" + GetLocalizedString("LUMBER") + " " + I2S(TasItemShop_TempLumber))
                        call BlzFrameSetEnable(TasItemShop_FrameSellButton, true)
                    endif
                endif
            endif
        endfunction
        
        function TasItemShopUIShow takes player p,unit shop,group shopperGroup,unit mainShoper returns nothing
            local boolean flag= ( shop != null )
            local integer playerIndex= GetPlayerId(p)
            local boolean isNewShopType= GetUnitTypeId(TasItemShop_CurrentShop[playerIndex]) != GetUnitTypeId(shop)
            local integer oldSize= (LoadInteger(Table___ht, (TasItemFusion_PlayerItems[playerIndex]), (0))) // INLINED!!
            local integer loopA
            local integer loopB
            local integer undoPlayerIndex
            local integer index
            local integer shopObject
            if p == GetLocalPlayer() then
                call BlzFrameSetVisible(TasItemShop_FrameParentSuper, flag)
                if flag then
                    call BlzFrameSetVisible(BlzFrameGetParent(TasItemShop_FrameParentSuper), true)
                endif
            endif
    
            if flag then
                set TasItemShop_CurrentShop[playerIndex]=shop
    
                if mainShoper != null then
                    set TasItemShop_ShoperMain[playerIndex]=mainShoper
                elseif shopperGroup != null then
                    set TasItemShop_ShoperMain[playerIndex]=FirstOfGroup(shopperGroup)
                endif
                if shopperGroup != null then
                    call GroupClear(TasItemShop_Shoper[playerIndex])
                    // when a group was given     
                    call BlzGroupAddGroupFast(shopperGroup, TasItemShop_Shoper[playerIndex])
                endif
    
                call GroupAddUnit(TasItemShop_Shoper[playerIndex], mainShoper)
    
                call TasItemFusionGetUseableItems(p , TasItemShop_Shoper[playerIndex] , not TasItemShop_sharedItems)
                
                if oldSize != (LoadInteger(Table___ht, (TasItemFusion_PlayerItems[playerIndex]), (0))) then // INLINED!!
                    set TasItemShop_CurrentOffSetInventory[playerIndex]=0
                endif
                if isNewShopType then
                    //call BJDebugMsg("isNewShopType")
                    // has to unmark buyAble
                    set shopObject=GetUnitTypeId(shop)
                    call FlushChildHashtable(Table___ht, (s__HashTable__getindex(TasItemShop_BuyAbleMarked,playerIndex))) // INLINED!!
                    
                    call TasButtonListClearDataEx(TasItemShop_ButtonListIndex , playerIndex)
                    // has custom Shop Data?
                    if (HaveSavedInteger(Table___ht, (TasItemShop_Shops), (shopObject))) then // INLINED!!
                        // WhiteListMode?
                        if TasItemShop_ShopWhiteList[(LoadInteger(Table___ht, (TasItemShop_Shops), (shopObject)))] then // INLINED!!
                            set loopA=1
                            set loopB=(LoadInteger(Table___ht, (s__HashTable__getindex(TasItemShop_ShopsItems,shopObject)), (0))) // INLINED!!
                            loop
                                exitwhen loopA > loopB
                                call TasButtonListAddDataEx(TasItemShop_ButtonListIndex , (LoadInteger(Table___ht, (s__HashTable__getindex(TasItemShop_ShopsItems,shopObject)), (loopA))) , playerIndex) // INLINED!!
                                call SaveBoolean(Table___ht, (((s__HashTable__getindex(TasItemShop_BuyAbleMarked,playerIndex)))), ((LoadInteger(Table___ht, (s__HashTable__getindex(TasItemShop_ShopsItems,shopObject)), (loopA)))), ( true)) // INLINED!!
                                set loopA=loopA + 1
                            endloop
                        else
                            // BlackListMode
                            set loopA=1
                            loop
                                exitwhen loopA > TasItemShop_BUY_ABLE_ITEMS_Count
                                if not (LoadBoolean(Table___ht, (((s__HashTable__getindex(TasItemShop_ShopsItems,shopObject)))), (TasItemShop_BUY_ABLE_ITEMS[loopA]))) then // INLINED!!
                                    call TasButtonListAddDataEx(TasItemShop_ButtonListIndex , TasItemShop_BUY_ABLE_ITEMS[loopA] , playerIndex)
                                    call SaveBoolean(Table___ht, (((s__HashTable__getindex(TasItemShop_BuyAbleMarked,playerIndex)))), (TasItemShop_BUY_ABLE_ITEMS[loopA]), ( true)) // INLINED!!
                                endif
                                set loopA=loopA + 1
                            endloop
                        endif
                    else
                        // none custom Shop, add all data.
                        set loopA=1
                        loop
                            exitwhen loopA > TasItemShop_BUY_ABLE_ITEMS_Count
                            call TasButtonListAddDataEx(TasItemShop_ButtonListIndex , TasItemShop_BUY_ABLE_ITEMS[loopA] , playerIndex)
                            call SaveBoolean(Table___ht, (((s__HashTable__getindex(TasItemShop_BuyAbleMarked,playerIndex)))), (TasItemShop_BUY_ABLE_ITEMS[loopA]), ( true)) // INLINED!!
                            set loopA=loopA + 1
                        endloop
                    endif
                endif
                if GetLocalPlayer() == p then
                    if IsUnitType(TasItemShop_ShoperMain[playerIndex], UNIT_TYPE_HERO) then
                        call BlzFrameSetText(TasItemShop_FrameTitelText, GetUnitName(shop) + " - " + GetHeroProperName(TasItemShop_ShoperMain[playerIndex]))
                    else
                        call BlzFrameSetText(TasItemShop_FrameTitelText, GetUnitName(shop) + " - " + GetUnitName(TasItemShop_ShoperMain[playerIndex]))
                    endif
                    
                    set TasItemShop_LocalShopObject=GetUnitTypeId(shop)
                    if isNewShopType then
                        call TasButtonListSearch(TasItemShop_ButtonListIndex , null)
                    endif
                endif
                call UpdateTasButtonList(TasItemShop_ButtonListIndex)
                call TasItemShop_setSelected(p , TasItemShop_Selected[playerIndex])
                call TasItemShop_setSelectedItem(p , TasItemShop_SelectedItem[playerIndex])
            else
                set TasItemShop_CurrentShop[playerIndex]=null
                if TasItemShop_canUndo then
                    // loop the undo of that player from last to first
                    set loopA=1
                    
                    set undoPlayerIndex=playerIndex * TasItemShop_UndoPlayerSize
                    loop
                        exitwhen loopA > TasItemShop_UndoPlayerCount[playerIndex]
                        set index=undoPlayerIndex + loopA
                        set loopB=(LoadInteger(Table___ht, (TasItemShop_UndoItems[index]), (0))) // INLINED!!
                        loop
                            exitwhen loopB <= 0
                            call SetItemVisible((LoadItemHandle(Table___ht, (((TasItemShop_UndoItems[index]))), (loopB))), true) // INLINED!!
                            call RemoveItem((LoadItemHandle(Table___ht, (((TasItemShop_UndoItems[index]))), (loopB)))) // INLINED!!
                            set loopB=loopB - 1
                        endloop
                        set TasItemShop_UndoStackGainer[index]=null
                        call FlushChildHashtable(Table___ht, (TasItemShop_UndoResults[index])) // INLINED!!
                        call FlushChildHashtable(Table___ht, (TasItemShop_UndoItems[index])) // INLINED!!
                        set loopA=loopA + 1
                    endloop
    
                    if GetLocalPlayer() == p then
                        call BlzFrameSetVisible(TasItemShop_FrameUndoBox, false)
                    endif
                    set TasItemShop_UndoPlayerCount[playerIndex]=0
                endif
            endif
        endfunction
        
        function TasItemShop_BuyItem takes player p,integer itemCode returns nothing
            local integer playerIndex= GetPlayerId(p)
            local integer gold
            local integer lumber
            local integer shopObject= GetUnitTypeId(TasItemShop_CurrentShop[playerIndex])
            local integer loopA
            local integer undoIndex
            local item i
            local unit u
            local item newItem
            local boolean isFusion= (LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,itemCode)), (0))) > 0 // INLINED!!
            
            //call BJDebugMsg(GetPlayerName(p) + " Wana Buy " + GetObjectName(itemCode) + " with " + GetUnitName(ShoperMain[playerIndex]))
            if BlzGroupGetSize(TasItemShop_Shoper[playerIndex]) == 0 then
                if GetLocalPlayer() == p then
                    call BJDebugMsg(GetLocalizedString(TasItemShop_textNoValidShopper))
                endif
                return
            endif
            
            // can not buy this?
            if not TasItemShop_flexibleShop and not TasItemShop_CanBuyItem(itemCode , shopObject , p) then
                if GetLocalPlayer() == p then
                    call BJDebugMsg(GetObjectName(itemCode) + " " + GetLocalizedString(TasItemShop_textCanNotBuySufix))
                endif
                return
            endif
    
            // has material -> Fusion
            if isFusion then
                call TasItemFusionCalc(p , itemCode , false)
                set gold=TasItemFusionGold
                set lumber=TasItemFusionLumber
            else
                set gold=TasItemGetCostGold(itemCode)
                set lumber=TasItemGetCostLumber(itemCode)
            endif
    
            call TasItemShop_CostModifier(gold , lumber , itemCode , TasItemShop_ShoperMain[playerIndex] , TasItemShop_CurrentShop[playerIndex] , shopObject)
            set gold=TasItemShop_TempGold
            set lumber=TasItemShop_TempLumber
            // only items buyable in the shop can be replaced by Gold? Also ignore non fusion items.
            if not TasItemShop_flexibleShop and isFusion then
                if not TasItemShop_AllMatsProvided(p , itemCode , shopObject) then
                    if GetLocalPlayer() == p then
                        call BJDebugMsg(GetLocalizedString(TasItemShop_textCanNotBuyPrefix) + " " + GetObjectName(itemCode))
                        set loopA=TasItemShop_MissingCount
                        loop
                            exitwhen loopA <= 0
                            call BJDebugMsg(GetObjectName(TasItemShop_MissingItemCode[loopA]) + " " + GetLocalizedString(TasItemShop_textCanNotBuySufix))
                            set loopA=loopA - 1
                        endloop
                    endif
                    return
                endif
            endif
    
            if GetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD) >= gold then
                if GetPlayerState(p, PLAYER_STATE_RESOURCE_LUMBER) >= lumber then
                    //call BJDebugMsg("Accept Request")
                    if TasItemShop_canUndo then
                        set undoIndex=TasItemShop_CreateUndo(p , itemCode , gold , lumber , " Buy")
                                           
                        if isFusion and (LoadInteger(Table___ht, (TasItemFusion_PlayerMaterial[playerIndex]), (0))) > 0 then // INLINED!!
                            
                            set loopA=(LoadInteger(Table___ht, (TasItemFusion_PlayerMaterial[playerIndex]), (0))) // INLINED!!
                            call SaveInteger(Table___ht, (TasItemShop_UndoItems[undoIndex]), (0), ( loopA)) // INLINED!!
                            loop
                                set i=(LoadItemHandle(Table___ht, (((TasItemFusion_PlayerMaterial[playerIndex]))), (loopA))) // INLINED!!
                                set u=(LoadUnitHandle(Table___ht, (((ItemHolder__data))), (GetHandleId((i))))) // INLINED!!
                                call SaveUnitHandle(Table___ht, (((TasItemShop_UndoItems[undoIndex]))), (- loopA), ( u)) // INLINED!!
                                call SaveItemHandle(Table___ht, (((TasItemShop_UndoItems[undoIndex]))), (loopA), ( i)) // INLINED!!
                                //call BJDebugMsg("Hide Item")
                                call UnitRemoveItem(u, i)
                                call SetItemVisible(i, false)
                                set loopA=loopA - 1
                                exitwhen loopA <= 0
                            endloop
                        endif
    
                    else
                        if isFusion and (LoadInteger(Table___ht, (TasItemFusion_PlayerMaterial[playerIndex]), (0))) > 0 then // INLINED!!
                            set loopA=(LoadInteger(Table___ht, (TasItemFusion_PlayerMaterial[playerIndex]), (0))) // INLINED!!
                            loop
                                call RemoveItem((LoadItemHandle(Table___ht, (((TasItemFusion_PlayerMaterial[playerIndex]))), (loopA)))) // INLINED!!
                                set loopA=loopA - 1
                                exitwhen loopA <= 0
                            endloop
                        endif
                    endif
                    call AdjustPlayerStateSimpleBJ(p, PLAYER_STATE_RESOURCE_GOLD, - gold)
                    call AdjustPlayerStateSimpleBJ(p, PLAYER_STATE_RESOURCE_LUMBER, - lumber)
                    set newItem=CreateItem(itemCode, GetUnitX(TasItemShop_ShoperMain[playerIndex]), GetUnitY(TasItemShop_ShoperMain[playerIndex]))
                    //call BJDebugMsg("NewItem: "+ I2S(GetHandleId(newItem)))
                    call TasItemShop_GiveItemGroup(p , newItem , undoIndex)
    
                    //CreateItem(itemCode, GetPlayerStartLocationX(player), GetPlayerStartLocationY(player))
                    call TasItemShopUIShow(p , TasItemShop_CurrentShop[playerIndex] , null , null)
                elseif not GetSoundIsPlaying(SoundNoLumber[GetHandleId(GetPlayerRace(p))]) then
                    call StartSoundForPlayerBJ(p, SoundNoLumber[GetHandleId(GetPlayerRace(p))])
                endif
            elseif not GetSoundIsPlaying(SoundNoGold[GetHandleId(GetPlayerRace(p))]) then
                call StartSoundForPlayerBJ(p, SoundNoGold[GetHandleId(GetPlayerRace(p))])
            endif
    
            set newItem=null
            set i=null
            set u=null
           // call BJDebugMsg("BuyItem Done")
        endfunction
    
        function TasItemShop_SellItem takes player p,item i returns nothing
            local integer playerIndex= GetPlayerId(p)
            local integer itemCode
            local integer gold
            local integer lumber
            local integer undoIndex
            local integer loopA
            local boolean wasSelectedItem= ( i == TasItemShop_SelectedItem[playerIndex] )
            if i == null then
                return
            endif
            set itemCode=GetItemTypeId(i)
            call TasItemShop_GetItemSellCosts(TasItemShop_ShoperMain[playerIndex] , TasItemShop_CurrentShop[playerIndex] , i)
            set gold=TasItemShop_TempGold
            set lumber=TasItemShop_TempLumber
    
            call AdjustPlayerStateSimpleBJ(p, PLAYER_STATE_RESOURCE_GOLD, gold)
            call AdjustPlayerStateSimpleBJ(p, PLAYER_STATE_RESOURCE_LUMBER, lumber)
            if TasItemShop_canUndo then
                set undoIndex=TasItemShop_CreateUndo(p , itemCode , - gold , - lumber , GetLocalizedString(TasItemShop_textSell))
                call SaveInteger(Table___ht, (TasItemShop_UndoItems[undoIndex]), (0), ( 1)) // INLINED!!
                call SaveItemHandle(Table___ht, (((TasItemShop_UndoItems[undoIndex]))), (1), ( i)) // INLINED!!
                call SaveUnitHandle(Table___ht, (((TasItemShop_UndoItems[undoIndex]))), (- 1), ( (LoadUnitHandle(Table___ht, (((ItemHolder__data))), (GetHandleId((i))))))) // INLINED!!
                call UnitRemoveItem((LoadUnitHandle(Table___ht, (((ItemHolder__data))), (GetHandleId((i))))), i) // INLINED!!
                call SetItemVisible(i, false)
                
                if GetLocalPlayer() == p then
                    call BlzFrameSetVisible(TasItemShop_FrameUndoBox, true)
                    call TasItemShop_updateUndoButton(TasItemShop_UndoResultCode[undoIndex] , GetLocalizedString(TasItemShop_textSell))
                endif
            else
                call RemoveItem(i)
            endif
    
            if wasSelectedItem then
                if GetLocalPlayer() == p then
                    call BlzFrameSetEnable(TasItemShop_FrameSellButton, false)
                endif
                set TasItemShop_SelectedItem[playerIndex]=null
            endif
        endfunction
    
        function TasItemShop__ButtonListFunction_Search takes nothing returns boolean
        //TasButtonListText
        //TasButtonListData
        //TasButtonListIndex
            return (FindIndexFrom((StringCase(GetObjectName(TasButtonListData), false) ) , ( StringCase(TasButtonListText, false)) , 0)) >= 0 // INLINED!!
        endfunction
        function TasItemShop__ButtonListFunction_Filter takes nothing returns boolean
        //TasButtonListText
        //TasButtonListData
        //TasButtonListIndex
        //TasButtonListIsSearching
            local integer selected= TasItemShop_SelectedCategory[GetPlayerId(GetLocalPlayer())]
            if ToggleIconButtonGetValue(TasItemShop_CategoryModButtonIndex , GetLocalPlayer()) == 0 then
                return selected == 0 or BlzBitAnd((LoadInteger(Table___ht, (TasItemShop_TasItemCategory), (TasButtonListData))), selected) >= selected // INLINED!!
            else
                return selected == 0 or BlzBitAnd((LoadInteger(Table___ht, (TasItemShop_TasItemCategory), (TasButtonListData))), selected) > 0 // INLINED!!
            endif
        endfunction
        function TasItemShop__ButtonListFunction_LeftClick takes nothing returns nothing
            local player p= GetTriggerPlayer()
            local integer playerIndex= GetPlayerId(p)
            local real time
            if p == GetLocalPlayer() then
                set time=TimerGetElapsed(TasItemShop_Timer)
                if TasItemShop_Selected[playerIndex] == TasButtonListData and time - TasItemShop_DoubleClickStamp <= TasItemShop_doubleClickTimeOut then
                    // finish the timer, so the player has to do 2 clicks again to trigger a DoubleClick
                    set TasItemShop_DoubleClickStamp=0
                    call BlzFrameClick(BlzGetFrameByName("TasButton", TasItemShop_CREATE_CONTEXT_CURRENT))
                else
                    set TasItemShop_DoubleClickStamp=time
                endif
            endif
            if TasItemShop_QuickLinkKeyActive[playerIndex] then
                call TasItemShop_SetQuickLink(p , TasButtonListData)
            endif
            call TasItemShop_setSelected(p , TasButtonListData)
        endfunction
        function TasItemShop__ButtonListFunction_RightClick takes nothing returns nothing
            call TasItemShop_BuyItem(GetTriggerPlayer() , TasButtonListData)
        endfunction
    
        function TasItemShop__ButtonListFunction_AsyncRightClick takes nothing returns nothing
            call TasItemShop_ShowSprite(TasButtonListFrame , GetTriggerPlayer())
        endfunction
        function TasItemShop__ButtonListFunction_AsyncLeftClick takes nothing returns nothing
        endfunction
    
        function TasItemShop__ButtonListFunction_CategoryAction takes nothing returns nothing
            set TasItemShop_SelectedCategory[GetPlayerId(ToggleIconButton_Player)]=ToggleIconButtonGroup_Value
            if GetLocalPlayer() == ToggleIconButton_Player then
                call TasButtonListSearch(TasButtonListIndex , "")
            endif
        endfunction
    
        function TasItemShop_AddClearFocus takes framehandle frame returns nothing
            call BlzTriggerRegisterFrameEvent(TasItemShop_ButtonTriggerClearFocus, frame, FRAMEEVENT_CONTROL_CLICK)
        endfunction
    
        function TasItemShop_CreateRefButton takes framehandle parent,trigger t,boolean advancedTooltip returns integer
            local framehandle frame
            set TasItemShop_RefButtonCount=TasItemShop_RefButtonCount + 1
            set frame=BlzCreateFrame("TasItemShopRefButton", parent, 0, TasItemShop_RefButtonCount)
            set TasItemShop_RefButton[TasItemShop_RefButtonCount]=frame
            set TasItemShop_RefButtonIcon[TasItemShop_RefButtonCount]=BlzGetFrameByName("TasItemShopRefButtonBackdrop", TasItemShop_RefButtonCount)
            set TasItemShop_RefButtonIconPushed[TasItemShop_RefButtonCount]=BlzGetFrameByName("TasItemShopRefButtonBackdropPushed", TasItemShop_RefButtonCount)
            set TasItemShop_RefButtonOverlay[TasItemShop_RefButtonCount]=BlzGetFrameByName("TasItemShopRefButtonBackdropBackdrop", TasItemShop_RefButtonCount)
            set TasItemShop_RefButtonOverlay2[TasItemShop_RefButtonCount]=BlzGetFrameByName("TasItemShopRefButtonBackdropBackdrop2", TasItemShop_RefButtonCount)
            
            call BlzFrameSetSize(frame, TasItemShop_refButtonSize, TasItemShop_refButtonSize)
            call BlzFrameSetVisible(TasItemShop_RefButtonOverlay[TasItemShop_RefButtonCount], false)
            call BlzFrameSetVisible(TasItemShop_RefButtonOverlay2[TasItemShop_RefButtonCount], false)
    
            if advancedTooltip then
                call CreateTasButtonTooltip(frame , TasItemShop_FrameParentSuper , 0)
                set TasItemShop_RefButtonToolTip[TasItemShop_RefButtonCount]=BlzGetFrameByName("TasButtonListTooltipBox", 0)
                set TasItemShop_RefButtonToolTipName[TasItemShop_RefButtonCount]=BlzGetFrameByName("TasButtonListTooltipName", 0)
                set TasItemShop_RefButtonToolTipIcon[TasItemShop_RefButtonCount]=BlzGetFrameByName("TasButtonListTooltipIcon", 0)
                set TasItemShop_RefButtonToolTipText[TasItemShop_RefButtonCount]=BlzGetFrameByName("TasButtonListTooltipText", 0)
                call BlzFrameClearAllPoints(TasItemShop_RefButtonToolTipText[TasItemShop_RefButtonCount])
                if TasItemShop_toolTipPosPointParent != null then
                    call BlzFrameSetPoint(TasItemShop_RefButtonToolTipText[TasItemShop_RefButtonCount], TasItemShop_toolTipPosPoint, frame, TasItemShop_toolTipPosPointParent, TasItemShop_toolTipPosX, TasItemShop_toolTipPosY)
                else
                    call BlzFrameSetAbsPoint(TasItemShop_RefButtonToolTipText[TasItemShop_RefButtonCount], TasItemShop_toolTipPosPoint, TasItemShop_toolTipPosX, TasItemShop_toolTipPosY)
                endif
            else
                set TasItemShop_RefButtonToolTipName[TasItemShop_RefButtonCount]=CreateSimpleTooltip(frame , "User")
                set TasItemShop_RefButtonToolTipText[TasItemShop_RefButtonCount]=TasItemShop_RefButtonToolTipName[TasItemShop_RefButtonCount]
                set TasItemShop_RefButtonToolTip[TasItemShop_RefButtonCount]=BlzGetFrameByName("EscMenuControlBackdropTemplate", 0) // this has to match the used box for tooltips from Tooltip buttons
            endif
            call BlzTriggerRegisterFrameEvent(t, frame, FRAMEEVENT_CONTROL_CLICK)
            call BlzTriggerRegisterFrameEvent(t, frame, FRAMEEVENT_MOUSE_UP)
            call BlzTriggerRegisterFrameEvent(TasItemShop_ButtonTriggerClearFocus, (frame), FRAMEEVENT_CONTROL_CLICK) // INLINED!!
            set frame=null
            return TasItemShop_RefButtonCount
        endfunction
    
    
        function TasItemShop_CreateRefButtons takes integer amount,framehandle parent,framehandle textFrame,trigger t,boolean advancedTooltip returns integer
            local integer loopA= 1
            loop
                exitwhen loopA > amount
                call TasItemShop_CreateRefButton(parent , t , advancedTooltip)
                if loopA == 1 then
                    call BlzFrameSetPoint(TasItemShop_RefButton[TasItemShop_RefButtonCount], FRAMEPOINT_TOPLEFT, textFrame, FRAMEPOINT_BOTTOMLEFT, 0.0, - 0.003)
                //elseif index == 5 then
                // BlzFrameSetPoint(frame, FRAMEPOINT_BOTTOMLEFT, frames[index - 4].Button, FRAMEPOINT_TOPLEFT, 0, 0.003)
                else
                    call BlzFrameSetPoint(TasItemShop_RefButton[TasItemShop_RefButtonCount], FRAMEPOINT_BOTTOMLEFT, TasItemShop_RefButton[TasItemShop_RefButtonCount - 1], FRAMEPOINT_BOTTOMRIGHT, TasItemShop_refButtonGap, 0)
                endif
                call BlzFrameSetText(TasItemShop_RefButton[TasItemShop_RefButtonCount], I2S(loopA))
                set loopA=loopA + 1
            endloop
            
            return TasItemShop_RefButtonCount
        endfunction
    
        function TasItemShop_CreateRefPage takes framehandle parent,framehandle textFrame,trigger t,integer pageSize returns nothing
            local framehandle array frames
            
            set frames[1]=BlzCreateFrameByType("FRAME", "TasItemShopUIPageControl", parent, "", 0)
            set frames[2]=BlzCreateFrame("TasItemShopCatButton", frames[1], 0, 0)
            set frames[3]=BlzGetFrameByName("TasItemShopCatButtonBackdrop", 0)
            set frames[4]=BlzGetFrameByName("TasItemShopCatButtonBackdropPushed", 0)
            set frames[5]=BlzCreateFrame("TasItemShopCatButton", frames[1], 0, 1)
            set frames[6]=BlzGetFrameByName("TasItemShopCatButtonBackdrop", 1)
            set frames[7]=BlzGetFrameByName("TasItemShopCatButtonBackdropPushed", 1)
            set frames[8]=BlzCreateFrame("TasButtonTextTemplate", frames[1], 0, 0)
            call BlzFrameSetText(frames[8], "00")
            call BlzFrameSetSize(frames[2], TasItemShop_refButtonPageSize, TasItemShop_refButtonPageSize)
            call BlzFrameSetSize(frames[5], TasItemShop_refButtonPageSize, TasItemShop_refButtonPageSize)
            call BlzTriggerRegisterFrameEvent(t, frames[2], FRAMEEVENT_CONTROL_CLICK)
            call BlzTriggerRegisterFrameEvent(TasItemShop_ButtonTriggerClearFocus, (frames[2]), FRAMEEVENT_CONTROL_CLICK) // INLINED!!
            call BlzTriggerRegisterFrameEvent(TasItemShop_ButtonTriggerClearFocus, (frames[5]), FRAMEEVENT_CONTROL_CLICK) // INLINED!!
            call BlzTriggerRegisterFrameEvent(t, frames[2], FRAMEEVENT_MOUSE_UP)
            call BlzTriggerRegisterFrameEvent(t, frames[5], FRAMEEVENT_CONTROL_CLICK)
            call BlzTriggerRegisterFrameEvent(t, frames[5], FRAMEEVENT_MOUSE_UP)
            call BlzFrameSetTexture(frames[3], TasItemShop_refButtonPageUp, 0, false)
            call BlzFrameSetTexture(frames[4], TasItemShop_refButtonPageUp, 0, false)
            call BlzFrameSetTexture(frames[6], TasItemShop_refButtonPageDown, 0, false)
            call BlzFrameSetTexture(frames[7], TasItemShop_refButtonPageDown, 0, false)
    
            //call BlzFrameSetPoint(frames[2], FRAMEPOINT_TOPLEFT, textFrame, FRAMEPOINT_TOPRIGHT, 0.003, 0)
            //call BlzFrameSetPoint(frames[8], FRAMEPOINT_TOPLEFT, frames[2], FRAMEPOINT_TOPRIGHT, 0.003, 0)
            //call BlzFrameSetPoint(frames[5], FRAMEPOINT_TOPLEFT, frames[8], FRAMEPOINT_TOPRIGHT, 0.003, 0)
    
            call BlzFrameSetPoint(frames[2], FRAMEPOINT_TOPRIGHT, frames[8], FRAMEPOINT_TOPLEFT, - 0.003, 0)
            call BlzFrameSetPoint(frames[8], FRAMEPOINT_TOPRIGHT, frames[5], FRAMEPOINT_TOPLEFT, - 0.003, 0)
            call BlzFrameSetPoint(frames[5], FRAMEPOINT_TOPRIGHT, parent, FRAMEPOINT_TOPRIGHT, - TasItemShop_boxFrameBorderGap, - TasItemShop_boxFrameBorderGap)
    
            //call BlzFrameSetPoint(frames[2], FRAMEPOINT_TOPLEFT, textFrame, FRAMEPOINT_BOTTOMLEFT, 0, -0.003)
            //call BlzFrameSetPoint(frames[8], FRAMEPOINT_TOPLEFT, textFrame, FRAMEPOINT_TOPRIGHT, 0.003, 0)
            //call BlzFrameSetPoint(frames[5], FRAMEPOINT_TOPLEFT, frames[2], FRAMEPOINT_BOTTOMLEFT, 0, -0.003)
    
    
            //CreateTasButtonTooltip(frames[index], FrameSuperBox)
            call BlzFrameSetText(frames[2], I2S(pageSize))
            call BlzFrameSetText(frames[5], I2S(- pageSize))
    
            //refButtons.Page = frames[1]
            //refButtons.PageUp = frames[2]
            //refButtons.PageDown = frames[5]
            //refButtons.PageText = frames[8]
            //return frames
        endfunction
        
        function TasItemShop_PlaceRefButtonBox takes framehandle box returns nothing
            local integer loopA
            local boolean found
    
            if TasItemShop_RefButtonBoxRows == 0 then
                call BlzFrameSetPoint(box, FRAMEPOINT_TOPRIGHT, TasItemShop_FrameTasButtonList, FRAMEPOINT_BOTTOMRIGHT, 0, 0)
                set TasItemShop_RefButtonBoxRows=TasItemShop_RefButtonBoxRows + 1
                set TasItemShop_RefButtonBoxFrameFirst[TasItemShop_RefButtonBoxRows]=box
                set TasItemShop_RefButtonBoxFrameLast[TasItemShop_RefButtonBoxRows]=box
                set TasItemShop_RefButtonBoxSize[TasItemShop_RefButtonBoxRows]=TasItemShop_xSize - BlzFrameGetWidth(box)
                set TasItemShop_ySize=TasItemShop_ySize + TasItemShop_refButtonBoxSizeY
                call BlzFrameSetSize(TasItemShop_FrameParentSuperUI, TasItemShop_xSize, TasItemShop_ySize)
            else
                set found=false
                set loopA=1
                loop
                    exitwhen loopA > TasItemShop_RefButtonBoxRows
                    if TasItemShop_RefButtonBoxSize[loopA] - BlzFrameGetWidth(box) >= 0 then
                        set found=true
                        call BlzFrameSetPoint(box, FRAMEPOINT_TOPRIGHT, TasItemShop_RefButtonBoxFrameLast[loopA], FRAMEPOINT_TOPLEFT, 0, 0)
                        set TasItemShop_RefButtonBoxFrameLast[loopA]=box
                        set TasItemShop_RefButtonBoxSize[loopA]=TasItemShop_RefButtonBoxSize[loopA] - BlzFrameGetWidth(box)
                        exitwhen true
                    endif
                    set loopA=loopA + 1
                endloop
                
                if not found then
                    call BlzFrameSetPoint(box, FRAMEPOINT_TOPRIGHT, TasItemShop_RefButtonBoxFrameFirst[TasItemShop_RefButtonBoxRows], FRAMEPOINT_BOTTOMRIGHT, 0, 0)
                    set TasItemShop_RefButtonBoxRows=TasItemShop_RefButtonBoxRows + 1
                    set TasItemShop_RefButtonBoxFrameFirst[TasItemShop_RefButtonBoxRows]=box
                    set TasItemShop_RefButtonBoxFrameLast[TasItemShop_RefButtonBoxRows]=box
                    set TasItemShop_RefButtonBoxSize[TasItemShop_RefButtonBoxRows]=TasItemShop_xSize - BlzFrameGetWidth(box)
                    set TasItemShop_ySize=TasItemShop_ySize + TasItemShop_refButtonBoxSizeY
                    call BlzFrameSetSize(TasItemShop_FrameParentSuperUI, TasItemShop_xSize, TasItemShop_ySize)
                endif
            endif
            
        endfunction
    
        function TasItemShopUICreate takes nothing returns nothing
            local framehandle frame
            local framehandle parent
            local integer loopA
            local integer groupObject
            local framehandle array frames
            local integer array categoryIndexes
            local integer buttonsInRow
            local integer rows
            local framehandle clearButton
            set TasItemShop_RefButtonCount=0
            set TasItemShop_RefButtonBoxRows=0
            call BlzLoadTOCFile("war3mapImported\\Templates.toc")
            call BlzLoadTOCFile("war3mapImported\\TasItemShop.toc")
    
            //set UpdateCounterText = BlzCreateFrame("TasButtonTextTemplate", parent, 0, 0)
            //call BlzFrameSetAbsPoint(UpdateCounterText, FRAMEPOINT_TOPLEFT, 0.2, 0.55)
    
            set parent=TasItemShop_GetParent()
    
            if TasItemShop_posScreenRelative then
                set frame=BlzCreateFrameByType("FRAME", "Fullscreen", parent, "", 0)
                call BlzFrameSetVisible(frame, false)
                call BlzFrameSetSize(frame, 0.8, 0.6)
                call BlzFrameSetAbsPoint(frame, FRAMEPOINT_BOTTOM, 0.4, 0)
                set TasItemShop_FrameFullscreen=frame
            endif
    
            set TasItemShop_xSize=0.02 + TasItemShop_buttonListCols * TasItemShop_buttonListButtonSizeX + TasItemShop_buttonListButtonGapCol * ( TasItemShop_buttonListCols - 1 )
            //ySize = 0.1285 + buttonListRows*buttonListButtonSizeY + refButtonBoxSizeY
            //set ySize = 0.0815 + buttonListRows*buttonListButtonSizeY
            
            set TasItemShop_ySize=0.0815 + TasItemShop_buttonListRows * TasItemShop_buttonListButtonSizeY + TasItemShop_buttonListButtonGapRow * ( TasItemShop_buttonListRows - 1 )
            // set ySize = 0.07 + buttonListRows*buttonListButtonSizeY + buttonListButtonGapRow * (buttonListRows - 1)
    
    
            
            // super
            set TasItemShop_FrameParentSuper=BlzCreateFrameByType("FRAME", "TasItemShopUI", parent, "", 0)
            call BlzFrameSetSize(TasItemShop_FrameParentSuper, 0.001, 0.001)
    
            set parent=BlzCreateFrameByType("BUTTON", "TasItemShopUI", TasItemShop_FrameParentSuper, "", 0)
            call BlzFrameSetSize(parent, TasItemShop_xSize, TasItemShop_ySize)
            call BlzTriggerRegisterFrameEvent(TasItemShop_ButtonTriggerParentScroll, parent, FRAMEEVENT_MOUSE_WHEEL)
            call BlzTriggerRegisterFrameEvent(TasItemShop_ButtonTriggerClearFocus, (parent), FRAMEEVENT_CONTROL_CLICK) // INLINED!!
            if TasItemShop_posScreenRelative then
                call BlzFrameSetPoint(parent, TasItemShop_posPoint, TasItemShop_FrameFullscreen, TasItemShop_posPoint, TasItemShop_xPos, TasItemShop_yPos)
            else
                call BlzFrameSetAbsPoint(parent, TasItemShop_posPoint, TasItemShop_xPos, TasItemShop_yPos)
            endif
            
            set TasItemShop_FrameParentSuperUI=parent
    
    
            set frame=BlzCreateFrame(TasItemShop_boxFrameName, parent, 0, 0)
            call BlzFrameSetAllPoints(frame, parent)
            set TasItemShop_FrameSuperBox=frame
    
            // round down, boxSize - 2times gap to border / buttonSize + gap between buttons
            
            set buttonsInRow=R2I(( TasItemShop_xSize - ( TasItemShop_boxCatBorderGap ) * 2 ) / ( TasItemShop_categoryButtonSize + 0.003 ))
            // round up
            set rows=R2I(1 + ( TasItemShop_CategoryCount / buttonsInRow ))
            //call BJDebugMsg(I2S(buttonsInRow)+ ", " + I2S(rows))
            //print(#TasItemShopUI.Categories, buttonsInRow, rows)
            set TasItemShop_ySize=TasItemShop_ySize + rows * TasItemShop_categoryButtonSize
            // ButtonList
            set parent=BlzCreateFrame(TasItemShop_boxButtonListFrameName, TasItemShop_FrameSuperBox, 0, 0)
            call BlzFrameSetPoint(parent, FRAMEPOINT_TOPRIGHT, TasItemShop_FrameSuperBox, FRAMEPOINT_TOPRIGHT, 0, 0)
            // baseSizeY = 0.0455
            call BlzFrameSetSize(parent, TasItemShop_xSize, 0.0455 + TasItemShop_buttonListRows * TasItemShop_buttonListButtonSizeY + rows * TasItemShop_categoryButtonSize + TasItemShop_buttonListButtonGapRow * ( TasItemShop_buttonListRows - 1 ))
            set TasItemShop_ButtonListIndex=CreateTasButtonList10(TasItemShop_buttonListButtonName , TasItemShop_buttonListCols , TasItemShop_buttonListRows , parent , function TasItemShop__ButtonListFunction_LeftClick , function TasItemShop__ButtonListFunction_RightClick , function TasItemShop_updateItemFrameAction , function TasItemShop__ButtonListFunction_Search , function TasItemShop__ButtonListFunction_Filter , function TasItemShop__ButtonListFunction_AsyncLeftClick , function TasItemShop__ButtonListFunction_AsyncRightClick , TasItemShop_buttonListButtonGapCol , TasItemShop_buttonListButtonGapRow)
            set TasItemShop_FrameTasButtonList=parent
            set loopA=TasItemShop_buttonListRows * TasItemShop_buttonListCols
            loop
                exitwhen loopA <= 0
                set frame=BlzGetFrameByName("TasButtonListTooltipText", TasButtonListCreateContext[TasItemShop_ButtonListIndex] + loopA)
                call BlzFrameClearAllPoints(frame)
                if TasItemShop_toolTipPosPointParent != null then
                    call BlzFrameSetPoint(frame, TasItemShop_toolTipPosPoint, BlzGetFrameByName(TasButtonListButtonName[TasItemShop_ButtonListIndex], TasButtonListCreateContext[TasItemShop_ButtonListIndex] + loopA), TasItemShop_toolTipPosPointParent, TasItemShop_toolTipPosX, TasItemShop_toolTipPosY)
                else
                    call BlzFrameSetAbsPoint(frame, TasItemShop_toolTipPosPoint, TasItemShop_toolTipPosX, TasItemShop_toolTipPosY)
                endif
                if TasItemShop_buttonListHighLightFrameName != null and TasItemShop_buttonListHighLightFrameName != "" then
                    set frame=BlzCreateFrame(TasItemShop_buttonListHighLightFrameName, BlzGetFrameByName(TasButtonListButtonName[TasItemShop_ButtonListIndex], TasButtonListCreateContext[TasItemShop_ButtonListIndex] + loopA), 0, TasButtonListCreateContext[TasItemShop_ButtonListIndex] + loopA)
                    call BlzFrameSetAllPoints(frame, BlzGetFrameByName(TasButtonListButtonName[TasItemShop_ButtonListIndex], TasButtonListCreateContext[TasItemShop_ButtonListIndex] + loopA))
                    call BlzFrameSetVisible(frame, false)
                endif
                set loopA=loopA - 1
            endloop
            
    
            // category
            set frame=BlzCreateFrame(TasItemShop_boxCatFrameName, parent, 0, 0)
            call BlzFrameSetPoint(frame, FRAMEPOINT_TOPRIGHT, TasButtonListInputFrame[TasItemShop_ButtonListIndex], FRAMEPOINT_BOTTOMRIGHT, 0, 0)
            call BlzFrameSetSize(frame, TasItemShop_xSize, 0.0135 + rows * TasItemShop_categoryButtonSize)
            set TasItemShop_FrameCategoryBox=frame
            set parent=frame
    
            set groupObject=CreateToggleIconButtonGroup(function TasItemShop__ButtonListFunction_CategoryAction)
            set ToggleIconButton_DefaultSizeX=TasItemShop_categoryButtonSize
            set ToggleIconButton_DefaultSizeY=TasItemShop_categoryButtonSize
            //frame = ToggleIconButtonGroupModeButton(groupObject, parent).Button
            
            set frame=ToggleIconButtonGroupClearButton(groupObject , parent , "ReplaceableTextures\\CommandButtons\\BTNCancel")
            //BlzFrameSetPoint(frame, FRAMEPOINT_TOPLEFT, FrameSuperBox, FRAMEPOINT_TOPLEFT, boxFrameBorderGap, -boxFrameBorderGap)
            call BlzFrameSetPoint(frame, FRAMEPOINT_TOPLEFT, TasItemShop_FrameSuperBox, FRAMEPOINT_TOPLEFT, TasItemShop_boxFrameBorderGap, - TasItemShop_boxFrameBorderGap)
            call BlzTriggerRegisterFrameEvent(TasItemShop_ButtonTriggerClear, frame, FRAMEEVENT_CONTROL_CLICK)
            call BlzTriggerRegisterFrameEvent(TasItemShop_ButtonTriggerClearFocus, (frame), FRAMEEVENT_CONTROL_CLICK) // INLINED!!
            set clearButton=frame
    
            set TasItemShop_CategoryModButtonIndex=CreateToggleIconButton(parent , 1 , GetLocalizedString(TasItemShop_categoryModeTextOr) , TasItemShop_categoryModeIconOr , 0 , GetLocalizedString(TasItemShop_categoryModeTextAnd) , TasItemShop_categoryModeIconAnd)
            call BlzFrameSetPoint(ToggleIconButton_Button[TasItemShop_CategoryModButtonIndex], FRAMEPOINT_BOTTOMLEFT, clearButton, FRAMEPOINT_BOTTOMRIGHT, 0.003, 0)
            call BlzTriggerRegisterFrameEvent(TasItemShop_ButtonTriggerCategoryMode, ToggleIconButton_Button[TasItemShop_CategoryModButtonIndex], FRAMEEVENT_CONTROL_CLICK)
            
            set loopA=1
            loop
                exitwhen loopA > TasItemShop_CategoryCount
                set categoryIndexes[loopA]=CreateToggleIconButtonSimple(parent , TasItemShop_CategoryValues[loopA] , GetLocalizedString(TasItemShop_CategoryText[loopA]) , TasItemShop_CategoryIcon[loopA])
                if loopA == 1 then
                    call BlzFrameSetPoint(ToggleIconButton_Button[categoryIndexes[loopA]], FRAMEPOINT_TOPLEFT, parent, FRAMEPOINT_TOPLEFT, TasItemShop_boxCatBorderGap, - TasItemShop_boxCatBorderGap)
                else
                    call BlzFrameSetPoint(ToggleIconButton_Button[categoryIndexes[loopA]], FRAMEPOINT_TOPLEFT, ToggleIconButton_Button[categoryIndexes[loopA - 1]], FRAMEPOINT_TOPRIGHT, 0.003, 0)
                endif
                call ToggleIconButtonGroupAddButton(groupObject , categoryIndexes[loopA])
                set loopA=loopA + 1
            endloop
    
            set loopA=2
            loop
                exitwhen loopA > rows
                //    print((index-1)*buttonsInRow + 1, "->", (index-2)*buttonsInRow + 1)
                call BlzFrameSetPoint(ToggleIconButton_Button[categoryIndexes[( loopA - 1 ) * buttonsInRow + 1]], FRAMEPOINT_TOPLEFT, ToggleIconButton_Button[categoryIndexes[( loopA - 2 ) * buttonsInRow + 1]], FRAMEPOINT_BOTTOMLEFT, 0, - 0.001)
                //BlzFrameSetPoint(frames[(index-1)*buttonsInRow + 1].Button, FRAMEPOINT_TOPLEFT, frames[(index-2)*buttonsInRow + 1].Button, FRAMEPOINT_BOTTOMLEFT, 0, -0.001)        
                set loopA=loopA + 1
            endloop
            
            set frame=BlzGetFrameByName(TasButtonListButtonName[TasItemShop_ButtonListIndex], TasButtonListCreateContext[TasItemShop_ButtonListIndex] + 1)
            call BlzFrameClearAllPoints(frame)
            //call BlzFrameSetPoint(frame, FRAMEPOINT_TOPRIGHT, FrameCategoryBox, FRAMEPOINT_BOTTOMRIGHT, -0.014, 0)
            call BlzFrameSetPoint(frame, FRAMEPOINT_TOPLEFT, TasItemShop_FrameCategoryBox, FRAMEPOINT_BOTTOMLEFT, 0.0045, 0)
    
             // built from
            if TasItemShop_refButtonCountMats > 0 then
                set parent=BlzCreateFrame(TasItemShop_boxRefFrameName, TasItemShop_FrameSuperBox, 0, 0)
                call BlzFrameSetSize(parent, ( TasItemShop_refButtonSize + TasItemShop_refButtonGap ) * TasItemShop_refButtonCountMats + TasItemShop_boxFrameBorderGap * 2, TasItemShop_refButtonBoxSizeY)
                call TasItemShop_PlaceRefButtonBox(parent)
                set TasItemShop_FrameMaterialBox=parent
    
                set frame=BlzCreateFrame("TasButtonTextTemplate", parent, 0, 0)
                call BlzFrameSetPoint(frame, FRAMEPOINT_TOPLEFT, parent, FRAMEPOINT_TOPLEFT, TasItemShop_boxRefBorderGap, - TasItemShop_boxRefBorderGap)
                call BlzFrameSetText(frame, GetLocalizedString(TasItemShop_textMats))
                set TasItemShop_FrameMaterialText=frame
                set TasItemShop_RefButtonMaterialStart=TasItemShop_RefButtonCount
                set TasItemShop_RefButtonMaterialEnd=TasItemShop_CreateRefButtons(TasItemShop_refButtonCountMats , parent , frame , TasItemShop_ButtonTriggerMaterial , true)
    
                call TasItemShop_CreateRefPage(parent , TasItemShop_FrameMaterialText , TasItemShop_ButtonTriggerMaterialPage , TasItemShop_refButtonCountMats)
                set TasItemShop_FrameMaterialPage=BlzGetFrameByName("TasItemShopUIPageControl", 0)
                set TasItemShop_FrameMaterialPageUp=BlzGetFrameByName("TasItemShopCatButton", 0)
                set TasItemShop_FrameMaterialPageDown=BlzGetFrameByName("TasItemShopCatButton", 1)
                set TasItemShop_FrameMaterialPageText=BlzGetFrameByName("TasButtonTextTemplate", 0)
            endif
    
            // possible upgrades
            if TasItemShop_refButtonCountUp > 0 then
                set parent=BlzCreateFrame(TasItemShop_boxRefFrameName, TasItemShop_FrameSuperBox, 0, 0)
                call BlzFrameSetSize(parent, ( TasItemShop_refButtonSize + TasItemShop_refButtonGap ) * TasItemShop_refButtonCountUp + TasItemShop_boxFrameBorderGap * 2, TasItemShop_refButtonBoxSizeY)
                call TasItemShop_PlaceRefButtonBox(parent)
                set TasItemShop_FrameUpgradeBox=parent
    
                set frame=BlzCreateFrame("TasButtonTextTemplate", parent, 0, 0)
                call BlzFrameSetPoint(frame, FRAMEPOINT_TOPLEFT, parent, FRAMEPOINT_TOPLEFT, TasItemShop_boxRefBorderGap, - TasItemShop_boxRefBorderGap)
                call BlzFrameSetText(frame, GetLocalizedString(TasItemShop_textUpgrades))
                set TasItemShop_FrameUpgradeText=frame
                set TasItemShop_RefButtonUpgradeStart=TasItemShop_RefButtonCount
                set TasItemShop_RefButtonUpgradeEnd=TasItemShop_CreateRefButtons(TasItemShop_refButtonCountUp , parent , frame , TasItemShop_ButtonTriggerUpgrade , true)
    
                call TasItemShop_CreateRefPage(parent , TasItemShop_FrameUpgradeText , TasItemShop_ButtonTriggerUpgradePage , TasItemShop_refButtonCountUp)
                set TasItemShop_FrameUpgradePage=BlzGetFrameByName("TasItemShopUIPageControl", 0)
                set TasItemShop_FrameUpgradePageUp=BlzGetFrameByName("TasItemShopCatButton", 0)
                set TasItemShop_FrameUpgradePageDown=BlzGetFrameByName("TasItemShopCatButton", 1)
                set TasItemShop_FrameUpgradePageText=BlzGetFrameByName("TasButtonTextTemplate", 0)
            endif
            
            if TasItemShop_refButtonCountQuickLink > 0 then
                set parent=BlzCreateFrame(TasItemShop_boxRefFrameName, TasItemShop_FrameSuperBox, 0, 0)
                call BlzFrameSetSize(parent, ( TasItemShop_refButtonSize + TasItemShop_refButtonGap ) * TasItemShop_refButtonCountUp + TasItemShop_boxFrameBorderGap * 2, TasItemShop_refButtonBoxSizeY)
                call TasItemShop_PlaceRefButtonBox(parent)
                set TasItemShop_FrameQuickLinkBox=parent
    
                set frame=BlzCreateFrame("TasButtonTextTemplate", parent, 0, 0)
                call BlzFrameSetPoint(frame, FRAMEPOINT_TOPLEFT, parent, FRAMEPOINT_TOPLEFT, TasItemShop_boxRefBorderGap, - TasItemShop_boxRefBorderGap)
                call BlzFrameSetText(frame, GetLocalizedString(TasItemShop_textQuickLink))
                set TasItemShop_FrameQuickLinkText=frame
    
                set TasItemShop_FrameQuickLinkBoxHighLight=BlzCreateFrame(TasItemShop_buttonListHighLightFrameName, parent, 0, 0)
                call BlzFrameSetAllPoints(TasItemShop_FrameQuickLinkBoxHighLight, parent)
                call BlzFrameSetVisible(TasItemShop_FrameQuickLinkBoxHighLight, false)
    
                set TasItemShop_RefButtonQuickLinkStart=TasItemShop_RefButtonCount
                set TasItemShop_RefButtonQuickLinkEnd=TasItemShop_CreateRefButtons(TasItemShop_refButtonCountQuickLink , parent , frame , TasItemShop_ButtonTriggerQuickLink , true)
    
                call TasItemShop_CreateRefPage(parent , TasItemShop_FrameQuickLinkText , TasItemShop_ButtonTriggerQuickLinkPage , TasItemShop_refButtonCountUp)
                set TasItemShop_FrameQuickLinkPage=BlzGetFrameByName("TasItemShopUIPageControl", 0)
                set TasItemShop_FrameQuickLinkPageUp=BlzGetFrameByName("TasItemShopCatButton", 0)
                set TasItemShop_FrameQuickLinkPageDown=BlzGetFrameByName("TasItemShopCatButton", 1)
                set TasItemShop_FrameQuickLinkPageText=BlzGetFrameByName("TasButtonTextTemplate", 0)
    
            endif
    
            // Inventory
            if TasItemShop_refButtonCountInv > 0 then
                set parent=BlzCreateFrame(TasItemShop_boxRefFrameName, TasItemShop_FrameSuperBox, 0, 0)
                call BlzFrameSetSize(parent, ( TasItemShop_refButtonSize + TasItemShop_refButtonGap ) * TasItemShop_refButtonCountInv + TasItemShop_boxFrameBorderGap * 2, TasItemShop_refButtonBoxSizeY)
                call TasItemShop_PlaceRefButtonBox(parent)
                set TasItemShop_FrameInventoryBox=parent
                
    
                set frame=BlzCreateFrame("TasButtonTextTemplate", parent, 0, 0)
                call BlzFrameSetPoint(frame, FRAMEPOINT_TOPLEFT, parent, FRAMEPOINT_TOPLEFT, TasItemShop_boxRefBorderGap, - TasItemShop_boxRefBorderGap)
                call BlzFrameSetText(frame, GetLocalizedString(TasItemShop_textInventory))
                set TasItemShop_FrameInventoryText=frame
                set TasItemShop_RefButtonInventoryStart=TasItemShop_RefButtonCount
                set TasItemShop_RefButtonInventoryEnd=TasItemShop_CreateRefButtons(TasItemShop_refButtonCountInv , parent , frame , TasItemShop_ButtonTriggerInventory , true)
    
                set loopA=TasItemShop_RefButtonInventoryStart
                loop
                    exitwhen loopA > TasItemShop_RefButtonInventoryEnd
                    call BlzFrameSetTexture(TasItemShop_RefButtonOverlay[loopA], TasItemShop_MainItemTexture, 0, true)
                    set loopA=loopA + 1
                endloop
    
                call TasItemShop_CreateRefPage(parent , TasItemShop_FrameInventoryText , TasItemShop_ButtonTriggerInventoryPage , TasItemShop_refButtonCountInv)
                set TasItemShop_FrameInventoryPage=BlzGetFrameByName("TasItemShopUIPageControl", 0)
                set TasItemShop_FrameInventoryPageUp=BlzGetFrameByName("TasItemShopCatButton", 0)
                set TasItemShop_FrameInventoryPageDown=BlzGetFrameByName("TasItemShopCatButton", 1)
                set TasItemShop_FrameInventoryPageText=BlzGetFrameByName("TasButtonTextTemplate", 0)
            endif
    
            // User
            if TasItemShop_refButtonCountUser > 0 then
                set parent=BlzCreateFrame(TasItemShop_boxRefFrameName, TasItemShop_FrameSuperBox, 0, 0)
                call BlzFrameSetSize(parent, ( TasItemShop_refButtonSize + TasItemShop_refButtonGap ) * TasItemShop_refButtonCountUser + TasItemShop_boxFrameBorderGap * 2, TasItemShop_refButtonBoxSizeY)
                call TasItemShop_PlaceRefButtonBox(parent)
                set TasItemShop_FrameUserBox=parent
    
                set frame=BlzCreateFrame("TasButtonTextTemplate", parent, 0, 0)
                call BlzFrameSetPoint(frame, FRAMEPOINT_TOPLEFT, parent, FRAMEPOINT_TOPLEFT, TasItemShop_boxRefBorderGap, - TasItemShop_boxRefBorderGap)
                call BlzFrameSetText(frame, GetLocalizedString(TasItemShop_textUser))
                set TasItemShop_FrameUserText=frame
                set TasItemShop_RefButtonUserStart=TasItemShop_RefButtonCount
                set TasItemShop_RefButtonUserEnd=TasItemShop_CreateRefButtons(TasItemShop_refButtonCountUser , parent , frame , TasItemShop_ButtonTriggerUser , false)
    
                set loopA=TasItemShop_RefButtonUserStart
                loop
                    exitwhen loopA > TasItemShop_RefButtonUserEnd
                    call BlzFrameSetTexture(TasItemShop_RefButtonOverlay[loopA], TasItemShop_MainUserTexture, 0, true)
                    set loopA=loopA + 1
                endloop
                
                call TasItemShop_CreateRefPage(parent , TasItemShop_FrameUserText , TasItemShop_ButtonTriggerUserPage , TasItemShop_refButtonCountUser)
                set TasItemShop_FrameUserPage=BlzGetFrameByName("TasItemShopUIPageControl", 0)
                set TasItemShop_FrameUserPageUp=BlzGetFrameByName("TasItemShopCatButton", 0)
                set TasItemShop_FrameUserPageDown=BlzGetFrameByName("TasItemShopCatButton", 1)
                set TasItemShop_FrameUserPageText=BlzGetFrameByName("TasButtonTextTemplate", 0)
            endif
    
            
            
            set frame=BlzCreateFrame("TasButton", TasItemShop_FrameSuperBox, 0, TasItemShop_CREATE_CONTEXT_CURRENT)
            call CreateTasButtonTooltip(frame , TasItemShop_FrameSuperBox , TasItemShop_CREATE_CONTEXT_CURRENT)
    
            call BlzGetFrameByName("TasButtonIcon", TasItemShop_CREATE_CONTEXT_CURRENT)
            call BlzGetFrameByName("TasButtonText", TasItemShop_CREATE_CONTEXT_CURRENT)
            call BlzGetFrameByName("TasButtonIconGold", TasItemShop_CREATE_CONTEXT_CURRENT)
            call BlzGetFrameByName("TasButtonTextGold", TasItemShop_CREATE_CONTEXT_CURRENT)
            call BlzGetFrameByName("TasButtonIconLumber", TasItemShop_CREATE_CONTEXT_CURRENT)
            call BlzGetFrameByName("TasButtonTextLumber", TasItemShop_CREATE_CONTEXT_CURRENT)
            
            
            call BlzFrameSetPoint(frame, FRAMEPOINT_BOTTOM, TasItemShop_FrameSuperBox, FRAMEPOINT_BOTTOM, 0, TasItemShop_boxFrameBorderGap)
            call BlzTriggerRegisterFrameEvent(TasItemShop_ButtonTriggerBuy, frame, FRAMEEVENT_CONTROL_CLICK)
            call BlzTriggerRegisterFrameEvent(TasItemShop_ButtonTriggerClearFocus, (frame), FRAMEEVENT_CONTROL_CLICK) // INLINED!!
            
            set frame=BlzCreateFrame("TasButtonTextTemplate", TasItemShop_FrameSuperBox, 0, 0)
            call BlzFrameSetPoint(frame, FRAMEPOINT_BOTTOMRIGHT, TasButtonListInputFrame[TasItemShop_ButtonListIndex], FRAMEPOINT_BOTTOMLEFT, - TasItemShop_boxFrameBorderGap, 0)
            call BlzFrameSetPoint(frame, FRAMEPOINT_TOPLEFT, ToggleIconButton_Button[TasItemShop_CategoryModButtonIndex], FRAMEPOINT_TOPRIGHT, TasItemShop_boxFrameBorderGap, 0)
            call BlzFrameSetTextAlignment(frame, TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE)
            call BlzFrameSetText(frame, "Name")
            set TasItemShop_FrameTitelText=frame
    
            call BlzFrameClearAllPoints(BlzGetFrameByName("TasButtonListTooltipText", TasItemShop_CREATE_CONTEXT_CURRENT))
            if TasItemShop_toolTipPosPointParent != null then
                call BlzFrameSetPoint(BlzGetFrameByName("TasButtonListTooltipText", TasItemShop_CREATE_CONTEXT_CURRENT), TasItemShop_toolTipPosPoint, BlzGetFrameByName("TasButton", TasItemShop_CREATE_CONTEXT_CURRENT), TasItemShop_toolTipPosPointParent, TasItemShop_toolTipPosX, TasItemShop_toolTipPosY)
            else
                call BlzFrameSetAbsPoint(BlzGetFrameByName("TasButtonListTooltipText", TasItemShop_CREATE_CONTEXT_CURRENT), TasItemShop_toolTipPosPoint, TasItemShop_toolTipPosX, TasItemShop_toolTipPosY)
            endif
    
            if TasItemShop_canUndo then
                set parent=BlzCreateFrame(TasItemShop_boxUndoFrameName, TasItemShop_FrameSuperBox, 0, 0)
                call BlzFrameSetSize(parent, TasItemShop_refButtonSize + TasItemShop_boxUndoBorderGap * 2, TasItemShop_refButtonSize + TasItemShop_boxUndoBorderGap * 2)
                call BlzFrameSetPoint(parent, FRAMEPOINT_BOTTOMLEFT, TasItemShop_FrameSuperBox, FRAMEPOINT_BOTTOMLEFT, 0.00, 0.00)
                
                set TasItemShop_FrameUndoBox=parent
                
                set TasItemShop_FrameUndoButton=BlzCreateFrame("TasItemShopCatButton", parent, 0, 0)
                set TasItemShop_FrameUndoButtonIcon=BlzGetFrameByName("TasItemShopCatButtonBackdrop", 0)
                set TasItemShop_FrameUndoButtonIconPushed=BlzGetFrameByName("TasItemShopCatButtonBackdropPushed", 0)
                set TasItemShop_FrameUndoText=CreateSimpleTooltip(TasItemShop_FrameUndoButton , TasItemShop_textUndo)
    
                set frame=TasItemShop_FrameUndoButton
                call BlzFrameSetSize(frame, TasItemShop_refButtonSize, TasItemShop_refButtonSize)
                call BlzFrameSetPoint(frame, FRAMEPOINT_CENTER, parent, FRAMEPOINT_CENTER, 0, 0)
                call BlzTriggerRegisterFrameEvent(TasItemShop_ButtonTriggerUndo, frame, FRAMEEVENT_CONTROL_CLICK)
                call BlzTriggerRegisterFrameEvent(TasItemShop_ButtonTriggerClearFocus, (frame), FRAMEEVENT_CONTROL_CLICK) // INLINED!!
                call BlzFrameSetVisible(TasItemShop_FrameUndoBox, false)
            endif
    
            if TasItemShop_canDefuse then
                set parent=BlzCreateFrame(TasItemShop_boxDefuseFrameName, TasItemShop_FrameSuperBox, 0, 0)
                call BlzFrameSetSize(parent, TasItemShop_refButtonSize + TasItemShop_boxDefuseBorderGap * 2, TasItemShop_refButtonSize + TasItemShop_boxDefuseBorderGap * 2)
                call BlzFrameSetPoint(parent, FRAMEPOINT_BOTTOMRIGHT, TasItemShop_FrameSuperBox, FRAMEPOINT_BOTTOMRIGHT, 0.00, 0.00)
                set TasItemShop_FrameDefuseBox=parent
                set TasItemShop_FrameDefuseButton=BlzCreateFrame("TasItemShopCatButton", parent, 0, 0)
                set TasItemShop_FrameDefuseText=CreateSimpleTooltip(TasItemShop_FrameDefuseButton , TasItemShop_textDefuse)
                call BlzFrameClearAllPoints(TasItemShop_FrameDefuseText)
                call BlzFrameSetPoint(TasItemShop_FrameDefuseText, FRAMEPOINT_BOTTOMRIGHT, TasItemShop_FrameDefuseButton, FRAMEPOINT_TOPRIGHT, 0, 0.008)
    
                set frame=TasItemShop_FrameDefuseButton
                call BlzFrameSetTexture(BlzGetFrameByName("TasItemShopCatButtonBackdrop", 0), TasItemShop_DefuseButtonIcon, 0, false)
                call BlzFrameSetTexture(BlzGetFrameByName("TasItemShopCatButtonBackdropPushed", 0), TasItemShop_DefuseButtonIcon, 0, false)
                call BlzFrameSetTexture(BlzGetFrameByName("TasItemShopCatButtonBackdropDisabled", 0), TasItemShop_DefuseButtonIconDisabled, 0, false)
                call BlzFrameSetSize(frame, TasItemShop_refButtonSize, TasItemShop_refButtonSize)
                call BlzFrameSetPoint(frame, FRAMEPOINT_CENTER, parent, FRAMEPOINT_CENTER, 0, 0)
                call BlzTriggerRegisterFrameEvent(TasItemShop_ButtonTriggerDefuse, frame, FRAMEEVENT_CONTROL_CLICK)
                call BlzTriggerRegisterFrameEvent(TasItemShop_ButtonTriggerClearFocus, (frame), FRAMEEVENT_CONTROL_CLICK) // INLINED!!
                call BlzFrameSetEnable(TasItemShop_FrameDefuseButton, false)
            endif
    
            if TasItemShop_canSellItems then
                set parent=BlzCreateFrame(TasItemShop_boxDefuseFrameName, TasItemShop_FrameSuperBox, 0, 0)
                call BlzFrameSetSize(parent, TasItemShop_refButtonSize + TasItemShop_boxSellBorderGap * 2, TasItemShop_refButtonSize + TasItemShop_boxSellBorderGap * 2)
                if TasItemShop_canDefuse then
                    call BlzFrameSetPoint(parent, FRAMEPOINT_BOTTOMRIGHT, TasItemShop_FrameDefuseBox, FRAMEPOINT_BOTTOMLEFT, 0.00, 0.00)
                else
                    call BlzFrameSetPoint(parent, FRAMEPOINT_BOTTOMRIGHT, TasItemShop_FrameSuperBox, FRAMEPOINT_BOTTOMRIGHT, 0.00, 0.00)
                endif
    
                set TasItemShop_FrameSellBox=parent
                set TasItemShop_FrameSellButton=BlzCreateFrame("TasItemShopCatButton", parent, 0, 0)
    
                call BlzFrameSetTexture(BlzGetFrameByName("TasItemShopCatButtonBackdrop", 0), TasItemShop_SellButtonIcon, 0, false)
                call BlzFrameSetTexture(BlzGetFrameByName("TasItemShopCatButtonBackdropPushed", 0), TasItemShop_SellButtonIcon, 0, false)
                call BlzFrameSetTexture(BlzGetFrameByName("TasItemShopCatButtonBackdropDisabled", 0), TasItemShop_SellButtonIconDisabled, 0, false)
                set frame=TasItemShop_FrameSellButton
                call BlzFrameSetSize(frame, TasItemShop_refButtonSize, TasItemShop_refButtonSize)
                call BlzFrameSetPoint(frame, FRAMEPOINT_CENTER, parent, FRAMEPOINT_CENTER, 0, 0)
                call BlzTriggerRegisterFrameEvent(TasItemShop_ButtonTriggerSell, frame, FRAMEEVENT_CONTROL_CLICK)
                call BlzTriggerRegisterFrameEvent(TasItemShop_ButtonTriggerClearFocus, (frame), FRAMEEVENT_CONTROL_CLICK) // INLINED!!
                call BlzFrameSetEnable(TasItemShop_FrameSellButton, false)
    
                set TasItemShop_FrameSellText=CreateSimpleTooltip(frame , TasItemShop_textSell)
                call BlzFrameClearAllPoints(TasItemShop_FrameSellText)
                call BlzFrameSetPoint(TasItemShop_FrameSellText, FRAMEPOINT_BOTTOMRIGHT, TasItemShop_FrameSellButton, FRAMEPOINT_TOPRIGHT, 0, 0.008)
            endif
            
    
            set parent=BlzCreateFrameByType("BUTTON", "TasRightClickSpriteParent", TasItemShop_FrameSuperBox, "", 0)
            call BlzFrameSetLevel(parent, 99)
            set frame=BlzCreateFrameByType("SPRITE", "TasRightClickSprite", parent, "", 0)
            call BlzFrameSetSize(frame, TasItemShop_refButtonSize, TasItemShop_refButtonSize)
            call BlzFrameSetScale(frame, TasItemShop_spriteScale)
            call BlzFrameSetModel(frame, TasItemShop_spriteModel, 0)
            call BlzFrameSetVisible(parent, false)
            set TasItemShop_FrameSpriteParent=parent
            set TasItemShop_FrameSprite=frame
            //fitRefBoxes()
            call BlzFrameSetSize(TasItemShop_FrameParentSuperUI, TasItemShop_xSize, TasItemShop_ySize)
            call BlzFrameSetVisible(TasItemShop_FrameParentSuper, false)
        endfunction
    
        function TasItemShop_RefButtonPageChange takes integer current,integer add,integer min,integer max,player p returns integer
            local integer remain
            local integer size= IAbsBJ(add)
            if BlzGetTriggerFrameEvent() == FRAMEEVENT_CONTROL_CLICK then
                set current=current + add
                if not TasItemShop_refButtonPageRotate then
                    if current < min then
                       set current=min
                    endif
                    if current >= max then
                       set current=max - add
                    endif
                else
                    if add > 0 then
                        if current >= max then
                            set current=min
                        endif
                    else
                        if current < min then
                            set remain=ModuloInteger(max, size)
                            // last page is incomplete?
                            if remain > 0 then
                                set current=max - remain
                            else
                                set current=max - size
                            endif
                        endif
                    endif
                endif
            elseif (IsRightClick__isRight[GetPlayerId((p))]) then // INLINED!!
                call StartSoundForPlayerBJ(p, ToggleIconButton_Sound)
                // right clicks jump to the first or last Page
                if add > 0 then
                    set current=max - size
                else
                    set current=min
                endif
            endif
            
            return current
        endfunction
        
    
        function TasItemShop_RefButtonAction takes integer itemCode returns nothing
            local player p= GetTriggerPlayer()
            local framehandle frame= BlzGetTriggerFrame()
            if BlzGetTriggerFrameEvent() == FRAMEEVENT_CONTROL_CLICK then
            // print(GetPlayerName(player), "Clicked Material", index)
                call TasItemShop_setSelected(p , itemCode)
            else
                if (IsRightClick__isRight[GetPlayerId((p))]) then // INLINED!!
                    call TasItemShop_ShowSprite(frame , p)
                    call StartSoundForPlayerBJ(p, ToggleIconButton_Sound)
                    call TasItemShop_BuyItem(p , itemCode)
                endif
            endif
        endfunction
    
    
        function TasItemShop__TriggerFuctionDefuse takes nothing returns nothing
            local player p= GetTriggerPlayer()
            local integer playerIndex= GetPlayerId(p)
            local integer itemCode
            local item i
            local integer gold
            local integer lumber
            local integer undoIndex
            local integer loopA
            local integer loopB
            local unit u
            if TasItemShop_SelectedItem[playerIndex] == null then
                return
            endif
            set i=TasItemShop_SelectedItem[playerIndex]
            set itemCode=GetItemTypeId(i)
            set TasItemShop_SelectedItem[playerIndex]=null
            
            set gold=TasItemGetCostGold(itemCode)
            set lumber=TasItemGetCostLumber(itemCode)
            set loopA=(LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,itemCode)), (0))) // INLINED!!
            loop
                exitwhen loopA <= 0
                set gold=gold - TasItemGetCostGold((LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,itemCode)), (loopA)))) // INLINED!!
                set lumber=lumber - TasItemGetCostLumber((LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,itemCode)), (loopA)))) // INLINED!!
                set loopA=loopA - 1
                // body
            endloop
    
            call AdjustPlayerStateSimpleBJ(p, PLAYER_STATE_RESOURCE_GOLD, gold)
            call AdjustPlayerStateSimpleBJ(p, PLAYER_STATE_RESOURCE_LUMBER, lumber)
            if TasItemShop_canUndo then
                set undoIndex=TasItemShop_CreateUndo(p , itemCode , - gold , - lumber , " Defuse")
                call SaveInteger(Table___ht, (TasItemShop_UndoItems[undoIndex]), (0), ( 1)) // INLINED!!
                call SaveItemHandle(Table___ht, (((TasItemShop_UndoItems[undoIndex]))), (1), ( i)) // INLINED!!
                call SaveUnitHandle(Table___ht, (((TasItemShop_UndoItems[undoIndex]))), (- 1), ( (LoadUnitHandle(Table___ht, (((ItemHolder__data))), (GetHandleId((i))))))) // INLINED!!
                call UnitRemoveItem((LoadUnitHandle(Table___ht, (((ItemHolder__data))), (GetHandleId((i))))), i) // INLINED!!
                call SetItemVisible(i, false)
                
                if GetLocalPlayer() == p then
                    call BlzFrameSetVisible(TasItemShop_FrameUndoBox, true)
                    call TasItemShop_updateUndoButton(TasItemShop_UndoResultCode[undoIndex] , " Defuse")
                endif
    
            else
                call RemoveItem(i)
            endif
            set loopA=(LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,itemCode)), (0))) // INLINED!!
            loop
                exitwhen loopA <= 0
                set i=CreateItem((LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,itemCode)), (loopA))), GetUnitX(TasItemShop_ShoperMain[playerIndex]), GetUnitY(TasItemShop_ShoperMain[playerIndex])) // INLINED!!
                call TasItemShop_GiveItemGroup(p , i , undoIndex)
                
                set loopA=loopA - 1
            endloop
            
            if GetLocalPlayer() == p then
                call BlzFrameSetEnable(TasItemShop_FrameDefuseButton, false)
            endif
        endfunction
        
        function TasItemShop__TriggerFuctionSell takes nothing returns nothing
            call TasItemShop_SellItem(GetTriggerPlayer() , TasItemShop_SelectedItem[GetPlayerId(GetTriggerPlayer())])
        endfunction
        function TasItemShop__TriggerFuctionBuy takes nothing returns nothing
            local player p= GetTriggerPlayer()
            local integer playerIndex= GetPlayerId(p)
            local integer itemCode= TasItemShop_Selected[playerIndex]
            call TasItemShop_ShowSprite(BlzGetTriggerFrame() , p)
            call TasItemShop_BuyItem(p , itemCode)
            set p=null
        endfunction
    
        function TasItemShop_ShopSelectionActionGroupEnum takes nothing returns nothing
            if not TasItemShop_IsValidShopper(TasItemShop_TempPlayer , TasItemShop_TempUnit , GetEnumUnit() , TasItemShop_TempRange) then
                call GroupRemoveUnit(TasItemShop_TempGroup, GetEnumUnit())
            endif
        endfunction
        function TasItemShop_ShopSelectionAction takes player p,unit shop,unit target returns nothing
            local integer playerIndex= GetPlayerId(p)
            local integer shopObject= GetUnitTypeId(shop)
            local real oldRange= TasItemShop_shopRange
            local integer shopIndex= (LoadInteger(Table___ht, (TasItemShop_Shops), (shopObject))) // INLINED!!
            // is a registered shop UnitType?
            if ( shopIndex != 0 and GetOwningPlayer(shop) == p ) then
                set TasItemShop_TempPlayer=p
                set TasItemShop_TempRange=TasItemShop_ShopRange[shopObject]
                if TasItemShop_TempRange < 1 then
                    set TasItemShop_TempRange=oldRange
                endif
    
                call GroupEnumUnitsInRange(TasItemShop_TempGroup, GetUnitX(shop), GetUnitY(shop), TasItemShop_TempRange + 400, null)
                // remove unallowed shoppers
                set TasItemShop_TempUnit=shop
                call ForGroup(TasItemShop_TempGroup, function TasItemShop_ShopSelectionActionGroupEnum)
                set TasItemShop_shopRange=oldRange
                if target == null and IsUnitInGroup(TasItemShop_ShoperMain[playerIndex], TasItemShop_TempGroup) then
                    set target=TasItemShop_ShoperMain[playerIndex]
                endif
                
                call TasItemShopUIShow(p , shop , TasItemShop_TempGroup , target)
                // Direct Strike code
                if ( GetLocalPlayer() == p ) then
                    call BlzFrameSetVisible(resetCamera, false)
                    call MultiboardDisplay(s__udg_Multiboard[GetConvertedPlayerId(p)], false)
                endif
            // no, end shopping!
            elseif TasItemShop_CurrentShop[playerIndex] != null then
                call TasItemShopUIShow(p , null , null , null)
                // Direct Strike code
                if ( GetLocalPlayer() == p ) then
                    call BlzFrameSetVisible(resetCamera, true)
                    call MultiboardDisplay(s__udg_Multiboard[GetConvertedPlayerId(p)], true)
                endif
            endif
        endfunction
    
        function TasItemShop__TriggerFuctionUser takes nothing returns nothing
            local player p= GetTriggerPlayer()
            local integer playerIndex= GetPlayerId(p)
            local integer itemCode= TasItemShop_Selected[playerIndex]
            local integer index= S2I(BlzFrameGetText(BlzGetTriggerFrame())) + TasItemShop_CurrentOffSetUser[playerIndex]
            local unit u= BlzGroupUnitAt(TasItemShop_Shoper[playerIndex], index - 1)
    
            if BlzGetTriggerFrameEvent() == FRAMEEVENT_CONTROL_CLICK then
                call IssueNeutralTargetOrder(p, TasItemShop_CurrentShop[playerIndex], "smart", u)
                if not TasItemShop_userButtonOrder then
                    call TasItemShop_ShopSelectionAction(p , TasItemShop_CurrentShop[playerIndex] , u)
                endif
                
            else
                if (IsRightClick__isRight[GetPlayerId((p))]) then // INLINED!!
                    call SelectUnitForPlayerSingle(u, p)
                endif
            endif
        endfunction
        function TasItemShop__TriggerFuctionUserPage takes nothing returns nothing
            local player p= GetTriggerPlayer()
            local integer playerIndex= GetPlayerId(p)
            local integer itemCode= TasItemShop_Selected[playerIndex]
            local integer max= BlzGroupGetSize(TasItemShop_Shoper[playerIndex])
            local integer min= 0
            local integer add= S2I(BlzFrameGetText(BlzGetTriggerFrame()))
            
            set TasItemShop_CurrentOffSetUser[playerIndex]=TasItemShop_RefButtonPageChange(TasItemShop_CurrentOffSetUser[playerIndex] , add , min , max , p)
            if GetLocalPlayer() == p then
                call TasItemShop_updateRefButtonsUser(p)
                call TasItemShop_updateOverLayMainSelected(p)
                //fitRefBoxes()
            endif
        endfunction
        function TasItemShop__TriggerFuctionInventory takes nothing returns nothing
            local player p= GetTriggerPlayer()
            local integer playerIndex= GetPlayerId(p)
            local framehandle frame= BlzGetTriggerFrame()
            local integer index= S2I(BlzFrameGetText(BlzGetTriggerFrame())) + TasItemShop_CurrentOffSetInventory[playerIndex]
            local item i
            local integer itemCode
    
            if TasItemShop_inventoryShowMainOnly then
                // warcraft inventory starts with 0 but button indexes with 1
                set i=UnitItemInSlot(TasItemShop_ShoperMain[playerIndex], index - 1)
            else
                set i=(LoadItemHandle(Table___ht, (((TasItemFusion_PlayerItems[playerIndex]))), (index))) // INLINED!!
            endif
    
            set itemCode=GetItemTypeId(i)
            // prevent a possible desync when the inventory item was not given to TasItemCost yet. TasItemCost creates and destroys an item when a new type is given.
            call TasItemCaclCost(itemCode)
    
            if BlzGetTriggerFrameEvent() == FRAMEEVENT_CONTROL_CLICK then
            // print(GetPlayerName(player), "Clicked Material", index)
                call TasItemShop_setSelected(p , itemCode)
                call TasItemShop_setSelectedItem(p , i)
            else
                if (IsRightClick__isRight[GetPlayerId((p))]) then // INLINED!!
                    call TasItemShop_ShowSprite(frame , p)
                    call StartSoundForPlayerBJ(p, ToggleIconButton_Sound)
                    if TasItemShop_canSellItems and TasItemShop_inventoryRightClickSell then
                        call TasItemShop_SellItem(p , i)
                    else
                        call TasItemShop_BuyItem(p , itemCode)
                    endif
                endif
            endif
    
            set i=null
            set frame=null
            set p=null
    
        endfunction
        function TasItemShop__TriggerFuctionInventoryPage takes nothing returns nothing
            local player p= GetTriggerPlayer()
            local integer playerIndex= GetPlayerId(p)
            local integer max= (LoadInteger(Table___ht, (TasItemFusion_PlayerItems[playerIndex]), (0))) // INLINED!!
            local integer min= 0
            local integer add= S2I(BlzFrameGetText(BlzGetTriggerFrame()))
            
            set TasItemShop_CurrentOffSetInventory[playerIndex]=TasItemShop_RefButtonPageChange(TasItemShop_CurrentOffSetInventory[playerIndex] , add , min , max , p)
            if GetLocalPlayer() == p then
                call TasItemShop_updateRefButtonsInventory(p)
                //fitRefBoxes()
            endif
        endfunction
        function TasItemShop__TriggerFuctionUpgrade takes nothing returns nothing
            local player p= GetTriggerPlayer()
            local integer playerIndex= GetPlayerId(p)
            local integer itemCode= TasItemShop_Selected[playerIndex]
            local integer index= S2I(BlzFrameGetText(BlzGetTriggerFrame())) + TasItemShop_CurrentOffSetUpgrade[playerIndex]
            
            call TasItemShop_RefButtonAction((LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_UsedIn,itemCode)), (index)))) // INLINED!!
        endfunction
        function TasItemShop__TriggerFuctionUpgradePage takes nothing returns nothing
            local player p= GetTriggerPlayer()
            local integer playerIndex= GetPlayerId(p)
            local integer itemCode= TasItemShop_Selected[playerIndex]
            local integer max= (LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_UsedIn,itemCode)), (0))) // INLINED!!
            local integer min= 0
            local integer add= S2I(BlzFrameGetText(BlzGetTriggerFrame()))
            
            set TasItemShop_CurrentOffSetUpgrade[playerIndex]=TasItemShop_RefButtonPageChange(TasItemShop_CurrentOffSetUpgrade[playerIndex] , add , min , max , p)
            if GetLocalPlayer() == p then
                call TasItemShop_updateRefButtonsUpgrades(p , itemCode)
                call TasItemShop_updateHaveMats(p , itemCode)
                //fitRefBoxes()
            endif
        endfunction
        
        function TasItemShop__TriggerFuctionQuickLink takes nothing returns nothing
            local player p= GetTriggerPlayer()
            local integer playerIndex= GetPlayerId(p)
            local integer index= S2I(BlzFrameGetText(BlzGetTriggerFrame())) + TasItemShop_CurrentOffSetQuickLink[playerIndex]
            local integer itemCode= (LoadInteger(Table___ht, (TasItemShop_QuickLink[playerIndex]), (index))) // INLINED!!
            if TasItemShop_QuickLinkKeyActive[playerIndex] and BlzGetTriggerFrameEvent() == FRAMEEVENT_CONTROL_CLICK then
                call TasItemShop_SetQuickLink(p , itemCode)
            else
                call TasItemShop_RefButtonAction(itemCode)
            endif
        endfunction
        function TasItemShop__TriggerFuctionQuickLinkPage takes nothing returns nothing
            local player p= GetTriggerPlayer()
            local integer playerIndex= GetPlayerId(p)
            local integer max= (LoadInteger(Table___ht, (TasItemShop_QuickLink[playerIndex]), (0))) // INLINED!!
            local integer min= 0
            local integer add= S2I(BlzFrameGetText(BlzGetTriggerFrame()))
            
            set TasItemShop_CurrentOffSetQuickLink[playerIndex]=TasItemShop_RefButtonPageChange(TasItemShop_CurrentOffSetQuickLink[playerIndex] , add , min , max , p)
            if GetLocalPlayer() == p then
                call TasItemShop_updateRefButtonsQuickLink(p)
            endif
        endfunction
    
        function TasItemShop__TriggerFuctionMaterial takes nothing returns nothing
            local player p= GetTriggerPlayer()
            local integer playerIndex= GetPlayerId(p)
            local integer itemCode= TasItemShop_Selected[playerIndex]
            local integer index= S2I(BlzFrameGetText(BlzGetTriggerFrame())) + TasItemShop_CurrentOffSetMaterial[playerIndex]
            call TasItemShop_RefButtonAction((LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,itemCode)), (index)))) // INLINED!!
        endfunction
        function TasItemShop__TriggerFuctionMaterialPage takes nothing returns nothing
            local player p= GetTriggerPlayer()
            local integer playerIndex= GetPlayerId(p)
            local integer itemCode= TasItemShop_Selected[playerIndex]
            local integer max= (LoadInteger(Table___ht, (s__HashTable__getindex(TasItemFusion_BuiltWay,itemCode)), (0))) // INLINED!!
            local integer min= 0
            local integer add= S2I(BlzFrameGetText(BlzGetTriggerFrame()))
            
            set TasItemShop_CurrentOffSetMaterial[playerIndex]=TasItemShop_RefButtonPageChange(TasItemShop_CurrentOffSetMaterial[playerIndex] , add , min , max , p)
            if GetLocalPlayer() == p then
                call TasItemShop_updateRefButtonsMaterial(p , itemCode)
                call TasItemShop_updateHaveMats(p , itemCode)
                //fitRefBoxes()
            endif
        endfunction
        function TasItemShop__TriggerFuctionUndo takes nothing returns nothing
            local player p= GetTriggerPlayer()
            local integer playerIndex= GetPlayerId(p)
            local integer loopA
            local integer undoIndex= TasItemShop_UndoPlayerSize * playerIndex + TasItemShop_UndoPlayerCount[playerIndex]
            // there is something to undo?
            if TasItemShop_UndoPlayerCount[playerIndex] <= 0 then
                return
            endif
            set undoIndex=TasItemShop_UndoPlayerSize * playerIndex + TasItemShop_UndoPlayerCount[playerIndex]
            //print("Use Undo:",#TasItemShopUI.Undo[player] + 1, GetObjectName(undo.Result))
            call AdjustPlayerStateSimpleBJ(p, PLAYER_STATE_RESOURCE_GOLD, TasItemShop_UndoGold[undoIndex])
            call AdjustPlayerStateSimpleBJ(p, PLAYER_STATE_RESOURCE_LUMBER, TasItemShop_UndoLumber[undoIndex])
    
            // find the result and destroy it, this assumes that the shoper TempGroup not changed since the buying
            set loopA=(LoadInteger(Table___ht, (TasItemShop_UndoResults[undoIndex]), (0))) // INLINED!!
            loop
                exitwhen loopA <= 0
                call RemoveItem((LoadItemHandle(Table___ht, (((TasItemShop_UndoResults[undoIndex]))), (loopA)))) // INLINED!!
                call SaveItemHandle(Table___ht, (((TasItemShop_UndoResults[undoIndex]))), (loopA), ( null)) // INLINED!!
                call SaveUnitHandle(Table___ht, (((TasItemShop_UndoResults[undoIndex]))), (- loopA), ( null)) // INLINED!!
                set loopA=loopA - 1
                // body
            endloop
            
            if TasItemShop_UndoStackGainer[undoIndex] != null then
                call SetItemCharges(TasItemShop_UndoStackGainer[undoIndex], GetItemCharges(TasItemShop_UndoStackGainer[undoIndex]) - TasItemShop_UndoStackGained[undoIndex])
                set TasItemShop_UndoStackGainer[undoIndex]=null
            endif
            // show the used material and give them back
            set loopA=(LoadInteger(Table___ht, (TasItemShop_UndoItems[undoIndex]), (0))) // INLINED!!
            loop
                exitwhen loopA <= 0
                call SetItemVisible((LoadItemHandle(Table___ht, (((TasItemShop_UndoItems[undoIndex]))), (loopA))), true) // INLINED!!
                call UnitAddItem((LoadUnitHandle(Table___ht, (((TasItemShop_UndoItems[undoIndex]))), (- loopA))), (LoadItemHandle(Table___ht, (((TasItemShop_UndoItems[undoIndex]))), (loopA)))) // INLINED!!
                call SaveItemHandle(Table___ht, (((TasItemShop_UndoResults[undoIndex]))), (loopA), ( null)) // INLINED!!
                call SaveUnitHandle(Table___ht, (((TasItemShop_UndoResults[undoIndex]))), (- loopA), ( null)) // INLINED!!
                set loopA=loopA - 1
                // body
            endloop
            
            set TasItemShop_UndoPlayerCount[playerIndex]=TasItemShop_UndoPlayerCount[playerIndex] - 1
            call TasItemShopUIShow(p , TasItemShop_CurrentShop[playerIndex] , null , null)
            if GetLocalPlayer() == p then
                
                if TasItemShop_UndoPlayerCount[playerIndex] > 0 then
                    call BlzFrameSetVisible(TasItemShop_FrameUndoBox, true)
                    call TasItemShop_updateUndoButton(TasItemShop_UndoResultCode[undoIndex - 1] , TasItemShop_UndoActionName[undoIndex - 1])
                else
                    call BlzFrameSetVisible(TasItemShop_FrameUndoBox, false)
                endif
            endif
        endfunction
        function TasItemShop__TriggerFuctionClear takes nothing returns nothing
            if GetTriggerPlayer() == GetLocalPlayer() then
                call BlzFrameSetText(TasButtonListInputFrame[TasItemShop_ButtonListIndex], "")
            endif
        endfunction
        
    
        function TasItemShop__TriggerFuctionSelect takes nothing returns nothing
            call TasItemShop_ShopSelectionAction(GetTriggerPlayer() , GetTriggerUnit() , null)
        endfunction
        function TasItemShop__TriggerFuctionOrder takes nothing returns nothing
            if (LoadInteger(Table___ht, (TasItemShop_Shops), (GetUnitTypeId(GetTriggerUnit())))) != 0 then // INLINED!!
                call TasItemShop_ShopSelectionAction(GetOwningPlayer(GetOrderTargetUnit()) , GetTriggerUnit() , GetOrderTargetUnit())
            endif
        endfunction  
        function TasItemShop__TriggerFuctionESC takes nothing returns nothing
            call TasItemShopUIShow(GetTriggerPlayer() , null , null , null)
        endfunction 
        function TasItemShop__TriggerFuctionClearFocus takes nothing returns nothing
            local framehandle frame= BlzGetTriggerFrame()
            if GetTriggerPlayer() == GetLocalPlayer() then
                call BlzFrameSetEnable(frame, false)
                call BlzFrameSetEnable(frame, true)
            endif
            set frame=null
        endfunction 
    
        function TasItemShop__TriggerFuctionParentScroll takes nothing returns nothing
            local framehandle frame= TasButtonListSlider[TasItemShop_ButtonListIndex]
            if GetLocalPlayer() == GetTriggerPlayer() then
                if BlzGetTriggerFrameValue() > 0 then
                    call BlzFrameSetValue(frame, BlzFrameGetValue(frame) + TasButtonListStepSize[TasItemShop_ButtonListIndex])
                else
                    call BlzFrameSetValue(frame, BlzFrameGetValue(frame) - TasButtonListStepSize[TasItemShop_ButtonListIndex])
                endif
            endif
            set frame=null
        endfunction 
    
        function TasItemShop__TriggerFuctionCategoryMode takes nothing returns nothing
            if GetTriggerPlayer() == GetLocalPlayer() then
                call TasButtonListSearch(TasItemShop_ButtonListIndex , null)
            endif
        endfunction
    
        function TasItemShop__TriggerFuctionReleaseQuickLinkKey takes nothing returns nothing
            set TasItemShop_QuickLinkKeyActive[GetPlayerId(GetTriggerPlayer())]=false
            if TasItemShop_refButtonCountQuickLink > 0 and GetTriggerPlayer() == GetLocalPlayer() then
                call BlzFrameSetVisible(TasItemShop_FrameQuickLinkBoxHighLight, false)
            endif
        endfunction
        function TasItemShop__TriggerFuctionPressQuickLinkKey takes nothing returns nothing
            set TasItemShop_QuickLinkKeyActive[GetPlayerId(GetTriggerPlayer())]=true
            if TasItemShop_refButtonCountQuickLink > 0 and GetTriggerPlayer() == GetLocalPlayer() then
                call BlzFrameSetVisible(TasItemShop_FrameQuickLinkBoxHighLight, true)
            endif
        endfunction
        
        
        function TasItemShop_TimerUpdate takes nothing returns nothing
            //  xpcall(function()
            local player p
            local unit u
            local integer loopA
            if TasItemShop_posScreenRelative then
                //credits to ScrewTheTrees(Fred) & Niklas
                call BlzFrameSetSize(TasItemShop_FrameFullscreen, I2R(BlzGetLocalClientWidth()) / BlzGetLocalClientHeight() * 0.6, 0.6)
            endif
            
            set loopA=0
            loop
                exitwhen loopA >= bj_MAX_PLAYER_SLOTS
                set p=Player(loopA)
                if TasItemShop_CurrentShop[loopA] != null then
                    call TasItemShop_ShopSelectionAction(p , TasItemShop_CurrentShop[loopA] , null)
                endif
                set loopA=loopA + 1
            endloop
        endfunction
    
        function TasItemShop__At0s takes nothing returns nothing
            local integer loopA
            local player p
            
            call TimerStart(TasItemShop_Timer, 99999, false, null)
            call TimerStart(CreateTimer(), TasItemShop_updateTime, true, function TasItemShop_TimerUpdate)
    
            //call UserInit()
            //call ExecuteFunc("TasItemShopUserInit")
            //precalc any added Item
            set loopA=TasItemShop_BUY_ABLE_ITEMS_Count
            loop
                exitwhen loopA <= 0
                call TasItemCaclCost(TasItemShop_BUY_ABLE_ITEMS[loopA])
                set loopA=loopA - 1
                // body
            endloop
                   
            set loopA=0
            loop
                exitwhen loopA >= bj_MAX_PLAYER_SLOTS
                set TasItemShop_Shoper[loopA]=CreateGroup()
    
                set loopA=loopA + 1
            endloop
            call TasItemShopUICreate()
            
        endfunction
        function TasItemShop_CreateTriggerEx takes code action returns trigger
            local trigger t= CreateTrigger()
            call TriggerAddAction(t, action)
            return t
        endfunction
    
        function TasItemShop__init_function takes nothing returns nothing
            local integer loopA
            local integer loopB
            set TasItemShop_IsReforged=( GetLocalizedString("REFORGED") != "REFORGED" )
            set TasItemShop_Shops=s__Table_create()
            set TasItemShop_ShopsItems=(s__Table_create()) // INLINED!!
            set TasItemShop_ShopsGold=(s__Table_create()) // INLINED!!
            set TasItemShop_ShopsLumber=(s__Table_create()) // INLINED!!
            set TasItemShop_TasItemCategory=s__Table_create()
            set TasItemShop_TempTable=s__Table_create()
            set TasItemShop_TempHashTable=(s__Table_create()) // INLINED!!
            set TasItemShop_BuyAbleMarked=(s__Table_create()) // INLINED!!
            set TasItemShop_MarkedItemCodes=s__Table_create()
    
            set TasItemShop_ButtonTriggerInventory=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionInventory)
            set TasItemShop_ButtonTriggerInventoryPage=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionInventoryPage)
            set TasItemShop_ButtonTriggerMaterial=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionMaterial)
            set TasItemShop_ButtonTriggerMaterialPage=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionMaterialPage)
            set TasItemShop_ButtonTriggerUser=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionUser)
            set TasItemShop_ButtonTriggerUserPage=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionUserPage)
            set TasItemShop_ButtonTriggerUpgrade=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionUpgrade)
            set TasItemShop_ButtonTriggerUpgradePage=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionUpgradePage)
            set TasItemShop_ButtonTriggerSell=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionSell)
            set TasItemShop_ButtonTriggerDefuse=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionDefuse)
            set TasItemShop_ButtonTriggerBuy=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionBuy)
            set TasItemShop_ButtonTriggerUndo=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionUndo)
            set TasItemShop_ButtonTriggerClear=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionClear)
            set TasItemShop_ButtonTriggerSelect=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionSelect)
            set TasItemShop_ButtonTriggerESC=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionESC)
            set TasItemShop_ButtonTriggerClearFocus=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionClearFocus)
            set TasItemShop_ButtonTriggerParentScroll=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionParentScroll)
            set TasItemShop_ButtonTriggerCategoryMode=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionCategoryMode)
            set TasItemShop_ButtonTriggerQuickLinkKeyPress=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionPressQuickLinkKey)
            set TasItemShop_ButtonTriggerQuickLinkKeyRelease=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionReleaseQuickLinkKey)
            set TasItemShop_ButtonTriggerQuickLink=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionQuickLink)
            set TasItemShop_ButtonTriggerQuickLinkPage=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionQuickLinkPage)
            
            if TasItemShop_userButtonOrder then
                set TasItemShop_ButtonTriggerOrder=TasItemShop_CreateTriggerEx(function TasItemShop__TriggerFuctionOrder)
                call TriggerRegisterAnyUnitEventBJ(TasItemShop_ButtonTriggerOrder, EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER)
            endif
            
            call TriggerRegisterAnyUnitEventBJ(TasItemShop_ButtonTriggerSelect, EVENT_PLAYER_UNIT_SELECTED)
            
            
            set loopA=0
            loop
                call TriggerRegisterPlayerEventEndCinematic(TasItemShop_ButtonTriggerESC, Player(loopA))
                set TasItemShop_QuickLink[loopA]=s__Table_create()
                if TasItemShop_quickLinkKey != null then
                    set loopB=0
                    loop
                        call BlzTriggerRegisterPlayerKeyEvent(TasItemShop_ButtonTriggerQuickLinkKeyPress, Player(loopA), TasItemShop_quickLinkKey, loopB, true)
                        call BlzTriggerRegisterPlayerKeyEvent(TasItemShop_ButtonTriggerQuickLinkKeyRelease, Player(loopA), TasItemShop_quickLinkKey, loopB, false)
                        set loopB=loopB + 1
                        exitwhen loopB >= 16
                        //"none"(0), "shift"(1), "control"(2), "alt"(4) and "META"(8) (windows key)
                        //1 + 2 + 4 + 8 = 15
                    endloop
                endif
                set loopA=loopA + 1
                exitwhen loopA >= bj_MAX_PLAYER_SLOTS
                // body
            endloop
            
            
            
            // init_body
            set TasItemShop_Timer=CreateTimer()
            call TimerStart(TasItemShop_Timer, 0, false, function TasItemShop__At0s)
            // Frame related code actions are not saved/Loaded, probably repeat them after Loading the game

                call TriggerAddAction(FrameLoader__actionTrigger, (function TasItemShopUICreate)) // INLINED!!

        endfunction

//library TasItemShop ends
//library TasItemShopGUILoader:
    function TasItemShopGUILoader__fusion takes nothing returns nothing
        local integer i= 1
        loop
            exitwhen s__udg_TasItemShop_Mats[i] == 0
            call TasItemFusionAdd(udg_TasItemShop_Item , s__udg_TasItemShop_Mats[i])
            set s__udg_TasItemShop_Mats[i]= 0
            set i=i + 1
        endloop
    endfunction
    function TasItemShopGUILoader__add takes nothing returns nothing
        call TasItemShopAdd(udg_TasItemShop_Item , udg_TasItemShop_Category)
    endfunction
    function TasItemShopGUILoader__category takes nothing returns nothing
        set udg_TasItemShop_Category=TasItemShopAddCategory(udg_TasItemShop_Icon , udg_TasItemShop_Text)
    endfunction

    function TasItemShopGUILoader__createShop takes nothing returns nothing
        local integer i= 1
        call TasItemShopCreateShop(udg_TasItemShop_Unit , udg_TasItemShop_WhiteList , udg_TasItemShop_Gold , udg_TasItemShop_Lumber , null)
        loop
            exitwhen s__udg_TasItemShop_Mats[i] == 0
            call TasItemShopAddShop(udg_TasItemShop_Unit , s__udg_TasItemShop_Mats[i])
            set s__udg_TasItemShop_Mats[i]= 0
            set i=i + 1
        endloop
        
    endfunction
    function TasItemShopGUILoader__haggle takes nothing returns nothing
        local integer skill= udg_TasItemShop_Skill
        if skill == 0 then
            set skill=udg_TasItemShop_Buff
        endif
        call TasItemShopAddHaggleSkill(skill , udg_TasItemShop_Gold , udg_TasItemShop_Lumber , udg_TasItemShop_GoldAdd , udg_TasItemShop_LumberAdd)
        
        set udg_TasItemShop_Buff=0
        set udg_TasItemShop_Skill=0
    endfunction
    function TasItemShopGUILoader__costs takes nothing returns nothing
        call TasItemShopGoldFactor(udg_TasItemShop_Unit , udg_TasItemShop_Gold , udg_TasItemShop_Item)
        call TasItemShopLumberFactor(udg_TasItemShop_Unit , udg_TasItemShop_Lumber , udg_TasItemShop_Item)
    endfunction
    function TasItemShopGUILoader__shortCuts takes nothing returns nothing
        local integer i= 1
        call FlushChildHashtable(Table___ht, (TasItemShop_QuickLink[GetPlayerId((udg_TasItemShop_Player))])) // INLINED!!
        loop
            exitwhen s__udg_TasItemShop_Mats[i] == 0
            call TasItemShop_SetQuickLink(udg_TasItemShop_Player , s__udg_TasItemShop_Mats[i])
            set s__udg_TasItemShop_Mats[i]= 0
            set i=i + 1
        endloop
        
    endfunction
    function TasItemShopGUILoader__init_function takes nothing returns nothing
        set udg_TasItemShopFusion=CreateTrigger()
        set udg_TasItemShopAdd=CreateTrigger()
        set udg_TasItemShopCategory=CreateTrigger()
        set udg_TasItemShopCreateShop=CreateTrigger()
        set udg_TasItemShopHaggle=CreateTrigger()
        set udg_TasItemShopCosts=CreateTrigger()
        set udg_TasItemShopShortCuts=CreateTrigger()

        call TriggerAddAction(udg_TasItemShopFusion, function TasItemShopGUILoader__fusion)
        call TriggerAddAction(udg_TasItemShopAdd, function TasItemShopGUILoader__add)
        call TriggerAddAction(udg_TasItemShopCategory, function TasItemShopGUILoader__category)
        call TriggerAddAction(udg_TasItemShopCreateShop, function TasItemShopGUILoader__createShop)
        call TriggerAddAction(udg_TasItemShopHaggle, function TasItemShopGUILoader__haggle)
        call TriggerAddAction(udg_TasItemShopCosts, function TasItemShopGUILoader__costs)
        call TriggerAddAction(udg_TasItemShopShortCuts, function TasItemShopGUILoader__shortCuts)
    endfunction

//library TasItemShopGUILoader ends
//library TasItemShopUserInit:
    // This script  is meant to be used by vjass user to write init data for TasItemShop
    
        function TasItemShopUserInit__ShopCostFunction_ngme takes nothing returns nothing
        endfunction
         // This runs right before the actually UI is created.
        // this is a good place to add items, categories, fusions shops etc.
        function TasItemShopUserInit takes nothing returns nothing
            local integer shopObject
            // this can all be done in GUI aswell, enable the next Line or remove all Text of this function if you only want to use GUI
            //if true then return end
    
            // define Categories: Icon, Text
            // the Categories are displayed in the order added.
            // it is a good idea to save the returned Value in a local to make the category setup later much easier to understand.
            // you can only have 31 categories
            local integer catDmg= TasItemShopAddCategory("ReplaceableTextures\\CommandButtons\\BTNSteelMelee" , "Damage")
            local integer catArmor= TasItemShopAddCategory("ReplaceableTextures\\CommandButtons\\BTNHumanArmorUpOne" , "Armor")
            local integer catStr= TasItemShopAddCategory("ReplaceableTextures\\CommandButtons\\BTNGauntletsOfOgrePower" , "STRENGTH")
            local integer catAgi= TasItemShopAddCategory("ReplaceableTextures\\CommandButtons\\BTNSlippersOfAgility" , "AGILITY")
            local integer catInt= TasItemShopAddCategory("ReplaceableTextures\\CommandButtons\\BTNMantleOfIntelligence" , "INTELLECT")
            local integer catLife= TasItemShopAddCategory("ReplaceableTextures\\CommandButtons\\BTNPeriapt" , "Life")
            local integer catLifeReg= TasItemShopAddCategory("ReplaceableTextures\\CommandButtons\\BTNRegenerate" , "Life Regeneration")
            local integer catMana= TasItemShopAddCategory("ReplaceableTextures\\CommandButtons\\BTNPendantOfMana" , "Mana")
            local integer catManaReg= TasItemShopAddCategory("ReplaceableTextures\\CommandButtons\\BTNSobiMask" , "Mana Regeneration")
            local integer catOrb= TasItemShopAddCategory("ReplaceableTextures\\CommandButtons\\BTNOrbOfDarkness" , "Orb")
            local integer catAura= TasItemShopAddCategory("ReplaceableTextures\\CommandButtons\\BTNLionHorn" , "Aura")
            local integer catActive= TasItemShopAddCategory("ReplaceableTextures\\CommandButtons\\BTNStaffOfSilence" , "Active")
            // local integer catPower = TasItemShopAddCategory("ReplaceableTextures\\CommandButtons\\BTNControlMagic", "SpellPower")
            // local integer catCooldown = TasItemShopAddCategory("ReplaceableTextures\\CommandButtons\\BTNHumanMissileUpOne", "Cooldown")
            local integer catAtkSpeed= TasItemShopAddCategory("ReplaceableTextures\\CommandButtons\\BTNHumanMissileUpOne" , "Attack Speed")
            local integer catMress= TasItemShopAddCategory("ReplaceableTextures\\CommandButtons\\BTNRunedBracers" , "Magic-Resistence")
            //local integer catConsum = TasItemShopAddCategory("ReplaceableTextures\\CommandButtons\\BTNPotionGreenSmall", "Consumable")
            local integer catMoveSpeed= TasItemShopAddCategory("ReplaceableTextures\\CommandButtons\\BTNBootsOfSpeed" , "Movement Speed")
            // local integer catCrit = TasItemShopAddCategory("ReplaceableTextures\\CommandButtons\\BTNCriticalStrike", "Crit")
            local integer catLifeSteal= TasItemShopAddCategory("ReplaceableTextures\\CommandButtons\\BTNVampiricAura" , "Lifesteal")
            local integer catEvade= TasItemShopAddCategory("ReplaceableTextures\\CommandButtons\\BTNEvasion" , "Evasion")
            
            
            call TasItemShopAdd('afac' , catDmg + catAura)
            call TasItemShopAdd('spsh' , catMress)
            call TasItemShopAdd('ajen' , catAtkSpeed + catMoveSpeed + catAura)
            call TasItemShopAdd('bgst' , catStr)
            call TasItemShopAdd('belv' , catAgi)
            call TasItemShopAdd('cnob' , catStr + catAgi + catInt)
            call TasItemShopAdd('ratc' , catDmg)
            call TasItemShopAdd('clfm' , catDmg + catActive)
            //call TasItemShopAdd('rst1', catStr)
            call TasItemShopAdd('gcel' , catAtkSpeed)
            call TasItemShopAdd('hval' , catStr + catAgi)
            call TasItemShopAdd('hcun' , catAgi + catInt)
            call TasItemShopAdd('rhth' , catLife)
            call TasItemShopAdd('kpin' , catManaReg + catAura)
            call TasItemShopAdd('lgdh' , catLifeReg + catMoveSpeed + catAura)
            //call TasItemShopAdd('rin1', catInt)
            call TasItemShopAdd('mcou' , catStr + catInt)
            call TasItemShopAdd('odef' , catDmg + catOrb)
            call TasItemShopAdd('pmna' , catMana)
            //call TasItemShopAdd('rde1', catArmor)
            //call TasItemShopAdd('rde2', catArmor)
            call TasItemShopAdd('rde3' , catArmor)
            call TasItemShopAdd('rlif' , catLifeReg)
            call TasItemShopAdd('ciri' , catInt)
            call TasItemShopAdd('brac' , catMress)
            call TasItemShopAdd('sbch' , catLifeSteal + catAura)
            //call TasItemShopAdd('rag1', catAgi)
            call TasItemShopAdd('rwiz' , catManaReg)
            //call TasItemShopAdd('ssil', catActive)
            call TasItemShopAdd('evtl' , catEvade)
            call TasItemShopAdd('lhst' , catArmor + catAura)
            call TasItemShopAdd('ward' , catDmg + catAura)
            call TasItemShopAdd('desc' , catActive)
            call TasItemShopAdd('gemt' , catActive)
            call TasItemShopAdd('ocor' , catDmg + catOrb)
            call TasItemShopAdd('ofir' , catDmg + catOrb)
            call TasItemShopAdd('oli2' , catDmg + catOrb)
            call TasItemShopAdd('oslo' , catDmg + catOrb)
            call TasItemShopAdd('oven' , catDmg + catOrb)
    
    
            // setup custom shops
            // custom Shops are optional.
            // They can have a White or Blacklist of items they can(n't) sell and have a fixed cost modifier for Gold, Lumber aswell as a function for more dynamic things for Gold and Lumber.
            set shopObject='n000'
            // 'n000' can only sell this items (this items don't have to be in the pool of items)

            // enable WhiteListMode
            set TasItemShop_ShopWhiteList[(LoadInteger(Table___ht, (TasItemShop_Shops), ((shopObject ))))]=( true) // INLINED!!
            
            // 'n001' can't sell this items (from the default pool of items)
            set shopObject='n001'

            // enable BlackListMode
            set TasItemShop_ShopWhiteList[(LoadInteger(Table___ht, (TasItemShop_Shops), ((shopObject ))))]=( false) // INLINED!!
            
            // create an shopObject for 'ngme', has to pay 20% more than normal, beaware that this can be overwritten by GUI Example
            call TasItemShopCreateShop('ngme' , false , 1.0 , 1.0 , function TasItemShopUserInit__ShopCostFunction_ngme)
            //'I002' crown +100 was never added to the database but this shop can craft/sell it.
            set shopObject='n002'
            
    
            // Define skills/Buffs that change the costs in the shop
            // cursed Units have to pay +25%
            call TasItemShopAddHaggleSkill('Bcrs' , 1.25 , 1.25 , 0 , 0)
    
            // define Fusions
            // result created by 'xxx', 'xx' , 'x'+.
            // item can only be crafted by one way
            // can add any amount of material in the Lua version
            //call TasItemFusionAdd2('bgst', 'rst1', 'rst1')
            //call TasItemFusionAdd2('ciri', 'rin1', 'rin1')
            //call TasItemFusionAdd2('belv', 'rag1', 'rag1')
            //call TasItemFusionAdd2('hval', 'rag1', 'rst1')
            //call TasItemFusionAdd2('hcun', 'rag1', 'rin1')
            //call TasItemFusionAdd2('mcou', 'rst1', 'rin1')
            //call TasItemFusionAdd2('ckng', 'cnob', 'cnob')
            //call TasItemFusionAdd('rde4', 'rde3')
            //call TasItemFusionAdd('rde3', 'rde2')
            //call TasItemFusionAdd('rhth', 'prvt')
            //call TasItemFusionAdd('pmna', 'penr')
            //call TasItemFusionAdd2('arsh', 'rde3', 'rde2')
    
            //call TasItemFusionAdd('lhst', 'sfog')
    
            //// crown of Kings + 50
            //call TasItemFusionAdd4('I001', 'ckng', 'ckng', 'ckng', 'ckng')
            //call TasItemFusionAdd4('I001', 'ckng', 'ckng', 'bgst', 'bgst')
            //call TasItemFusionAdd6('I001', 'ciri', 'ciri', 'belv', 'belv', 'cnob', 'cnob')
            //// crown of Kings + 100, this is a joke you can not craft it because it was not added to buyAble Items
            //call TasItemFusionAdd2('I002', 'I001', 'I001')
    
    
            //call TasItemFusionAdd('modt', 'rst1')
            //call TasItemFusionAdd('ofro', 'rst1')
            //call TasItemFusionAdd('thdm', 'rst1')
            //call TasItemFusionAdd('hlst', 'rst1')
            //call TasItemFusionAdd('mnst', 'rst1')
            //call TasItemFusionAdd('ocor', 'rst1')
    
            // define item Categories
            // uses the locals from earlier.
            // An item can have multiple categories just add them together like this: catStr + catAgi + catInt
            
            
        endfunction

//library TasItemShopUserInit ends



function InitGlobals takes nothing returns nothing
	set udg_DDE_Delay=0.10
	set udg_isMMDEnabled=true
	set s__udg_MMD_Wins[0]= 0
	set s__udg_MMD_Wins[1]= 0
	set s__udg_MMD_Wins[2]= 0
	set s__udg_MMD_Wins[3]= 0
	set s__udg_MMD_Wins[4]= 0
	set s__udg_MMD_Wins[5]= 0
	set s__udg_MMD_Wins[6]= 0
	set s__udg_MMD_Losses[0]= 0
	set s__udg_MMD_Losses[1]= 0
	set s__udg_MMD_Losses[2]= 0
	set s__udg_MMD_Losses[3]= 0
	set s__udg_MMD_Losses[4]= 0
	set s__udg_MMD_Losses[5]= 0
	set s__udg_MMD_Losses[6]= 0
	set s__udg_MMD_Score[0]= 0
	set s__udg_MMD_Score[1]= 0
	set s__udg_MMD_Score[2]= 0
	set s__udg_MMD_Score[3]= 0
	set s__udg_MMD_Score[4]= 0
	set s__udg_MMD_Score[5]= 0
	set s__udg_MMD_Score[6]= 0
	set s__udg_MMD_Score_Final[0]= 0
	set s__udg_MMD_Score_Final[1]= 0
	set s__udg_MMD_Score_Final[2]= 0
	set s__udg_MMD_Score_Final[3]= 0
	set s__udg_MMD_Score_Final[4]= 0
	set s__udg_MMD_Score_Final[5]= 0
	set s__udg_MMD_Score_Final[6]= 0
	set s__udg_MMD_Bonus[0]= 0
	set s__udg_MMD_Bonus[1]= 0
	set s__udg_MMD_Bonus[2]= 0
	set s__udg_MMD_Bonus[3]= 0
	set s__udg_MMD_Bonus[4]= 0
	set s__udg_MMD_Bonus[5]= 0
	set s__udg_MMD_Bonus[6]= 0
	set s__udg_MMD_MiddleTime[0]= 0
	set s__udg_MMD_MiddleTime[1]= 0
	set s__udg_MMD_MiddleTime[2]= 0
	set s__udg_MMD_MiddleTime[3]= 0
	set s__udg_MMD_MiddleTime[4]= 0
	set s__udg_MMD_MiddleTime[5]= 0
	set s__udg_MMD_MiddleTime[6]= 0
	set s__udg_MMD_MiddleTimeTotal[0]= 1
	set s__udg_MMD_MiddleTimeTotal[1]= 1
	set s__udg_MMD_MiddleTimeTotal[2]= 1
	set s__udg_MMD_MiddleTimeTotal[3]= 1
	set s__udg_MMD_MiddleTimeTotal[4]= 1
	set s__udg_MMD_MiddleTimeTotal[5]= 1
	set s__udg_MMD_MiddleTimeTotal[6]= 1
	set udg_TasItemShop_WhiteList=false
	set udg_TasItemShop_Category=0
	set udg_TasItemShop_Gold=1.00
	set udg_TasItemShop_Lumber=1.00
	set udg_TasItemShop_GoldAdd=0
	set udg_TasItemShop_LumberAdd=0
	set udg_MyItemShopCat=0
	set udg_MyItemShopCat2=0
	set s__udg_LevelUpTimerBlob[0]= CreateTimer()
	set s__udg_LevelUpTimerBlob[1]= CreateTimer()
	set s__udg_LevelUpTimerBlob[2]= CreateTimer()
	set s__udg_LevelUpTimerBlob[3]= CreateTimer()
	set s__udg_LevelUpTimerBlob[4]= CreateTimer()
	set s__udg_LevelUpTimerBlob[5]= CreateTimer()
	set s__udg_LevelUpTimerBlob[6]= CreateTimer()
	set s__udg_LevelUpTimerText[0]= CreateTimer()
	set s__udg_LevelUpTimerText[1]= CreateTimer()
	set s__udg_LevelUpTimerText[2]= CreateTimer()
	set s__udg_LevelUpTimerText[3]= CreateTimer()
	set s__udg_LevelUpTimerText[4]= CreateTimer()
	set s__udg_LevelUpTimerText[5]= CreateTimer()
	set s__udg_LevelUpTimerText[6]= CreateTimer()
	set s__udg_LevelUpTimerBlobCounter[0]= 0
	set s__udg_LevelUpTimerBlobCounter[1]= 0
	set s__udg_LevelUpTimerBlobCounter[2]= 0
	set s__udg_LevelUpTimerBlobCounter[3]= 0
	set s__udg_LevelUpTimerBlobCounter[4]= 0
	set s__udg_LevelUpTimerBlobCounter[5]= 0
	set s__udg_LevelUpTimerBlobCounter[6]= 0
	set s__udg_LevelUpTimerTextCounter[0]= 0
	set s__udg_LevelUpTimerTextCounter[1]= 0
	set s__udg_LevelUpTimerTextCounter[2]= 0
	set s__udg_LevelUpTimerTextCounter[3]= 0
	set s__udg_LevelUpTimerTextCounter[4]= 0
	set s__udg_LevelUpTimerTextCounter[5]= 0
	set s__udg_LevelUpTimerTextCounter[6]= 0
	set s__udg_SkinEquipTimer[0]= CreateTimer()
	set s__udg_SkinEquipTimer[1]= CreateTimer()
	set s__udg_SkinEquipTimer[2]= CreateTimer()
	set s__udg_SkinEquipTimer[3]= CreateTimer()
	set s__udg_SkinEquipTimer[4]= CreateTimer()
	set s__udg_SkinEquipTimer[5]= CreateTimer()
	set s__udg_SkinEquipTimer[6]= CreateTimer()
	set udg_Timer5Minutes=CreateTimer()
	set udg_SaveLoadDisabled=false
	set udg_LoadTimer=CreateTimer()
	set s__udg_totalHuman[0]= 0
	set s__udg_totalHuman[1]= 0
	set s__udg_totalHuman[2]= 0
	set s__udg_totalHuman[3]= 0
	set s__udg_totalHuman[4]= 0
	set s__udg_totalHuman[5]= 0
	set s__udg_totalHuman[6]= 0
	set s__udg_totalOrc[0]= 0
	set s__udg_totalOrc[1]= 0
	set s__udg_totalOrc[2]= 0
	set s__udg_totalOrc[3]= 0
	set s__udg_totalOrc[4]= 0
	set s__udg_totalOrc[5]= 0
	set s__udg_totalOrc[6]= 0
	set s__udg_totalUndead[0]= 0
	set s__udg_totalUndead[1]= 0
	set s__udg_totalUndead[2]= 0
	set s__udg_totalUndead[3]= 0
	set s__udg_totalUndead[4]= 0
	set s__udg_totalUndead[5]= 0
	set s__udg_totalUndead[6]= 0
	set s__udg_totalNightElf[0]= 0
	set s__udg_totalNightElf[1]= 0
	set s__udg_totalNightElf[2]= 0
	set s__udg_totalNightElf[3]= 0
	set s__udg_totalNightElf[4]= 0
	set s__udg_totalNightElf[5]= 0
	set s__udg_totalNightElf[6]= 0
	set s__udg_totalNaga[0]= 0
	set s__udg_totalNaga[1]= 0
	set s__udg_totalNaga[2]= 0
	set s__udg_totalNaga[3]= 0
	set s__udg_totalNaga[4]= 0
	set s__udg_totalNaga[5]= 0
	set s__udg_totalNaga[6]= 0
	set s__udg_totalDemon[0]= 0
	set s__udg_totalDemon[1]= 0
	set s__udg_totalDemon[2]= 0
	set s__udg_totalDemon[3]= 0
	set s__udg_totalDemon[4]= 0
	set s__udg_totalDemon[5]= 0
	set s__udg_totalDemon[6]= 0
	set s__udg_winsHuman[0]= 0
	set s__udg_winsHuman[1]= 0
	set s__udg_winsHuman[2]= 0
	set s__udg_winsHuman[3]= 0
	set s__udg_winsHuman[4]= 0
	set s__udg_winsHuman[5]= 0
	set s__udg_winsHuman[6]= 0
	set s__udg_winsOrc[0]= 0
	set s__udg_winsOrc[1]= 0
	set s__udg_winsOrc[2]= 0
	set s__udg_winsOrc[3]= 0
	set s__udg_winsOrc[4]= 0
	set s__udg_winsOrc[5]= 0
	set s__udg_winsOrc[6]= 0
	set s__udg_winsUndead[0]= 0
	set s__udg_winsUndead[1]= 0
	set s__udg_winsUndead[2]= 0
	set s__udg_winsUndead[3]= 0
	set s__udg_winsUndead[4]= 0
	set s__udg_winsUndead[5]= 0
	set s__udg_winsUndead[6]= 0
	set s__udg_winsNightElf[0]= 0
	set s__udg_winsNightElf[1]= 0
	set s__udg_winsNightElf[2]= 0
	set s__udg_winsNightElf[3]= 0
	set s__udg_winsNightElf[4]= 0
	set s__udg_winsNightElf[5]= 0
	set s__udg_winsNightElf[6]= 0
	set s__udg_winsNaga[0]= 0
	set s__udg_winsNaga[1]= 0
	set s__udg_winsNaga[2]= 0
	set s__udg_winsNaga[3]= 0
	set s__udg_winsNaga[4]= 0
	set s__udg_winsNaga[5]= 0
	set s__udg_winsNaga[6]= 0
	set s__udg_winsDemon[0]= 0
	set s__udg_winsDemon[1]= 0
	set s__udg_winsDemon[2]= 0
	set s__udg_winsDemon[3]= 0
	set s__udg_winsDemon[4]= 0
	set s__udg_winsDemon[5]= 0
	set s__udg_winsDemon[6]= 0
	set udg_Reaping=0
	set udg_x=- 12288.00
	set udg_y=12288.00
	set udg_Priests=CreateGroup()
	set udg_Sorceress=CreateGroup()
	set udg_Spellbreaker=CreateGroup()
	set udg_DragonhawkRiders=CreateGroup()
	set udg_MortarTeams=CreateGroup()
	set udg_Paladins=CreateGroup()
	set udg_Archmages=CreateGroup()
	set udg_MountainKings=CreateGroup()
	set udg_BloodMages=CreateGroup()
	set udg_Batriders=CreateGroup()
	set udg_Shamans=CreateGroup()
	set udg_Raiders=CreateGroup()
	set udg_SpiritWalkers=CreateGroup()
	set udg_Blademasters=CreateGroup()
	set udg_FarSeers=CreateGroup()
	set udg_TaurenChieftains=CreateGroup()
	set udg_ShadowHunters=CreateGroup()
	set udg_CryptFiends=CreateGroup()
	set udg_Necromancers=CreateGroup()
	set udg_Banshees=CreateGroup()
	set udg_ObsidianStatues=CreateGroup()
	set udg_Destroyers=CreateGroup()
	set udg_DeathKnights=CreateGroup()
	set udg_Liches=CreateGroup()
	set udg_Dreadlords=CreateGroup()
	set udg_CryptLords=CreateGroup()
	set udg_Dryads=CreateGroup()
	set udg_DruidOfTheClaws=CreateGroup()
	set udg_DruidOfTheTalons=CreateGroup()
	set udg_FaerieDragons=CreateGroup()
	set udg_KeeperOfTheGroves=CreateGroup()
	set udg_PriestessOfTheMoons=CreateGroup()
	set udg_DemonHunters=CreateGroup()
	set udg_Wardens=CreateGroup()
	set udg_Alchemists=CreateGroup()
	set udg_SeaWitches=CreateGroup()
	set udg_Tinkers=CreateGroup()
	set udg_Beastmasters=CreateGroup()
	set udg_Brewmasters=CreateGroup()
	set udg_DarkRangers=CreateGroup()
	set udg_Firelords=CreateGroup()
	set udg_PitLords=CreateGroup()
	set udg_Storm=CreateGroup()
	set udg_Earth=CreateGroup()
	set udg_Fire=CreateGroup()
	set udg_Battlemages=CreateGroup()
	set udg_Charmers=CreateGroup()
	set udg_Apprentices=CreateGroup()
	set udg_Constructs=CreateGroup()
	set udg_Arcanists=CreateGroup()
	set udg_Pyromancers=CreateGroup()
	set udg_Geomancers=CreateGroup()
	set udg_Magicians=CreateGroup()
	set udg_KirinTorOperatives=CreateGroup()
	set udg_KirinTorCurators=CreateGroup()
	set udg_ArcaneCurators=CreateGroup()
	set udg_Mages=CreateGroup()
	set udg_HighWizards=CreateGroup()
	set udg_SpellOfficers=CreateGroup()
	set udg_Thaumaturges=CreateGroup()
	set udg_Elementalists=CreateGroup()
	set udg_BloodArchers=CreateGroup()
	set udg_Darkcasters=CreateGroup()
	set udg_DragonhawkRidersBE=CreateGroup()
	set udg_Maguses=CreateGroup()
	set udg_Magisters=CreateGroup()
	set udg_Decimators=CreateGroup()
	set udg_Phoenixes=CreateGroup()
	set udg_PhoenixAssassins=CreateGroup()
	set udg_SentinelCommanders=CreateGroup()
	set udg_BloodKnights=CreateGroup()
	set udg_Sunreavers=CreateGroup()
	set udg_DarkRogues=CreateGroup()
	set udg_Empusas=CreateGroup()
	set udg_AbominationsForsaken=CreateGroup()
	set udg_Apothecarys=CreateGroup()
	set udg_Deathguards=CreateGroup()
	set udg_Spectres=CreateGroup()
	set udg_Gorgons=CreateGroup()
	set udg_Wraithblades=CreateGroup()
	set udg_Valkyrs=CreateGroup()
	set udg_Reapers=CreateGroup()
	set udg_BansheeMaidens=CreateGroup()
	set udg_Deathstalkers=CreateGroup()
	set udg_Exterminators=CreateGroup()
	set udg_Summoners=CreateGroup()
	set udg_Swellers=CreateGroup()
	set udg_NagaMyrmidons=CreateGroup()
	set udg_DragonTurtles=CreateGroup()
	set udg_RoyalCommanders=CreateGroup()
	set udg_TideHunters=CreateGroup()
	set udg_SunkenEmpresses=CreateGroup()
	set udg_MyrmidonCommanders=CreateGroup()
	set udg_ManaFlareRange=500.00
	set udg_AerialShacklesGroup=CreateGroup()
	set udg_PossessionGroup=CreateGroup()
	set udg_Tornados=CreateGroup()
	set s__udg_activeDefend[0]= true
	set s__udg_activeDefend[1]= true
	set s__udg_activeDefend[2]= true
	set s__udg_activeDefend[3]= true
	set s__udg_activeDefend[4]= true
	set s__udg_activeDefend[5]= true
	set s__udg_activeDefend[6]= true
	set s__udg_activeDefend[7]= true
	set s__udg_activeDefend[8]= true
	set s__udg_activeDefend[9]= true
	set s__udg_activeDefend[10]= true
	set s__udg_activeDefend[11]= true
	set s__udg_activeDefend[12]= true
	set s__udg_activeSlow[0]= true
	set s__udg_activeSlow[1]= true
	set s__udg_activeSlow[2]= true
	set s__udg_activeSlow[3]= true
	set s__udg_activeSlow[4]= true
	set s__udg_activeSlow[5]= true
	set s__udg_activeSlow[6]= true
	set s__udg_activeSlow[7]= true
	set s__udg_activeSlow[8]= true
	set s__udg_activeSlow[9]= true
	set s__udg_activeSlow[10]= true
	set s__udg_activeSlow[11]= true
	set s__udg_activeSlow[12]= true
	set s__udg_activeInvisibility[0]= true
	set s__udg_activeInvisibility[1]= true
	set s__udg_activeInvisibility[2]= true
	set s__udg_activeInvisibility[3]= true
	set s__udg_activeInvisibility[4]= true
	set s__udg_activeInvisibility[5]= true
	set s__udg_activeInvisibility[6]= true
	set s__udg_activeInvisibility[7]= true
	set s__udg_activeInvisibility[8]= true
	set s__udg_activeInvisibility[9]= true
	set s__udg_activeInvisibility[10]= true
	set s__udg_activeInvisibility[11]= true
	set s__udg_activeInvisibility[12]= true
	set s__udg_activePolymorph[0]= true
	set s__udg_activePolymorph[1]= true
	set s__udg_activePolymorph[2]= true
	set s__udg_activePolymorph[3]= true
	set s__udg_activePolymorph[4]= true
	set s__udg_activePolymorph[5]= true
	set s__udg_activePolymorph[6]= true
	set s__udg_activePolymorph[7]= true
	set s__udg_activePolymorph[8]= true
	set s__udg_activePolymorph[9]= true
	set s__udg_activePolymorph[10]= true
	set s__udg_activePolymorph[11]= true
	set s__udg_activePolymorph[12]= true
	set s__udg_activeFlare[0]= true
	set s__udg_activeFlare[1]= true
	set s__udg_activeFlare[2]= true
	set s__udg_activeFlare[3]= true
	set s__udg_activeFlare[4]= true
	set s__udg_activeFlare[5]= true
	set s__udg_activeFlare[6]= true
	set s__udg_activeFlare[7]= true
	set s__udg_activeFlare[8]= true
	set s__udg_activeFlare[9]= true
	set s__udg_activeFlare[10]= true
	set s__udg_activeFlare[11]= true
	set s__udg_activeFlare[12]= true
	set s__udg_activeHeal[0]= true
	set s__udg_activeHeal[1]= true
	set s__udg_activeHeal[2]= true
	set s__udg_activeHeal[3]= true
	set s__udg_activeHeal[4]= true
	set s__udg_activeHeal[5]= true
	set s__udg_activeHeal[6]= true
	set s__udg_activeHeal[7]= true
	set s__udg_activeHeal[8]= true
	set s__udg_activeHeal[9]= true
	set s__udg_activeHeal[10]= true
	set s__udg_activeHeal[11]= true
	set s__udg_activeHeal[12]= true
	set s__udg_activeDispelMagic[0]= true
	set s__udg_activeDispelMagic[1]= true
	set s__udg_activeDispelMagic[2]= true
	set s__udg_activeDispelMagic[3]= true
	set s__udg_activeDispelMagic[4]= true
	set s__udg_activeDispelMagic[5]= true
	set s__udg_activeDispelMagic[6]= true
	set s__udg_activeDispelMagic[7]= true
	set s__udg_activeDispelMagic[8]= true
	set s__udg_activeDispelMagic[9]= true
	set s__udg_activeDispelMagic[10]= true
	set s__udg_activeDispelMagic[11]= true
	set s__udg_activeDispelMagic[12]= true
	set s__udg_activeInnerFire[0]= true
	set s__udg_activeInnerFire[1]= true
	set s__udg_activeInnerFire[2]= true
	set s__udg_activeInnerFire[3]= true
	set s__udg_activeInnerFire[4]= true
	set s__udg_activeInnerFire[5]= true
	set s__udg_activeInnerFire[6]= true
	set s__udg_activeInnerFire[7]= true
	set s__udg_activeInnerFire[8]= true
	set s__udg_activeInnerFire[9]= true
	set s__udg_activeInnerFire[10]= true
	set s__udg_activeInnerFire[11]= true
	set s__udg_activeInnerFire[12]= true
	set s__udg_activeControlMagic[0]= true
	set s__udg_activeControlMagic[1]= true
	set s__udg_activeControlMagic[2]= true
	set s__udg_activeControlMagic[3]= true
	set s__udg_activeControlMagic[4]= true
	set s__udg_activeControlMagic[5]= true
	set s__udg_activeControlMagic[6]= true
	set s__udg_activeControlMagic[7]= true
	set s__udg_activeControlMagic[8]= true
	set s__udg_activeControlMagic[9]= true
	set s__udg_activeControlMagic[10]= true
	set s__udg_activeControlMagic[11]= true
	set s__udg_activeControlMagic[12]= true
	set s__udg_activeAerialShackles[0]= true
	set s__udg_activeAerialShackles[1]= true
	set s__udg_activeAerialShackles[2]= true
	set s__udg_activeAerialShackles[3]= true
	set s__udg_activeAerialShackles[4]= true
	set s__udg_activeAerialShackles[5]= true
	set s__udg_activeAerialShackles[6]= true
	set s__udg_activeAerialShackles[7]= true
	set s__udg_activeAerialShackles[8]= true
	set s__udg_activeAerialShackles[9]= true
	set s__udg_activeAerialShackles[10]= true
	set s__udg_activeAerialShackles[11]= true
	set s__udg_activeAerialShackles[12]= true
	set s__udg_activeHolyLight[0]= true
	set s__udg_activeHolyLight[1]= true
	set s__udg_activeHolyLight[2]= true
	set s__udg_activeHolyLight[3]= true
	set s__udg_activeHolyLight[4]= true
	set s__udg_activeHolyLight[5]= true
	set s__udg_activeHolyLight[6]= true
	set s__udg_activeHolyLight[7]= true
	set s__udg_activeHolyLight[8]= true
	set s__udg_activeHolyLight[9]= true
	set s__udg_activeHolyLight[10]= true
	set s__udg_activeHolyLight[11]= true
	set s__udg_activeHolyLight[12]= true
	set s__udg_activeDivineShield[0]= true
	set s__udg_activeDivineShield[1]= true
	set s__udg_activeDivineShield[2]= true
	set s__udg_activeDivineShield[3]= true
	set s__udg_activeDivineShield[4]= true
	set s__udg_activeDivineShield[5]= true
	set s__udg_activeDivineShield[6]= true
	set s__udg_activeDivineShield[7]= true
	set s__udg_activeDivineShield[8]= true
	set s__udg_activeDivineShield[9]= true
	set s__udg_activeDivineShield[10]= true
	set s__udg_activeDivineShield[11]= true
	set s__udg_activeDivineShield[12]= true
	set s__udg_activeResurrection[0]= true
	set s__udg_activeResurrection[1]= true
	set s__udg_activeResurrection[2]= true
	set s__udg_activeResurrection[3]= true
	set s__udg_activeResurrection[4]= true
	set s__udg_activeResurrection[5]= true
	set s__udg_activeResurrection[6]= true
	set s__udg_activeResurrection[7]= true
	set s__udg_activeResurrection[8]= true
	set s__udg_activeResurrection[9]= true
	set s__udg_activeResurrection[10]= true
	set s__udg_activeResurrection[11]= true
	set s__udg_activeResurrection[12]= true
	set s__udg_activeBlizzard[0]= true
	set s__udg_activeBlizzard[1]= true
	set s__udg_activeBlizzard[2]= true
	set s__udg_activeBlizzard[3]= true
	set s__udg_activeBlizzard[4]= true
	set s__udg_activeBlizzard[5]= true
	set s__udg_activeBlizzard[6]= true
	set s__udg_activeBlizzard[7]= true
	set s__udg_activeBlizzard[8]= true
	set s__udg_activeBlizzard[9]= true
	set s__udg_activeBlizzard[10]= true
	set s__udg_activeBlizzard[11]= true
	set s__udg_activeBlizzard[12]= true
	set s__udg_activeWaterElemental[0]= true
	set s__udg_activeWaterElemental[1]= true
	set s__udg_activeWaterElemental[2]= true
	set s__udg_activeWaterElemental[3]= true
	set s__udg_activeWaterElemental[4]= true
	set s__udg_activeWaterElemental[5]= true
	set s__udg_activeWaterElemental[6]= true
	set s__udg_activeWaterElemental[7]= true
	set s__udg_activeWaterElemental[8]= true
	set s__udg_activeWaterElemental[9]= true
	set s__udg_activeWaterElemental[10]= true
	set s__udg_activeWaterElemental[11]= true
	set s__udg_activeWaterElemental[12]= true
	set s__udg_activeTornado[0]= true
	set s__udg_activeTornado[1]= true
	set s__udg_activeTornado[2]= true
	set s__udg_activeTornado[3]= true
	set s__udg_activeTornado[4]= true
	set s__udg_activeTornado[5]= true
	set s__udg_activeTornado[6]= true
	set s__udg_activeTornado[7]= true
	set s__udg_activeTornado[8]= true
	set s__udg_activeTornado[9]= true
	set s__udg_activeTornado[10]= true
	set s__udg_activeTornado[11]= true
	set s__udg_activeTornado[12]= true
	set s__udg_activeStormBolt[0]= true
	set s__udg_activeStormBolt[1]= true
	set s__udg_activeStormBolt[2]= true
	set s__udg_activeStormBolt[3]= true
	set s__udg_activeStormBolt[4]= true
	set s__udg_activeStormBolt[5]= true
	set s__udg_activeStormBolt[6]= true
	set s__udg_activeStormBolt[7]= true
	set s__udg_activeStormBolt[8]= true
	set s__udg_activeStormBolt[9]= true
	set s__udg_activeStormBolt[10]= true
	set s__udg_activeStormBolt[11]= true
	set s__udg_activeStormBolt[12]= true
	set s__udg_activeThunderClap[0]= true
	set s__udg_activeThunderClap[1]= true
	set s__udg_activeThunderClap[2]= true
	set s__udg_activeThunderClap[3]= true
	set s__udg_activeThunderClap[4]= true
	set s__udg_activeThunderClap[5]= true
	set s__udg_activeThunderClap[6]= true
	set s__udg_activeThunderClap[7]= true
	set s__udg_activeThunderClap[8]= true
	set s__udg_activeThunderClap[9]= true
	set s__udg_activeThunderClap[10]= true
	set s__udg_activeThunderClap[11]= true
	set s__udg_activeThunderClap[12]= true
	set s__udg_activeAvatar[0]= true
	set s__udg_activeAvatar[1]= true
	set s__udg_activeAvatar[2]= true
	set s__udg_activeAvatar[3]= true
	set s__udg_activeAvatar[4]= true
	set s__udg_activeAvatar[5]= true
	set s__udg_activeAvatar[6]= true
	set s__udg_activeAvatar[7]= true
	set s__udg_activeAvatar[8]= true
	set s__udg_activeAvatar[9]= true
	set s__udg_activeAvatar[10]= true
	set s__udg_activeAvatar[11]= true
	set s__udg_activeAvatar[12]= true
	set s__udg_activeFlamestrike[0]= true
	set s__udg_activeFlamestrike[1]= true
	set s__udg_activeFlamestrike[2]= true
	set s__udg_activeFlamestrike[3]= true
	set s__udg_activeFlamestrike[4]= true
	set s__udg_activeFlamestrike[5]= true
	set s__udg_activeFlamestrike[6]= true
	set s__udg_activeFlamestrike[7]= true
	set s__udg_activeFlamestrike[8]= true
	set s__udg_activeFlamestrike[9]= true
	set s__udg_activeFlamestrike[10]= true
	set s__udg_activeFlamestrike[11]= true
	set s__udg_activeFlamestrike[12]= true
	set s__udg_activeBanish[0]= true
	set s__udg_activeBanish[1]= true
	set s__udg_activeBanish[2]= true
	set s__udg_activeBanish[3]= true
	set s__udg_activeBanish[4]= true
	set s__udg_activeBanish[5]= true
	set s__udg_activeBanish[6]= true
	set s__udg_activeBanish[7]= true
	set s__udg_activeBanish[8]= true
	set s__udg_activeBanish[9]= true
	set s__udg_activeBanish[10]= true
	set s__udg_activeBanish[11]= true
	set s__udg_activeBanish[12]= true
	set s__udg_activeSiphonMana[0]= true
	set s__udg_activeSiphonMana[1]= true
	set s__udg_activeSiphonMana[2]= true
	set s__udg_activeSiphonMana[3]= true
	set s__udg_activeSiphonMana[4]= true
	set s__udg_activeSiphonMana[5]= true
	set s__udg_activeSiphonMana[6]= true
	set s__udg_activeSiphonMana[7]= true
	set s__udg_activeSiphonMana[8]= true
	set s__udg_activeSiphonMana[9]= true
	set s__udg_activeSiphonMana[10]= true
	set s__udg_activeSiphonMana[11]= true
	set s__udg_activeSiphonMana[12]= true
	set s__udg_activePhoenix[0]= true
	set s__udg_activePhoenix[1]= true
	set s__udg_activePhoenix[2]= true
	set s__udg_activePhoenix[3]= true
	set s__udg_activePhoenix[4]= true
	set s__udg_activePhoenix[5]= true
	set s__udg_activePhoenix[6]= true
	set s__udg_activePhoenix[7]= true
	set s__udg_activePhoenix[8]= true
	set s__udg_activePhoenix[9]= true
	set s__udg_activePhoenix[10]= true
	set s__udg_activePhoenix[11]= true
	set s__udg_activePhoenix[12]= true
	set s__udg_isBladestormOn[0]= false
	set s__udg_isBladestormOn[1]= false
	set s__udg_isBladestormOn[2]= false
	set s__udg_isBladestormOn[3]= false
	set s__udg_isBladestormOn[4]= false
	set s__udg_isBladestormOn[5]= false
	set s__udg_isBladestormOn[6]= false
	set s__udg_isBladestormOn[7]= false
	set s__udg_isBladestormOn[8]= false
	set s__udg_isBladestormOn[9]= false
	set s__udg_isBladestormOn[10]= false
	set s__udg_isBladestormOn[11]= false
	set s__udg_isBladestormOn[12]= false
	set s__udg_isBladestormOn[13]= false
	set s__udg_isBladestormOn[14]= false
	set s__udg_BladestormVisualTimer[0]= CreateTimer()
	set s__udg_BladestormVisualTimer[1]= CreateTimer()
	set s__udg_BladestormVisualTimer[2]= CreateTimer()
	set s__udg_BladestormVisualTimer[3]= CreateTimer()
	set s__udg_BladestormVisualTimer[4]= CreateTimer()
	set s__udg_BladestormVisualTimer[5]= CreateTimer()
	set s__udg_BladestormVisualTimer[6]= CreateTimer()
	set s__udg_BladestormVisualTimer[7]= CreateTimer()
	set s__udg_BladestormVisualTimer[8]= CreateTimer()
	set s__udg_BladestormVisualTimer[9]= CreateTimer()
	set s__udg_BladestormVisualTimer[10]= CreateTimer()
	set s__udg_BladestormVisualTimer[11]= CreateTimer()
	set s__udg_BladestormVisualTimer[12]= CreateTimer()
	set s__udg_BladestormVisualTimer[13]= CreateTimer()
	set s__udg_BladestormVisualTimer[14]= CreateTimer()
	set s__udg_EarthquakeActive[0]= false
	set s__udg_EarthquakeActive[1]= false
	set s__udg_EarthquakeActive[2]= false
	set s__udg_EarthquakeActive[3]= false
	set s__udg_EarthquakeActive[4]= false
	set s__udg_EarthquakeActive[5]= false
	set s__udg_EarthquakeActive[6]= false
	set s__udg_EarthquakeActive[7]= false
	set s__udg_EarthquakeActive[8]= false
	set s__udg_EarthquakeActive[9]= false
	set s__udg_EarthquakeActive[10]= false
	set s__udg_EarthquakeActive[11]= false
	set s__udg_EarthquakeActive[12]= false
	set s__udg_activeBerserk[0]= true
	set s__udg_activeBerserk[1]= true
	set s__udg_activeBerserk[2]= true
	set s__udg_activeBerserk[3]= true
	set s__udg_activeBerserk[4]= true
	set s__udg_activeBerserk[5]= true
	set s__udg_activeBerserk[6]= true
	set s__udg_activeBerserk[7]= true
	set s__udg_activeBerserk[8]= true
	set s__udg_activeBerserk[9]= true
	set s__udg_activeBerserk[10]= true
	set s__udg_activeBerserk[11]= true
	set s__udg_activeBerserk[12]= true
	set s__udg_activePurge[0]= true
	set s__udg_activePurge[1]= true
	set s__udg_activePurge[2]= true
	set s__udg_activePurge[3]= true
	set s__udg_activePurge[4]= true
	set s__udg_activePurge[5]= true
	set s__udg_activePurge[6]= true
	set s__udg_activePurge[7]= true
	set s__udg_activePurge[8]= true
	set s__udg_activePurge[9]= true
	set s__udg_activePurge[10]= true
	set s__udg_activePurge[11]= true
	set s__udg_activePurge[12]= true
	set s__udg_activeLightningShield[0]= true
	set s__udg_activeLightningShield[1]= true
	set s__udg_activeLightningShield[2]= true
	set s__udg_activeLightningShield[3]= true
	set s__udg_activeLightningShield[4]= true
	set s__udg_activeLightningShield[5]= true
	set s__udg_activeLightningShield[6]= true
	set s__udg_activeLightningShield[7]= true
	set s__udg_activeLightningShield[8]= true
	set s__udg_activeLightningShield[9]= true
	set s__udg_activeLightningShield[10]= true
	set s__udg_activeLightningShield[11]= true
	set s__udg_activeLightningShield[12]= true
	set s__udg_activeBloodlust[0]= true
	set s__udg_activeBloodlust[1]= true
	set s__udg_activeBloodlust[2]= true
	set s__udg_activeBloodlust[3]= true
	set s__udg_activeBloodlust[4]= true
	set s__udg_activeBloodlust[5]= true
	set s__udg_activeBloodlust[6]= true
	set s__udg_activeBloodlust[7]= true
	set s__udg_activeBloodlust[8]= true
	set s__udg_activeBloodlust[9]= true
	set s__udg_activeBloodlust[10]= true
	set s__udg_activeBloodlust[11]= true
	set s__udg_activeBloodlust[12]= true
	set s__udg_activeEnsnare[0]= true
	set s__udg_activeEnsnare[1]= true
	set s__udg_activeEnsnare[2]= true
	set s__udg_activeEnsnare[3]= true
	set s__udg_activeEnsnare[4]= true
	set s__udg_activeEnsnare[5]= true
	set s__udg_activeEnsnare[6]= true
	set s__udg_activeEnsnare[7]= true
	set s__udg_activeEnsnare[8]= true
	set s__udg_activeEnsnare[9]= true
	set s__udg_activeEnsnare[10]= true
	set s__udg_activeEnsnare[11]= true
	set s__udg_activeEnsnare[12]= true
	set s__udg_activeSentryWard[0]= true
	set s__udg_activeSentryWard[1]= true
	set s__udg_activeSentryWard[2]= true
	set s__udg_activeSentryWard[3]= true
	set s__udg_activeSentryWard[4]= true
	set s__udg_activeSentryWard[5]= true
	set s__udg_activeSentryWard[6]= true
	set s__udg_activeSentryWard[7]= true
	set s__udg_activeSentryWard[8]= true
	set s__udg_activeSentryWard[9]= true
	set s__udg_activeSentryWard[10]= true
	set s__udg_activeSentryWard[11]= true
	set s__udg_activeSentryWard[12]= true
	set s__udg_activeStasisTrap[0]= true
	set s__udg_activeStasisTrap[1]= true
	set s__udg_activeStasisTrap[2]= true
	set s__udg_activeStasisTrap[3]= true
	set s__udg_activeStasisTrap[4]= true
	set s__udg_activeStasisTrap[5]= true
	set s__udg_activeStasisTrap[6]= true
	set s__udg_activeStasisTrap[7]= true
	set s__udg_activeStasisTrap[8]= true
	set s__udg_activeStasisTrap[9]= true
	set s__udg_activeStasisTrap[10]= true
	set s__udg_activeStasisTrap[11]= true
	set s__udg_activeStasisTrap[12]= true
	set s__udg_activeHealingWard[0]= true
	set s__udg_activeHealingWard[1]= true
	set s__udg_activeHealingWard[2]= true
	set s__udg_activeHealingWard[3]= true
	set s__udg_activeHealingWard[4]= true
	set s__udg_activeHealingWard[5]= true
	set s__udg_activeHealingWard[6]= true
	set s__udg_activeHealingWard[7]= true
	set s__udg_activeHealingWard[8]= true
	set s__udg_activeHealingWard[9]= true
	set s__udg_activeHealingWard[10]= true
	set s__udg_activeHealingWard[11]= true
	set s__udg_activeHealingWard[12]= true
	set s__udg_activeSpiritLink[0]= true
	set s__udg_activeSpiritLink[1]= true
	set s__udg_activeSpiritLink[2]= true
	set s__udg_activeSpiritLink[3]= true
	set s__udg_activeSpiritLink[4]= true
	set s__udg_activeSpiritLink[5]= true
	set s__udg_activeSpiritLink[6]= true
	set s__udg_activeSpiritLink[7]= true
	set s__udg_activeSpiritLink[8]= true
	set s__udg_activeSpiritLink[9]= true
	set s__udg_activeSpiritLink[10]= true
	set s__udg_activeSpiritLink[11]= true
	set s__udg_activeSpiritLink[12]= true
	set s__udg_activeDisenchant[0]= true
	set s__udg_activeDisenchant[1]= true
	set s__udg_activeDisenchant[2]= true
	set s__udg_activeDisenchant[3]= true
	set s__udg_activeDisenchant[4]= true
	set s__udg_activeDisenchant[5]= true
	set s__udg_activeDisenchant[6]= true
	set s__udg_activeDisenchant[7]= true
	set s__udg_activeDisenchant[8]= true
	set s__udg_activeDisenchant[9]= true
	set s__udg_activeDisenchant[10]= true
	set s__udg_activeDisenchant[11]= true
	set s__udg_activeDisenchant[12]= true
	set s__udg_activeAncestralSpirit[0]= true
	set s__udg_activeAncestralSpirit[1]= true
	set s__udg_activeAncestralSpirit[2]= true
	set s__udg_activeAncestralSpirit[3]= true
	set s__udg_activeAncestralSpirit[4]= true
	set s__udg_activeAncestralSpirit[5]= true
	set s__udg_activeAncestralSpirit[6]= true
	set s__udg_activeAncestralSpirit[7]= true
	set s__udg_activeAncestralSpirit[8]= true
	set s__udg_activeAncestralSpirit[9]= true
	set s__udg_activeAncestralSpirit[10]= true
	set s__udg_activeAncestralSpirit[11]= true
	set s__udg_activeAncestralSpirit[12]= true
	set s__udg_activeUnstableConcoction[0]= true
	set s__udg_activeUnstableConcoction[1]= true
	set s__udg_activeUnstableConcoction[2]= true
	set s__udg_activeUnstableConcoction[3]= true
	set s__udg_activeUnstableConcoction[4]= true
	set s__udg_activeUnstableConcoction[5]= true
	set s__udg_activeUnstableConcoction[6]= true
	set s__udg_activeUnstableConcoction[7]= true
	set s__udg_activeUnstableConcoction[8]= true
	set s__udg_activeUnstableConcoction[9]= true
	set s__udg_activeUnstableConcoction[10]= true
	set s__udg_activeUnstableConcoction[11]= true
	set s__udg_activeUnstableConcoction[12]= true
	set s__udg_activeDevour[0]= true
	set s__udg_activeDevour[1]= true
	set s__udg_activeDevour[2]= true
	set s__udg_activeDevour[3]= true
	set s__udg_activeDevour[4]= true
	set s__udg_activeDevour[5]= true
	set s__udg_activeDevour[6]= true
	set s__udg_activeDevour[7]= true
	set s__udg_activeDevour[8]= true
	set s__udg_activeDevour[9]= true
	set s__udg_activeDevour[10]= true
	set s__udg_activeDevour[11]= true
	set s__udg_activeDevour[12]= true
	set s__udg_activeWindWalk[0]= true
	set s__udg_activeWindWalk[1]= true
	set s__udg_activeWindWalk[2]= true
	set s__udg_activeWindWalk[3]= true
	set s__udg_activeWindWalk[4]= true
	set s__udg_activeWindWalk[5]= true
	set s__udg_activeWindWalk[6]= true
	set s__udg_activeWindWalk[7]= true
	set s__udg_activeWindWalk[8]= true
	set s__udg_activeWindWalk[9]= true
	set s__udg_activeWindWalk[10]= true
	set s__udg_activeWindWalk[11]= true
	set s__udg_activeWindWalk[12]= true
	set s__udg_activeMirrorImage[0]= true
	set s__udg_activeMirrorImage[1]= true
	set s__udg_activeMirrorImage[2]= true
	set s__udg_activeMirrorImage[3]= true
	set s__udg_activeMirrorImage[4]= true
	set s__udg_activeMirrorImage[5]= true
	set s__udg_activeMirrorImage[6]= true
	set s__udg_activeMirrorImage[7]= true
	set s__udg_activeMirrorImage[8]= true
	set s__udg_activeMirrorImage[9]= true
	set s__udg_activeMirrorImage[10]= true
	set s__udg_activeMirrorImage[11]= true
	set s__udg_activeMirrorImage[12]= true
	set s__udg_activeBladestorm[0]= true
	set s__udg_activeBladestorm[1]= true
	set s__udg_activeBladestorm[2]= true
	set s__udg_activeBladestorm[3]= true
	set s__udg_activeBladestorm[4]= true
	set s__udg_activeBladestorm[5]= true
	set s__udg_activeBladestorm[6]= true
	set s__udg_activeBladestorm[7]= true
	set s__udg_activeBladestorm[8]= true
	set s__udg_activeBladestorm[9]= true
	set s__udg_activeBladestorm[10]= true
	set s__udg_activeBladestorm[11]= true
	set s__udg_activeBladestorm[12]= true
	set s__udg_activeChainLightning[0]= true
	set s__udg_activeChainLightning[1]= true
	set s__udg_activeChainLightning[2]= true
	set s__udg_activeChainLightning[3]= true
	set s__udg_activeChainLightning[4]= true
	set s__udg_activeChainLightning[5]= true
	set s__udg_activeChainLightning[6]= true
	set s__udg_activeChainLightning[7]= true
	set s__udg_activeChainLightning[8]= true
	set s__udg_activeChainLightning[9]= true
	set s__udg_activeChainLightning[10]= true
	set s__udg_activeChainLightning[11]= true
	set s__udg_activeChainLightning[12]= true
	set s__udg_activeFirebolt[0]= true
	set s__udg_activeFirebolt[1]= true
	set s__udg_activeFirebolt[2]= true
	set s__udg_activeFirebolt[3]= true
	set s__udg_activeFirebolt[4]= true
	set s__udg_activeFirebolt[5]= true
	set s__udg_activeFirebolt[6]= true
	set s__udg_activeFirebolt[7]= true
	set s__udg_activeFirebolt[8]= true
	set s__udg_activeFirebolt[9]= true
	set s__udg_activeFirebolt[10]= true
	set s__udg_activeFirebolt[11]= true
	set s__udg_activeFirebolt[12]= true
	set s__udg_activeSpiritWolves[0]= true
	set s__udg_activeSpiritWolves[1]= true
	set s__udg_activeSpiritWolves[2]= true
	set s__udg_activeSpiritWolves[3]= true
	set s__udg_activeSpiritWolves[4]= true
	set s__udg_activeSpiritWolves[5]= true
	set s__udg_activeSpiritWolves[6]= true
	set s__udg_activeSpiritWolves[7]= true
	set s__udg_activeSpiritWolves[8]= true
	set s__udg_activeSpiritWolves[9]= true
	set s__udg_activeSpiritWolves[10]= true
	set s__udg_activeSpiritWolves[11]= true
	set s__udg_activeSpiritWolves[12]= true
	set s__udg_activeEarthquake[0]= true
	set s__udg_activeEarthquake[1]= true
	set s__udg_activeEarthquake[2]= true
	set s__udg_activeEarthquake[3]= true
	set s__udg_activeEarthquake[4]= true
	set s__udg_activeEarthquake[5]= true
	set s__udg_activeEarthquake[6]= true
	set s__udg_activeEarthquake[7]= true
	set s__udg_activeEarthquake[8]= true
	set s__udg_activeEarthquake[9]= true
	set s__udg_activeEarthquake[10]= true
	set s__udg_activeEarthquake[11]= true
	set s__udg_activeEarthquake[12]= true
	set s__udg_activeShockwave[0]= true
	set s__udg_activeShockwave[1]= true
	set s__udg_activeShockwave[2]= true
	set s__udg_activeShockwave[3]= true
	set s__udg_activeShockwave[4]= true
	set s__udg_activeShockwave[5]= true
	set s__udg_activeShockwave[6]= true
	set s__udg_activeShockwave[7]= true
	set s__udg_activeShockwave[8]= true
	set s__udg_activeShockwave[9]= true
	set s__udg_activeShockwave[10]= true
	set s__udg_activeShockwave[11]= true
	set s__udg_activeShockwave[12]= true
	set s__udg_activeWarStomp[0]= true
	set s__udg_activeWarStomp[1]= true
	set s__udg_activeWarStomp[2]= true
	set s__udg_activeWarStomp[3]= true
	set s__udg_activeWarStomp[4]= true
	set s__udg_activeWarStomp[5]= true
	set s__udg_activeWarStomp[6]= true
	set s__udg_activeWarStomp[7]= true
	set s__udg_activeWarStomp[8]= true
	set s__udg_activeWarStomp[9]= true
	set s__udg_activeWarStomp[10]= true
	set s__udg_activeWarStomp[11]= true
	set s__udg_activeWarStomp[12]= true
	set s__udg_activeHealingWave[0]= true
	set s__udg_activeHealingWave[1]= true
	set s__udg_activeHealingWave[2]= true
	set s__udg_activeHealingWave[3]= true
	set s__udg_activeHealingWave[4]= true
	set s__udg_activeHealingWave[5]= true
	set s__udg_activeHealingWave[6]= true
	set s__udg_activeHealingWave[7]= true
	set s__udg_activeHealingWave[8]= true
	set s__udg_activeHealingWave[9]= true
	set s__udg_activeHealingWave[10]= true
	set s__udg_activeHealingWave[11]= true
	set s__udg_activeHealingWave[12]= true
	set s__udg_activeHex[0]= true
	set s__udg_activeHex[1]= true
	set s__udg_activeHex[2]= true
	set s__udg_activeHex[3]= true
	set s__udg_activeHex[4]= true
	set s__udg_activeHex[5]= true
	set s__udg_activeHex[6]= true
	set s__udg_activeHex[7]= true
	set s__udg_activeHex[8]= true
	set s__udg_activeHex[9]= true
	set s__udg_activeHex[10]= true
	set s__udg_activeHex[11]= true
	set s__udg_activeHex[12]= true
	set s__udg_activeSerpentWard[0]= true
	set s__udg_activeSerpentWard[1]= true
	set s__udg_activeSerpentWard[2]= true
	set s__udg_activeSerpentWard[3]= true
	set s__udg_activeSerpentWard[4]= true
	set s__udg_activeSerpentWard[5]= true
	set s__udg_activeSerpentWard[6]= true
	set s__udg_activeSerpentWard[7]= true
	set s__udg_activeSerpentWard[8]= true
	set s__udg_activeSerpentWard[9]= true
	set s__udg_activeSerpentWard[10]= true
	set s__udg_activeSerpentWard[11]= true
	set s__udg_activeSerpentWard[12]= true
	set s__udg_activeBigBadVoodoo[0]= true
	set s__udg_activeBigBadVoodoo[1]= true
	set s__udg_activeBigBadVoodoo[2]= true
	set s__udg_activeBigBadVoodoo[3]= true
	set s__udg_activeBigBadVoodoo[4]= true
	set s__udg_activeBigBadVoodoo[5]= true
	set s__udg_activeBigBadVoodoo[6]= true
	set s__udg_activeBigBadVoodoo[7]= true
	set s__udg_activeBigBadVoodoo[8]= true
	set s__udg_activeBigBadVoodoo[9]= true
	set s__udg_activeBigBadVoodoo[10]= true
	set s__udg_activeBigBadVoodoo[11]= true
	set s__udg_activeBigBadVoodoo[12]= true
	set s__udg_DeathAndDecayActive[0]= false
	set s__udg_DeathAndDecayActive[1]= false
	set s__udg_DeathAndDecayActive[2]= false
	set s__udg_DeathAndDecayActive[3]= false
	set s__udg_DeathAndDecayActive[4]= false
	set s__udg_DeathAndDecayActive[5]= false
	set s__udg_DeathAndDecayActive[6]= false
	set s__udg_DeathAndDecayActive[7]= false
	set s__udg_DeathAndDecayActive[8]= false
	set s__udg_DeathAndDecayActive[9]= false
	set s__udg_DeathAndDecayActive[10]= false
	set s__udg_DeathAndDecayActive[11]= false
	set s__udg_DeathAndDecayActive[12]= false
	set udg_CryptFiendBurrow=CreateGroup()
	set udg_GargoyleStoneForm=CreateGroup()
	set udg_MeatWagonsMoveEvent=0
	set udg_MeatWagonsMoveTimer=CreateTimer()
	set udg_MeatWagons=CreateGroup()
	set udg_DiseaseClouds=CreateGroup()
	set s__udg_activeWeb[0]= true
	set s__udg_activeWeb[1]= true
	set s__udg_activeWeb[2]= true
	set s__udg_activeWeb[3]= true
	set s__udg_activeWeb[4]= true
	set s__udg_activeWeb[5]= true
	set s__udg_activeWeb[6]= true
	set s__udg_activeWeb[7]= true
	set s__udg_activeWeb[8]= true
	set s__udg_activeWeb[9]= true
	set s__udg_activeWeb[10]= true
	set s__udg_activeWeb[11]= true
	set s__udg_activeWeb[12]= true
	set s__udg_activeBurrow[0]= true
	set s__udg_activeBurrow[1]= true
	set s__udg_activeBurrow[2]= true
	set s__udg_activeBurrow[3]= true
	set s__udg_activeBurrow[4]= true
	set s__udg_activeBurrow[5]= true
	set s__udg_activeBurrow[6]= true
	set s__udg_activeBurrow[7]= true
	set s__udg_activeBurrow[8]= true
	set s__udg_activeBurrow[9]= true
	set s__udg_activeBurrow[10]= true
	set s__udg_activeBurrow[11]= true
	set s__udg_activeBurrow[12]= true
	set s__udg_activeCurse[0]= true
	set s__udg_activeCurse[1]= true
	set s__udg_activeCurse[2]= true
	set s__udg_activeCurse[3]= true
	set s__udg_activeCurse[4]= true
	set s__udg_activeCurse[5]= true
	set s__udg_activeCurse[6]= true
	set s__udg_activeCurse[7]= true
	set s__udg_activeCurse[8]= true
	set s__udg_activeCurse[9]= true
	set s__udg_activeCurse[10]= true
	set s__udg_activeCurse[11]= true
	set s__udg_activeCurse[12]= true
	set s__udg_activeAntiMagicShell[0]= true
	set s__udg_activeAntiMagicShell[1]= true
	set s__udg_activeAntiMagicShell[2]= true
	set s__udg_activeAntiMagicShell[3]= true
	set s__udg_activeAntiMagicShell[4]= true
	set s__udg_activeAntiMagicShell[5]= true
	set s__udg_activeAntiMagicShell[6]= true
	set s__udg_activeAntiMagicShell[7]= true
	set s__udg_activeAntiMagicShell[8]= true
	set s__udg_activeAntiMagicShell[9]= true
	set s__udg_activeAntiMagicShell[10]= true
	set s__udg_activeAntiMagicShell[11]= true
	set s__udg_activeAntiMagicShell[12]= true
	set s__udg_activePossession[0]= true
	set s__udg_activePossession[1]= true
	set s__udg_activePossession[2]= true
	set s__udg_activePossession[3]= true
	set s__udg_activePossession[4]= true
	set s__udg_activePossession[5]= true
	set s__udg_activePossession[6]= true
	set s__udg_activePossession[7]= true
	set s__udg_activePossession[8]= true
	set s__udg_activePossession[9]= true
	set s__udg_activePossession[10]= true
	set s__udg_activePossession[11]= true
	set s__udg_activePossession[12]= true
	set s__udg_activeSpiritTouch[0]= true
	set s__udg_activeSpiritTouch[1]= true
	set s__udg_activeSpiritTouch[2]= true
	set s__udg_activeSpiritTouch[3]= true
	set s__udg_activeSpiritTouch[4]= true
	set s__udg_activeSpiritTouch[5]= true
	set s__udg_activeSpiritTouch[6]= true
	set s__udg_activeSpiritTouch[7]= true
	set s__udg_activeSpiritTouch[8]= true
	set s__udg_activeSpiritTouch[9]= true
	set s__udg_activeSpiritTouch[10]= true
	set s__udg_activeSpiritTouch[11]= true
	set s__udg_activeSpiritTouch[12]= true
	set s__udg_activeEssenceOfBlight[0]= true
	set s__udg_activeEssenceOfBlight[1]= true
	set s__udg_activeEssenceOfBlight[2]= true
	set s__udg_activeEssenceOfBlight[3]= true
	set s__udg_activeEssenceOfBlight[4]= true
	set s__udg_activeEssenceOfBlight[5]= true
	set s__udg_activeEssenceOfBlight[6]= true
	set s__udg_activeEssenceOfBlight[7]= true
	set s__udg_activeEssenceOfBlight[8]= true
	set s__udg_activeEssenceOfBlight[9]= true
	set s__udg_activeEssenceOfBlight[10]= true
	set s__udg_activeEssenceOfBlight[11]= true
	set s__udg_activeEssenceOfBlight[12]= true
	set s__udg_activeStoneForm[0]= true
	set s__udg_activeStoneForm[1]= true
	set s__udg_activeStoneForm[2]= true
	set s__udg_activeStoneForm[3]= true
	set s__udg_activeStoneForm[4]= true
	set s__udg_activeStoneForm[5]= true
	set s__udg_activeStoneForm[6]= true
	set s__udg_activeStoneForm[7]= true
	set s__udg_activeStoneForm[8]= true
	set s__udg_activeStoneForm[9]= true
	set s__udg_activeStoneForm[10]= true
	set s__udg_activeStoneForm[11]= true
	set s__udg_activeStoneForm[12]= true
	set s__udg_activeRaiseDead[0]= true
	set s__udg_activeRaiseDead[1]= true
	set s__udg_activeRaiseDead[2]= true
	set s__udg_activeRaiseDead[3]= true
	set s__udg_activeRaiseDead[4]= true
	set s__udg_activeRaiseDead[5]= true
	set s__udg_activeRaiseDead[6]= true
	set s__udg_activeRaiseDead[7]= true
	set s__udg_activeRaiseDead[8]= true
	set s__udg_activeRaiseDead[9]= true
	set s__udg_activeRaiseDead[10]= true
	set s__udg_activeRaiseDead[11]= true
	set s__udg_activeRaiseDead[12]= true
	set s__udg_activeUnholyFrenzy[0]= true
	set s__udg_activeUnholyFrenzy[1]= true
	set s__udg_activeUnholyFrenzy[2]= true
	set s__udg_activeUnholyFrenzy[3]= true
	set s__udg_activeUnholyFrenzy[4]= true
	set s__udg_activeUnholyFrenzy[5]= true
	set s__udg_activeUnholyFrenzy[6]= true
	set s__udg_activeUnholyFrenzy[7]= true
	set s__udg_activeUnholyFrenzy[8]= true
	set s__udg_activeUnholyFrenzy[9]= true
	set s__udg_activeUnholyFrenzy[10]= true
	set s__udg_activeUnholyFrenzy[11]= true
	set s__udg_activeUnholyFrenzy[12]= true
	set s__udg_activeCripple[0]= true
	set s__udg_activeCripple[1]= true
	set s__udg_activeCripple[2]= true
	set s__udg_activeCripple[3]= true
	set s__udg_activeCripple[4]= true
	set s__udg_activeCripple[5]= true
	set s__udg_activeCripple[6]= true
	set s__udg_activeCripple[7]= true
	set s__udg_activeCripple[8]= true
	set s__udg_activeCripple[9]= true
	set s__udg_activeCripple[10]= true
	set s__udg_activeCripple[11]= true
	set s__udg_activeCripple[12]= true
	set s__udg_activeDevourMagic[0]= true
	set s__udg_activeDevourMagic[1]= true
	set s__udg_activeDevourMagic[2]= true
	set s__udg_activeDevourMagic[3]= true
	set s__udg_activeDevourMagic[4]= true
	set s__udg_activeDevourMagic[5]= true
	set s__udg_activeDevourMagic[6]= true
	set s__udg_activeDevourMagic[7]= true
	set s__udg_activeDevourMagic[8]= true
	set s__udg_activeDevourMagic[9]= true
	set s__udg_activeDevourMagic[10]= true
	set s__udg_activeDevourMagic[11]= true
	set s__udg_activeDevourMagic[12]= true
	set s__udg_activeOrbOfAnnihilation[0]= true
	set s__udg_activeOrbOfAnnihilation[1]= true
	set s__udg_activeOrbOfAnnihilation[2]= true
	set s__udg_activeOrbOfAnnihilation[3]= true
	set s__udg_activeOrbOfAnnihilation[4]= true
	set s__udg_activeOrbOfAnnihilation[5]= true
	set s__udg_activeOrbOfAnnihilation[6]= true
	set s__udg_activeOrbOfAnnihilation[7]= true
	set s__udg_activeOrbOfAnnihilation[8]= true
	set s__udg_activeOrbOfAnnihilation[9]= true
	set s__udg_activeOrbOfAnnihilation[10]= true
	set s__udg_activeOrbOfAnnihilation[11]= true
	set s__udg_activeOrbOfAnnihilation[12]= true
	set s__udg_activeAbsorbMana[0]= true
	set s__udg_activeAbsorbMana[1]= true
	set s__udg_activeAbsorbMana[2]= true
	set s__udg_activeAbsorbMana[3]= true
	set s__udg_activeAbsorbMana[4]= true
	set s__udg_activeAbsorbMana[5]= true
	set s__udg_activeAbsorbMana[6]= true
	set s__udg_activeAbsorbMana[7]= true
	set s__udg_activeAbsorbMana[8]= true
	set s__udg_activeAbsorbMana[9]= true
	set s__udg_activeAbsorbMana[10]= true
	set s__udg_activeAbsorbMana[11]= true
	set s__udg_activeAbsorbMana[12]= true
	set s__udg_activeDeathCoil[0]= true
	set s__udg_activeDeathCoil[1]= true
	set s__udg_activeDeathCoil[2]= true
	set s__udg_activeDeathCoil[3]= true
	set s__udg_activeDeathCoil[4]= true
	set s__udg_activeDeathCoil[5]= true
	set s__udg_activeDeathCoil[6]= true
	set s__udg_activeDeathCoil[7]= true
	set s__udg_activeDeathCoil[8]= true
	set s__udg_activeDeathCoil[9]= true
	set s__udg_activeDeathCoil[10]= true
	set s__udg_activeDeathCoil[11]= true
	set s__udg_activeDeathCoil[12]= true
	set s__udg_activeDeathPact[0]= true
	set s__udg_activeDeathPact[1]= true
	set s__udg_activeDeathPact[2]= true
	set s__udg_activeDeathPact[3]= true
	set s__udg_activeDeathPact[4]= true
	set s__udg_activeDeathPact[5]= true
	set s__udg_activeDeathPact[6]= true
	set s__udg_activeDeathPact[7]= true
	set s__udg_activeDeathPact[8]= true
	set s__udg_activeDeathPact[9]= true
	set s__udg_activeDeathPact[10]= true
	set s__udg_activeDeathPact[11]= true
	set s__udg_activeDeathPact[12]= true
	set s__udg_activeAnimateDead[0]= true
	set s__udg_activeAnimateDead[1]= true
	set s__udg_activeAnimateDead[2]= true
	set s__udg_activeAnimateDead[3]= true
	set s__udg_activeAnimateDead[4]= true
	set s__udg_activeAnimateDead[5]= true
	set s__udg_activeAnimateDead[6]= true
	set s__udg_activeAnimateDead[7]= true
	set s__udg_activeAnimateDead[8]= true
	set s__udg_activeAnimateDead[9]= true
	set s__udg_activeAnimateDead[10]= true
	set s__udg_activeAnimateDead[11]= true
	set s__udg_activeAnimateDead[12]= true
	set s__udg_activeFrostNova[0]= true
	set s__udg_activeFrostNova[1]= true
	set s__udg_activeFrostNova[2]= true
	set s__udg_activeFrostNova[3]= true
	set s__udg_activeFrostNova[4]= true
	set s__udg_activeFrostNova[5]= true
	set s__udg_activeFrostNova[6]= true
	set s__udg_activeFrostNova[7]= true
	set s__udg_activeFrostNova[8]= true
	set s__udg_activeFrostNova[9]= true
	set s__udg_activeFrostNova[10]= true
	set s__udg_activeFrostNova[11]= true
	set s__udg_activeFrostNova[12]= true
	set s__udg_activeFrostShield[0]= true
	set s__udg_activeFrostShield[1]= true
	set s__udg_activeFrostShield[2]= true
	set s__udg_activeFrostShield[3]= true
	set s__udg_activeFrostShield[4]= true
	set s__udg_activeFrostShield[5]= true
	set s__udg_activeFrostShield[6]= true
	set s__udg_activeFrostShield[7]= true
	set s__udg_activeFrostShield[8]= true
	set s__udg_activeFrostShield[9]= true
	set s__udg_activeFrostShield[10]= true
	set s__udg_activeFrostShield[11]= true
	set s__udg_activeFrostShield[12]= true
	set s__udg_activeDarkRitual[0]= true
	set s__udg_activeDarkRitual[1]= true
	set s__udg_activeDarkRitual[2]= true
	set s__udg_activeDarkRitual[3]= true
	set s__udg_activeDarkRitual[4]= true
	set s__udg_activeDarkRitual[5]= true
	set s__udg_activeDarkRitual[6]= true
	set s__udg_activeDarkRitual[7]= true
	set s__udg_activeDarkRitual[8]= true
	set s__udg_activeDarkRitual[9]= true
	set s__udg_activeDarkRitual[10]= true
	set s__udg_activeDarkRitual[11]= true
	set s__udg_activeDarkRitual[12]= true
	set s__udg_activeDeathAndDecay[0]= true
	set s__udg_activeDeathAndDecay[1]= true
	set s__udg_activeDeathAndDecay[2]= true
	set s__udg_activeDeathAndDecay[3]= true
	set s__udg_activeDeathAndDecay[4]= true
	set s__udg_activeDeathAndDecay[5]= true
	set s__udg_activeDeathAndDecay[6]= true
	set s__udg_activeDeathAndDecay[7]= true
	set s__udg_activeDeathAndDecay[8]= true
	set s__udg_activeDeathAndDecay[9]= true
	set s__udg_activeDeathAndDecay[10]= true
	set s__udg_activeDeathAndDecay[11]= true
	set s__udg_activeDeathAndDecay[12]= true
	set s__udg_activeCarrionSwarm[0]= true
	set s__udg_activeCarrionSwarm[1]= true
	set s__udg_activeCarrionSwarm[2]= true
	set s__udg_activeCarrionSwarm[3]= true
	set s__udg_activeCarrionSwarm[4]= true
	set s__udg_activeCarrionSwarm[5]= true
	set s__udg_activeCarrionSwarm[6]= true
	set s__udg_activeCarrionSwarm[7]= true
	set s__udg_activeCarrionSwarm[8]= true
	set s__udg_activeCarrionSwarm[9]= true
	set s__udg_activeCarrionSwarm[10]= true
	set s__udg_activeCarrionSwarm[11]= true
	set s__udg_activeCarrionSwarm[12]= true
	set s__udg_activeSleep[0]= true
	set s__udg_activeSleep[1]= true
	set s__udg_activeSleep[2]= true
	set s__udg_activeSleep[3]= true
	set s__udg_activeSleep[4]= true
	set s__udg_activeSleep[5]= true
	set s__udg_activeSleep[6]= true
	set s__udg_activeSleep[7]= true
	set s__udg_activeSleep[8]= true
	set s__udg_activeSleep[9]= true
	set s__udg_activeSleep[10]= true
	set s__udg_activeSleep[11]= true
	set s__udg_activeSleep[12]= true
	set s__udg_activeInferno[0]= true
	set s__udg_activeInferno[1]= true
	set s__udg_activeInferno[2]= true
	set s__udg_activeInferno[3]= true
	set s__udg_activeInferno[4]= true
	set s__udg_activeInferno[5]= true
	set s__udg_activeInferno[6]= true
	set s__udg_activeInferno[7]= true
	set s__udg_activeInferno[8]= true
	set s__udg_activeInferno[9]= true
	set s__udg_activeInferno[10]= true
	set s__udg_activeInferno[11]= true
	set s__udg_activeInferno[12]= true
	set s__udg_activeImpale[0]= true
	set s__udg_activeImpale[1]= true
	set s__udg_activeImpale[2]= true
	set s__udg_activeImpale[3]= true
	set s__udg_activeImpale[4]= true
	set s__udg_activeImpale[5]= true
	set s__udg_activeImpale[6]= true
	set s__udg_activeImpale[7]= true
	set s__udg_activeImpale[8]= true
	set s__udg_activeImpale[9]= true
	set s__udg_activeImpale[10]= true
	set s__udg_activeImpale[11]= true
	set s__udg_activeImpale[12]= true
	set s__udg_activeCarrionBeetles[0]= true
	set s__udg_activeCarrionBeetles[1]= true
	set s__udg_activeCarrionBeetles[2]= true
	set s__udg_activeCarrionBeetles[3]= true
	set s__udg_activeCarrionBeetles[4]= true
	set s__udg_activeCarrionBeetles[5]= true
	set s__udg_activeCarrionBeetles[6]= true
	set s__udg_activeCarrionBeetles[7]= true
	set s__udg_activeCarrionBeetles[8]= true
	set s__udg_activeCarrionBeetles[9]= true
	set s__udg_activeCarrionBeetles[10]= true
	set s__udg_activeCarrionBeetles[11]= true
	set s__udg_activeCarrionBeetles[12]= true
	set s__udg_activeLocustSwarm[0]= true
	set s__udg_activeLocustSwarm[1]= true
	set s__udg_activeLocustSwarm[2]= true
	set s__udg_activeLocustSwarm[3]= true
	set s__udg_activeLocustSwarm[4]= true
	set s__udg_activeLocustSwarm[5]= true
	set s__udg_activeLocustSwarm[6]= true
	set s__udg_activeLocustSwarm[7]= true
	set s__udg_activeLocustSwarm[8]= true
	set s__udg_activeLocustSwarm[9]= true
	set s__udg_activeLocustSwarm[10]= true
	set s__udg_activeLocustSwarm[11]= true
	set s__udg_activeLocustSwarm[12]= true
	set s__udg_ImmolationCounter[0]= 0
	set s__udg_ImmolationCounter[1]= 0
	set s__udg_ImmolationCounter[2]= 0
	set s__udg_ImmolationCounter[3]= 0
	set s__udg_ImmolationCounter[4]= 0
	set s__udg_ImmolationCounter[5]= 0
	set s__udg_ImmolationCounter[6]= 0
	set s__udg_ImmolationCounter[7]= 0
	set s__udg_ImmolationCounter[8]= 0
	set s__udg_ImmolationCounter[9]= 0
	set s__udg_ImmolationCounter[10]= 0
	set s__udg_ImmolationCounter[11]= 0
	set s__udg_ImmolationCounter[12]= 0
	set s__udg_activeSentinel[0]= true
	set s__udg_activeSentinel[1]= true
	set s__udg_activeSentinel[2]= true
	set s__udg_activeSentinel[3]= true
	set s__udg_activeSentinel[4]= true
	set s__udg_activeSentinel[5]= true
	set s__udg_activeSentinel[6]= true
	set s__udg_activeSentinel[7]= true
	set s__udg_activeSentinel[8]= true
	set s__udg_activeSentinel[9]= true
	set s__udg_activeSentinel[10]= true
	set s__udg_activeSentinel[11]= true
	set s__udg_activeSentinel[12]= true
	set s__udg_activeAbolishMagic[0]= true
	set s__udg_activeAbolishMagic[1]= true
	set s__udg_activeAbolishMagic[2]= true
	set s__udg_activeAbolishMagic[3]= true
	set s__udg_activeAbolishMagic[4]= true
	set s__udg_activeAbolishMagic[5]= true
	set s__udg_activeAbolishMagic[6]= true
	set s__udg_activeAbolishMagic[7]= true
	set s__udg_activeAbolishMagic[8]= true
	set s__udg_activeAbolishMagic[9]= true
	set s__udg_activeAbolishMagic[10]= true
	set s__udg_activeAbolishMagic[11]= true
	set s__udg_activeAbolishMagic[12]= true
	set s__udg_activeRoar[0]= true
	set s__udg_activeRoar[1]= true
	set s__udg_activeRoar[2]= true
	set s__udg_activeRoar[3]= true
	set s__udg_activeRoar[4]= true
	set s__udg_activeRoar[5]= true
	set s__udg_activeRoar[6]= true
	set s__udg_activeRoar[7]= true
	set s__udg_activeRoar[8]= true
	set s__udg_activeRoar[9]= true
	set s__udg_activeRoar[10]= true
	set s__udg_activeRoar[11]= true
	set s__udg_activeRoar[12]= true
	set s__udg_activeRejuvenation[0]= true
	set s__udg_activeRejuvenation[1]= true
	set s__udg_activeRejuvenation[2]= true
	set s__udg_activeRejuvenation[3]= true
	set s__udg_activeRejuvenation[4]= true
	set s__udg_activeRejuvenation[5]= true
	set s__udg_activeRejuvenation[6]= true
	set s__udg_activeRejuvenation[7]= true
	set s__udg_activeRejuvenation[8]= true
	set s__udg_activeRejuvenation[9]= true
	set s__udg_activeRejuvenation[10]= true
	set s__udg_activeRejuvenation[11]= true
	set s__udg_activeRejuvenation[12]= true
	set s__udg_activeBearForm[0]= true
	set s__udg_activeBearForm[1]= true
	set s__udg_activeBearForm[2]= true
	set s__udg_activeBearForm[3]= true
	set s__udg_activeBearForm[4]= true
	set s__udg_activeBearForm[5]= true
	set s__udg_activeBearForm[6]= true
	set s__udg_activeBearForm[7]= true
	set s__udg_activeBearForm[8]= true
	set s__udg_activeBearForm[9]= true
	set s__udg_activeBearForm[10]= true
	set s__udg_activeBearForm[11]= true
	set s__udg_activeBearForm[12]= true
	set s__udg_activeFaerieFire[0]= true
	set s__udg_activeFaerieFire[1]= true
	set s__udg_activeFaerieFire[2]= true
	set s__udg_activeFaerieFire[3]= true
	set s__udg_activeFaerieFire[4]= true
	set s__udg_activeFaerieFire[5]= true
	set s__udg_activeFaerieFire[6]= true
	set s__udg_activeFaerieFire[7]= true
	set s__udg_activeFaerieFire[8]= true
	set s__udg_activeFaerieFire[9]= true
	set s__udg_activeFaerieFire[10]= true
	set s__udg_activeFaerieFire[11]= true
	set s__udg_activeFaerieFire[12]= true
	set s__udg_activeCrowForm[0]= true
	set s__udg_activeCrowForm[1]= true
	set s__udg_activeCrowForm[2]= true
	set s__udg_activeCrowForm[3]= true
	set s__udg_activeCrowForm[4]= true
	set s__udg_activeCrowForm[5]= true
	set s__udg_activeCrowForm[6]= true
	set s__udg_activeCrowForm[7]= true
	set s__udg_activeCrowForm[8]= true
	set s__udg_activeCrowForm[9]= true
	set s__udg_activeCrowForm[10]= true
	set s__udg_activeCrowForm[11]= true
	set s__udg_activeCrowForm[12]= true
	set s__udg_activeCyclone[0]= true
	set s__udg_activeCyclone[1]= true
	set s__udg_activeCyclone[2]= true
	set s__udg_activeCyclone[3]= true
	set s__udg_activeCyclone[4]= true
	set s__udg_activeCyclone[5]= true
	set s__udg_activeCyclone[6]= true
	set s__udg_activeCyclone[7]= true
	set s__udg_activeCyclone[8]= true
	set s__udg_activeCyclone[9]= true
	set s__udg_activeCyclone[10]= true
	set s__udg_activeCyclone[11]= true
	set s__udg_activeCyclone[12]= true
	set s__udg_activePhaseShift[0]= true
	set s__udg_activePhaseShift[1]= true
	set s__udg_activePhaseShift[2]= true
	set s__udg_activePhaseShift[3]= true
	set s__udg_activePhaseShift[4]= true
	set s__udg_activePhaseShift[5]= true
	set s__udg_activePhaseShift[6]= true
	set s__udg_activePhaseShift[7]= true
	set s__udg_activePhaseShift[8]= true
	set s__udg_activePhaseShift[9]= true
	set s__udg_activePhaseShift[10]= true
	set s__udg_activePhaseShift[11]= true
	set s__udg_activePhaseShift[12]= true
	set s__udg_activeManaFlare[0]= true
	set s__udg_activeManaFlare[1]= true
	set s__udg_activeManaFlare[2]= true
	set s__udg_activeManaFlare[3]= true
	set s__udg_activeManaFlare[4]= true
	set s__udg_activeManaFlare[5]= true
	set s__udg_activeManaFlare[6]= true
	set s__udg_activeManaFlare[7]= true
	set s__udg_activeManaFlare[8]= true
	set s__udg_activeManaFlare[9]= true
	set s__udg_activeManaFlare[10]= true
	set s__udg_activeManaFlare[11]= true
	set s__udg_activeManaFlare[12]= true
	set s__udg_activeTaunt[0]= true
	set s__udg_activeTaunt[1]= true
	set s__udg_activeTaunt[2]= true
	set s__udg_activeTaunt[3]= true
	set s__udg_activeTaunt[4]= true
	set s__udg_activeTaunt[5]= true
	set s__udg_activeTaunt[6]= true
	set s__udg_activeTaunt[7]= true
	set s__udg_activeTaunt[8]= true
	set s__udg_activeTaunt[9]= true
	set s__udg_activeTaunt[10]= true
	set s__udg_activeTaunt[11]= true
	set s__udg_activeTaunt[12]= true
	set s__udg_activeEntanglingRoots[0]= true
	set s__udg_activeEntanglingRoots[1]= true
	set s__udg_activeEntanglingRoots[2]= true
	set s__udg_activeEntanglingRoots[3]= true
	set s__udg_activeEntanglingRoots[4]= true
	set s__udg_activeEntanglingRoots[5]= true
	set s__udg_activeEntanglingRoots[6]= true
	set s__udg_activeEntanglingRoots[7]= true
	set s__udg_activeEntanglingRoots[8]= true
	set s__udg_activeEntanglingRoots[9]= true
	set s__udg_activeEntanglingRoots[10]= true
	set s__udg_activeEntanglingRoots[11]= true
	set s__udg_activeEntanglingRoots[12]= true
	set s__udg_activeForceOfNature[0]= true
	set s__udg_activeForceOfNature[1]= true
	set s__udg_activeForceOfNature[2]= true
	set s__udg_activeForceOfNature[3]= true
	set s__udg_activeForceOfNature[4]= true
	set s__udg_activeForceOfNature[5]= true
	set s__udg_activeForceOfNature[6]= true
	set s__udg_activeForceOfNature[7]= true
	set s__udg_activeForceOfNature[8]= true
	set s__udg_activeForceOfNature[9]= true
	set s__udg_activeForceOfNature[10]= true
	set s__udg_activeForceOfNature[11]= true
	set s__udg_activeForceOfNature[12]= true
	set s__udg_activeTranquility[0]= true
	set s__udg_activeTranquility[1]= true
	set s__udg_activeTranquility[2]= true
	set s__udg_activeTranquility[3]= true
	set s__udg_activeTranquility[4]= true
	set s__udg_activeTranquility[5]= true
	set s__udg_activeTranquility[6]= true
	set s__udg_activeTranquility[7]= true
	set s__udg_activeTranquility[8]= true
	set s__udg_activeTranquility[9]= true
	set s__udg_activeTranquility[10]= true
	set s__udg_activeTranquility[11]= true
	set s__udg_activeTranquility[12]= true
	set s__udg_activeSilence[0]= true
	set s__udg_activeSilence[1]= true
	set s__udg_activeSilence[2]= true
	set s__udg_activeSilence[3]= true
	set s__udg_activeSilence[4]= true
	set s__udg_activeSilence[5]= true
	set s__udg_activeSilence[6]= true
	set s__udg_activeSilence[7]= true
	set s__udg_activeSilence[8]= true
	set s__udg_activeSilence[9]= true
	set s__udg_activeSilence[10]= true
	set s__udg_activeSilence[11]= true
	set s__udg_activeSilence[12]= true
	set s__udg_activeSearingArrows[0]= true
	set s__udg_activeSearingArrows[1]= true
	set s__udg_activeSearingArrows[2]= true
	set s__udg_activeSearingArrows[3]= true
	set s__udg_activeSearingArrows[4]= true
	set s__udg_activeSearingArrows[5]= true
	set s__udg_activeSearingArrows[6]= true
	set s__udg_activeSearingArrows[7]= true
	set s__udg_activeSearingArrows[8]= true
	set s__udg_activeSearingArrows[9]= true
	set s__udg_activeSearingArrows[10]= true
	set s__udg_activeSearingArrows[11]= true
	set s__udg_activeSearingArrows[12]= true
	set s__udg_activeStarfall[0]= true
	set s__udg_activeStarfall[1]= true
	set s__udg_activeStarfall[2]= true
	set s__udg_activeStarfall[3]= true
	set s__udg_activeStarfall[4]= true
	set s__udg_activeStarfall[5]= true
	set s__udg_activeStarfall[6]= true
	set s__udg_activeStarfall[7]= true
	set s__udg_activeStarfall[8]= true
	set s__udg_activeStarfall[9]= true
	set s__udg_activeStarfall[10]= true
	set s__udg_activeStarfall[11]= true
	set s__udg_activeStarfall[12]= true
	set s__udg_activeManaBurn[0]= true
	set s__udg_activeManaBurn[1]= true
	set s__udg_activeManaBurn[2]= true
	set s__udg_activeManaBurn[3]= true
	set s__udg_activeManaBurn[4]= true
	set s__udg_activeManaBurn[5]= true
	set s__udg_activeManaBurn[6]= true
	set s__udg_activeManaBurn[7]= true
	set s__udg_activeManaBurn[8]= true
	set s__udg_activeManaBurn[9]= true
	set s__udg_activeManaBurn[10]= true
	set s__udg_activeManaBurn[11]= true
	set s__udg_activeManaBurn[12]= true
	set s__udg_activeImmolation[0]= true
	set s__udg_activeImmolation[1]= true
	set s__udg_activeImmolation[2]= true
	set s__udg_activeImmolation[3]= true
	set s__udg_activeImmolation[4]= true
	set s__udg_activeImmolation[5]= true
	set s__udg_activeImmolation[6]= true
	set s__udg_activeImmolation[7]= true
	set s__udg_activeImmolation[8]= true
	set s__udg_activeImmolation[9]= true
	set s__udg_activeImmolation[10]= true
	set s__udg_activeImmolation[11]= true
	set s__udg_activeImmolation[12]= true
	set s__udg_activeMetamorphosis[0]= true
	set s__udg_activeMetamorphosis[1]= true
	set s__udg_activeMetamorphosis[2]= true
	set s__udg_activeMetamorphosis[3]= true
	set s__udg_activeMetamorphosis[4]= true
	set s__udg_activeMetamorphosis[5]= true
	set s__udg_activeMetamorphosis[6]= true
	set s__udg_activeMetamorphosis[7]= true
	set s__udg_activeMetamorphosis[8]= true
	set s__udg_activeMetamorphosis[9]= true
	set s__udg_activeMetamorphosis[10]= true
	set s__udg_activeMetamorphosis[11]= true
	set s__udg_activeMetamorphosis[12]= true
	set s__udg_activeFanOfKnives[0]= true
	set s__udg_activeFanOfKnives[1]= true
	set s__udg_activeFanOfKnives[2]= true
	set s__udg_activeFanOfKnives[3]= true
	set s__udg_activeFanOfKnives[4]= true
	set s__udg_activeFanOfKnives[5]= true
	set s__udg_activeFanOfKnives[6]= true
	set s__udg_activeFanOfKnives[7]= true
	set s__udg_activeFanOfKnives[8]= true
	set s__udg_activeFanOfKnives[9]= true
	set s__udg_activeFanOfKnives[10]= true
	set s__udg_activeFanOfKnives[11]= true
	set s__udg_activeFanOfKnives[12]= true
	set s__udg_activeBlink[0]= true
	set s__udg_activeBlink[1]= true
	set s__udg_activeBlink[2]= true
	set s__udg_activeBlink[3]= true
	set s__udg_activeBlink[4]= true
	set s__udg_activeBlink[5]= true
	set s__udg_activeBlink[6]= true
	set s__udg_activeBlink[7]= true
	set s__udg_activeBlink[8]= true
	set s__udg_activeBlink[9]= true
	set s__udg_activeBlink[10]= true
	set s__udg_activeBlink[11]= true
	set s__udg_activeBlink[12]= true
	set s__udg_activeShadowStrike[0]= true
	set s__udg_activeShadowStrike[1]= true
	set s__udg_activeShadowStrike[2]= true
	set s__udg_activeShadowStrike[3]= true
	set s__udg_activeShadowStrike[4]= true
	set s__udg_activeShadowStrike[5]= true
	set s__udg_activeShadowStrike[6]= true
	set s__udg_activeShadowStrike[7]= true
	set s__udg_activeShadowStrike[8]= true
	set s__udg_activeShadowStrike[9]= true
	set s__udg_activeShadowStrike[10]= true
	set s__udg_activeShadowStrike[11]= true
	set s__udg_activeShadowStrike[12]= true
	set s__udg_activeVengeance[0]= true
	set s__udg_activeVengeance[1]= true
	set s__udg_activeVengeance[2]= true
	set s__udg_activeVengeance[3]= true
	set s__udg_activeVengeance[4]= true
	set s__udg_activeVengeance[5]= true
	set s__udg_activeVengeance[6]= true
	set s__udg_activeVengeance[7]= true
	set s__udg_activeVengeance[8]= true
	set s__udg_activeVengeance[9]= true
	set s__udg_activeVengeance[10]= true
	set s__udg_activeVengeance[11]= true
	set s__udg_activeVengeance[12]= true
	set s__udg_VolcanoActive[0]= false
	set s__udg_VolcanoActive[1]= false
	set s__udg_VolcanoActive[2]= false
	set s__udg_VolcanoActive[3]= false
	set s__udg_VolcanoActive[4]= false
	set s__udg_VolcanoActive[5]= false
	set s__udg_VolcanoActive[6]= false
	set s__udg_VolcanoActive[7]= false
	set s__udg_VolcanoActive[8]= false
	set s__udg_VolcanoActive[9]= false
	set s__udg_VolcanoActive[10]= false
	set s__udg_VolcanoActive[11]= false
	set s__udg_VolcanoActive[12]= false
	set s__udg_activeHealingSpray[0]= true
	set s__udg_activeHealingSpray[1]= true
	set s__udg_activeHealingSpray[2]= true
	set s__udg_activeHealingSpray[3]= true
	set s__udg_activeHealingSpray[4]= true
	set s__udg_activeHealingSpray[5]= true
	set s__udg_activeHealingSpray[6]= true
	set s__udg_activeHealingSpray[7]= true
	set s__udg_activeHealingSpray[8]= true
	set s__udg_activeHealingSpray[9]= true
	set s__udg_activeHealingSpray[10]= true
	set s__udg_activeHealingSpray[11]= true
	set s__udg_activeHealingSpray[12]= true
	set s__udg_activeChemicalRage[0]= true
	set s__udg_activeChemicalRage[1]= true
	set s__udg_activeChemicalRage[2]= true
	set s__udg_activeChemicalRage[3]= true
	set s__udg_activeChemicalRage[4]= true
	set s__udg_activeChemicalRage[5]= true
	set s__udg_activeChemicalRage[6]= true
	set s__udg_activeChemicalRage[7]= true
	set s__udg_activeChemicalRage[8]= true
	set s__udg_activeChemicalRage[9]= true
	set s__udg_activeChemicalRage[10]= true
	set s__udg_activeChemicalRage[11]= true
	set s__udg_activeChemicalRage[12]= true
	set s__udg_activeAcidBomb[0]= true
	set s__udg_activeAcidBomb[1]= true
	set s__udg_activeAcidBomb[2]= true
	set s__udg_activeAcidBomb[3]= true
	set s__udg_activeAcidBomb[4]= true
	set s__udg_activeAcidBomb[5]= true
	set s__udg_activeAcidBomb[6]= true
	set s__udg_activeAcidBomb[7]= true
	set s__udg_activeAcidBomb[8]= true
	set s__udg_activeAcidBomb[9]= true
	set s__udg_activeAcidBomb[10]= true
	set s__udg_activeAcidBomb[11]= true
	set s__udg_activeAcidBomb[12]= true
	set s__udg_activeTransmute[0]= true
	set s__udg_activeTransmute[1]= true
	set s__udg_activeTransmute[2]= true
	set s__udg_activeTransmute[3]= true
	set s__udg_activeTransmute[4]= true
	set s__udg_activeTransmute[5]= true
	set s__udg_activeTransmute[6]= true
	set s__udg_activeTransmute[7]= true
	set s__udg_activeTransmute[8]= true
	set s__udg_activeTransmute[9]= true
	set s__udg_activeTransmute[10]= true
	set s__udg_activeTransmute[11]= true
	set s__udg_activeTransmute[12]= true
	set s__udg_activeForkedLightning[0]= true
	set s__udg_activeForkedLightning[1]= true
	set s__udg_activeForkedLightning[2]= true
	set s__udg_activeForkedLightning[3]= true
	set s__udg_activeForkedLightning[4]= true
	set s__udg_activeForkedLightning[5]= true
	set s__udg_activeForkedLightning[6]= true
	set s__udg_activeForkedLightning[7]= true
	set s__udg_activeForkedLightning[8]= true
	set s__udg_activeForkedLightning[9]= true
	set s__udg_activeForkedLightning[10]= true
	set s__udg_activeForkedLightning[11]= true
	set s__udg_activeForkedLightning[12]= true
	set s__udg_activeFrostArrows[0]= true
	set s__udg_activeFrostArrows[1]= true
	set s__udg_activeFrostArrows[2]= true
	set s__udg_activeFrostArrows[3]= true
	set s__udg_activeFrostArrows[4]= true
	set s__udg_activeFrostArrows[5]= true
	set s__udg_activeFrostArrows[6]= true
	set s__udg_activeFrostArrows[7]= true
	set s__udg_activeFrostArrows[8]= true
	set s__udg_activeFrostArrows[9]= true
	set s__udg_activeFrostArrows[10]= true
	set s__udg_activeFrostArrows[11]= true
	set s__udg_activeFrostArrows[12]= true
	set s__udg_activeManaShield[0]= true
	set s__udg_activeManaShield[1]= true
	set s__udg_activeManaShield[2]= true
	set s__udg_activeManaShield[3]= true
	set s__udg_activeManaShield[4]= true
	set s__udg_activeManaShield[5]= true
	set s__udg_activeManaShield[6]= true
	set s__udg_activeManaShield[7]= true
	set s__udg_activeManaShield[8]= true
	set s__udg_activeManaShield[9]= true
	set s__udg_activeManaShield[10]= true
	set s__udg_activeManaShield[11]= true
	set s__udg_activeManaShield[12]= true
	set s__udg_activeTornadoNeutral[0]= true
	set s__udg_activeTornadoNeutral[1]= true
	set s__udg_activeTornadoNeutral[2]= true
	set s__udg_activeTornadoNeutral[3]= true
	set s__udg_activeTornadoNeutral[4]= true
	set s__udg_activeTornadoNeutral[5]= true
	set s__udg_activeTornadoNeutral[6]= true
	set s__udg_activeTornadoNeutral[7]= true
	set s__udg_activeTornadoNeutral[8]= true
	set s__udg_activeTornadoNeutral[9]= true
	set s__udg_activeTornadoNeutral[10]= true
	set s__udg_activeTornadoNeutral[11]= true
	set s__udg_activeTornadoNeutral[12]= true
	set s__udg_activePocketFactory[0]= true
	set s__udg_activePocketFactory[1]= true
	set s__udg_activePocketFactory[2]= true
	set s__udg_activePocketFactory[3]= true
	set s__udg_activePocketFactory[4]= true
	set s__udg_activePocketFactory[5]= true
	set s__udg_activePocketFactory[6]= true
	set s__udg_activePocketFactory[7]= true
	set s__udg_activePocketFactory[8]= true
	set s__udg_activePocketFactory[9]= true
	set s__udg_activePocketFactory[10]= true
	set s__udg_activePocketFactory[11]= true
	set s__udg_activePocketFactory[12]= true
	set s__udg_activeClusterRockets[0]= true
	set s__udg_activeClusterRockets[1]= true
	set s__udg_activeClusterRockets[2]= true
	set s__udg_activeClusterRockets[3]= true
	set s__udg_activeClusterRockets[4]= true
	set s__udg_activeClusterRockets[5]= true
	set s__udg_activeClusterRockets[6]= true
	set s__udg_activeClusterRockets[7]= true
	set s__udg_activeClusterRockets[8]= true
	set s__udg_activeClusterRockets[9]= true
	set s__udg_activeClusterRockets[10]= true
	set s__udg_activeClusterRockets[11]= true
	set s__udg_activeClusterRockets[12]= true
	set s__udg_activeRoboGoblin[0]= true
	set s__udg_activeRoboGoblin[1]= true
	set s__udg_activeRoboGoblin[2]= true
	set s__udg_activeRoboGoblin[3]= true
	set s__udg_activeRoboGoblin[4]= true
	set s__udg_activeRoboGoblin[5]= true
	set s__udg_activeRoboGoblin[6]= true
	set s__udg_activeRoboGoblin[7]= true
	set s__udg_activeRoboGoblin[8]= true
	set s__udg_activeRoboGoblin[9]= true
	set s__udg_activeRoboGoblin[10]= true
	set s__udg_activeRoboGoblin[11]= true
	set s__udg_activeRoboGoblin[12]= true
	set s__udg_activeSummonBear[0]= true
	set s__udg_activeSummonBear[1]= true
	set s__udg_activeSummonBear[2]= true
	set s__udg_activeSummonBear[3]= true
	set s__udg_activeSummonBear[4]= true
	set s__udg_activeSummonBear[5]= true
	set s__udg_activeSummonBear[6]= true
	set s__udg_activeSummonBear[7]= true
	set s__udg_activeSummonBear[8]= true
	set s__udg_activeSummonBear[9]= true
	set s__udg_activeSummonBear[10]= true
	set s__udg_activeSummonBear[11]= true
	set s__udg_activeSummonBear[12]= true
	set s__udg_activeSummonQuilbeast[0]= true
	set s__udg_activeSummonQuilbeast[1]= true
	set s__udg_activeSummonQuilbeast[2]= true
	set s__udg_activeSummonQuilbeast[3]= true
	set s__udg_activeSummonQuilbeast[4]= true
	set s__udg_activeSummonQuilbeast[5]= true
	set s__udg_activeSummonQuilbeast[6]= true
	set s__udg_activeSummonQuilbeast[7]= true
	set s__udg_activeSummonQuilbeast[8]= true
	set s__udg_activeSummonQuilbeast[9]= true
	set s__udg_activeSummonQuilbeast[10]= true
	set s__udg_activeSummonQuilbeast[11]= true
	set s__udg_activeSummonQuilbeast[12]= true
	set s__udg_activeSummonHawk[0]= true
	set s__udg_activeSummonHawk[1]= true
	set s__udg_activeSummonHawk[2]= true
	set s__udg_activeSummonHawk[3]= true
	set s__udg_activeSummonHawk[4]= true
	set s__udg_activeSummonHawk[5]= true
	set s__udg_activeSummonHawk[6]= true
	set s__udg_activeSummonHawk[7]= true
	set s__udg_activeSummonHawk[8]= true
	set s__udg_activeSummonHawk[9]= true
	set s__udg_activeSummonHawk[10]= true
	set s__udg_activeSummonHawk[11]= true
	set s__udg_activeSummonHawk[12]= true
	set s__udg_activeStampede[0]= true
	set s__udg_activeStampede[1]= true
	set s__udg_activeStampede[2]= true
	set s__udg_activeStampede[3]= true
	set s__udg_activeStampede[4]= true
	set s__udg_activeStampede[5]= true
	set s__udg_activeStampede[6]= true
	set s__udg_activeStampede[7]= true
	set s__udg_activeStampede[8]= true
	set s__udg_activeStampede[9]= true
	set s__udg_activeStampede[10]= true
	set s__udg_activeStampede[11]= true
	set s__udg_activeStampede[12]= true
	set s__udg_activeBreathOfFire[0]= true
	set s__udg_activeBreathOfFire[1]= true
	set s__udg_activeBreathOfFire[2]= true
	set s__udg_activeBreathOfFire[3]= true
	set s__udg_activeBreathOfFire[4]= true
	set s__udg_activeBreathOfFire[5]= true
	set s__udg_activeBreathOfFire[6]= true
	set s__udg_activeBreathOfFire[7]= true
	set s__udg_activeBreathOfFire[8]= true
	set s__udg_activeBreathOfFire[9]= true
	set s__udg_activeBreathOfFire[10]= true
	set s__udg_activeBreathOfFire[11]= true
	set s__udg_activeBreathOfFire[12]= true
	set s__udg_activeDrunkenHaze[0]= true
	set s__udg_activeDrunkenHaze[1]= true
	set s__udg_activeDrunkenHaze[2]= true
	set s__udg_activeDrunkenHaze[3]= true
	set s__udg_activeDrunkenHaze[4]= true
	set s__udg_activeDrunkenHaze[5]= true
	set s__udg_activeDrunkenHaze[6]= true
	set s__udg_activeDrunkenHaze[7]= true
	set s__udg_activeDrunkenHaze[8]= true
	set s__udg_activeDrunkenHaze[9]= true
	set s__udg_activeDrunkenHaze[10]= true
	set s__udg_activeDrunkenHaze[11]= true
	set s__udg_activeDrunkenHaze[12]= true
	set s__udg_activeStormEarthFire[0]= true
	set s__udg_activeStormEarthFire[1]= true
	set s__udg_activeStormEarthFire[2]= true
	set s__udg_activeStormEarthFire[3]= true
	set s__udg_activeStormEarthFire[4]= true
	set s__udg_activeStormEarthFire[5]= true
	set s__udg_activeStormEarthFire[6]= true
	set s__udg_activeStormEarthFire[7]= true
	set s__udg_activeStormEarthFire[8]= true
	set s__udg_activeStormEarthFire[9]= true
	set s__udg_activeStormEarthFire[10]= true
	set s__udg_activeStormEarthFire[11]= true
	set s__udg_activeStormEarthFire[12]= true
	set s__udg_activeSilenceNeutral[0]= true
	set s__udg_activeSilenceNeutral[1]= true
	set s__udg_activeSilenceNeutral[2]= true
	set s__udg_activeSilenceNeutral[3]= true
	set s__udg_activeSilenceNeutral[4]= true
	set s__udg_activeSilenceNeutral[5]= true
	set s__udg_activeSilenceNeutral[6]= true
	set s__udg_activeSilenceNeutral[7]= true
	set s__udg_activeSilenceNeutral[8]= true
	set s__udg_activeSilenceNeutral[9]= true
	set s__udg_activeSilenceNeutral[10]= true
	set s__udg_activeSilenceNeutral[11]= true
	set s__udg_activeSilenceNeutral[12]= true
	set s__udg_activeBlackArrow[0]= true
	set s__udg_activeBlackArrow[1]= true
	set s__udg_activeBlackArrow[2]= true
	set s__udg_activeBlackArrow[3]= true
	set s__udg_activeBlackArrow[4]= true
	set s__udg_activeBlackArrow[5]= true
	set s__udg_activeBlackArrow[6]= true
	set s__udg_activeBlackArrow[7]= true
	set s__udg_activeBlackArrow[8]= true
	set s__udg_activeBlackArrow[9]= true
	set s__udg_activeBlackArrow[10]= true
	set s__udg_activeBlackArrow[11]= true
	set s__udg_activeBlackArrow[12]= true
	set s__udg_activeLifeDrain[0]= true
	set s__udg_activeLifeDrain[1]= true
	set s__udg_activeLifeDrain[2]= true
	set s__udg_activeLifeDrain[3]= true
	set s__udg_activeLifeDrain[4]= true
	set s__udg_activeLifeDrain[5]= true
	set s__udg_activeLifeDrain[6]= true
	set s__udg_activeLifeDrain[7]= true
	set s__udg_activeLifeDrain[8]= true
	set s__udg_activeLifeDrain[9]= true
	set s__udg_activeLifeDrain[10]= true
	set s__udg_activeLifeDrain[11]= true
	set s__udg_activeLifeDrain[12]= true
	set s__udg_activeCharm[0]= true
	set s__udg_activeCharm[1]= true
	set s__udg_activeCharm[2]= true
	set s__udg_activeCharm[3]= true
	set s__udg_activeCharm[4]= true
	set s__udg_activeCharm[5]= true
	set s__udg_activeCharm[6]= true
	set s__udg_activeCharm[7]= true
	set s__udg_activeCharm[8]= true
	set s__udg_activeCharm[9]= true
	set s__udg_activeCharm[10]= true
	set s__udg_activeCharm[11]= true
	set s__udg_activeCharm[12]= true
	set s__udg_activeSoulBurn[0]= true
	set s__udg_activeSoulBurn[1]= true
	set s__udg_activeSoulBurn[2]= true
	set s__udg_activeSoulBurn[3]= true
	set s__udg_activeSoulBurn[4]= true
	set s__udg_activeSoulBurn[5]= true
	set s__udg_activeSoulBurn[6]= true
	set s__udg_activeSoulBurn[7]= true
	set s__udg_activeSoulBurn[8]= true
	set s__udg_activeSoulBurn[9]= true
	set s__udg_activeSoulBurn[10]= true
	set s__udg_activeSoulBurn[11]= true
	set s__udg_activeSoulBurn[12]= true
	set s__udg_activeLavaSpawn[0]= true
	set s__udg_activeLavaSpawn[1]= true
	set s__udg_activeLavaSpawn[2]= true
	set s__udg_activeLavaSpawn[3]= true
	set s__udg_activeLavaSpawn[4]= true
	set s__udg_activeLavaSpawn[5]= true
	set s__udg_activeLavaSpawn[6]= true
	set s__udg_activeLavaSpawn[7]= true
	set s__udg_activeLavaSpawn[8]= true
	set s__udg_activeLavaSpawn[9]= true
	set s__udg_activeLavaSpawn[10]= true
	set s__udg_activeLavaSpawn[11]= true
	set s__udg_activeLavaSpawn[12]= true
	set s__udg_activeVolcano[0]= true
	set s__udg_activeVolcano[1]= true
	set s__udg_activeVolcano[2]= true
	set s__udg_activeVolcano[3]= true
	set s__udg_activeVolcano[4]= true
	set s__udg_activeVolcano[5]= true
	set s__udg_activeVolcano[6]= true
	set s__udg_activeVolcano[7]= true
	set s__udg_activeVolcano[8]= true
	set s__udg_activeVolcano[9]= true
	set s__udg_activeVolcano[10]= true
	set s__udg_activeVolcano[11]= true
	set s__udg_activeVolcano[12]= true
	set s__udg_activeRainOfFire[0]= true
	set s__udg_activeRainOfFire[1]= true
	set s__udg_activeRainOfFire[2]= true
	set s__udg_activeRainOfFire[3]= true
	set s__udg_activeRainOfFire[4]= true
	set s__udg_activeRainOfFire[5]= true
	set s__udg_activeRainOfFire[6]= true
	set s__udg_activeRainOfFire[7]= true
	set s__udg_activeRainOfFire[8]= true
	set s__udg_activeRainOfFire[9]= true
	set s__udg_activeRainOfFire[10]= true
	set s__udg_activeRainOfFire[11]= true
	set s__udg_activeRainOfFire[12]= true
	set s__udg_activeHowlOfTerror[0]= true
	set s__udg_activeHowlOfTerror[1]= true
	set s__udg_activeHowlOfTerror[2]= true
	set s__udg_activeHowlOfTerror[3]= true
	set s__udg_activeHowlOfTerror[4]= true
	set s__udg_activeHowlOfTerror[5]= true
	set s__udg_activeHowlOfTerror[6]= true
	set s__udg_activeHowlOfTerror[7]= true
	set s__udg_activeHowlOfTerror[8]= true
	set s__udg_activeHowlOfTerror[9]= true
	set s__udg_activeHowlOfTerror[10]= true
	set s__udg_activeHowlOfTerror[11]= true
	set s__udg_activeHowlOfTerror[12]= true
	set s__udg_activeDoom[0]= true
	set s__udg_activeDoom[1]= true
	set s__udg_activeDoom[2]= true
	set s__udg_activeDoom[3]= true
	set s__udg_activeDoom[4]= true
	set s__udg_activeDoom[5]= true
	set s__udg_activeDoom[6]= true
	set s__udg_activeDoom[7]= true
	set s__udg_activeDoom[8]= true
	set s__udg_activeDoom[9]= true
	set s__udg_activeDoom[10]= true
	set s__udg_activeDoom[11]= true
	set s__udg_activeDoom[12]= true
	set udg_WeakenGroup=CreateGroup()
	set udg_LivingBombGroup=CreateGroup()
	set udg_DalaranRuneGroup=CreateGroup()
	set s__udg_PrismaticShieldCounter[0]= 0
	set s__udg_PrismaticShieldCounter[1]= 0
	set s__udg_PrismaticShieldCounter[2]= 0
	set s__udg_PrismaticShieldCounter[3]= 0
	set s__udg_PrismaticShieldCounter[4]= 0
	set s__udg_PrismaticShieldCounter[5]= 0
	set s__udg_PrismaticShieldCounter[6]= 0
	set s__udg_PrismaticShieldCounter[7]= 0
	set s__udg_PrismaticShieldCounter[8]= 0
	set s__udg_PrismaticShieldCounter[9]= 0
	set s__udg_PrismaticShieldCounter[10]= 0
	set s__udg_PrismaticShieldCounter[11]= 0
	set s__udg_PrismaticShieldCounter[12]= 0
	set s__udg_activeMagicShield[0]= true
	set s__udg_activeMagicShield[1]= true
	set s__udg_activeMagicShield[2]= true
	set s__udg_activeMagicShield[3]= true
	set s__udg_activeMagicShield[4]= true
	set s__udg_activeMagicShield[5]= true
	set s__udg_activeMagicShield[6]= true
	set s__udg_activeMagicShield[7]= true
	set s__udg_activeMagicShield[8]= true
	set s__udg_activeMagicShield[9]= true
	set s__udg_activeMagicShield[10]= true
	set s__udg_activeMagicShield[11]= true
	set s__udg_activeMagicShield[12]= true
	set s__udg_activeProtectiveField[0]= true
	set s__udg_activeProtectiveField[1]= true
	set s__udg_activeProtectiveField[2]= true
	set s__udg_activeProtectiveField[3]= true
	set s__udg_activeProtectiveField[4]= true
	set s__udg_activeProtectiveField[5]= true
	set s__udg_activeProtectiveField[6]= true
	set s__udg_activeProtectiveField[7]= true
	set s__udg_activeProtectiveField[8]= true
	set s__udg_activeProtectiveField[9]= true
	set s__udg_activeProtectiveField[10]= true
	set s__udg_activeProtectiveField[11]= true
	set s__udg_activeProtectiveField[12]= true
	set s__udg_activeDefendDalaran[0]= true
	set s__udg_activeDefendDalaran[1]= true
	set s__udg_activeDefendDalaran[2]= true
	set s__udg_activeDefendDalaran[3]= true
	set s__udg_activeDefendDalaran[4]= true
	set s__udg_activeDefendDalaran[5]= true
	set s__udg_activeDefendDalaran[6]= true
	set s__udg_activeDefendDalaran[7]= true
	set s__udg_activeDefendDalaran[8]= true
	set s__udg_activeDefendDalaran[9]= true
	set s__udg_activeDefendDalaran[10]= true
	set s__udg_activeDefendDalaran[11]= true
	set s__udg_activeDefendDalaran[12]= true
	set s__udg_activeManaShieldDalaran[0]= true
	set s__udg_activeManaShieldDalaran[1]= true
	set s__udg_activeManaShieldDalaran[2]= true
	set s__udg_activeManaShieldDalaran[3]= true
	set s__udg_activeManaShieldDalaran[4]= true
	set s__udg_activeManaShieldDalaran[5]= true
	set s__udg_activeManaShieldDalaran[6]= true
	set s__udg_activeManaShieldDalaran[7]= true
	set s__udg_activeManaShieldDalaran[8]= true
	set s__udg_activeManaShieldDalaran[9]= true
	set s__udg_activeManaShieldDalaran[10]= true
	set s__udg_activeManaShieldDalaran[11]= true
	set s__udg_activeManaShieldDalaran[12]= true
	set s__udg_activeEnergyWhip[0]= true
	set s__udg_activeEnergyWhip[1]= true
	set s__udg_activeEnergyWhip[2]= true
	set s__udg_activeEnergyWhip[3]= true
	set s__udg_activeEnergyWhip[4]= true
	set s__udg_activeEnergyWhip[5]= true
	set s__udg_activeEnergyWhip[6]= true
	set s__udg_activeEnergyWhip[7]= true
	set s__udg_activeEnergyWhip[8]= true
	set s__udg_activeEnergyWhip[9]= true
	set s__udg_activeEnergyWhip[10]= true
	set s__udg_activeEnergyWhip[11]= true
	set s__udg_activeEnergyWhip[12]= true
	set s__udg_activeDalaranRune[0]= true
	set s__udg_activeDalaranRune[1]= true
	set s__udg_activeDalaranRune[2]= true
	set s__udg_activeDalaranRune[3]= true
	set s__udg_activeDalaranRune[4]= true
	set s__udg_activeDalaranRune[5]= true
	set s__udg_activeDalaranRune[6]= true
	set s__udg_activeDalaranRune[7]= true
	set s__udg_activeDalaranRune[8]= true
	set s__udg_activeDalaranRune[9]= true
	set s__udg_activeDalaranRune[10]= true
	set s__udg_activeDalaranRune[11]= true
	set s__udg_activeDalaranRune[12]= true
	set s__udg_activeEliminateMagic[0]= true
	set s__udg_activeEliminateMagic[1]= true
	set s__udg_activeEliminateMagic[2]= true
	set s__udg_activeEliminateMagic[3]= true
	set s__udg_activeEliminateMagic[4]= true
	set s__udg_activeEliminateMagic[5]= true
	set s__udg_activeEliminateMagic[6]= true
	set s__udg_activeEliminateMagic[7]= true
	set s__udg_activeEliminateMagic[8]= true
	set s__udg_activeEliminateMagic[9]= true
	set s__udg_activeEliminateMagic[10]= true
	set s__udg_activeEliminateMagic[11]= true
	set s__udg_activeEliminateMagic[12]= true
	set s__udg_activeWeaken[0]= true
	set s__udg_activeWeaken[1]= true
	set s__udg_activeWeaken[2]= true
	set s__udg_activeWeaken[3]= true
	set s__udg_activeWeaken[4]= true
	set s__udg_activeWeaken[5]= true
	set s__udg_activeWeaken[6]= true
	set s__udg_activeWeaken[7]= true
	set s__udg_activeWeaken[8]= true
	set s__udg_activeWeaken[9]= true
	set s__udg_activeWeaken[10]= true
	set s__udg_activeWeaken[11]= true
	set s__udg_activeWeaken[12]= true
	set s__udg_activeBarrierDalaran[0]= true
	set s__udg_activeBarrierDalaran[1]= true
	set s__udg_activeBarrierDalaran[2]= true
	set s__udg_activeBarrierDalaran[3]= true
	set s__udg_activeBarrierDalaran[4]= true
	set s__udg_activeBarrierDalaran[5]= true
	set s__udg_activeBarrierDalaran[6]= true
	set s__udg_activeBarrierDalaran[7]= true
	set s__udg_activeBarrierDalaran[8]= true
	set s__udg_activeBarrierDalaran[9]= true
	set s__udg_activeBarrierDalaran[10]= true
	set s__udg_activeBarrierDalaran[11]= true
	set s__udg_activeBarrierDalaran[12]= true
	set s__udg_activeAbsorbManaDalaran[0]= true
	set s__udg_activeAbsorbManaDalaran[1]= true
	set s__udg_activeAbsorbManaDalaran[2]= true
	set s__udg_activeAbsorbManaDalaran[3]= true
	set s__udg_activeAbsorbManaDalaran[4]= true
	set s__udg_activeAbsorbManaDalaran[5]= true
	set s__udg_activeAbsorbManaDalaran[6]= true
	set s__udg_activeAbsorbManaDalaran[7]= true
	set s__udg_activeAbsorbManaDalaran[8]= true
	set s__udg_activeAbsorbManaDalaran[9]= true
	set s__udg_activeAbsorbManaDalaran[10]= true
	set s__udg_activeAbsorbManaDalaran[11]= true
	set s__udg_activeAbsorbManaDalaran[12]= true
	set s__udg_activeFusion[0]= true
	set s__udg_activeFusion[1]= true
	set s__udg_activeFusion[2]= true
	set s__udg_activeFusion[3]= true
	set s__udg_activeFusion[4]= true
	set s__udg_activeFusion[5]= true
	set s__udg_activeFusion[6]= true
	set s__udg_activeFusion[7]= true
	set s__udg_activeFusion[8]= true
	set s__udg_activeFusion[9]= true
	set s__udg_activeFusion[10]= true
	set s__udg_activeFusion[11]= true
	set s__udg_activeFusion[12]= true
	set s__udg_activeInversion[0]= true
	set s__udg_activeInversion[1]= true
	set s__udg_activeInversion[2]= true
	set s__udg_activeInversion[3]= true
	set s__udg_activeInversion[4]= true
	set s__udg_activeInversion[5]= true
	set s__udg_activeInversion[6]= true
	set s__udg_activeInversion[7]= true
	set s__udg_activeInversion[8]= true
	set s__udg_activeInversion[9]= true
	set s__udg_activeInversion[10]= true
	set s__udg_activeInversion[11]= true
	set s__udg_activeInversion[12]= true
	set s__udg_activeWisdomEmbrace[0]= true
	set s__udg_activeWisdomEmbrace[1]= true
	set s__udg_activeWisdomEmbrace[2]= true
	set s__udg_activeWisdomEmbrace[3]= true
	set s__udg_activeWisdomEmbrace[4]= true
	set s__udg_activeWisdomEmbrace[5]= true
	set s__udg_activeWisdomEmbrace[6]= true
	set s__udg_activeWisdomEmbrace[7]= true
	set s__udg_activeWisdomEmbrace[8]= true
	set s__udg_activeWisdomEmbrace[9]= true
	set s__udg_activeWisdomEmbrace[10]= true
	set s__udg_activeWisdomEmbrace[11]= true
	set s__udg_activeWisdomEmbrace[12]= true
	set s__udg_activePolymorphDalaran[0]= true
	set s__udg_activePolymorphDalaran[1]= true
	set s__udg_activePolymorphDalaran[2]= true
	set s__udg_activePolymorphDalaran[3]= true
	set s__udg_activePolymorphDalaran[4]= true
	set s__udg_activePolymorphDalaran[5]= true
	set s__udg_activePolymorphDalaran[6]= true
	set s__udg_activePolymorphDalaran[7]= true
	set s__udg_activePolymorphDalaran[8]= true
	set s__udg_activePolymorphDalaran[9]= true
	set s__udg_activePolymorphDalaran[10]= true
	set s__udg_activePolymorphDalaran[11]= true
	set s__udg_activePolymorphDalaran[12]= true
	set s__udg_activeMagicalDestruction[0]= true
	set s__udg_activeMagicalDestruction[1]= true
	set s__udg_activeMagicalDestruction[2]= true
	set s__udg_activeMagicalDestruction[3]= true
	set s__udg_activeMagicalDestruction[4]= true
	set s__udg_activeMagicalDestruction[5]= true
	set s__udg_activeMagicalDestruction[6]= true
	set s__udg_activeMagicalDestruction[7]= true
	set s__udg_activeMagicalDestruction[8]= true
	set s__udg_activeMagicalDestruction[9]= true
	set s__udg_activeMagicalDestruction[10]= true
	set s__udg_activeMagicalDestruction[11]= true
	set s__udg_activeMagicalDestruction[12]= true
	set s__udg_activeBurn[0]= true
	set s__udg_activeBurn[1]= true
	set s__udg_activeBurn[2]= true
	set s__udg_activeBurn[3]= true
	set s__udg_activeBurn[4]= true
	set s__udg_activeBurn[5]= true
	set s__udg_activeBurn[6]= true
	set s__udg_activeBurn[7]= true
	set s__udg_activeBurn[8]= true
	set s__udg_activeBurn[9]= true
	set s__udg_activeBurn[10]= true
	set s__udg_activeBurn[11]= true
	set s__udg_activeBurn[12]= true
	set s__udg_activeLivingBomb[0]= true
	set s__udg_activeLivingBomb[1]= true
	set s__udg_activeLivingBomb[2]= true
	set s__udg_activeLivingBomb[3]= true
	set s__udg_activeLivingBomb[4]= true
	set s__udg_activeLivingBomb[5]= true
	set s__udg_activeLivingBomb[6]= true
	set s__udg_activeLivingBomb[7]= true
	set s__udg_activeLivingBomb[8]= true
	set s__udg_activeLivingBomb[9]= true
	set s__udg_activeLivingBomb[10]= true
	set s__udg_activeLivingBomb[11]= true
	set s__udg_activeLivingBomb[12]= true
	set s__udg_activeFuryOfTheFlame[0]= true
	set s__udg_activeFuryOfTheFlame[1]= true
	set s__udg_activeFuryOfTheFlame[2]= true
	set s__udg_activeFuryOfTheFlame[3]= true
	set s__udg_activeFuryOfTheFlame[4]= true
	set s__udg_activeFuryOfTheFlame[5]= true
	set s__udg_activeFuryOfTheFlame[6]= true
	set s__udg_activeFuryOfTheFlame[7]= true
	set s__udg_activeFuryOfTheFlame[8]= true
	set s__udg_activeFuryOfTheFlame[9]= true
	set s__udg_activeFuryOfTheFlame[10]= true
	set s__udg_activeFuryOfTheFlame[11]= true
	set s__udg_activeFuryOfTheFlame[12]= true
	set s__udg_activeEarthfall[0]= true
	set s__udg_activeEarthfall[1]= true
	set s__udg_activeEarthfall[2]= true
	set s__udg_activeEarthfall[3]= true
	set s__udg_activeEarthfall[4]= true
	set s__udg_activeEarthfall[5]= true
	set s__udg_activeEarthfall[6]= true
	set s__udg_activeEarthfall[7]= true
	set s__udg_activeEarthfall[8]= true
	set s__udg_activeEarthfall[9]= true
	set s__udg_activeEarthfall[10]= true
	set s__udg_activeEarthfall[11]= true
	set s__udg_activeEarthfall[12]= true
	set s__udg_activeBurstOfRoots[0]= true
	set s__udg_activeBurstOfRoots[1]= true
	set s__udg_activeBurstOfRoots[2]= true
	set s__udg_activeBurstOfRoots[3]= true
	set s__udg_activeBurstOfRoots[4]= true
	set s__udg_activeBurstOfRoots[5]= true
	set s__udg_activeBurstOfRoots[6]= true
	set s__udg_activeBurstOfRoots[7]= true
	set s__udg_activeBurstOfRoots[8]= true
	set s__udg_activeBurstOfRoots[9]= true
	set s__udg_activeBurstOfRoots[10]= true
	set s__udg_activeBurstOfRoots[11]= true
	set s__udg_activeBurstOfRoots[12]= true
	set s__udg_activeMetamorphicForm[0]= true
	set s__udg_activeMetamorphicForm[1]= true
	set s__udg_activeMetamorphicForm[2]= true
	set s__udg_activeMetamorphicForm[3]= true
	set s__udg_activeMetamorphicForm[4]= true
	set s__udg_activeMetamorphicForm[5]= true
	set s__udg_activeMetamorphicForm[6]= true
	set s__udg_activeMetamorphicForm[7]= true
	set s__udg_activeMetamorphicForm[8]= true
	set s__udg_activeMetamorphicForm[9]= true
	set s__udg_activeMetamorphicForm[10]= true
	set s__udg_activeMetamorphicForm[11]= true
	set s__udg_activeMetamorphicForm[12]= true
	set s__udg_activeArcaneField[0]= true
	set s__udg_activeArcaneField[1]= true
	set s__udg_activeArcaneField[2]= true
	set s__udg_activeArcaneField[3]= true
	set s__udg_activeArcaneField[4]= true
	set s__udg_activeArcaneField[5]= true
	set s__udg_activeArcaneField[6]= true
	set s__udg_activeArcaneField[7]= true
	set s__udg_activeArcaneField[8]= true
	set s__udg_activeArcaneField[9]= true
	set s__udg_activeArcaneField[10]= true
	set s__udg_activeArcaneField[11]= true
	set s__udg_activeArcaneField[12]= true
	set s__udg_activeFrostPillar[0]= true
	set s__udg_activeFrostPillar[1]= true
	set s__udg_activeFrostPillar[2]= true
	set s__udg_activeFrostPillar[3]= true
	set s__udg_activeFrostPillar[4]= true
	set s__udg_activeFrostPillar[5]= true
	set s__udg_activeFrostPillar[6]= true
	set s__udg_activeFrostPillar[7]= true
	set s__udg_activeFrostPillar[8]= true
	set s__udg_activeFrostPillar[9]= true
	set s__udg_activeFrostPillar[10]= true
	set s__udg_activeFrostPillar[11]= true
	set s__udg_activeFrostPillar[12]= true
	set s__udg_activeAquaElemental[0]= true
	set s__udg_activeAquaElemental[1]= true
	set s__udg_activeAquaElemental[2]= true
	set s__udg_activeAquaElemental[3]= true
	set s__udg_activeAquaElemental[4]= true
	set s__udg_activeAquaElemental[5]= true
	set s__udg_activeAquaElemental[6]= true
	set s__udg_activeAquaElemental[7]= true
	set s__udg_activeAquaElemental[8]= true
	set s__udg_activeAquaElemental[9]= true
	set s__udg_activeAquaElemental[10]= true
	set s__udg_activeAquaElemental[11]= true
	set s__udg_activeAquaElemental[12]= true
	set s__udg_activeAbsorbMagic[0]= true
	set s__udg_activeAbsorbMagic[1]= true
	set s__udg_activeAbsorbMagic[2]= true
	set s__udg_activeAbsorbMagic[3]= true
	set s__udg_activeAbsorbMagic[4]= true
	set s__udg_activeAbsorbMagic[5]= true
	set s__udg_activeAbsorbMagic[6]= true
	set s__udg_activeAbsorbMagic[7]= true
	set s__udg_activeAbsorbMagic[8]= true
	set s__udg_activeAbsorbMagic[9]= true
	set s__udg_activeAbsorbMagic[10]= true
	set s__udg_activeAbsorbMagic[11]= true
	set s__udg_activeAbsorbMagic[12]= true
	set s__udg_activeArcaneLeash[0]= true
	set s__udg_activeArcaneLeash[1]= true
	set s__udg_activeArcaneLeash[2]= true
	set s__udg_activeArcaneLeash[3]= true
	set s__udg_activeArcaneLeash[4]= true
	set s__udg_activeArcaneLeash[5]= true
	set s__udg_activeArcaneLeash[6]= true
	set s__udg_activeArcaneLeash[7]= true
	set s__udg_activeArcaneLeash[8]= true
	set s__udg_activeArcaneLeash[9]= true
	set s__udg_activeArcaneLeash[10]= true
	set s__udg_activeArcaneLeash[11]= true
	set s__udg_activeArcaneLeash[12]= true
	set s__udg_activeBlinkDalaran[0]= true
	set s__udg_activeBlinkDalaran[1]= true
	set s__udg_activeBlinkDalaran[2]= true
	set s__udg_activeBlinkDalaran[3]= true
	set s__udg_activeBlinkDalaran[4]= true
	set s__udg_activeBlinkDalaran[5]= true
	set s__udg_activeBlinkDalaran[6]= true
	set s__udg_activeBlinkDalaran[7]= true
	set s__udg_activeBlinkDalaran[8]= true
	set s__udg_activeBlinkDalaran[9]= true
	set s__udg_activeBlinkDalaran[10]= true
	set s__udg_activeBlinkDalaran[11]= true
	set s__udg_activeBlinkDalaran[12]= true
	set s__udg_activeSummonEarthElemental[0]= true
	set s__udg_activeSummonEarthElemental[1]= true
	set s__udg_activeSummonEarthElemental[2]= true
	set s__udg_activeSummonEarthElemental[3]= true
	set s__udg_activeSummonEarthElemental[4]= true
	set s__udg_activeSummonEarthElemental[5]= true
	set s__udg_activeSummonEarthElemental[6]= true
	set s__udg_activeSummonEarthElemental[7]= true
	set s__udg_activeSummonEarthElemental[8]= true
	set s__udg_activeSummonEarthElemental[9]= true
	set s__udg_activeSummonEarthElemental[10]= true
	set s__udg_activeSummonEarthElemental[11]= true
	set s__udg_activeSummonEarthElemental[12]= true
	set s__udg_activeSummonWaterEleDALARAN[0]= true
	set s__udg_activeSummonWaterEleDALARAN[1]= true
	set s__udg_activeSummonWaterEleDALARAN[2]= true
	set s__udg_activeSummonWaterEleDALARAN[3]= true
	set s__udg_activeSummonWaterEleDALARAN[4]= true
	set s__udg_activeSummonWaterEleDALARAN[5]= true
	set s__udg_activeSummonWaterEleDALARAN[6]= true
	set s__udg_activeSummonWaterEleDALARAN[7]= true
	set s__udg_activeSummonWaterEleDALARAN[8]= true
	set s__udg_activeSummonWaterEleDALARAN[9]= true
	set s__udg_activeSummonWaterEleDALARAN[10]= true
	set s__udg_activeSummonWaterEleDALARAN[11]= true
	set s__udg_activeSummonWaterEleDALARAN[12]= true
	set s__udg_activeSummonAetherElemental[0]= true
	set s__udg_activeSummonAetherElemental[1]= true
	set s__udg_activeSummonAetherElemental[2]= true
	set s__udg_activeSummonAetherElemental[3]= true
	set s__udg_activeSummonAetherElemental[4]= true
	set s__udg_activeSummonAetherElemental[5]= true
	set s__udg_activeSummonAetherElemental[6]= true
	set s__udg_activeSummonAetherElemental[7]= true
	set s__udg_activeSummonAetherElemental[8]= true
	set s__udg_activeSummonAetherElemental[9]= true
	set s__udg_activeSummonAetherElemental[10]= true
	set s__udg_activeSummonAetherElemental[11]= true
	set s__udg_activeSummonAetherElemental[12]= true
	set s__udg_activeSummonFireElemental[0]= true
	set s__udg_activeSummonFireElemental[1]= true
	set s__udg_activeSummonFireElemental[2]= true
	set s__udg_activeSummonFireElemental[3]= true
	set s__udg_activeSummonFireElemental[4]= true
	set s__udg_activeSummonFireElemental[5]= true
	set s__udg_activeSummonFireElemental[6]= true
	set s__udg_activeSummonFireElemental[7]= true
	set s__udg_activeSummonFireElemental[8]= true
	set s__udg_activeSummonFireElemental[9]= true
	set s__udg_activeSummonFireElemental[10]= true
	set s__udg_activeSummonFireElemental[11]= true
	set s__udg_activeSummonFireElemental[12]= true
	set s__udg_activeArcaneArrow[0]= true
	set s__udg_activeArcaneArrow[1]= true
	set s__udg_activeArcaneArrow[2]= true
	set s__udg_activeArcaneArrow[3]= true
	set s__udg_activeArcaneArrow[4]= true
	set s__udg_activeArcaneArrow[5]= true
	set s__udg_activeArcaneArrow[6]= true
	set s__udg_activeArcaneArrow[7]= true
	set s__udg_activeArcaneArrow[8]= true
	set s__udg_activeArcaneArrow[9]= true
	set s__udg_activeArcaneArrow[10]= true
	set s__udg_activeArcaneArrow[11]= true
	set s__udg_activeArcaneArrow[12]= true
	set s__udg_activeEnchantedQuiver[0]= true
	set s__udg_activeEnchantedQuiver[1]= true
	set s__udg_activeEnchantedQuiver[2]= true
	set s__udg_activeEnchantedQuiver[3]= true
	set s__udg_activeEnchantedQuiver[4]= true
	set s__udg_activeEnchantedQuiver[5]= true
	set s__udg_activeEnchantedQuiver[6]= true
	set s__udg_activeEnchantedQuiver[7]= true
	set s__udg_activeEnchantedQuiver[8]= true
	set s__udg_activeEnchantedQuiver[9]= true
	set s__udg_activeEnchantedQuiver[10]= true
	set s__udg_activeEnchantedQuiver[11]= true
	set s__udg_activeEnchantedQuiver[12]= true
	set s__udg_activeTurmoilOfMagic[0]= true
	set s__udg_activeTurmoilOfMagic[1]= true
	set s__udg_activeTurmoilOfMagic[2]= true
	set s__udg_activeTurmoilOfMagic[3]= true
	set s__udg_activeTurmoilOfMagic[4]= true
	set s__udg_activeTurmoilOfMagic[5]= true
	set s__udg_activeTurmoilOfMagic[6]= true
	set s__udg_activeTurmoilOfMagic[7]= true
	set s__udg_activeTurmoilOfMagic[8]= true
	set s__udg_activeTurmoilOfMagic[9]= true
	set s__udg_activeTurmoilOfMagic[10]= true
	set s__udg_activeTurmoilOfMagic[11]= true
	set s__udg_activeTurmoilOfMagic[12]= true
	set s__udg_activeImplode[0]= true
	set s__udg_activeImplode[1]= true
	set s__udg_activeImplode[2]= true
	set s__udg_activeImplode[3]= true
	set s__udg_activeImplode[4]= true
	set s__udg_activeImplode[5]= true
	set s__udg_activeImplode[6]= true
	set s__udg_activeImplode[7]= true
	set s__udg_activeImplode[8]= true
	set s__udg_activeImplode[9]= true
	set s__udg_activeImplode[10]= true
	set s__udg_activeImplode[11]= true
	set s__udg_activeImplode[12]= true
	set s__udg_activeUnstablePortal[0]= true
	set s__udg_activeUnstablePortal[1]= true
	set s__udg_activeUnstablePortal[2]= true
	set s__udg_activeUnstablePortal[3]= true
	set s__udg_activeUnstablePortal[4]= true
	set s__udg_activeUnstablePortal[5]= true
	set s__udg_activeUnstablePortal[6]= true
	set s__udg_activeUnstablePortal[7]= true
	set s__udg_activeUnstablePortal[8]= true
	set s__udg_activeUnstablePortal[9]= true
	set s__udg_activeUnstablePortal[10]= true
	set s__udg_activeUnstablePortal[11]= true
	set s__udg_activeUnstablePortal[12]= true
	set s__udg_activeBlinkHighWizard[0]= true
	set s__udg_activeBlinkHighWizard[1]= true
	set s__udg_activeBlinkHighWizard[2]= true
	set s__udg_activeBlinkHighWizard[3]= true
	set s__udg_activeBlinkHighWizard[4]= true
	set s__udg_activeBlinkHighWizard[5]= true
	set s__udg_activeBlinkHighWizard[6]= true
	set s__udg_activeBlinkHighWizard[7]= true
	set s__udg_activeBlinkHighWizard[8]= true
	set s__udg_activeBlinkHighWizard[9]= true
	set s__udg_activeBlinkHighWizard[10]= true
	set s__udg_activeBlinkHighWizard[11]= true
	set s__udg_activeBlinkHighWizard[12]= true
	set s__udg_activeBlinkMage[0]= true
	set s__udg_activeBlinkMage[1]= true
	set s__udg_activeBlinkMage[2]= true
	set s__udg_activeBlinkMage[3]= true
	set s__udg_activeBlinkMage[4]= true
	set s__udg_activeBlinkMage[5]= true
	set s__udg_activeBlinkMage[6]= true
	set s__udg_activeBlinkMage[7]= true
	set s__udg_activeBlinkMage[8]= true
	set s__udg_activeBlinkMage[9]= true
	set s__udg_activeBlinkMage[10]= true
	set s__udg_activeBlinkMage[11]= true
	set s__udg_activeBlinkMage[12]= true
	set s__udg_activeManaWard[0]= true
	set s__udg_activeManaWard[1]= true
	set s__udg_activeManaWard[2]= true
	set s__udg_activeManaWard[3]= true
	set s__udg_activeManaWard[4]= true
	set s__udg_activeManaWard[5]= true
	set s__udg_activeManaWard[6]= true
	set s__udg_activeManaWard[7]= true
	set s__udg_activeManaWard[8]= true
	set s__udg_activeManaWard[9]= true
	set s__udg_activeManaWard[10]= true
	set s__udg_activeManaWard[11]= true
	set s__udg_activeManaWard[12]= true
	set s__udg_activeDisruption[0]= true
	set s__udg_activeDisruption[1]= true
	set s__udg_activeDisruption[2]= true
	set s__udg_activeDisruption[3]= true
	set s__udg_activeDisruption[4]= true
	set s__udg_activeDisruption[5]= true
	set s__udg_activeDisruption[6]= true
	set s__udg_activeDisruption[7]= true
	set s__udg_activeDisruption[8]= true
	set s__udg_activeDisruption[9]= true
	set s__udg_activeDisruption[10]= true
	set s__udg_activeDisruption[11]= true
	set s__udg_activeDisruption[12]= true
	set s__udg_activeArcaneWave[0]= true
	set s__udg_activeArcaneWave[1]= true
	set s__udg_activeArcaneWave[2]= true
	set s__udg_activeArcaneWave[3]= true
	set s__udg_activeArcaneWave[4]= true
	set s__udg_activeArcaneWave[5]= true
	set s__udg_activeArcaneWave[6]= true
	set s__udg_activeArcaneWave[7]= true
	set s__udg_activeArcaneWave[8]= true
	set s__udg_activeArcaneWave[9]= true
	set s__udg_activeArcaneWave[10]= true
	set s__udg_activeArcaneWave[11]= true
	set s__udg_activeArcaneWave[12]= true
	set s__udg_activePrismaticShield[0]= true
	set s__udg_activePrismaticShield[1]= true
	set s__udg_activePrismaticShield[2]= true
	set s__udg_activePrismaticShield[3]= true
	set s__udg_activePrismaticShield[4]= true
	set s__udg_activePrismaticShield[5]= true
	set s__udg_activePrismaticShield[6]= true
	set s__udg_activePrismaticShield[7]= true
	set s__udg_activePrismaticShield[8]= true
	set s__udg_activePrismaticShield[9]= true
	set s__udg_activePrismaticShield[10]= true
	set s__udg_activePrismaticShield[11]= true
	set s__udg_activePrismaticShield[12]= true
	set s__udg_activeTemporalGuard[0]= true
	set s__udg_activeTemporalGuard[1]= true
	set s__udg_activeTemporalGuard[2]= true
	set s__udg_activeTemporalGuard[3]= true
	set s__udg_activeTemporalGuard[4]= true
	set s__udg_activeTemporalGuard[5]= true
	set s__udg_activeTemporalGuard[6]= true
	set s__udg_activeTemporalGuard[7]= true
	set s__udg_activeTemporalGuard[8]= true
	set s__udg_activeTemporalGuard[9]= true
	set s__udg_activeTemporalGuard[10]= true
	set s__udg_activeTemporalGuard[11]= true
	set s__udg_activeTemporalGuard[12]= true
	set s__udg_activeAntiEnergy[0]= true
	set s__udg_activeAntiEnergy[1]= true
	set s__udg_activeAntiEnergy[2]= true
	set s__udg_activeAntiEnergy[3]= true
	set s__udg_activeAntiEnergy[4]= true
	set s__udg_activeAntiEnergy[5]= true
	set s__udg_activeAntiEnergy[6]= true
	set s__udg_activeAntiEnergy[7]= true
	set s__udg_activeAntiEnergy[8]= true
	set s__udg_activeAntiEnergy[9]= true
	set s__udg_activeAntiEnergy[10]= true
	set s__udg_activeAntiEnergy[11]= true
	set s__udg_activeAntiEnergy[12]= true
	set s__udg_activeOverpower[0]= true
	set s__udg_activeOverpower[1]= true
	set s__udg_activeOverpower[2]= true
	set s__udg_activeOverpower[3]= true
	set s__udg_activeOverpower[4]= true
	set s__udg_activeOverpower[5]= true
	set s__udg_activeOverpower[6]= true
	set s__udg_activeOverpower[7]= true
	set s__udg_activeOverpower[8]= true
	set s__udg_activeOverpower[9]= true
	set s__udg_activeOverpower[10]= true
	set s__udg_activeOverpower[11]= true
	set s__udg_activeOverpower[12]= true
	set s__udg_activeEpicenter[0]= true
	set s__udg_activeEpicenter[1]= true
	set s__udg_activeEpicenter[2]= true
	set s__udg_activeEpicenter[3]= true
	set s__udg_activeEpicenter[4]= true
	set s__udg_activeEpicenter[5]= true
	set s__udg_activeEpicenter[6]= true
	set s__udg_activeEpicenter[7]= true
	set s__udg_activeEpicenter[8]= true
	set s__udg_activeEpicenter[9]= true
	set s__udg_activeEpicenter[10]= true
	set s__udg_activeEpicenter[11]= true
	set s__udg_activeEpicenter[12]= true
	set s__udg_activeFrostBolt[0]= true
	set s__udg_activeFrostBolt[1]= true
	set s__udg_activeFrostBolt[2]= true
	set s__udg_activeFrostBolt[3]= true
	set s__udg_activeFrostBolt[4]= true
	set s__udg_activeFrostBolt[5]= true
	set s__udg_activeFrostBolt[6]= true
	set s__udg_activeFrostBolt[7]= true
	set s__udg_activeFrostBolt[8]= true
	set s__udg_activeFrostBolt[9]= true
	set s__udg_activeFrostBolt[10]= true
	set s__udg_activeFrostBolt[11]= true
	set s__udg_activeFrostBolt[12]= true
	set s__udg_activeMassFrostArmor[0]= true
	set s__udg_activeMassFrostArmor[1]= true
	set s__udg_activeMassFrostArmor[2]= true
	set s__udg_activeMassFrostArmor[3]= true
	set s__udg_activeMassFrostArmor[4]= true
	set s__udg_activeMassFrostArmor[5]= true
	set s__udg_activeMassFrostArmor[6]= true
	set s__udg_activeMassFrostArmor[7]= true
	set s__udg_activeMassFrostArmor[8]= true
	set s__udg_activeMassFrostArmor[9]= true
	set s__udg_activeMassFrostArmor[10]= true
	set s__udg_activeMassFrostArmor[11]= true
	set s__udg_activeMassFrostArmor[12]= true
	set s__udg_activePermafrost[0]= true
	set s__udg_activePermafrost[1]= true
	set s__udg_activePermafrost[2]= true
	set s__udg_activePermafrost[3]= true
	set s__udg_activePermafrost[4]= true
	set s__udg_activePermafrost[5]= true
	set s__udg_activePermafrost[6]= true
	set s__udg_activePermafrost[7]= true
	set s__udg_activePermafrost[8]= true
	set s__udg_activePermafrost[9]= true
	set s__udg_activePermafrost[10]= true
	set s__udg_activePermafrost[11]= true
	set s__udg_activePermafrost[12]= true
	set udg_PiercingChargeGroup=CreateGroup()
	set udg_PiercingChargeDamageGroup=CreateGroup()
	set s__udg_PhoenixSlashTick[0]= 0
	set s__udg_PhoenixSlashTick[1]= 0
	set s__udg_PhoenixSlashTick[2]= 0
	set s__udg_PhoenixSlashTick[3]= 0
	set s__udg_PhoenixSlashTick[4]= 0
	set s__udg_PhoenixSlashTick[5]= 0
	set s__udg_PhoenixSlashTick[6]= 0
	set s__udg_PhoenixSlashTick[7]= 0
	set s__udg_PhoenixSlashTick[8]= 0
	set s__udg_PhoenixSlashTick[9]= 0
	set s__udg_PhoenixSlashTick[10]= 0
	set s__udg_PhoenixSlashTick[11]= 0
	set s__udg_PhoenixSlashTick[12]= 0
	set udg_HolyBoltGroup=CreateGroup()
	set udg_ShieldBashGroup=CreateGroup()
	set udg_ShieldBashDamageGroup=CreateGroup()
	set udg_EmberCannonMode=CreateGroup()
	set s__udg_activeConcentration[0]= true
	set s__udg_activeConcentration[1]= true
	set s__udg_activeConcentration[2]= true
	set s__udg_activeConcentration[3]= true
	set s__udg_activeConcentration[4]= true
	set s__udg_activeConcentration[5]= true
	set s__udg_activeConcentration[6]= true
	set s__udg_activeConcentration[7]= true
	set s__udg_activeConcentration[8]= true
	set s__udg_activeConcentration[9]= true
	set s__udg_activeConcentration[10]= true
	set s__udg_activeConcentration[11]= true
	set s__udg_activeConcentration[12]= true
	set s__udg_activeDoppelganger[0]= true
	set s__udg_activeDoppelganger[1]= true
	set s__udg_activeDoppelganger[2]= true
	set s__udg_activeDoppelganger[3]= true
	set s__udg_activeDoppelganger[4]= true
	set s__udg_activeDoppelganger[5]= true
	set s__udg_activeDoppelganger[6]= true
	set s__udg_activeDoppelganger[7]= true
	set s__udg_activeDoppelganger[8]= true
	set s__udg_activeDoppelganger[9]= true
	set s__udg_activeDoppelganger[10]= true
	set s__udg_activeDoppelganger[11]= true
	set s__udg_activeDoppelganger[12]= true
	set s__udg_activeSlowBloodElf[0]= true
	set s__udg_activeSlowBloodElf[1]= true
	set s__udg_activeSlowBloodElf[2]= true
	set s__udg_activeSlowBloodElf[3]= true
	set s__udg_activeSlowBloodElf[4]= true
	set s__udg_activeSlowBloodElf[5]= true
	set s__udg_activeSlowBloodElf[6]= true
	set s__udg_activeSlowBloodElf[7]= true
	set s__udg_activeSlowBloodElf[8]= true
	set s__udg_activeSlowBloodElf[9]= true
	set s__udg_activeSlowBloodElf[10]= true
	set s__udg_activeSlowBloodElf[11]= true
	set s__udg_activeSlowBloodElf[12]= true
	set s__udg_activeSilverEdgeForm[0]= true
	set s__udg_activeSilverEdgeForm[1]= true
	set s__udg_activeSilverEdgeForm[2]= true
	set s__udg_activeSilverEdgeForm[3]= true
	set s__udg_activeSilverEdgeForm[4]= true
	set s__udg_activeSilverEdgeForm[5]= true
	set s__udg_activeSilverEdgeForm[6]= true
	set s__udg_activeSilverEdgeForm[7]= true
	set s__udg_activeSilverEdgeForm[8]= true
	set s__udg_activeSilverEdgeForm[9]= true
	set s__udg_activeSilverEdgeForm[10]= true
	set s__udg_activeSilverEdgeForm[11]= true
	set s__udg_activeSilverEdgeForm[12]= true
	set s__udg_activePetalWard[0]= true
	set s__udg_activePetalWard[1]= true
	set s__udg_activePetalWard[2]= true
	set s__udg_activePetalWard[3]= true
	set s__udg_activePetalWard[4]= true
	set s__udg_activePetalWard[5]= true
	set s__udg_activePetalWard[6]= true
	set s__udg_activePetalWard[7]= true
	set s__udg_activePetalWard[8]= true
	set s__udg_activePetalWard[9]= true
	set s__udg_activePetalWard[10]= true
	set s__udg_activePetalWard[11]= true
	set s__udg_activePetalWard[12]= true
	set s__udg_activeSunBlast[0]= true
	set s__udg_activeSunBlast[1]= true
	set s__udg_activeSunBlast[2]= true
	set s__udg_activeSunBlast[3]= true
	set s__udg_activeSunBlast[4]= true
	set s__udg_activeSunBlast[5]= true
	set s__udg_activeSunBlast[6]= true
	set s__udg_activeSunBlast[7]= true
	set s__udg_activeSunBlast[8]= true
	set s__udg_activeSunBlast[9]= true
	set s__udg_activeSunBlast[10]= true
	set s__udg_activeSunBlast[11]= true
	set s__udg_activeSunBlast[12]= true
	set s__udg_activeManaDecay[0]= true
	set s__udg_activeManaDecay[1]= true
	set s__udg_activeManaDecay[2]= true
	set s__udg_activeManaDecay[3]= true
	set s__udg_activeManaDecay[4]= true
	set s__udg_activeManaDecay[5]= true
	set s__udg_activeManaDecay[6]= true
	set s__udg_activeManaDecay[7]= true
	set s__udg_activeManaDecay[8]= true
	set s__udg_activeManaDecay[9]= true
	set s__udg_activeManaDecay[10]= true
	set s__udg_activeManaDecay[11]= true
	set s__udg_activeManaDecay[12]= true
	set s__udg_activeMagicHunger[0]= true
	set s__udg_activeMagicHunger[1]= true
	set s__udg_activeMagicHunger[2]= true
	set s__udg_activeMagicHunger[3]= true
	set s__udg_activeMagicHunger[4]= true
	set s__udg_activeMagicHunger[5]= true
	set s__udg_activeMagicHunger[6]= true
	set s__udg_activeMagicHunger[7]= true
	set s__udg_activeMagicHunger[8]= true
	set s__udg_activeMagicHunger[9]= true
	set s__udg_activeMagicHunger[10]= true
	set s__udg_activeMagicHunger[11]= true
	set s__udg_activeMagicHunger[12]= true
	set s__udg_activeArcaneRush[0]= true
	set s__udg_activeArcaneRush[1]= true
	set s__udg_activeArcaneRush[2]= true
	set s__udg_activeArcaneRush[3]= true
	set s__udg_activeArcaneRush[4]= true
	set s__udg_activeArcaneRush[5]= true
	set s__udg_activeArcaneRush[6]= true
	set s__udg_activeArcaneRush[7]= true
	set s__udg_activeArcaneRush[8]= true
	set s__udg_activeArcaneRush[9]= true
	set s__udg_activeArcaneRush[10]= true
	set s__udg_activeArcaneRush[11]= true
	set s__udg_activeArcaneRush[12]= true
	set s__udg_activeArcaneShield[0]= true
	set s__udg_activeArcaneShield[1]= true
	set s__udg_activeArcaneShield[2]= true
	set s__udg_activeArcaneShield[3]= true
	set s__udg_activeArcaneShield[4]= true
	set s__udg_activeArcaneShield[5]= true
	set s__udg_activeArcaneShield[6]= true
	set s__udg_activeArcaneShield[7]= true
	set s__udg_activeArcaneShield[8]= true
	set s__udg_activeArcaneShield[9]= true
	set s__udg_activeArcaneShield[10]= true
	set s__udg_activeArcaneShield[11]= true
	set s__udg_activeArcaneShield[12]= true
	set s__udg_activeSpellSteal[0]= true
	set s__udg_activeSpellSteal[1]= true
	set s__udg_activeSpellSteal[2]= true
	set s__udg_activeSpellSteal[3]= true
	set s__udg_activeSpellSteal[4]= true
	set s__udg_activeSpellSteal[5]= true
	set s__udg_activeSpellSteal[6]= true
	set s__udg_activeSpellSteal[7]= true
	set s__udg_activeSpellSteal[8]= true
	set s__udg_activeSpellSteal[9]= true
	set s__udg_activeSpellSteal[10]= true
	set s__udg_activeSpellSteal[11]= true
	set s__udg_activeSpellSteal[12]= true
	set s__udg_activeVerbisVirtus[0]= true
	set s__udg_activeVerbisVirtus[1]= true
	set s__udg_activeVerbisVirtus[2]= true
	set s__udg_activeVerbisVirtus[3]= true
	set s__udg_activeVerbisVirtus[4]= true
	set s__udg_activeVerbisVirtus[5]= true
	set s__udg_activeVerbisVirtus[6]= true
	set s__udg_activeVerbisVirtus[7]= true
	set s__udg_activeVerbisVirtus[8]= true
	set s__udg_activeVerbisVirtus[9]= true
	set s__udg_activeVerbisVirtus[10]= true
	set s__udg_activeVerbisVirtus[11]= true
	set s__udg_activeVerbisVirtus[12]= true
	set s__udg_activeLiberateShield[0]= true
	set s__udg_activeLiberateShield[1]= true
	set s__udg_activeLiberateShield[2]= true
	set s__udg_activeLiberateShield[3]= true
	set s__udg_activeLiberateShield[4]= true
	set s__udg_activeLiberateShield[5]= true
	set s__udg_activeLiberateShield[6]= true
	set s__udg_activeLiberateShield[7]= true
	set s__udg_activeLiberateShield[8]= true
	set s__udg_activeLiberateShield[9]= true
	set s__udg_activeLiberateShield[10]= true
	set s__udg_activeLiberateShield[11]= true
	set s__udg_activeLiberateShield[12]= true
	set s__udg_activePiercingCharge[0]= true
	set s__udg_activePiercingCharge[1]= true
	set s__udg_activePiercingCharge[2]= true
	set s__udg_activePiercingCharge[3]= true
	set s__udg_activePiercingCharge[4]= true
	set s__udg_activePiercingCharge[5]= true
	set s__udg_activePiercingCharge[6]= true
	set s__udg_activePiercingCharge[7]= true
	set s__udg_activePiercingCharge[8]= true
	set s__udg_activePiercingCharge[9]= true
	set s__udg_activePiercingCharge[10]= true
	set s__udg_activePiercingCharge[11]= true
	set s__udg_activePiercingCharge[12]= true
	set s__udg_activeBattlecry[0]= true
	set s__udg_activeBattlecry[1]= true
	set s__udg_activeBattlecry[2]= true
	set s__udg_activeBattlecry[3]= true
	set s__udg_activeBattlecry[4]= true
	set s__udg_activeBattlecry[5]= true
	set s__udg_activeBattlecry[6]= true
	set s__udg_activeBattlecry[7]= true
	set s__udg_activeBattlecry[8]= true
	set s__udg_activeBattlecry[9]= true
	set s__udg_activeBattlecry[10]= true
	set s__udg_activeBattlecry[11]= true
	set s__udg_activeBattlecry[12]= true
	set s__udg_activeEmberCannonMode[0]= true
	set s__udg_activeEmberCannonMode[1]= true
	set s__udg_activeEmberCannonMode[2]= true
	set s__udg_activeEmberCannonMode[3]= true
	set s__udg_activeEmberCannonMode[4]= true
	set s__udg_activeEmberCannonMode[5]= true
	set s__udg_activeEmberCannonMode[6]= true
	set s__udg_activeEmberCannonMode[7]= true
	set s__udg_activeEmberCannonMode[8]= true
	set s__udg_activeEmberCannonMode[9]= true
	set s__udg_activeEmberCannonMode[10]= true
	set s__udg_activeEmberCannonMode[11]= true
	set s__udg_activeEmberCannonMode[12]= true
	set s__udg_activeRefraction[0]= true
	set s__udg_activeRefraction[1]= true
	set s__udg_activeRefraction[2]= true
	set s__udg_activeRefraction[3]= true
	set s__udg_activeRefraction[4]= true
	set s__udg_activeRefraction[5]= true
	set s__udg_activeRefraction[6]= true
	set s__udg_activeRefraction[7]= true
	set s__udg_activeRefraction[8]= true
	set s__udg_activeRefraction[9]= true
	set s__udg_activeRefraction[10]= true
	set s__udg_activeRefraction[11]= true
	set s__udg_activeRefraction[12]= true
	set s__udg_activeMeld[0]= true
	set s__udg_activeMeld[1]= true
	set s__udg_activeMeld[2]= true
	set s__udg_activeMeld[3]= true
	set s__udg_activeMeld[4]= true
	set s__udg_activeMeld[5]= true
	set s__udg_activeMeld[6]= true
	set s__udg_activeMeld[7]= true
	set s__udg_activeMeld[8]= true
	set s__udg_activeMeld[9]= true
	set s__udg_activeMeld[10]= true
	set s__udg_activeMeld[11]= true
	set s__udg_activeMeld[12]= true
	set s__udg_activePoisonTrap[0]= true
	set s__udg_activePoisonTrap[1]= true
	set s__udg_activePoisonTrap[2]= true
	set s__udg_activePoisonTrap[3]= true
	set s__udg_activePoisonTrap[4]= true
	set s__udg_activePoisonTrap[5]= true
	set s__udg_activePoisonTrap[6]= true
	set s__udg_activePoisonTrap[7]= true
	set s__udg_activePoisonTrap[8]= true
	set s__udg_activePoisonTrap[9]= true
	set s__udg_activePoisonTrap[10]= true
	set s__udg_activePoisonTrap[11]= true
	set s__udg_activePoisonTrap[12]= true
	set s__udg_activeHolyBolt[0]= true
	set s__udg_activeHolyBolt[1]= true
	set s__udg_activeHolyBolt[2]= true
	set s__udg_activeHolyBolt[3]= true
	set s__udg_activeHolyBolt[4]= true
	set s__udg_activeHolyBolt[5]= true
	set s__udg_activeHolyBolt[6]= true
	set s__udg_activeHolyBolt[7]= true
	set s__udg_activeHolyBolt[8]= true
	set s__udg_activeHolyBolt[9]= true
	set s__udg_activeHolyBolt[10]= true
	set s__udg_activeHolyBolt[11]= true
	set s__udg_activeHolyBolt[12]= true
	set s__udg_activeHavok[0]= true
	set s__udg_activeHavok[1]= true
	set s__udg_activeHavok[2]= true
	set s__udg_activeHavok[3]= true
	set s__udg_activeHavok[4]= true
	set s__udg_activeHavok[5]= true
	set s__udg_activeHavok[6]= true
	set s__udg_activeHavok[7]= true
	set s__udg_activeHavok[8]= true
	set s__udg_activeHavok[9]= true
	set s__udg_activeHavok[10]= true
	set s__udg_activeHavok[11]= true
	set s__udg_activeHavok[12]= true
	set s__udg_activeUltimateStrength[0]= true
	set s__udg_activeUltimateStrength[1]= true
	set s__udg_activeUltimateStrength[2]= true
	set s__udg_activeUltimateStrength[3]= true
	set s__udg_activeUltimateStrength[4]= true
	set s__udg_activeUltimateStrength[5]= true
	set s__udg_activeUltimateStrength[6]= true
	set s__udg_activeUltimateStrength[7]= true
	set s__udg_activeUltimateStrength[8]= true
	set s__udg_activeUltimateStrength[9]= true
	set s__udg_activeUltimateStrength[10]= true
	set s__udg_activeUltimateStrength[11]= true
	set s__udg_activeUltimateStrength[12]= true
	set s__udg_activeBerserkersCall[0]= true
	set s__udg_activeBerserkersCall[1]= true
	set s__udg_activeBerserkersCall[2]= true
	set s__udg_activeBerserkersCall[3]= true
	set s__udg_activeBerserkersCall[4]= true
	set s__udg_activeBerserkersCall[5]= true
	set s__udg_activeBerserkersCall[6]= true
	set s__udg_activeBerserkersCall[7]= true
	set s__udg_activeBerserkersCall[8]= true
	set s__udg_activeBerserkersCall[9]= true
	set s__udg_activeBerserkersCall[10]= true
	set s__udg_activeBerserkersCall[11]= true
	set s__udg_activeBerserkersCall[12]= true
	set s__udg_activeShieldBash[0]= true
	set s__udg_activeShieldBash[1]= true
	set s__udg_activeShieldBash[2]= true
	set s__udg_activeShieldBash[3]= true
	set s__udg_activeShieldBash[4]= true
	set s__udg_activeShieldBash[5]= true
	set s__udg_activeShieldBash[6]= true
	set s__udg_activeShieldBash[7]= true
	set s__udg_activeShieldBash[8]= true
	set s__udg_activeShieldBash[9]= true
	set s__udg_activeShieldBash[10]= true
	set s__udg_activeShieldBash[11]= true
	set s__udg_activeShieldBash[12]= true
	set s__udg_activeRallying[0]= true
	set s__udg_activeRallying[1]= true
	set s__udg_activeRallying[2]= true
	set s__udg_activeRallying[3]= true
	set s__udg_activeRallying[4]= true
	set s__udg_activeRallying[5]= true
	set s__udg_activeRallying[6]= true
	set s__udg_activeRallying[7]= true
	set s__udg_activeRallying[8]= true
	set s__udg_activeRallying[9]= true
	set s__udg_activeRallying[10]= true
	set s__udg_activeRallying[11]= true
	set s__udg_activeRallying[12]= true
	set s__udg_activeStandUnited[0]= true
	set s__udg_activeStandUnited[1]= true
	set s__udg_activeStandUnited[2]= true
	set s__udg_activeStandUnited[3]= true
	set s__udg_activeStandUnited[4]= true
	set s__udg_activeStandUnited[5]= true
	set s__udg_activeStandUnited[6]= true
	set s__udg_activeStandUnited[7]= true
	set s__udg_activeStandUnited[8]= true
	set s__udg_activeStandUnited[9]= true
	set s__udg_activeStandUnited[10]= true
	set s__udg_activeStandUnited[11]= true
	set s__udg_activeStandUnited[12]= true
	set s__udg_activeRainOfChaos[0]= true
	set s__udg_activeRainOfChaos[1]= true
	set s__udg_activeRainOfChaos[2]= true
	set s__udg_activeRainOfChaos[3]= true
	set s__udg_activeRainOfChaos[4]= true
	set s__udg_activeRainOfChaos[5]= true
	set s__udg_activeRainOfChaos[6]= true
	set s__udg_activeRainOfChaos[7]= true
	set s__udg_activeRainOfChaos[8]= true
	set s__udg_activeRainOfChaos[9]= true
	set s__udg_activeRainOfChaos[10]= true
	set s__udg_activeRainOfChaos[11]= true
	set s__udg_activeRainOfChaos[12]= true
	set s__udg_activeLiberate[0]= true
	set s__udg_activeLiberate[1]= true
	set s__udg_activeLiberate[2]= true
	set s__udg_activeLiberate[3]= true
	set s__udg_activeLiberate[4]= true
	set s__udg_activeLiberate[5]= true
	set s__udg_activeLiberate[6]= true
	set s__udg_activeLiberate[7]= true
	set s__udg_activeLiberate[8]= true
	set s__udg_activeLiberate[9]= true
	set s__udg_activeLiberate[10]= true
	set s__udg_activeLiberate[11]= true
	set s__udg_activeLiberate[12]= true
	set s__udg_activeSiphonLifeMana[0]= true
	set s__udg_activeSiphonLifeMana[1]= true
	set s__udg_activeSiphonLifeMana[2]= true
	set s__udg_activeSiphonLifeMana[3]= true
	set s__udg_activeSiphonLifeMana[4]= true
	set s__udg_activeSiphonLifeMana[5]= true
	set s__udg_activeSiphonLifeMana[6]= true
	set s__udg_activeSiphonLifeMana[7]= true
	set s__udg_activeSiphonLifeMana[8]= true
	set s__udg_activeSiphonLifeMana[9]= true
	set s__udg_activeSiphonLifeMana[10]= true
	set s__udg_activeSiphonLifeMana[11]= true
	set s__udg_activeSiphonLifeMana[12]= true
	set s__udg_activeBladestormBELF[0]= true
	set s__udg_activeBladestormBELF[1]= true
	set s__udg_activeBladestormBELF[2]= true
	set s__udg_activeBladestormBELF[3]= true
	set s__udg_activeBladestormBELF[4]= true
	set s__udg_activeBladestormBELF[5]= true
	set s__udg_activeBladestormBELF[6]= true
	set s__udg_activeBladestormBELF[7]= true
	set s__udg_activeBladestormBELF[8]= true
	set s__udg_activeBladestormBELF[9]= true
	set s__udg_activeBladestormBELF[10]= true
	set s__udg_activeBladestormBELF[11]= true
	set s__udg_activeBladestormBELF[12]= true
	set s__udg_activeSinDoreiBlades[0]= true
	set s__udg_activeSinDoreiBlades[1]= true
	set s__udg_activeSinDoreiBlades[2]= true
	set s__udg_activeSinDoreiBlades[3]= true
	set s__udg_activeSinDoreiBlades[4]= true
	set s__udg_activeSinDoreiBlades[5]= true
	set s__udg_activeSinDoreiBlades[6]= true
	set s__udg_activeSinDoreiBlades[7]= true
	set s__udg_activeSinDoreiBlades[8]= true
	set s__udg_activeSinDoreiBlades[9]= true
	set s__udg_activeSinDoreiBlades[10]= true
	set s__udg_activeSinDoreiBlades[11]= true
	set s__udg_activeSinDoreiBlades[12]= true
	set s__udg_activeManaBurnBELF[0]= true
	set s__udg_activeManaBurnBELF[1]= true
	set s__udg_activeManaBurnBELF[2]= true
	set s__udg_activeManaBurnBELF[3]= true
	set s__udg_activeManaBurnBELF[4]= true
	set s__udg_activeManaBurnBELF[5]= true
	set s__udg_activeManaBurnBELF[6]= true
	set s__udg_activeManaBurnBELF[7]= true
	set s__udg_activeManaBurnBELF[8]= true
	set s__udg_activeManaBurnBELF[9]= true
	set s__udg_activeManaBurnBELF[10]= true
	set s__udg_activeManaBurnBELF[11]= true
	set s__udg_activeManaBurnBELF[12]= true
	set udg_HookGroup=CreateGroup()
	set udg_HookCasterGroup=CreateGroup()
	set udg_ShadowsCallGroup=CreateGroup()
	set udg_FadeGroup=CreateGroup()
	set s__udg_isCastingBansheeScream[0]= false
	set s__udg_isCastingBansheeScream[1]= false
	set s__udg_isCastingBansheeScream[2]= false
	set s__udg_isCastingBansheeScream[3]= false
	set s__udg_isCastingBansheeScream[4]= false
	set s__udg_isCastingBansheeScream[5]= false
	set s__udg_isCastingBansheeScream[6]= false
	set s__udg_isCastingBansheeScream[7]= false
	set s__udg_isCastingBansheeScream[8]= false
	set s__udg_isCastingBansheeScream[9]= false
	set s__udg_isCastingBansheeScream[10]= false
	set s__udg_isCastingBansheeScream[11]= false
	set s__udg_isCastingBansheeScream[12]= false
	set s__udg_isRunningBansheeScream[0]= false
	set s__udg_isRunningBansheeScream[1]= false
	set s__udg_isRunningBansheeScream[2]= false
	set s__udg_isRunningBansheeScream[3]= false
	set s__udg_isRunningBansheeScream[4]= false
	set s__udg_isRunningBansheeScream[5]= false
	set s__udg_isRunningBansheeScream[6]= false
	set s__udg_isRunningBansheeScream[7]= false
	set s__udg_isRunningBansheeScream[8]= false
	set s__udg_isRunningBansheeScream[9]= false
	set s__udg_isRunningBansheeScream[10]= false
	set s__udg_isRunningBansheeScream[11]= false
	set s__udg_isRunningBansheeScream[12]= false
	set s__udg_BansheeScreamInitTimer[0]= CreateTimer()
	set s__udg_BansheeScreamInitTimer[1]= CreateTimer()
	set s__udg_BansheeScreamInitTimer[2]= CreateTimer()
	set s__udg_BansheeScreamInitTimer[3]= CreateTimer()
	set s__udg_BansheeScreamInitTimer[4]= CreateTimer()
	set s__udg_BansheeScreamInitTimer[5]= CreateTimer()
	set s__udg_BansheeScreamInitTimer[6]= CreateTimer()
	set s__udg_BansheeScreamInitTimer[7]= CreateTimer()
	set s__udg_BansheeScreamInitTimer[8]= CreateTimer()
	set s__udg_BansheeScreamInitTimer[9]= CreateTimer()
	set s__udg_BansheeScreamInitTimer[10]= CreateTimer()
	set s__udg_BansheeScreamInitTimer[11]= CreateTimer()
	set s__udg_BansheeScreamInitTimer[12]= CreateTimer()
	set s__udg_BlightAuraGroup[0]= CreateGroup()
	set s__udg_BlightAuraGroup[1]= CreateGroup()
	set s__udg_BlightAuraGroup[2]= CreateGroup()
	set s__udg_BlightAuraGroup[3]= CreateGroup()
	set s__udg_BlightAuraGroup[4]= CreateGroup()
	set s__udg_BlightAuraGroup[5]= CreateGroup()
	set s__udg_BlightAuraGroup[6]= CreateGroup()
	set s__udg_BlightAuraGroup[7]= CreateGroup()
	set s__udg_BlightAuraGroup[8]= CreateGroup()
	set s__udg_BlightAuraGroup[9]= CreateGroup()
	set s__udg_BlightAuraGroup[10]= CreateGroup()
	set s__udg_BlightAuraGroup[11]= CreateGroup()
	set s__udg_BlightAuraGroup[12]= CreateGroup()
	set s__udg_BlightAuraLevelTemp[0]= 0
	set s__udg_BlightAuraLevelTemp[1]= 0
	set s__udg_BlightAuraLevelTemp[2]= 0
	set s__udg_BlightAuraLevelTemp[3]= 0
	set s__udg_BlightAuraLevelTemp[4]= 0
	set s__udg_BlightAuraLevelTemp[5]= 0
	set s__udg_BlightAuraLevelTemp[6]= 0
	set s__udg_BlightAuraLevelTemp[7]= 0
	set s__udg_BlightAuraLevelTemp[8]= 0
	set s__udg_BlightAuraLevelTemp[9]= 0
	set s__udg_BlightAuraLevelTemp[10]= 0
	set s__udg_BlightAuraLevelTemp[11]= 0
	set s__udg_BlightAuraLevelTemp[12]= 0
	set s__udg_PunishTimer[0]= CreateTimer()
	set s__udg_PunishTimer[1]= CreateTimer()
	set s__udg_PunishTimer[2]= CreateTimer()
	set s__udg_PunishTimer[3]= CreateTimer()
	set s__udg_PunishTimer[4]= CreateTimer()
	set s__udg_PunishTimer[5]= CreateTimer()
	set s__udg_PunishTimer[6]= CreateTimer()
	set s__udg_PunishTimer[7]= CreateTimer()
	set s__udg_PunishTimer[8]= CreateTimer()
	set s__udg_PunishTimer[9]= CreateTimer()
	set s__udg_PunishTimer[10]= CreateTimer()
	set s__udg_PunishTimer[11]= CreateTimer()
	set s__udg_PunishTimer[12]= CreateTimer()
	set s__udg_activePhaseStrike[0]= true
	set s__udg_activePhaseStrike[1]= true
	set s__udg_activePhaseStrike[2]= true
	set s__udg_activePhaseStrike[3]= true
	set s__udg_activePhaseStrike[4]= true
	set s__udg_activePhaseStrike[5]= true
	set s__udg_activePhaseStrike[6]= true
	set s__udg_activePhaseStrike[7]= true
	set s__udg_activePhaseStrike[8]= true
	set s__udg_activePhaseStrike[9]= true
	set s__udg_activePhaseStrike[10]= true
	set s__udg_activePhaseStrike[11]= true
	set s__udg_activePhaseStrike[12]= true
	set s__udg_activePotentRemedy[0]= true
	set s__udg_activePotentRemedy[1]= true
	set s__udg_activePotentRemedy[2]= true
	set s__udg_activePotentRemedy[3]= true
	set s__udg_activePotentRemedy[4]= true
	set s__udg_activePotentRemedy[5]= true
	set s__udg_activePotentRemedy[6]= true
	set s__udg_activePotentRemedy[7]= true
	set s__udg_activePotentRemedy[8]= true
	set s__udg_activePotentRemedy[9]= true
	set s__udg_activePotentRemedy[10]= true
	set s__udg_activePotentRemedy[11]= true
	set s__udg_activePotentRemedy[12]= true
	set s__udg_activeAcerbicPotion[0]= true
	set s__udg_activeAcerbicPotion[1]= true
	set s__udg_activeAcerbicPotion[2]= true
	set s__udg_activeAcerbicPotion[3]= true
	set s__udg_activeAcerbicPotion[4]= true
	set s__udg_activeAcerbicPotion[5]= true
	set s__udg_activeAcerbicPotion[6]= true
	set s__udg_activeAcerbicPotion[7]= true
	set s__udg_activeAcerbicPotion[8]= true
	set s__udg_activeAcerbicPotion[9]= true
	set s__udg_activeAcerbicPotion[10]= true
	set s__udg_activeAcerbicPotion[11]= true
	set s__udg_activeAcerbicPotion[12]= true
	set s__udg_activeForsakenConcoction[0]= true
	set s__udg_activeForsakenConcoction[1]= true
	set s__udg_activeForsakenConcoction[2]= true
	set s__udg_activeForsakenConcoction[3]= true
	set s__udg_activeForsakenConcoction[4]= true
	set s__udg_activeForsakenConcoction[5]= true
	set s__udg_activeForsakenConcoction[6]= true
	set s__udg_activeForsakenConcoction[7]= true
	set s__udg_activeForsakenConcoction[8]= true
	set s__udg_activeForsakenConcoction[9]= true
	set s__udg_activeForsakenConcoction[10]= true
	set s__udg_activeForsakenConcoction[11]= true
	set s__udg_activeForsakenConcoction[12]= true
	set s__udg_activeDeathFumes[0]= true
	set s__udg_activeDeathFumes[1]= true
	set s__udg_activeDeathFumes[2]= true
	set s__udg_activeDeathFumes[3]= true
	set s__udg_activeDeathFumes[4]= true
	set s__udg_activeDeathFumes[5]= true
	set s__udg_activeDeathFumes[6]= true
	set s__udg_activeDeathFumes[7]= true
	set s__udg_activeDeathFumes[8]= true
	set s__udg_activeDeathFumes[9]= true
	set s__udg_activeDeathFumes[10]= true
	set s__udg_activeDeathFumes[11]= true
	set s__udg_activeDeathFumes[12]= true
	set s__udg_activeHook[0]= true
	set s__udg_activeHook[1]= true
	set s__udg_activeHook[2]= true
	set s__udg_activeHook[3]= true
	set s__udg_activeHook[4]= true
	set s__udg_activeHook[5]= true
	set s__udg_activeHook[6]= true
	set s__udg_activeHook[7]= true
	set s__udg_activeHook[8]= true
	set s__udg_activeHook[9]= true
	set s__udg_activeHook[10]= true
	set s__udg_activeHook[11]= true
	set s__udg_activeHook[12]= true
	set s__udg_activeCorpsePile[0]= true
	set s__udg_activeCorpsePile[1]= true
	set s__udg_activeCorpsePile[2]= true
	set s__udg_activeCorpsePile[3]= true
	set s__udg_activeCorpsePile[4]= true
	set s__udg_activeCorpsePile[5]= true
	set s__udg_activeCorpsePile[6]= true
	set s__udg_activeCorpsePile[7]= true
	set s__udg_activeCorpsePile[8]= true
	set s__udg_activeCorpsePile[9]= true
	set s__udg_activeCorpsePile[10]= true
	set s__udg_activeCorpsePile[11]= true
	set s__udg_activeCorpsePile[12]= true
	set s__udg_activeRemainingSpirit[0]= true
	set s__udg_activeRemainingSpirit[1]= true
	set s__udg_activeRemainingSpirit[2]= true
	set s__udg_activeRemainingSpirit[3]= true
	set s__udg_activeRemainingSpirit[4]= true
	set s__udg_activeRemainingSpirit[5]= true
	set s__udg_activeRemainingSpirit[6]= true
	set s__udg_activeRemainingSpirit[7]= true
	set s__udg_activeRemainingSpirit[8]= true
	set s__udg_activeRemainingSpirit[9]= true
	set s__udg_activeRemainingSpirit[10]= true
	set s__udg_activeRemainingSpirit[11]= true
	set s__udg_activeRemainingSpirit[12]= true
	set s__udg_activeNecroticOath[0]= true
	set s__udg_activeNecroticOath[1]= true
	set s__udg_activeNecroticOath[2]= true
	set s__udg_activeNecroticOath[3]= true
	set s__udg_activeNecroticOath[4]= true
	set s__udg_activeNecroticOath[5]= true
	set s__udg_activeNecroticOath[6]= true
	set s__udg_activeNecroticOath[7]= true
	set s__udg_activeNecroticOath[8]= true
	set s__udg_activeNecroticOath[9]= true
	set s__udg_activeNecroticOath[10]= true
	set s__udg_activeNecroticOath[11]= true
	set s__udg_activeNecroticOath[12]= true
	set s__udg_activeForlornCell[0]= true
	set s__udg_activeForlornCell[1]= true
	set s__udg_activeForlornCell[2]= true
	set s__udg_activeForlornCell[3]= true
	set s__udg_activeForlornCell[4]= true
	set s__udg_activeForlornCell[5]= true
	set s__udg_activeForlornCell[6]= true
	set s__udg_activeForlornCell[7]= true
	set s__udg_activeForlornCell[8]= true
	set s__udg_activeForlornCell[9]= true
	set s__udg_activeForlornCell[10]= true
	set s__udg_activeForlornCell[11]= true
	set s__udg_activeForlornCell[12]= true
	set s__udg_activeShadowsCall[0]= true
	set s__udg_activeShadowsCall[1]= true
	set s__udg_activeShadowsCall[2]= true
	set s__udg_activeShadowsCall[3]= true
	set s__udg_activeShadowsCall[4]= true
	set s__udg_activeShadowsCall[5]= true
	set s__udg_activeShadowsCall[6]= true
	set s__udg_activeShadowsCall[7]= true
	set s__udg_activeShadowsCall[8]= true
	set s__udg_activeShadowsCall[9]= true
	set s__udg_activeShadowsCall[10]= true
	set s__udg_activeShadowsCall[11]= true
	set s__udg_activeShadowsCall[12]= true
	set s__udg_activeConsume[0]= true
	set s__udg_activeConsume[1]= true
	set s__udg_activeConsume[2]= true
	set s__udg_activeConsume[3]= true
	set s__udg_activeConsume[4]= true
	set s__udg_activeConsume[5]= true
	set s__udg_activeConsume[6]= true
	set s__udg_activeConsume[7]= true
	set s__udg_activeConsume[8]= true
	set s__udg_activeConsume[9]= true
	set s__udg_activeConsume[10]= true
	set s__udg_activeConsume[11]= true
	set s__udg_activeConsume[12]= true
	set s__udg_activeFade[0]= true
	set s__udg_activeFade[1]= true
	set s__udg_activeFade[2]= true
	set s__udg_activeFade[3]= true
	set s__udg_activeFade[4]= true
	set s__udg_activeFade[5]= true
	set s__udg_activeFade[6]= true
	set s__udg_activeFade[7]= true
	set s__udg_activeFade[8]= true
	set s__udg_activeFade[9]= true
	set s__udg_activeFade[10]= true
	set s__udg_activeFade[11]= true
	set s__udg_activeFade[12]= true
	set s__udg_activePetrify[0]= true
	set s__udg_activePetrify[1]= true
	set s__udg_activePetrify[2]= true
	set s__udg_activePetrify[3]= true
	set s__udg_activePetrify[4]= true
	set s__udg_activePetrify[5]= true
	set s__udg_activePetrify[6]= true
	set s__udg_activePetrify[7]= true
	set s__udg_activePetrify[8]= true
	set s__udg_activePetrify[9]= true
	set s__udg_activePetrify[10]= true
	set s__udg_activePetrify[11]= true
	set s__udg_activePetrify[12]= true
	set s__udg_activeSentient[0]= true
	set s__udg_activeSentient[1]= true
	set s__udg_activeSentient[2]= true
	set s__udg_activeSentient[3]= true
	set s__udg_activeSentient[4]= true
	set s__udg_activeSentient[5]= true
	set s__udg_activeSentient[6]= true
	set s__udg_activeSentient[7]= true
	set s__udg_activeSentient[8]= true
	set s__udg_activeSentient[9]= true
	set s__udg_activeSentient[10]= true
	set s__udg_activeSentient[11]= true
	set s__udg_activeSentient[12]= true
	set s__udg_activeSalubrious[0]= true
	set s__udg_activeSalubrious[1]= true
	set s__udg_activeSalubrious[2]= true
	set s__udg_activeSalubrious[3]= true
	set s__udg_activeSalubrious[4]= true
	set s__udg_activeSalubrious[5]= true
	set s__udg_activeSalubrious[6]= true
	set s__udg_activeSalubrious[7]= true
	set s__udg_activeSalubrious[8]= true
	set s__udg_activeSalubrious[9]= true
	set s__udg_activeSalubrious[10]= true
	set s__udg_activeSalubrious[11]= true
	set s__udg_activeSalubrious[12]= true
	set s__udg_activeRaiseFromGraves[0]= true
	set s__udg_activeRaiseFromGraves[1]= true
	set s__udg_activeRaiseFromGraves[2]= true
	set s__udg_activeRaiseFromGraves[3]= true
	set s__udg_activeRaiseFromGraves[4]= true
	set s__udg_activeRaiseFromGraves[5]= true
	set s__udg_activeRaiseFromGraves[6]= true
	set s__udg_activeRaiseFromGraves[7]= true
	set s__udg_activeRaiseFromGraves[8]= true
	set s__udg_activeRaiseFromGraves[9]= true
	set s__udg_activeRaiseFromGraves[10]= true
	set s__udg_activeRaiseFromGraves[11]= true
	set s__udg_activeRaiseFromGraves[12]= true
	set s__udg_activeUndeadEmbrace[0]= true
	set s__udg_activeUndeadEmbrace[1]= true
	set s__udg_activeUndeadEmbrace[2]= true
	set s__udg_activeUndeadEmbrace[3]= true
	set s__udg_activeUndeadEmbrace[4]= true
	set s__udg_activeUndeadEmbrace[5]= true
	set s__udg_activeUndeadEmbrace[6]= true
	set s__udg_activeUndeadEmbrace[7]= true
	set s__udg_activeUndeadEmbrace[8]= true
	set s__udg_activeUndeadEmbrace[9]= true
	set s__udg_activeUndeadEmbrace[10]= true
	set s__udg_activeUndeadEmbrace[11]= true
	set s__udg_activeUndeadEmbrace[12]= true
	set s__udg_activeGraveBlow[0]= true
	set s__udg_activeGraveBlow[1]= true
	set s__udg_activeGraveBlow[2]= true
	set s__udg_activeGraveBlow[3]= true
	set s__udg_activeGraveBlow[4]= true
	set s__udg_activeGraveBlow[5]= true
	set s__udg_activeGraveBlow[6]= true
	set s__udg_activeGraveBlow[7]= true
	set s__udg_activeGraveBlow[8]= true
	set s__udg_activeGraveBlow[9]= true
	set s__udg_activeGraveBlow[10]= true
	set s__udg_activeGraveBlow[11]= true
	set s__udg_activeGraveBlow[12]= true
	set s__udg_activeDread[0]= true
	set s__udg_activeDread[1]= true
	set s__udg_activeDread[2]= true
	set s__udg_activeDread[3]= true
	set s__udg_activeDread[4]= true
	set s__udg_activeDread[5]= true
	set s__udg_activeDread[6]= true
	set s__udg_activeDread[7]= true
	set s__udg_activeDread[8]= true
	set s__udg_activeDread[9]= true
	set s__udg_activeDread[10]= true
	set s__udg_activeDread[11]= true
	set s__udg_activeDread[12]= true
	set s__udg_activeShadowAscendant[0]= true
	set s__udg_activeShadowAscendant[1]= true
	set s__udg_activeShadowAscendant[2]= true
	set s__udg_activeShadowAscendant[3]= true
	set s__udg_activeShadowAscendant[4]= true
	set s__udg_activeShadowAscendant[5]= true
	set s__udg_activeShadowAscendant[6]= true
	set s__udg_activeShadowAscendant[7]= true
	set s__udg_activeShadowAscendant[8]= true
	set s__udg_activeShadowAscendant[9]= true
	set s__udg_activeShadowAscendant[10]= true
	set s__udg_activeShadowAscendant[11]= true
	set s__udg_activeShadowAscendant[12]= true
	set s__udg_activeFatefulStrike[0]= true
	set s__udg_activeFatefulStrike[1]= true
	set s__udg_activeFatefulStrike[2]= true
	set s__udg_activeFatefulStrike[3]= true
	set s__udg_activeFatefulStrike[4]= true
	set s__udg_activeFatefulStrike[5]= true
	set s__udg_activeFatefulStrike[6]= true
	set s__udg_activeFatefulStrike[7]= true
	set s__udg_activeFatefulStrike[8]= true
	set s__udg_activeFatefulStrike[9]= true
	set s__udg_activeFatefulStrike[10]= true
	set s__udg_activeFatefulStrike[11]= true
	set s__udg_activeFatefulStrike[12]= true
	set s__udg_activeLifeDrainForsaken[0]= true
	set s__udg_activeLifeDrainForsaken[1]= true
	set s__udg_activeLifeDrainForsaken[2]= true
	set s__udg_activeLifeDrainForsaken[3]= true
	set s__udg_activeLifeDrainForsaken[4]= true
	set s__udg_activeLifeDrainForsaken[5]= true
	set s__udg_activeLifeDrainForsaken[6]= true
	set s__udg_activeLifeDrainForsaken[7]= true
	set s__udg_activeLifeDrainForsaken[8]= true
	set s__udg_activeLifeDrainForsaken[9]= true
	set s__udg_activeLifeDrainForsaken[10]= true
	set s__udg_activeLifeDrainForsaken[11]= true
	set s__udg_activeLifeDrainForsaken[12]= true
	set s__udg_activeRemorseless[0]= true
	set s__udg_activeRemorseless[1]= true
	set s__udg_activeRemorseless[2]= true
	set s__udg_activeRemorseless[3]= true
	set s__udg_activeRemorseless[4]= true
	set s__udg_activeRemorseless[5]= true
	set s__udg_activeRemorseless[6]= true
	set s__udg_activeRemorseless[7]= true
	set s__udg_activeRemorseless[8]= true
	set s__udg_activeRemorseless[9]= true
	set s__udg_activeRemorseless[10]= true
	set s__udg_activeRemorseless[11]= true
	set s__udg_activeRemorseless[12]= true
	set s__udg_activeBansheeScream[0]= true
	set s__udg_activeBansheeScream[1]= true
	set s__udg_activeBansheeScream[2]= true
	set s__udg_activeBansheeScream[3]= true
	set s__udg_activeBansheeScream[4]= true
	set s__udg_activeBansheeScream[5]= true
	set s__udg_activeBansheeScream[6]= true
	set s__udg_activeBansheeScream[7]= true
	set s__udg_activeBansheeScream[8]= true
	set s__udg_activeBansheeScream[9]= true
	set s__udg_activeBansheeScream[10]= true
	set s__udg_activeBansheeScream[11]= true
	set s__udg_activeBansheeScream[12]= true
	set s__udg_activePunish[0]= true
	set s__udg_activePunish[1]= true
	set s__udg_activePunish[2]= true
	set s__udg_activePunish[3]= true
	set s__udg_activePunish[4]= true
	set s__udg_activePunish[5]= true
	set s__udg_activePunish[6]= true
	set s__udg_activePunish[7]= true
	set s__udg_activePunish[8]= true
	set s__udg_activePunish[9]= true
	set s__udg_activePunish[10]= true
	set s__udg_activePunish[11]= true
	set s__udg_activePunish[12]= true
	set s__udg_activeShift[0]= true
	set s__udg_activeShift[1]= true
	set s__udg_activeShift[2]= true
	set s__udg_activeShift[3]= true
	set s__udg_activeShift[4]= true
	set s__udg_activeShift[5]= true
	set s__udg_activeShift[6]= true
	set s__udg_activeShift[7]= true
	set s__udg_activeShift[8]= true
	set s__udg_activeShift[9]= true
	set s__udg_activeShift[10]= true
	set s__udg_activeShift[11]= true
	set s__udg_activeShift[12]= true
	set s__udg_activeDeathBound[0]= true
	set s__udg_activeDeathBound[1]= true
	set s__udg_activeDeathBound[2]= true
	set s__udg_activeDeathBound[3]= true
	set s__udg_activeDeathBound[4]= true
	set s__udg_activeDeathBound[5]= true
	set s__udg_activeDeathBound[6]= true
	set s__udg_activeDeathBound[7]= true
	set s__udg_activeDeathBound[8]= true
	set s__udg_activeDeathBound[9]= true
	set s__udg_activeDeathBound[10]= true
	set s__udg_activeDeathBound[11]= true
	set s__udg_activeDeathBound[12]= true
	set s__udg_activeVileBlast[0]= true
	set s__udg_activeVileBlast[1]= true
	set s__udg_activeVileBlast[2]= true
	set s__udg_activeVileBlast[3]= true
	set s__udg_activeVileBlast[4]= true
	set s__udg_activeVileBlast[5]= true
	set s__udg_activeVileBlast[6]= true
	set s__udg_activeVileBlast[7]= true
	set s__udg_activeVileBlast[8]= true
	set s__udg_activeVileBlast[9]= true
	set s__udg_activeVileBlast[10]= true
	set s__udg_activeVileBlast[11]= true
	set s__udg_activeVileBlast[12]= true
	set s__udg_activeVirus[0]= true
	set s__udg_activeVirus[1]= true
	set s__udg_activeVirus[2]= true
	set s__udg_activeVirus[3]= true
	set s__udg_activeVirus[4]= true
	set s__udg_activeVirus[5]= true
	set s__udg_activeVirus[6]= true
	set s__udg_activeVirus[7]= true
	set s__udg_activeVirus[8]= true
	set s__udg_activeVirus[9]= true
	set s__udg_activeVirus[10]= true
	set s__udg_activeVirus[11]= true
	set s__udg_activeVirus[12]= true
	set s__udg_activePlague[0]= true
	set s__udg_activePlague[1]= true
	set s__udg_activePlague[2]= true
	set s__udg_activePlague[3]= true
	set s__udg_activePlague[4]= true
	set s__udg_activePlague[5]= true
	set s__udg_activePlague[6]= true
	set s__udg_activePlague[7]= true
	set s__udg_activePlague[8]= true
	set s__udg_activePlague[9]= true
	set s__udg_activePlague[10]= true
	set s__udg_activePlague[11]= true
	set s__udg_activePlague[12]= true
	set s__udg_activeGreaterAbomination[0]= true
	set s__udg_activeGreaterAbomination[1]= true
	set s__udg_activeGreaterAbomination[2]= true
	set s__udg_activeGreaterAbomination[3]= true
	set s__udg_activeGreaterAbomination[4]= true
	set s__udg_activeGreaterAbomination[5]= true
	set s__udg_activeGreaterAbomination[6]= true
	set s__udg_activeGreaterAbomination[7]= true
	set s__udg_activeGreaterAbomination[8]= true
	set s__udg_activeGreaterAbomination[9]= true
	set s__udg_activeGreaterAbomination[10]= true
	set s__udg_activeGreaterAbomination[11]= true
	set s__udg_activeGreaterAbomination[12]= true
	set udg_CouatlEggGroup=CreateGroup()
	set s__udg_isSunkenWaveOn[0]= false
	set s__udg_isSunkenWaveOn[1]= false
	set s__udg_isSunkenWaveOn[2]= false
	set s__udg_isSunkenWaveOn[3]= false
	set s__udg_isSunkenWaveOn[4]= false
	set s__udg_isSunkenWaveOn[5]= false
	set s__udg_isSunkenWaveOn[6]= false
	set s__udg_isSunkenWaveOn[7]= false
	set s__udg_isSunkenWaveOn[8]= false
	set s__udg_isSunkenWaveOn[9]= false
	set s__udg_isSunkenWaveOn[10]= false
	set s__udg_isSunkenWaveOn[11]= false
	set s__udg_isSunkenWaveOn[12]= false
	set udg_SunkenWaveGroup=CreateGroup()
	set udg_VortexAuraGroup=CreateGroup()
	set s__udg_isRazorEdgeOn[0]= false
	set s__udg_isRazorEdgeOn[1]= false
	set s__udg_isRazorEdgeOn[2]= false
	set s__udg_isRazorEdgeOn[3]= false
	set s__udg_isRazorEdgeOn[4]= false
	set s__udg_isRazorEdgeOn[5]= false
	set s__udg_isRazorEdgeOn[6]= false
	set s__udg_isRazorEdgeOn[7]= false
	set s__udg_isRazorEdgeOn[8]= false
	set s__udg_isRazorEdgeOn[9]= false
	set s__udg_isRazorEdgeOn[10]= false
	set s__udg_isRazorEdgeOn[11]= false
	set s__udg_isRazorEdgeOn[12]= false
	set udg_RazorEdgeGroup=CreateGroup()
	set s__udg_RazorEdgeTargets[0]= CreateGroup()
	set s__udg_RazorEdgeTargets[1]= CreateGroup()
	set s__udg_RazorEdgeTargets[2]= CreateGroup()
	set s__udg_RazorEdgeTargets[3]= CreateGroup()
	set s__udg_RazorEdgeTargets[4]= CreateGroup()
	set s__udg_RazorEdgeTargets[5]= CreateGroup()
	set s__udg_RazorEdgeTargets[6]= CreateGroup()
	set s__udg_RazorEdgeTargets[7]= CreateGroup()
	set s__udg_RazorEdgeTargets[8]= CreateGroup()
	set s__udg_RazorEdgeTargets[9]= CreateGroup()
	set s__udg_RazorEdgeTargets[10]= CreateGroup()
	set s__udg_RazorEdgeTargets[11]= CreateGroup()
	set s__udg_RazorEdgeTargets[12]= CreateGroup()
	set s__udg_isRetreatOn[0]= false
	set s__udg_isRetreatOn[1]= false
	set s__udg_isRetreatOn[2]= false
	set s__udg_isRetreatOn[3]= false
	set s__udg_isRetreatOn[4]= false
	set s__udg_isRetreatOn[5]= false
	set s__udg_isRetreatOn[6]= false
	set s__udg_isRetreatOn[7]= false
	set s__udg_isRetreatOn[8]= false
	set s__udg_isRetreatOn[9]= false
	set s__udg_isRetreatOn[10]= false
	set s__udg_isRetreatOn[11]= false
	set s__udg_isRetreatOn[12]= false
	set udg_RetreatGroup=CreateGroup()
	set udg_WeaponChangeGroup=CreateGroup()
	set udg_SubmergedGroup=CreateGroup()
	set s__udg_activeWeaponChange[0]= true
	set s__udg_activeWeaponChange[1]= true
	set s__udg_activeWeaponChange[2]= true
	set s__udg_activeWeaponChange[3]= true
	set s__udg_activeWeaponChange[4]= true
	set s__udg_activeWeaponChange[5]= true
	set s__udg_activeWeaponChange[6]= true
	set s__udg_activeWeaponChange[7]= true
	set s__udg_activeWeaponChange[8]= true
	set s__udg_activeWeaponChange[9]= true
	set s__udg_activeWeaponChange[10]= true
	set s__udg_activeWeaponChange[11]= true
	set s__udg_activeWeaponChange[12]= true
	set s__udg_activeDevourNaga[0]= true
	set s__udg_activeDevourNaga[1]= true
	set s__udg_activeDevourNaga[2]= true
	set s__udg_activeDevourNaga[3]= true
	set s__udg_activeDevourNaga[4]= true
	set s__udg_activeDevourNaga[5]= true
	set s__udg_activeDevourNaga[6]= true
	set s__udg_activeDevourNaga[7]= true
	set s__udg_activeDevourNaga[8]= true
	set s__udg_activeDevourNaga[9]= true
	set s__udg_activeDevourNaga[10]= true
	set s__udg_activeDevourNaga[11]= true
	set s__udg_activeDevourNaga[12]= true
	set s__udg_activeParasite[0]= true
	set s__udg_activeParasite[1]= true
	set s__udg_activeParasite[2]= true
	set s__udg_activeParasite[3]= true
	set s__udg_activeParasite[4]= true
	set s__udg_activeParasite[5]= true
	set s__udg_activeParasite[6]= true
	set s__udg_activeParasite[7]= true
	set s__udg_activeParasite[8]= true
	set s__udg_activeParasite[9]= true
	set s__udg_activeParasite[10]= true
	set s__udg_activeParasite[11]= true
	set s__udg_activeParasite[12]= true
	set s__udg_activeWaterShield[0]= true
	set s__udg_activeWaterShield[1]= true
	set s__udg_activeWaterShield[2]= true
	set s__udg_activeWaterShield[3]= true
	set s__udg_activeWaterShield[4]= true
	set s__udg_activeWaterShield[5]= true
	set s__udg_activeWaterShield[6]= true
	set s__udg_activeWaterShield[7]= true
	set s__udg_activeWaterShield[8]= true
	set s__udg_activeWaterShield[9]= true
	set s__udg_activeWaterShield[10]= true
	set s__udg_activeWaterShield[11]= true
	set s__udg_activeWaterShield[12]= true
	set s__udg_activeTyphoon[0]= true
	set s__udg_activeTyphoon[1]= true
	set s__udg_activeTyphoon[2]= true
	set s__udg_activeTyphoon[3]= true
	set s__udg_activeTyphoon[4]= true
	set s__udg_activeTyphoon[5]= true
	set s__udg_activeTyphoon[6]= true
	set s__udg_activeTyphoon[7]= true
	set s__udg_activeTyphoon[8]= true
	set s__udg_activeTyphoon[9]= true
	set s__udg_activeTyphoon[10]= true
	set s__udg_activeTyphoon[11]= true
	set s__udg_activeTyphoon[12]= true
	set s__udg_activeMadness[0]= true
	set s__udg_activeMadness[1]= true
	set s__udg_activeMadness[2]= true
	set s__udg_activeMadness[3]= true
	set s__udg_activeMadness[4]= true
	set s__udg_activeMadness[5]= true
	set s__udg_activeMadness[6]= true
	set s__udg_activeMadness[7]= true
	set s__udg_activeMadness[8]= true
	set s__udg_activeMadness[9]= true
	set s__udg_activeMadness[10]= true
	set s__udg_activeMadness[11]= true
	set s__udg_activeMadness[12]= true
	set s__udg_activeDrainMagic[0]= true
	set s__udg_activeDrainMagic[1]= true
	set s__udg_activeDrainMagic[2]= true
	set s__udg_activeDrainMagic[3]= true
	set s__udg_activeDrainMagic[4]= true
	set s__udg_activeDrainMagic[5]= true
	set s__udg_activeDrainMagic[6]= true
	set s__udg_activeDrainMagic[7]= true
	set s__udg_activeDrainMagic[8]= true
	set s__udg_activeDrainMagic[9]= true
	set s__udg_activeDrainMagic[10]= true
	set s__udg_activeDrainMagic[11]= true
	set s__udg_activeDrainMagic[12]= true
	set s__udg_activeSuffocate[0]= true
	set s__udg_activeSuffocate[1]= true
	set s__udg_activeSuffocate[2]= true
	set s__udg_activeSuffocate[3]= true
	set s__udg_activeSuffocate[4]= true
	set s__udg_activeSuffocate[5]= true
	set s__udg_activeSuffocate[6]= true
	set s__udg_activeSuffocate[7]= true
	set s__udg_activeSuffocate[8]= true
	set s__udg_activeSuffocate[9]= true
	set s__udg_activeSuffocate[10]= true
	set s__udg_activeSuffocate[11]= true
	set s__udg_activeSuffocate[12]= true
	set s__udg_activeSpellLock[0]= true
	set s__udg_activeSpellLock[1]= true
	set s__udg_activeSpellLock[2]= true
	set s__udg_activeSpellLock[3]= true
	set s__udg_activeSpellLock[4]= true
	set s__udg_activeSpellLock[5]= true
	set s__udg_activeSpellLock[6]= true
	set s__udg_activeSpellLock[7]= true
	set s__udg_activeSpellLock[8]= true
	set s__udg_activeSpellLock[9]= true
	set s__udg_activeSpellLock[10]= true
	set s__udg_activeSpellLock[11]= true
	set s__udg_activeSpellLock[12]= true
	set s__udg_activeMendingWater[0]= true
	set s__udg_activeMendingWater[1]= true
	set s__udg_activeMendingWater[2]= true
	set s__udg_activeMendingWater[3]= true
	set s__udg_activeMendingWater[4]= true
	set s__udg_activeMendingWater[5]= true
	set s__udg_activeMendingWater[6]= true
	set s__udg_activeMendingWater[7]= true
	set s__udg_activeMendingWater[8]= true
	set s__udg_activeMendingWater[9]= true
	set s__udg_activeMendingWater[10]= true
	set s__udg_activeMendingWater[11]= true
	set s__udg_activeMendingWater[12]= true
	set s__udg_activeCrystalized[0]= true
	set s__udg_activeCrystalized[1]= true
	set s__udg_activeCrystalized[2]= true
	set s__udg_activeCrystalized[3]= true
	set s__udg_activeCrystalized[4]= true
	set s__udg_activeCrystalized[5]= true
	set s__udg_activeCrystalized[6]= true
	set s__udg_activeCrystalized[7]= true
	set s__udg_activeCrystalized[8]= true
	set s__udg_activeCrystalized[9]= true
	set s__udg_activeCrystalized[10]= true
	set s__udg_activeCrystalized[11]= true
	set s__udg_activeCrystalized[12]= true
	set s__udg_activeSubmerge[0]= true
	set s__udg_activeSubmerge[1]= true
	set s__udg_activeSubmerge[2]= true
	set s__udg_activeSubmerge[3]= true
	set s__udg_activeSubmerge[4]= true
	set s__udg_activeSubmerge[5]= true
	set s__udg_activeSubmerge[6]= true
	set s__udg_activeSubmerge[7]= true
	set s__udg_activeSubmerge[8]= true
	set s__udg_activeSubmerge[9]= true
	set s__udg_activeSubmerge[10]= true
	set s__udg_activeSubmerge[11]= true
	set s__udg_activeSubmerge[12]= true
	set s__udg_activeThermalEruption[0]= true
	set s__udg_activeThermalEruption[1]= true
	set s__udg_activeThermalEruption[2]= true
	set s__udg_activeThermalEruption[3]= true
	set s__udg_activeThermalEruption[4]= true
	set s__udg_activeThermalEruption[5]= true
	set s__udg_activeThermalEruption[6]= true
	set s__udg_activeThermalEruption[7]= true
	set s__udg_activeThermalEruption[8]= true
	set s__udg_activeThermalEruption[9]= true
	set s__udg_activeThermalEruption[10]= true
	set s__udg_activeThermalEruption[11]= true
	set s__udg_activeThermalEruption[12]= true
	set s__udg_activeAquaBurst[0]= true
	set s__udg_activeAquaBurst[1]= true
	set s__udg_activeAquaBurst[2]= true
	set s__udg_activeAquaBurst[3]= true
	set s__udg_activeAquaBurst[4]= true
	set s__udg_activeAquaBurst[5]= true
	set s__udg_activeAquaBurst[6]= true
	set s__udg_activeAquaBurst[7]= true
	set s__udg_activeAquaBurst[8]= true
	set s__udg_activeAquaBurst[9]= true
	set s__udg_activeAquaBurst[10]= true
	set s__udg_activeAquaBurst[11]= true
	set s__udg_activeAquaBurst[12]= true
	set s__udg_activeCurseOfTheDepth[0]= true
	set s__udg_activeCurseOfTheDepth[1]= true
	set s__udg_activeCurseOfTheDepth[2]= true
	set s__udg_activeCurseOfTheDepth[3]= true
	set s__udg_activeCurseOfTheDepth[4]= true
	set s__udg_activeCurseOfTheDepth[5]= true
	set s__udg_activeCurseOfTheDepth[6]= true
	set s__udg_activeCurseOfTheDepth[7]= true
	set s__udg_activeCurseOfTheDepth[8]= true
	set s__udg_activeCurseOfTheDepth[9]= true
	set s__udg_activeCurseOfTheDepth[10]= true
	set s__udg_activeCurseOfTheDepth[11]= true
	set s__udg_activeCurseOfTheDepth[12]= true
	set s__udg_activeGust[0]= true
	set s__udg_activeGust[1]= true
	set s__udg_activeGust[2]= true
	set s__udg_activeGust[3]= true
	set s__udg_activeGust[4]= true
	set s__udg_activeGust[5]= true
	set s__udg_activeGust[6]= true
	set s__udg_activeGust[7]= true
	set s__udg_activeGust[8]= true
	set s__udg_activeGust[9]= true
	set s__udg_activeGust[10]= true
	set s__udg_activeGust[11]= true
	set s__udg_activeGust[12]= true
	set s__udg_activeRavage[0]= true
	set s__udg_activeRavage[1]= true
	set s__udg_activeRavage[2]= true
	set s__udg_activeRavage[3]= true
	set s__udg_activeRavage[4]= true
	set s__udg_activeRavage[5]= true
	set s__udg_activeRavage[6]= true
	set s__udg_activeRavage[7]= true
	set s__udg_activeRavage[8]= true
	set s__udg_activeRavage[9]= true
	set s__udg_activeRavage[10]= true
	set s__udg_activeRavage[11]= true
	set s__udg_activeRavage[12]= true
	set s__udg_activeSunkenWave[0]= true
	set s__udg_activeSunkenWave[1]= true
	set s__udg_activeSunkenWave[2]= true
	set s__udg_activeSunkenWave[3]= true
	set s__udg_activeSunkenWave[4]= true
	set s__udg_activeSunkenWave[5]= true
	set s__udg_activeSunkenWave[6]= true
	set s__udg_activeSunkenWave[7]= true
	set s__udg_activeSunkenWave[8]= true
	set s__udg_activeSunkenWave[9]= true
	set s__udg_activeSunkenWave[10]= true
	set s__udg_activeSunkenWave[11]= true
	set s__udg_activeSunkenWave[12]= true
	set s__udg_activeMist[0]= true
	set s__udg_activeMist[1]= true
	set s__udg_activeMist[2]= true
	set s__udg_activeMist[3]= true
	set s__udg_activeMist[4]= true
	set s__udg_activeMist[5]= true
	set s__udg_activeMist[6]= true
	set s__udg_activeMist[7]= true
	set s__udg_activeMist[8]= true
	set s__udg_activeMist[9]= true
	set s__udg_activeMist[10]= true
	set s__udg_activeMist[11]= true
	set s__udg_activeMist[12]= true
	set s__udg_activeMonsoon[0]= true
	set s__udg_activeMonsoon[1]= true
	set s__udg_activeMonsoon[2]= true
	set s__udg_activeMonsoon[3]= true
	set s__udg_activeMonsoon[4]= true
	set s__udg_activeMonsoon[5]= true
	set s__udg_activeMonsoon[6]= true
	set s__udg_activeMonsoon[7]= true
	set s__udg_activeMonsoon[8]= true
	set s__udg_activeMonsoon[9]= true
	set s__udg_activeMonsoon[10]= true
	set s__udg_activeMonsoon[11]= true
	set s__udg_activeMonsoon[12]= true
	set s__udg_activeMalediction[0]= true
	set s__udg_activeMalediction[1]= true
	set s__udg_activeMalediction[2]= true
	set s__udg_activeMalediction[3]= true
	set s__udg_activeMalediction[4]= true
	set s__udg_activeMalediction[5]= true
	set s__udg_activeMalediction[6]= true
	set s__udg_activeMalediction[7]= true
	set s__udg_activeMalediction[8]= true
	set s__udg_activeMalediction[9]= true
	set s__udg_activeMalediction[10]= true
	set s__udg_activeMalediction[11]= true
	set s__udg_activeMalediction[12]= true
	set s__udg_activeRazorEdge[0]= true
	set s__udg_activeRazorEdge[1]= true
	set s__udg_activeRazorEdge[2]= true
	set s__udg_activeRazorEdge[3]= true
	set s__udg_activeRazorEdge[4]= true
	set s__udg_activeRazorEdge[5]= true
	set s__udg_activeRazorEdge[6]= true
	set s__udg_activeRazorEdge[7]= true
	set s__udg_activeRazorEdge[8]= true
	set s__udg_activeRazorEdge[9]= true
	set s__udg_activeRazorEdge[10]= true
	set s__udg_activeRazorEdge[11]= true
	set s__udg_activeRazorEdge[12]= true
	set s__udg_activeRetreat[0]= true
	set s__udg_activeRetreat[1]= true
	set s__udg_activeRetreat[2]= true
	set s__udg_activeRetreat[3]= true
	set s__udg_activeRetreat[4]= true
	set s__udg_activeRetreat[5]= true
	set s__udg_activeRetreat[6]= true
	set s__udg_activeRetreat[7]= true
	set s__udg_activeRetreat[8]= true
	set s__udg_activeRetreat[9]= true
	set s__udg_activeRetreat[10]= true
	set s__udg_activeRetreat[11]= true
	set s__udg_activeRetreat[12]= true
	set s__udg_activeHealingWater[0]= true
	set s__udg_activeHealingWater[1]= true
	set s__udg_activeHealingWater[2]= true
	set s__udg_activeHealingWater[3]= true
	set s__udg_activeHealingWater[4]= true
	set s__udg_activeHealingWater[5]= true
	set s__udg_activeHealingWater[6]= true
	set s__udg_activeHealingWater[7]= true
	set s__udg_activeHealingWater[8]= true
	set s__udg_activeHealingWater[9]= true
	set s__udg_activeHealingWater[10]= true
	set s__udg_activeHealingWater[11]= true
	set s__udg_activeHealingWater[12]= true
	set s__udg_activeHunterInstinct[0]= true
	set s__udg_activeHunterInstinct[1]= true
	set s__udg_activeHunterInstinct[2]= true
	set s__udg_activeHunterInstinct[3]= true
	set s__udg_activeHunterInstinct[4]= true
	set s__udg_activeHunterInstinct[5]= true
	set s__udg_activeHunterInstinct[6]= true
	set s__udg_activeHunterInstinct[7]= true
	set s__udg_activeHunterInstinct[8]= true
	set s__udg_activeHunterInstinct[9]= true
	set s__udg_activeHunterInstinct[10]= true
	set s__udg_activeHunterInstinct[11]= true
	set s__udg_activeHunterInstinct[12]= true
	set s__udg_WrathOfThePhoenixBool[0]= false
	set s__udg_WrathOfThePhoenixBool[1]= false
	set s__udg_WrathOfThePhoenixBool[2]= false
	set s__udg_WrathOfThePhoenixBool[3]= false
	set s__udg_WrathOfThePhoenixBool[4]= false
	set s__udg_WrathOfThePhoenixBool[5]= false
	set s__udg_WrathOfThePhoenixBool[6]= false
	set s__udg_WrathOfThePhoenixDamageGroup[0]= CreateGroup()
	set s__udg_WrathOfThePhoenixDamageGroup[1]= CreateGroup()
	set s__udg_WrathOfThePhoenixDamageGroup[2]= CreateGroup()
	set s__udg_WrathOfThePhoenixDamageGroup[3]= CreateGroup()
	set s__udg_WrathOfThePhoenixDamageGroup[4]= CreateGroup()
	set s__udg_WrathOfThePhoenixDamageGroup[5]= CreateGroup()
	set s__udg_WrathOfThePhoenixDamageGroup[6]= CreateGroup()
	set s__udg_WrathOfThePhoenixDamageGroup[7]= CreateGroup()
	set s__udg_WrathOfThePhoenixDamageGroup[8]= CreateGroup()
	set s__udg_WrathOfThePhoenixDamageGroup[9]= CreateGroup()
	set s__udg_WrathOfThePhoenixDamageGroup[10]= CreateGroup()
	set s__udg_WrathOfThePhoenixDamageGroup[11]= CreateGroup()
	set s__udg_WrathOfThePhoenixDamageGroup[12]= CreateGroup()
	set s__udg_isCultOfForgottenResearched[0]= false
	set s__udg_isCultOfForgottenResearched[1]= false
	set s__udg_isCultOfForgottenResearched[2]= false
	set s__udg_isCultOfForgottenResearched[3]= false
	set s__udg_isCultOfForgottenResearched[4]= false
	set s__udg_isCultOfForgottenResearched[5]= false
	set s__udg_isCultOfForgottenResearched[6]= false
	set s__udg_PlayerRace[0]= 0
	set s__udg_PlayerRace[1]= 0
	set s__udg_PlayerRace[2]= 0
	set s__udg_PlayerRace[3]= 0
	set s__udg_PlayerRace[4]= 0
	set s__udg_PlayerRace[5]= 0
	set s__udg_PlayerRace[6]= 0
	set s__udg_PlayerRacePrevious[0]= 0
	set s__udg_PlayerRacePrevious[1]= 0
	set s__udg_PlayerRacePrevious[2]= 0
	set s__udg_PlayerRacePrevious[3]= 0
	set s__udg_PlayerRacePrevious[4]= 0
	set s__udg_PlayerRacePrevious[5]= 0
	set s__udg_PlayerRacePrevious[6]= 0
	set udg_isGameModeClassic=false
	set udg_AmountOfRoundsPlayed=0
	set udg_GameModeTimer=CreateTimer()
	set udg_RaceSelectionTimer=CreateTimer()
	set s__udg_XRVoteClickCheck[0]= false
	set s__udg_XRVoteClickCheck[1]= false
	set s__udg_XRVoteClickCheck[2]= false
	set s__udg_XRVoteClickCheck[3]= false
	set s__udg_XRVoteClickCheck[4]= false
	set s__udg_XRVoteClickCheck[5]= false
	set s__udg_XRVoteClickCheck[6]= false
	set udg_TotalRounds=0
	set s__udg_CameraZoom[0]= 0
	set s__udg_CameraZoom[1]= 0
	set s__udg_CameraZoom[2]= 0
	set s__udg_CameraZoom[3]= 0
	set s__udg_CameraZoom[4]= 0
	set s__udg_CameraZoom[5]= 0
	set s__udg_CameraZoom[6]= 0
	set udg_WaveTime=35.00
	set s__udg_UnitGroupBuildings[0]= CreateGroup()
	set s__udg_UnitGroupBuildings[1]= CreateGroup()
	set s__udg_UnitGroupBuildings[2]= CreateGroup()
	set udg_Timer=CreateTimer()
	set s__udg_PlayerQueue[0]= 0
	set s__udg_PlayerQueue[1]= 0
	set s__udg_PlayerQueue[2]= 0
	set s__udg_PlayerQueue[3]= 0
	set s__udg_PlayerQueue[4]= 0
	set s__udg_PlayerQueue[5]= 0
	set s__udg_PlayerQueue[6]= 0
	set s__udg_SpawnPlayers[0]= 0
	set s__udg_SpawnPlayers[1]= 0
	set s__udg_SpawnPlayers[2]= 0
	set s__udg_SpawnDelayTimer[0]= CreateTimer()
	set s__udg_SpawnDelayTimer[1]= CreateTimer()
	set s__udg_SpawnDelayTimer[2]= CreateTimer()
	set s__udg_TotalUnits[0]= 0
	set s__udg_TotalUnits[1]= 0
	set s__udg_TotalUnits[2]= 0
	set s__udg_TotalUnits[3]= 0
	set s__udg_TotalUnits[4]= 0
	set s__udg_TotalUnits[5]= 0
	set s__udg_TotalUnits[6]= 0
	set s__udg_TotalKills[0]= 0
	set s__udg_TotalKills[1]= 0
	set s__udg_TotalKills[2]= 0
	set s__udg_TotalKills[3]= 0
	set s__udg_TotalKills[4]= 0
	set s__udg_TotalKills[5]= 0
	set s__udg_TotalKills[6]= 0
	set s__udg_TotalDamage[0]= 0
	set s__udg_TotalDamage[1]= 0
	set s__udg_TotalDamage[2]= 0
	set s__udg_TotalDamage[3]= 0
	set s__udg_TotalDamage[4]= 0
	set s__udg_TotalDamage[5]= 0
	set s__udg_TotalDamage[6]= 0
	set s__udg_TotalUnitsSpawned[0]= 0
	set s__udg_TotalUnitsSpawned[1]= 0
	set s__udg_TotalUnitsSpawned[2]= 0
	set s__udg_TotalUnitsSpawned[3]= 0
	set s__udg_TotalUnitsSpawned[4]= 0
	set s__udg_TotalUnitsSpawned[5]= 0
	set s__udg_TotalUnitsSpawned[6]= 0
	set s__udg_TotalScore[0]= 0
	set s__udg_TotalScore[1]= 0
	set s__udg_TotalScore[2]= 0
	set s__udg_TotalScore[3]= 0
	set s__udg_TotalScore[4]= 0
	set s__udg_TotalScore[5]= 0
	set s__udg_TotalScore[6]= 0
	set s__udg_TotalGoldEarned[0]= 0
	set s__udg_TotalGoldEarned[1]= 0
	set s__udg_TotalGoldEarned[2]= 0
	set s__udg_TotalGoldEarned[3]= 0
	set s__udg_TotalGoldEarned[4]= 0
	set s__udg_TotalGoldEarned[5]= 0
	set s__udg_TotalGoldEarned[6]= 0
	set udg_PlayerLeavesEventReal=0
	set s__udg_FrameFortressTimer[0]= CreateTimer()
	set s__udg_FrameFortressTimer[1]= CreateTimer()
	set s__udg_FrameFortressTimer[2]= CreateTimer()
	set udg_TimerScoreboard=CreateTimer()
	set s__udg_ActivePlayers[0]= false
	set s__udg_ActivePlayers[1]= false
	set s__udg_ActivePlayers[2]= false
	set s__udg_ActivePlayers[3]= false
	set s__udg_ActivePlayers[4]= false
	set s__udg_ActivePlayers[5]= false
	set s__udg_ActivePlayers[6]= false
	set s__udg_Teams[0]= CreateForce()
	set s__udg_Teams[1]= CreateForce()
	set s__udg_Teams[2]= CreateForce()
	set s__udg_Victory[0]= false
	set s__udg_Victory[1]= false
	set s__udg_Victory[2]= false
	set s__udg_Victory[3]= false
	set s__udg_Victory[4]= false
	set s__udg_Victory[5]= false
	set s__udg_Victory[6]= false
	set udg_GameOver=false
	set s__udg_UnitBuildingSwap[0]= false
	set s__udg_UnitBuildingSwap[1]= false
	set s__udg_UnitBuildingSwap[2]= false
	set s__udg_UnitBuildingSwap[3]= false
	set s__udg_UnitBuildingSwap[4]= false
	set s__udg_UnitBuildingSwap[5]= false
	set s__udg_UnitBuildingSwap[6]= false
	set udg_HeroBuildings=CreateGroup()
	set s__udg_Income[0]= 0
	set s__udg_Income[1]= 0
	set s__udg_Income[2]= 0
	set s__udg_Income[3]= 0
	set s__udg_Income[4]= 0
	set s__udg_Income[5]= 0
	set s__udg_Income[6]= 0
	set s__udg_MiddleIncome[0]= 0
	set s__udg_MiddleIncome[1]= 0
	set s__udg_MiddleIncome[2]= 0
	set s__udg_MiddleIncome2[0]= 0
	set s__udg_MiddleIncome2[1]= 0
	set s__udg_MiddleIncome2[2]= 0
	set s__udg_AddedTime[0]= 0
	set s__udg_AddedTime[1]= 0
	set s__udg_AddedTime[2]= 0
	set s__udg_AddedTime[3]= 0
	set s__udg_AddedTime[4]= 0
	set s__udg_AddedTime[5]= 0
	set s__udg_AddedTime[6]= 0
	set udg_testbool=false
	set s__udg_GoldExtractorCost[0]= 150
	set s__udg_GoldExtractorCost[1]= 150
	set s__udg_GoldExtractorCost[2]= 150
	set s__udg_GoldExtractorCost[3]= 150
	set s__udg_GoldExtractorCost[4]= 150
	set s__udg_GoldExtractorCost[5]= 150
	set s__udg_GoldExtractorCost[6]= 150
	set s__udg_GoldExtractorNumber[0]= 0
	set s__udg_GoldExtractorNumber[1]= 0
	set s__udg_GoldExtractorNumber[2]= 0
	set s__udg_GoldExtractorNumber[3]= 0
	set s__udg_GoldExtractorNumber[4]= 0
	set s__udg_GoldExtractorNumber[5]= 0
	set s__udg_GoldExtractorNumber[6]= 0
	set s__udg_GoldExtractorCooldown[0]= CreateTimer()
	set s__udg_GoldExtractorCooldown[1]= CreateTimer()
	set s__udg_GoldExtractorCooldown[2]= CreateTimer()
	set s__udg_GoldExtractorCooldown[3]= CreateTimer()
	set s__udg_GoldExtractorCooldown[4]= CreateTimer()
	set s__udg_GoldExtractorCooldown[5]= CreateTimer()
	set s__udg_GoldExtractorCooldown[6]= CreateTimer()
	set s__udg_GoldExtractorCooldownBoolean[0]= false
	set s__udg_GoldExtractorCooldownBoolean[1]= false
	set s__udg_GoldExtractorCooldownBoolean[2]= false
	set s__udg_GoldExtractorCooldownBoolean[3]= false
	set s__udg_GoldExtractorCooldownBoolean[4]= false
	set s__udg_GoldExtractorCooldownBoolean[5]= false
	set s__udg_GoldExtractorCooldownBoolean[6]= false
	set s__udg_UnitsOnTheirHalf[0]= CreateGroup()
	set s__udg_UnitsOnTheirHalf[1]= CreateGroup()
	set s__udg_UnitsOnTheirHalf[2]= CreateGroup()
	set s__udg_UnitsOnTheirHalf[3]= CreateGroup()
	set s__udg_UnitsOnTheirHalf[4]= CreateGroup()
	set s__udg_UnitsOnTheirHalf[5]= CreateGroup()
	set s__udg_UnitsOnTheirHalf[6]= CreateGroup()
	set s__udg_UnitsOnEnemyHalf[0]= CreateGroup()
	set s__udg_UnitsOnEnemyHalf[1]= CreateGroup()
	set s__udg_UnitsOnEnemyHalf[2]= CreateGroup()
	set s__udg_UnitsOnEnemyHalf[3]= CreateGroup()
	set s__udg_UnitsOnEnemyHalf[4]= CreateGroup()
	set s__udg_UnitsOnEnemyHalf[5]= CreateGroup()
	set s__udg_UnitsOnEnemyHalf[6]= CreateGroup()
	set udg_UnitsOnTeam1Side=CreateGroup()
	set udg_UnitsOnTeam2Side=CreateGroup()
	set udg_DeadUnits=CreateGroup()
	set s__udg_IdleUnits[0]= CreateGroup()
	set s__udg_IdleUnits[1]= CreateGroup()
	set s__udg_IdleUnits[2]= CreateGroup()
	set udg_UnitLifespan=130
	set udg_TimedLifeTTs=CreateGroup()
	set s__udg_TotalHeroes[0]= 0
	set s__udg_TotalHeroes[1]= 0
	set s__udg_TotalHeroes[2]= 0
	set s__udg_TotalHeroes[3]= 0
	set s__udg_TotalHeroes[4]= 0
	set s__udg_TotalHeroes[5]= 0
	set s__udg_TotalHeroes[6]= 0
	set udg_Heroes=CreateGroup()
	set udg_DeadHeroes=CreateGroup()
	set s__udg_UnitXP[0]= 0
	set s__udg_UnitXP[1]= 0
	set s__udg_UnitXP[2]= 0
	set s__udg_UnitXP[3]= 0
	set s__udg_UnitXP[4]= 0
	set s__udg_UnitXP[5]= 0
	set s__udg_UnitXP[6]= 0
	set s__udg_UnitXP[7]= 0
	set s__udg_UnitXP[8]= 0
	set s__udg_UnitXP[9]= 0
	set s__udg_UnitXP[10]= 0
	set s__udg_HeroXP[0]= 0
	set s__udg_HeroXP[1]= 0
	set s__udg_HeroXP[2]= 0
	set s__udg_HeroXP[3]= 0
	set s__udg_HeroXP[4]= 0
	set s__udg_HeroXP[5]= 0
	set s__udg_HeroXP[6]= 0
	set s__udg_HeroXP[7]= 0
	set s__udg_HeroXP[8]= 0
	set s__udg_HeroXP[9]= 0
	set s__udg_HeroXP[10]= 0
	set s__udg_isShopOpen[0]= false
	set s__udg_isShopOpen[1]= false
	set s__udg_isShopOpen[2]= false
	set s__udg_isShopOpen[3]= false
	set s__udg_isShopOpen[4]= false
	set s__udg_isShopOpen[5]= false
	set s__udg_isShopOpen[6]= false
	set udg_TwentyMinuteTimer=CreateTimer()
	set udg_intSeconds=0
	set udg_intMinutes=0
	set udg_intHours=0
	set s__udg_UnitExpirationTimer[0]= CreateTimer()
	set s__udg_UnitExpirationTimer[1]= CreateTimer()
	set s__udg_UnitExpirationTimer[2]= CreateTimer()
	set udg_Bool=false
	set udg_UnitGroup=CreateGroup()
	set udg_UnitGroup2=CreateGroup()
	set udg_UnitGroup3=CreateGroup()
	set udg_UnitGroup4=CreateGroup()
	set udg_Integer=0
	set udg_Integer2=0
	set udg_Real=0
	set udg_Real2=0
	set udg_Real3=0
	set udg_Real4=0
	set udg_DebugCounter=0
endfunction
//****************************************************************************
//* 
//*   Better Triggers Functions
//* 
//****************************************************************************
function TriggerRegisterGenericFrameEventBT takes trigger trig,real frameEvent,limitop opcode,string varName returns nothing
    call TriggerRegisterVariableEvent(trig, varName, opcode, frameEvent)
endfunction

function GetLastCreatedFrameBT takes nothing returns framehandle
    return bt_lastCreatedFrame
endfunction

function GetTriggerFrameBT takes nothing returns framehandle
    return bt_triggerFrame
endfunction

function GetTriggerFramePlayerBT takes nothing returns player
    return bt_triggerFramePlayer
endfunction

function GetTriggerFrameEventBT takes nothing returns frameeventtype
    return bt_triggerFrameEvent
endfunction

function GetTriggerFrameValueBT takes nothing returns real
    return bt_triggerFrameValue
endfunction

function GetTriggerFrameTextBT takes nothing returns string
    return bt_triggerFrameText
endfunction

function BlzFrameSetPointBT takes framehandle frame,real x,real y,framepointtype point,framehandle relative,framepointtype relativePoint returns nothing
    call BlzFrameSetPoint(frame, point, relative, relativePoint, x, y)
endfunction

function BlzFrameSetAbsPointBT takes framehandle frame,real x,real y,framepointtype point returns nothing
    call BlzFrameSetAbsPoint(frame, point, x, y)
endfunction

function BlzFrameSetEnableBT takes boolean enabled,framehandle frame returns nothing
    call BlzFrameSetEnable(frame, enabled)
endfunction

function TriggerAddFrameClickBT takes nothing returns nothing
    set bt_triggerFrame=BlzGetTriggerFrame()
    set bt_triggerFramePlayer=GetTriggerPlayer()
    set bt_triggerFrameValue=BlzGetTriggerFrameValue()
    set bt_triggerFrameText=BlzGetTriggerFrameText()
    set bt_triggerFrameEvent=FRAMEEVENT_CONTROL_CLICK
    set bt_genericFrameEvent=1.0
    set bt_genericFrameEvent=0.0
endfunction

function TriggerAddFrameMouseEnterBT takes nothing returns nothing
    set bt_triggerFrame=BlzGetTriggerFrame()
    set bt_triggerFramePlayer=GetTriggerPlayer()
    set bt_triggerFrameValue=BlzGetTriggerFrameValue()
    set bt_triggerFrameText=BlzGetTriggerFrameText()
    set bt_triggerFrameEvent=FRAMEEVENT_MOUSE_ENTER
    set bt_genericFrameEvent=2.0
    set bt_genericFrameEvent=0.0
endfunction

function TriggerAddFrameMouseLeaveBT takes nothing returns nothing
    set bt_triggerFrame=BlzGetTriggerFrame()
    set bt_triggerFramePlayer=GetTriggerPlayer()
    set bt_triggerFrameValue=BlzGetTriggerFrameValue()
    set bt_triggerFrameText=BlzGetTriggerFrameText()
    set bt_triggerFrameEvent=FRAMEEVENT_MOUSE_LEAVE
    set bt_genericFrameEvent=3.0
    set bt_genericFrameEvent=0.0
endfunction

function TriggerAddFrameMouseUpBT takes nothing returns nothing
    set bt_triggerFrame=BlzGetTriggerFrame()
    set bt_triggerFramePlayer=GetTriggerPlayer()
    set bt_triggerFrameValue=BlzGetTriggerFrameValue()
    set bt_triggerFrameText=BlzGetTriggerFrameText()
    set bt_triggerFrameEvent=FRAMEEVENT_MOUSE_UP
    set bt_genericFrameEvent=4.0
    set bt_genericFrameEvent=0.0
endfunction

function TriggerAddFrameMouseDownBT takes nothing returns nothing
    set bt_triggerFrame=BlzGetTriggerFrame()
    set bt_triggerFramePlayer=GetTriggerPlayer()
    set bt_triggerFrameValue=BlzGetTriggerFrameValue()
    set bt_triggerFrameText=BlzGetTriggerFrameText()
    set bt_triggerFrameEvent=FRAMEEVENT_MOUSE_DOWN
    set bt_genericFrameEvent=5.0
    set bt_genericFrameEvent=0.0
endfunction

function TriggerAddFrameMouseWheelBT takes nothing returns nothing
    set bt_triggerFrame=BlzGetTriggerFrame()
    set bt_triggerFramePlayer=GetTriggerPlayer()
    set bt_triggerFrameValue=BlzGetTriggerFrameValue()
    set bt_triggerFrameText=BlzGetTriggerFrameText()
    set bt_triggerFrameEvent=FRAMEEVENT_MOUSE_WHEEL
    set bt_genericFrameEvent=6.0
    set bt_genericFrameEvent=0.0
endfunction

function TriggerAddFrameMouseDoubleClickBT takes nothing returns nothing
    set bt_triggerFrame=BlzGetTriggerFrame()
    set bt_triggerFramePlayer=GetTriggerPlayer()
    set bt_triggerFrameValue=BlzGetTriggerFrameValue()
    set bt_triggerFrameText=BlzGetTriggerFrameText()
    set bt_triggerFrameEvent=FRAMEEVENT_MOUSE_DOUBLECLICK
    set bt_genericFrameEvent=7.0
    set bt_genericFrameEvent=0.0
endfunction

function TriggerAddFrameCheckboxCheckedBT takes nothing returns nothing
    set bt_triggerFrame=BlzGetTriggerFrame()
    set bt_triggerFramePlayer=GetTriggerPlayer()
    set bt_triggerFrameValue=BlzGetTriggerFrameValue()
    set bt_triggerFrameText=BlzGetTriggerFrameText()
    set bt_triggerFrameEvent=FRAMEEVENT_CHECKBOX_CHECKED
    set bt_genericFrameEvent=8.0
    set bt_genericFrameEvent=0.0
endfunction

function TriggerAddFrameCheckboxUnCheckedBT takes nothing returns nothing
    set bt_triggerFrame=BlzGetTriggerFrame()
    set bt_triggerFramePlayer=GetTriggerPlayer()
    set bt_triggerFrameValue=BlzGetTriggerFrameValue()
    set bt_triggerFrameText=BlzGetTriggerFrameText()
    set bt_triggerFrameEvent=FRAMEEVENT_CHECKBOX_UNCHECKED
    set bt_genericFrameEvent=9.0
    set bt_genericFrameEvent=0.0
endfunction

function TriggerAddFrameEditboxTextChangedBT takes nothing returns nothing
    set bt_triggerFrame=BlzGetTriggerFrame()
    set bt_triggerFramePlayer=GetTriggerPlayer()
    set bt_triggerFrameValue=BlzGetTriggerFrameValue()
    set bt_triggerFrameText=BlzGetTriggerFrameText()
    set bt_triggerFrameEvent=FRAMEEVENT_EDITBOX_TEXT_CHANGED
    set bt_genericFrameEvent=10.0
    set bt_genericFrameEvent=0.0
endfunction

function TriggerAddFrameEditboxEnterBT takes nothing returns nothing
    set bt_triggerFrame=BlzGetTriggerFrame()
    set bt_triggerFramePlayer=GetTriggerPlayer()
    set bt_triggerFrameValue=BlzGetTriggerFrameValue()
    set bt_triggerFrameText=BlzGetTriggerFrameText()
    set bt_triggerFrameEvent=FRAMEEVENT_EDITBOX_ENTER
    set bt_genericFrameEvent=11.0
    set bt_genericFrameEvent=0.0
endfunction

function TriggerAddFramePopupMenuItemChangedBT takes nothing returns nothing
    set bt_triggerFrame=BlzGetTriggerFrame()
    set bt_triggerFramePlayer=GetTriggerPlayer()
    set bt_triggerFrameValue=BlzGetTriggerFrameValue()
    set bt_triggerFrameText=BlzGetTriggerFrameText()
    set bt_triggerFrameEvent=FRAMEEVENT_POPUPMENU_ITEM_CHANGED
    set bt_genericFrameEvent=12.0
    set bt_genericFrameEvent=0.0
endfunction

function TriggerAddFrameSpriteAnimUpdateBT takes nothing returns nothing
    set bt_triggerFrame=BlzGetTriggerFrame()
    set bt_triggerFramePlayer=GetTriggerPlayer()
    set bt_triggerFrameValue=BlzGetTriggerFrameValue()
    set bt_triggerFrameText=BlzGetTriggerFrameText()
    set bt_triggerFrameEvent=FRAMEEVENT_SPRITE_ANIM_UPDATE
    set bt_genericFrameEvent=13.0
    set bt_genericFrameEvent=0.0
endfunction

function TriggerAddFrameSliderValueChangedBT takes nothing returns nothing
    set bt_triggerFrame=BlzGetTriggerFrame()
    set bt_triggerFramePlayer=GetTriggerPlayer()
    set bt_triggerFrameValue=BlzGetTriggerFrameValue()
    set bt_triggerFrameText=BlzGetTriggerFrameText()
    set bt_triggerFrameEvent=FRAMEEVENT_SLIDER_VALUE_CHANGED
    set bt_genericFrameEvent=14.0
    set bt_genericFrameEvent=0.0
endfunction

function TriggerAddFrameDialogCancelBT takes nothing returns nothing
    set bt_triggerFrame=BlzGetTriggerFrame()
    set bt_triggerFramePlayer=GetTriggerPlayer()
    set bt_triggerFrameValue=BlzGetTriggerFrameValue()
    set bt_triggerFrameText=BlzGetTriggerFrameText()
    set bt_triggerFrameEvent=FRAMEEVENT_DIALOG_CANCEL
    set bt_genericFrameEvent=15.0
    set bt_genericFrameEvent=0.0
endfunction

function TriggerAddFrameDialogAcceptBT takes nothing returns nothing
    set bt_triggerFrame=BlzGetTriggerFrame()
    set bt_triggerFramePlayer=GetTriggerPlayer()
    set bt_triggerFrameValue=BlzGetTriggerFrameValue()
    set bt_triggerFrameText=BlzGetTriggerFrameText()
    set bt_triggerFrameEvent=FRAMEEVENT_DIALOG_ACCEPT
    set bt_genericFrameEvent=16.0
    set bt_genericFrameEvent=0.0
endfunction

function FrameAttachEvents takes string attachEvents returns nothing
    local integer array events
    local trigger trig
    local integer i= 0

    if ( StringLength(attachEvents) != 16 ) then
        call BJDebugMsg("Internal Error: 'BlzCreateFrameBT' received invalid event string.")
        return
    endif

    if ( bt_lastCreatedFrame == null ) then
        call BJDebugMsg("Internal Error: 'Last Created Frame' was null.")
        return
    endif

    loop
        exitwhen i > 16
        set events[i]=S2I(SubString(attachEvents, i, i + 1))
        set i=i + 1
    endloop

    if ( events[0] > 0 ) then
        set trig=CreateTrigger()
        call BlzTriggerRegisterFrameEvent(trig, bt_lastCreatedFrame, FRAMEEVENT_CONTROL_CLICK)
        call TriggerAddAction(trig, function TriggerAddFrameClickBT)
    endif
    if ( events[1] > 0 ) then
        set trig=CreateTrigger()
        call BlzTriggerRegisterFrameEvent(trig, bt_lastCreatedFrame, FRAMEEVENT_MOUSE_ENTER)
        call TriggerAddAction(trig, function TriggerAddFrameMouseEnterBT)
    endif
    if ( events[2] > 0 ) then
        set trig=CreateTrigger()
        call BlzTriggerRegisterFrameEvent(trig, bt_lastCreatedFrame, FRAMEEVENT_MOUSE_LEAVE)
        call TriggerAddAction(trig, function TriggerAddFrameMouseLeaveBT)
    endif
    if ( events[3] > 0 ) then
        set trig=CreateTrigger()
        call BlzTriggerRegisterFrameEvent(trig, bt_lastCreatedFrame, FRAMEEVENT_MOUSE_UP)
        call TriggerAddAction(trig, function TriggerAddFrameMouseUpBT)
    endif
    if ( events[4] > 0 ) then
        set trig=CreateTrigger()
        call BlzTriggerRegisterFrameEvent(trig, bt_lastCreatedFrame, FRAMEEVENT_MOUSE_DOWN)
        call TriggerAddAction(trig, function TriggerAddFrameMouseDownBT)
    endif
    if ( events[5] > 0 ) then
        set trig=CreateTrigger()
        call BlzTriggerRegisterFrameEvent(trig, bt_lastCreatedFrame, FRAMEEVENT_MOUSE_WHEEL)
        call TriggerAddAction(trig, function TriggerAddFrameMouseWheelBT)
    endif
    if ( events[6] > 0 ) then
        set trig=CreateTrigger()
        call BlzTriggerRegisterFrameEvent(trig, bt_lastCreatedFrame, FRAMEEVENT_MOUSE_DOUBLECLICK)
        call TriggerAddAction(trig, function TriggerAddFrameMouseDoubleClickBT)
    endif
    if ( events[7] > 0 ) then
        set trig=CreateTrigger()
        call BlzTriggerRegisterFrameEvent(trig, bt_lastCreatedFrame, FRAMEEVENT_CHECKBOX_CHECKED)
        call TriggerAddAction(trig, function TriggerAddFrameCheckboxCheckedBT)
    endif
    if ( events[8] > 0 ) then
        set trig=CreateTrigger()
        call BlzTriggerRegisterFrameEvent(trig, bt_lastCreatedFrame, FRAMEEVENT_CHECKBOX_UNCHECKED)
        call TriggerAddAction(trig, function TriggerAddFrameCheckboxUnCheckedBT)
    endif
    if ( events[9] > 0 ) then
        set trig=CreateTrigger()
        call BlzTriggerRegisterFrameEvent(trig, bt_lastCreatedFrame, FRAMEEVENT_EDITBOX_TEXT_CHANGED)
        call TriggerAddAction(trig, function TriggerAddFrameEditboxTextChangedBT)
    endif
    if ( events[10] > 0 ) then
        set trig=CreateTrigger()
        call BlzTriggerRegisterFrameEvent(trig, bt_lastCreatedFrame, FRAMEEVENT_EDITBOX_ENTER)
        call TriggerAddAction(trig, function TriggerAddFrameEditboxEnterBT)
    endif
    if ( events[11] > 0 ) then
        set trig=CreateTrigger()
        call BlzTriggerRegisterFrameEvent(trig, bt_lastCreatedFrame, FRAMEEVENT_POPUPMENU_ITEM_CHANGED)
        call TriggerAddAction(trig, function TriggerAddFramePopupMenuItemChangedBT)
    endif
    if ( events[12] > 0 ) then
        set trig=CreateTrigger()
        call BlzTriggerRegisterFrameEvent(trig, bt_lastCreatedFrame, FRAMEEVENT_SPRITE_ANIM_UPDATE)
        call TriggerAddAction(trig, function TriggerAddFrameSpriteAnimUpdateBT)
    endif
    if ( events[13] > 0 ) then
        set trig=CreateTrigger()
        call BlzTriggerRegisterFrameEvent(trig, bt_lastCreatedFrame, FRAMEEVENT_SLIDER_VALUE_CHANGED)
        call TriggerAddAction(trig, function TriggerAddFrameSliderValueChangedBT)
    endif
    if ( events[14] > 0 ) then
        set trig=CreateTrigger()
        call BlzTriggerRegisterFrameEvent(trig, bt_lastCreatedFrame, FRAMEEVENT_DIALOG_CANCEL)
        call TriggerAddAction(trig, function TriggerAddFrameDialogCancelBT)
    endif
    if ( events[15] > 0 ) then
        set trig=CreateTrigger()
        call BlzTriggerRegisterFrameEvent(trig, bt_lastCreatedFrame, FRAMEEVENT_DIALOG_ACCEPT)
        call TriggerAddAction(trig, function TriggerAddFrameDialogAcceptBT)
    endif

    set trig=null
endfunction

function BlzCreateFrameBT takes string name,framehandle owner,integer priority,integer createContext,string attachEvents returns nothing
    set bt_lastCreatedFrame=BlzCreateFrame(name, owner, priority, createContext)
    call FrameAttachEvents(attachEvents)
endfunction

function BlzCreateSimpleFrameBT takes string name,framehandle owner,integer createContext,string attachEvents returns nothing
    set bt_lastCreatedFrame=BlzCreateSimpleFrame(name, owner, createContext)
    call FrameAttachEvents(attachEvents)
endfunction

function BlzCreateFrameByTypeBT takes string typeName,string name,framehandle owner,string inherits,integer createContext,string attachEvents returns nothing
    set bt_lastCreatedFrame=BlzCreateFrameByType(typeName, name, owner, inherits, createContext)
    call FrameAttachEvents(attachEvents)
endfunction

function BlzQueueImmediateOrderByIdBT takes unit whichUnit,string order returns nothing
    call BlzQueueImmediateOrderById(whichUnit, OrderId(order))
endfunction


function BlzQueuePointOrderByIdBT takes string order,unit whichUnit,location loc returns nothing
    call BlzQueuePointOrderById(whichUnit, OrderId(order), GetLocationX(loc), GetLocationY(loc))
endfunction


function BlzQueueTargetOrderByIdBT takes unit whichUnit,string order,widget targetWidget returns nothing
    call BlzQueueTargetOrderById(whichUnit, OrderId(order), targetWidget)
endfunction//****************************************************************************
//* 
//*   Map Item Tables
//* 
//****************************************************************************


//****************************************************************************
//* 
//*   Unit Item Tables
//* 
//****************************************************************************
//****************************************************************************
//* 
//*   Sounds
//* 
//****************************************************************************
function InitSounds takes nothing returns nothing

set gg_snd_ReceiveGold=CreateSound("Abilities/Spells/Items/ResourceItems/ReceiveGold.flac", false, true, true, 0, 0, "SpellsEAX")
call SetSoundParamsFromLabel(gg_snd_ReceiveGold, "ReceiveGold")
call SetSoundDuration(gg_snd_ReceiveGold, 0)
call SetSoundChannel(gg_snd_ReceiveGold, 13)
call SetSoundDistances(gg_snd_ReceiveGold, 750, 3000)
call SetSoundVolume(gg_snd_ReceiveGold, 127)
set gg_snd_Hint=CreateSound("Sound/Interface/Hint.flac", false, false, false, 1, 1, "DoodadsEAX")
call SetSoundParamsFromLabel(gg_snd_Hint, "Hint")
call SetSoundDuration(gg_snd_Hint, 1)
call SetSoundChannel(gg_snd_Hint, 8)
call SetSoundDistanceCutoff(gg_snd_Hint, 10000)
call SetSoundVolume(gg_snd_Hint, 80)
set gg_snd_AchievementEarned=CreateSound("Sound/Interface/AchievementEarned.flac", false, false, false, 0, 0, "DefaultEAXON")
call SetSoundParamsFromLabel(gg_snd_AchievementEarned, "AchievementEarned")
call SetSoundDuration(gg_snd_AchievementEarned, 0)
call SetSoundChannel(gg_snd_AchievementEarned, 8)
call SetSoundDistanceCutoff(gg_snd_AchievementEarned, 10000)
call SetSoundVolume(gg_snd_AchievementEarned, 127)
set gg_snd_Warning=CreateSound("Sound/Interface/Warning.flac", false, false, false, 0, 0, "DefaultEAXON")
call SetSoundParamsFromLabel(gg_snd_Warning, "Warning")
call SetSoundDuration(gg_snd_Warning, 0)
call SetSoundChannel(gg_snd_Warning, 8)
call SetSoundDistanceCutoff(gg_snd_Warning, 10000)
call SetSoundVolume(gg_snd_Warning, 80)
set gg_snd_GoodJob=CreateSound("Sound/Interface/GoodJob.flac", false, false, false, 0, 0, "DefaultEAXON")
call SetSoundParamsFromLabel(gg_snd_GoodJob, "GoodJob")
call SetSoundDuration(gg_snd_GoodJob, 0)
call SetSoundChannel(gg_snd_GoodJob, 8)
call SetSoundDistanceCutoff(gg_snd_GoodJob, 10000)
call SetSoundVolume(gg_snd_GoodJob, 127)
set gg_snd_GamePause=CreateSound("Sound/Interface/GamePause.flac", false, false, false, 0, 0, "DefaultEAXON")
call SetSoundParamsFromLabel(gg_snd_GamePause, "PauseGame")
call SetSoundDuration(gg_snd_GamePause, 0)
call SetSoundChannel(gg_snd_GamePause, 8)
call SetSoundDistanceCutoff(gg_snd_GamePause, 10000)
call SetSoundVolume(gg_snd_GamePause, 100)
set gg_snd_QuestActivateWhat1=CreateSound("Sound/Interface/QuestActivateWhat1.flac", false, false, false, 0, 0, "DefaultEAXON")
call SetSoundParamsFromLabel(gg_snd_QuestActivateWhat1, "QuestLogModified")
call SetSoundDuration(gg_snd_QuestActivateWhat1, 0)
call SetSoundChannel(gg_snd_QuestActivateWhat1, 8)
call SetSoundDistanceCutoff(gg_snd_QuestActivateWhat1, 10000)
call SetSoundVolume(gg_snd_QuestActivateWhat1, 80)
set gg_snd_Shinobi_Execution=CreateSound("war3mapImported/Shinobi Execution.mp3", false, false, false, 0, 0, "DefaultEAXON")
call SetSoundParamsFromLabel(gg_snd_Shinobi_Execution, "")
call SetSoundDuration(gg_snd_Shinobi_Execution, 0)
call SetSoundChannel(gg_snd_Shinobi_Execution, 0)
call SetSoundDistances(gg_snd_Shinobi_Execution, 0, 10000)
call SetSoundVolume(gg_snd_Shinobi_Execution, 127)
set gg_snd_UI_Stinger_VictoryPanel02=CreateSound("war3mapImported/UI_Stinger_VictoryPanel02.mp3", false, false, false, 0, 0, "DefaultEAXON")
call SetSoundParamsFromLabel(gg_snd_UI_Stinger_VictoryPanel02, "")
call SetSoundDuration(gg_snd_UI_Stinger_VictoryPanel02, 0)
call SetSoundChannel(gg_snd_UI_Stinger_VictoryPanel02, 0)
call SetSoundDistances(gg_snd_UI_Stinger_VictoryPanel02, 0, 10000)
call SetSoundVolume(gg_snd_UI_Stinger_VictoryPanel02, 127)
set gg_snd_Coin=CreateSound("war3mapImported/Coin.mp3", false, false, false, 0, 0, "DefaultEAXON")
call SetSoundParamsFromLabel(gg_snd_Coin, "")
call SetSoundDuration(gg_snd_Coin, 0)
call SetSoundChannel(gg_snd_Coin, 0)
call SetSoundDistances(gg_snd_Coin, 0, 10000)
call SetSoundVolume(gg_snd_Coin, 127)
set gg_snd_GatewayMorph0="GatewayMorph0.mp3"
endfunction

//****************************************************************************
//* 
//*   Destructible Objects
//* 
//****************************************************************************
function CreateAllDestructables takes nothing returns nothing
local real life
endfunction

//****************************************************************************
//* 
//*   Item Creation
//* 
//****************************************************************************
function CreateAllItems takes nothing returns nothing
call BlzCreateItemWithSkin('I004', 1508.2805, 4054.17, 'I004')
call BlzCreateItemWithSkin('I003', 1714.823, 4030.975, 'I003')
call BlzCreateItemWithSkin('I002', 586.75244, 2534.9268, 'I002')
call BlzCreateItemWithSkin('I001', 1546.6339, 2300.8967, 'I001')
call BlzCreateItemWithSkin('I000', 796.5266, 4079.2388, 'I000')
call BlzCreateItemWithSkin('I00B', 1682.6617, 4159.718, 'I00B')
call BlzCreateItemWithSkin('I008', - 2455.5752, 3729.5186, 'I008')
call BlzCreateItemWithSkin('I00D', 2854.3594, 2702.583, 'I00D')
call BlzCreateItemWithSkin('I009', - 625.6598, 4384.666, 'I009')
call BlzCreateItemWithSkin('I00F', 1850.3241, 4024.1816, 'I00F')
call BlzCreateItemWithSkin('I00C', 1612.4113, 4055.2349, 'I00C')
call BlzCreateItemWithSkin('I00E', - 1376.5004, 3350.406, 'I00E')
call BlzCreateItemWithSkin('I00A', 1787.5538, 4023.0012, 'I00A')
call BlzCreateItemWithSkin('I007', - 3193.3972, 2607.6287, 'I007')
call BlzCreateItemWithSkin('I006', - 3649.9897, 2641.0564, 'I006')
call BlzCreateItemWithSkin('I00K', 419.3961, 3251.8633, 'I00K')
call BlzCreateItemWithSkin('I00G', - 1872.4364, 4099.567, 'I00G')
call BlzCreateItemWithSkin('I00H', - 2662.5786, 3669.7188, 'I00H')
call BlzCreateItemWithSkin('I00I', - 1896.2899, 3239.1045, 'I00I')
call BlzCreateItemWithSkin('dphe', - 836.8829, 3332.665, 'dphe')
call BlzCreateItemWithSkin('I00J', - 656.90076, 3334.0762, 'I00J')
call BlzCreateItemWithSkin('I00L', - 1960.8895, 4011.07, 'I00L')
call BlzCreateItemWithSkin('I00M', 2301.8743, 3535.7231, 'I00M')
call BlzCreateItemWithSkin('I00N', 2377.785, 3521.7197, 'I00N')
call BlzCreateItemWithSkin('I00O', - 2392.26, 2991.9375, 'I00O')
call BlzCreateItemWithSkin('I00P', - 1595.705, 3169.3574, 'I00P')
call BlzCreateItemWithSkin('I00Q', 2140.405, 2300.6045, 'I00Q')
call BlzCreateItemWithSkin('I00R', - 2087.642, 3110.4458, 'I00R')
call BlzCreateItemWithSkin('I00S', - 2534.5, 2925.3208, 'I00S')
endfunction

//****************************************************************************
//* 
//*   Unit Creation
//* 
//****************************************************************************
function CreateAllUnits takes nothing returns nothing
 local unit u
 local integer unitID
 local trigger t
 local real life
	set u=BlzCreateUnitWithSkin(Player(4), 'h01B', 7872, - 2688, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(4), 'h01B', 7872, - 2496, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(0), 'h01B', 7872, 1664, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(5), 'h01B', - 7872, - 2880, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(5), 'h01B', - 7872, - 2688, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(5), 'h01B', - 7872, - 2496, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(5), 'h01B', - 7872, - 2304, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(1), 'h01B', - 7872, 2048, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(1), 'h01B', - 7872, 1856, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(4), 'h01B', 7872, - 2304, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(4), 'h01B', 7872, - 2880, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(0), 'h01B', 7872, 2048, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(0), 'h01B', 7872, 1472, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(0), 'h01B', 7872, 1856, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(3), 'h01B', - 7872, - 128, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(3), 'h01B', - 7872, - 704, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(3), 'h01B', - 7872, - 512, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(3), 'h01B', - 7872, - 320, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(1), 'h01B', - 7872, 1664, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(1), 'h01B', - 7872, 1472, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(2), 'h01B', 7872, - 704, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(2), 'h01B', 7872, - 512, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(2), 'h01B', 7872, - 320, 270.00000068324533, 'h01B')
	set u=BlzCreateUnitWithSkin(Player(2), 'h01B', 7872, - 128, 270.00000068324533, 'h01B')
endfunction

//****************************************************************************
//* 
//*   Regions
//* 
//****************************************************************************
function CreateRegions takes nothing returns nothing
local weathereffect we

set gg_rct_Battlefield=Rect(- 6336, - 5632, 6336, 6144)
set gg_rct_Build_Player_1=Rect(6560, 1376, 7648, 2976)
set gg_rct_Build_Player_2=Rect(- 7648, 1376, - 6560, 2976)
set gg_rct_Build_Player_3=Rect(6560, - 800, 7648, 800)
set gg_rct_Build_Player_4=Rect(- 7648, - 800, - 6560, 800)
set gg_rct_Build_Player_5=Rect(6560, - 2976, 7648, - 1376)
set gg_rct_Build_Player_6=Rect(- 7648, - 2976, - 6560, - 1376)
set gg_rct_Fortress_Team_1=Rect(4096, - 256, 4608, 256)
set gg_rct_Fortress_Team_2=Rect(- 4608, - 256, - 4096, 256)
set gg_rct_Hero_Dead_Region=Rect(32, 5024, 768, 5536)
set gg_rct_Item_Shop_Player_1=Rect(7520, 3104, 7584, 3168)
set gg_rct_Item_Shop_Player_2=Rect(- 7584, 3104, - 7520, 3168)
set gg_rct_Item_Shop_Player_3=Rect(7520, 928, 7584, 992)
set gg_rct_Item_Shop_Player_4=Rect(- 7584, 928, - 7520, 992)
set gg_rct_Item_Shop_Player_5=Rect(7520, - 1248, 7584, - 1184)
set gg_rct_Item_Shop_Player_6=Rect(- 7584, - 1248, - 7520, - 1184)
set gg_rct_Middle_Doodad_00=Rect(- 288, 1920, 288, 2176)
set gg_rct_Middle_Doodad_04=Rect(- 128, - 1920, 128, 1920)
set gg_rct_Middle_Doodad_08=Rect(- 288, - 2176, 288, - 1920)
set gg_rct_Middle_Team_1=Rect(0, - 2176, 512, 2176)
set gg_rct_Middle_Team_2=Rect(- 512, - 2176, 0, 2176)
set gg_rct_Spawn_Player_1=Rect(7072, 2144, 7136, 2208)
set gg_rct_Spawn_Player_2=Rect(- 7136, 2144, - 7072, 2208)
set gg_rct_Spawn_Player_3=Rect(7072, - 32, 7136, 32)
set gg_rct_Spawn_Player_4=Rect(- 7136, - 32, - 7072, 32)
set gg_rct_Spawn_Player_5=Rect(7072, - 2208, 7136, - 2144)
set gg_rct_Spawn_Player_6=Rect(- 7136, - 2208, - 7072, - 2144)
set gg_rct_Team_1_Backline=Rect(3680, - 5632, 4704, 6144)
set gg_rct_Team_1_Spawn=Rect(4768, - 800, 5856, 800)
set gg_rct_Team_2_Backline=Rect(- 4704, - 5632, - 3680, 6144)
set gg_rct_Team_2_Spawn=Rect(- 5856, - 800, - 4768, 800)
set gg_rct_Tower_Team_1=Rect(2304, - 64, 2432, 64)
set gg_rct_Tower_Team_2=Rect(- 2432, - 64, - 2304, 64)
set gg_rct_UnitLoad=Rect(- 256, - 8928, 256, - 8480)
set gg_rct_Upgrade_Player_1=Rect(7840, 2784, 7904, 2848)
set gg_rct_Upgrade_Player_1_Copy=Rect(7840, 2528, 7904, 2592)
set gg_rct_Upgrade_Player_1_Copy_2=Rect(7840, 2272, 7904, 2336)
set gg_rct_Upgrade_Player_2=Rect(- 7904, 2784, - 7840, 2848)
set gg_rct_Upgrade_Player_2_Copy=Rect(- 7904, 2528, - 7840, 2592)
set gg_rct_Upgrade_Player_2_Copy_2=Rect(- 7904, 2272, - 7840, 2336)
set gg_rct_Upgrade_Player_3=Rect(7840, 608, 7904, 672)
set gg_rct_Upgrade_Player_3_Copy=Rect(7840, 352, 7904, 416)
set gg_rct_Upgrade_Player_3_Copy_2=Rect(7840, 96, 7904, 160)
set gg_rct_Upgrade_Player_4=Rect(- 7904, 608, - 7840, 672)
set gg_rct_Upgrade_Player_4_Copy=Rect(- 7904, 352, - 7840, 416)
set gg_rct_Upgrade_Player_4_Copy_2=Rect(- 7904, 96, - 7840, 160)
set gg_rct_Upgrade_Player_5=Rect(7840, - 1568, 7904, - 1504)
set gg_rct_Upgrade_Player_5_Copy=Rect(7840, - 1824, 7904, - 1760)
set gg_rct_Upgrade_Player_5_Copy_2=Rect(7840, - 2080, 7904, - 2016)
set gg_rct_Upgrade_Player_6=Rect(- 7904, - 1568, - 7840, - 1504)
set gg_rct_Upgrade_Player_6_Copy=Rect(- 7904, - 1824, - 7840, - 1760)
set gg_rct_Upgrade_Player_6_Copy_2=Rect(- 7904, - 2080, - 7840, - 2016)
set gg_rct_Item_Removal_1=Rect(6336, - 3200, 7872, 3200)
set gg_rct_Item_Removal_2=Rect(- 7872, - 3200, - 6336, 3200)
set gg_rct_Defensive_Structure_Area=Rect(- 4768, - 1280, 4768, 1280)
set gg_rct_Player_1_Units_TT=Rect(8032, 2144, 8096, 2208)
set gg_rct_Player_3_Units_TT=Rect(8032, - 32, 8096, 32)
set gg_rct_Player_5_Units_TT=Rect(8032, - 2208, 8096, - 2144)
set gg_rct_Player_2_Units_TT=Rect(- 8096, 2144, - 8032, 2208)
set gg_rct_Player_4_Units_TT=Rect(- 8096, - 32, - 8032, 32)
set gg_rct_Player_6_Units_TT=Rect(- 8096, - 2208, - 8032, - 2144)
endfunction

//****************************************************************************
//* 
//*   Cameras
//* 
//****************************************************************************
function CreateCameras takes nothing returns nothing

set gg_cam_Default_Game_Camera=CreateCameraSetup()
call CameraSetupSetField(gg_cam_Default_Game_Camera, CAMERA_FIELD_ZOFFSET, 0, 0.0)
call CameraSetupSetField(gg_cam_Default_Game_Camera, CAMERA_FIELD_ROTATION, 90, 0.0)
call CameraSetupSetField(gg_cam_Default_Game_Camera, CAMERA_FIELD_ANGLE_OF_ATTACK, 304, 0.0)
call CameraSetupSetField(gg_cam_Default_Game_Camera, CAMERA_FIELD_TARGET_DISTANCE, 1650, 0.0)
call CameraSetupSetField(gg_cam_Default_Game_Camera, CAMERA_FIELD_ROLL, 0, 0.0)
call CameraSetupSetField(gg_cam_Default_Game_Camera, CAMERA_FIELD_FIELD_OF_VIEW, 70, 0.0)
call CameraSetupSetField(gg_cam_Default_Game_Camera, CAMERA_FIELD_FARZ, 5000, 0.0)
call CameraSetupSetField(gg_cam_Default_Game_Camera, CAMERA_FIELD_NEARZ, 16, 0.0)
call CameraSetupSetField(gg_cam_Default_Game_Camera, CAMERA_FIELD_LOCAL_PITCH, 0, 0.0)
call CameraSetupSetField(gg_cam_Default_Game_Camera, CAMERA_FIELD_LOCAL_YAW, 0, 0.0)
call CameraSetupSetField(gg_cam_Default_Game_Camera, CAMERA_FIELD_LOCAL_ROLL, 0, 0.0)
call CameraSetupSetDestPosition(gg_cam_Default_Game_Camera, 29.26, 5471.09, 0.0)

set gg_cam_Camera_Player_1=CreateCameraSetup()
call CameraSetupSetField(gg_cam_Camera_Player_1, CAMERA_FIELD_ZOFFSET, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_1, CAMERA_FIELD_ROTATION, 90, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_1, CAMERA_FIELD_ANGLE_OF_ATTACK, 304, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_1, CAMERA_FIELD_TARGET_DISTANCE, 1650, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_1, CAMERA_FIELD_ROLL, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_1, CAMERA_FIELD_FIELD_OF_VIEW, 70, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_1, CAMERA_FIELD_FARZ, 5000, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_1, CAMERA_FIELD_NEARZ, 16, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_1, CAMERA_FIELD_LOCAL_PITCH, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_1, CAMERA_FIELD_LOCAL_YAW, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_1, CAMERA_FIELD_LOCAL_ROLL, 0, 0.0)
call CameraSetupSetDestPosition(gg_cam_Camera_Player_1, 7102.118, 2176.4373, 0.0)

set gg_cam_Camera_Player_2=CreateCameraSetup()
call CameraSetupSetField(gg_cam_Camera_Player_2, CAMERA_FIELD_ZOFFSET, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_2, CAMERA_FIELD_ROTATION, 90, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_2, CAMERA_FIELD_ANGLE_OF_ATTACK, 304, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_2, CAMERA_FIELD_TARGET_DISTANCE, 1650, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_2, CAMERA_FIELD_ROLL, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_2, CAMERA_FIELD_FIELD_OF_VIEW, 70, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_2, CAMERA_FIELD_FARZ, 5000, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_2, CAMERA_FIELD_NEARZ, 16, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_2, CAMERA_FIELD_LOCAL_PITCH, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_2, CAMERA_FIELD_LOCAL_YAW, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_2, CAMERA_FIELD_LOCAL_ROLL, 0, 0.0)
call CameraSetupSetDestPosition(gg_cam_Camera_Player_2, - 7109.224, 2180.3308, 0.0)

set gg_cam_Camera_Player_3=CreateCameraSetup()
call CameraSetupSetField(gg_cam_Camera_Player_3, CAMERA_FIELD_ZOFFSET, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_3, CAMERA_FIELD_ROTATION, 90, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_3, CAMERA_FIELD_ANGLE_OF_ATTACK, 304, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_3, CAMERA_FIELD_TARGET_DISTANCE, 1650, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_3, CAMERA_FIELD_ROLL, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_3, CAMERA_FIELD_FIELD_OF_VIEW, 70, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_3, CAMERA_FIELD_FARZ, 5000, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_3, CAMERA_FIELD_NEARZ, 16, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_3, CAMERA_FIELD_LOCAL_PITCH, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_3, CAMERA_FIELD_LOCAL_YAW, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_3, CAMERA_FIELD_LOCAL_ROLL, 0, 0.0)
call CameraSetupSetDestPosition(gg_cam_Camera_Player_3, 7105.0938, 9.294601, 0.0)

set gg_cam_Camera_Player_4=CreateCameraSetup()
call CameraSetupSetField(gg_cam_Camera_Player_4, CAMERA_FIELD_ZOFFSET, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_4, CAMERA_FIELD_ROTATION, 90, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_4, CAMERA_FIELD_ANGLE_OF_ATTACK, 304, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_4, CAMERA_FIELD_TARGET_DISTANCE, 1650, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_4, CAMERA_FIELD_ROLL, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_4, CAMERA_FIELD_FIELD_OF_VIEW, 70, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_4, CAMERA_FIELD_FARZ, 5000, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_4, CAMERA_FIELD_NEARZ, 16, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_4, CAMERA_FIELD_LOCAL_PITCH, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_4, CAMERA_FIELD_LOCAL_YAW, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_4, CAMERA_FIELD_LOCAL_ROLL, 0, 0.0)
call CameraSetupSetDestPosition(gg_cam_Camera_Player_4, - 7107.029, 9.153595, 0.0)

set gg_cam_Camera_Player_5=CreateCameraSetup()
call CameraSetupSetField(gg_cam_Camera_Player_5, CAMERA_FIELD_ZOFFSET, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_5, CAMERA_FIELD_ROTATION, 90, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_5, CAMERA_FIELD_ANGLE_OF_ATTACK, 304, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_5, CAMERA_FIELD_TARGET_DISTANCE, 1650, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_5, CAMERA_FIELD_ROLL, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_5, CAMERA_FIELD_FIELD_OF_VIEW, 70, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_5, CAMERA_FIELD_FARZ, 5000, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_5, CAMERA_FIELD_NEARZ, 16, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_5, CAMERA_FIELD_LOCAL_PITCH, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_5, CAMERA_FIELD_LOCAL_YAW, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_5, CAMERA_FIELD_LOCAL_ROLL, 0, 0.0)
call CameraSetupSetDestPosition(gg_cam_Camera_Player_5, 7098.917, - 2171.0986, 0.0)

set gg_cam_Camera_Player_6=CreateCameraSetup()
call CameraSetupSetField(gg_cam_Camera_Player_6, CAMERA_FIELD_ZOFFSET, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_6, CAMERA_FIELD_ROTATION, 90, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_6, CAMERA_FIELD_ANGLE_OF_ATTACK, 304, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_6, CAMERA_FIELD_TARGET_DISTANCE, 1650, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_6, CAMERA_FIELD_ROLL, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_6, CAMERA_FIELD_FIELD_OF_VIEW, 70, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_6, CAMERA_FIELD_FARZ, 5000, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_6, CAMERA_FIELD_NEARZ, 16, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_6, CAMERA_FIELD_LOCAL_PITCH, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_6, CAMERA_FIELD_LOCAL_YAW, 0, 0.0)
call CameraSetupSetField(gg_cam_Camera_Player_6, CAMERA_FIELD_LOCAL_ROLL, 0, 0.0)
call CameraSetupSetDestPosition(gg_cam_Camera_Player_6, - 7105.383, - 2161.3372, 0.0)

set gg_cam_Cinematic_01_Team_1=CreateCameraSetup()
call CameraSetupSetField(gg_cam_Cinematic_01_Team_1, CAMERA_FIELD_ZOFFSET, 0, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_01_Team_1, CAMERA_FIELD_ROTATION, 107.1, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_01_Team_1, CAMERA_FIELD_ANGLE_OF_ATTACK, 325.93, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_01_Team_1, CAMERA_FIELD_TARGET_DISTANCE, 3890.61, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_01_Team_1, CAMERA_FIELD_ROLL, 0, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_01_Team_1, CAMERA_FIELD_FIELD_OF_VIEW, 70, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_01_Team_1, CAMERA_FIELD_FARZ, 10000, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_01_Team_1, CAMERA_FIELD_NEARZ, 16, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_01_Team_1, CAMERA_FIELD_LOCAL_PITCH, 0, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_01_Team_1, CAMERA_FIELD_LOCAL_YAW, 0, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_01_Team_1, CAMERA_FIELD_LOCAL_ROLL, 0, 0.0)
call CameraSetupSetDestPosition(gg_cam_Cinematic_01_Team_1, 102.97, 4420.22, 0.0)

set gg_cam_Cinematic_02_Team_1=CreateCameraSetup()
call CameraSetupSetField(gg_cam_Cinematic_02_Team_1, CAMERA_FIELD_ZOFFSET, 0, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_02_Team_1, CAMERA_FIELD_ROTATION, 137.73, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_02_Team_1, CAMERA_FIELD_ANGLE_OF_ATTACK, 327.57, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_02_Team_1, CAMERA_FIELD_TARGET_DISTANCE, 2196.15, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_02_Team_1, CAMERA_FIELD_ROLL, 0, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_02_Team_1, CAMERA_FIELD_FIELD_OF_VIEW, 70, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_02_Team_1, CAMERA_FIELD_FARZ, 7500, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_02_Team_1, CAMERA_FIELD_NEARZ, 16, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_02_Team_1, CAMERA_FIELD_LOCAL_PITCH, 0, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_02_Team_1, CAMERA_FIELD_LOCAL_YAW, 0, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_02_Team_1, CAMERA_FIELD_LOCAL_ROLL, 0, 0.0)
call CameraSetupSetDestPosition(gg_cam_Cinematic_02_Team_1, 2818.0447, - 370.41064, 0.0)

set gg_cam_Cinematic_01_Team_2=CreateCameraSetup()
call CameraSetupSetField(gg_cam_Cinematic_01_Team_2, CAMERA_FIELD_ZOFFSET, 0, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_01_Team_2, CAMERA_FIELD_ROTATION, 75.1, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_01_Team_2, CAMERA_FIELD_ANGLE_OF_ATTACK, 325.93, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_01_Team_2, CAMERA_FIELD_TARGET_DISTANCE, 3890.61, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_01_Team_2, CAMERA_FIELD_ROLL, 0, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_01_Team_2, CAMERA_FIELD_FIELD_OF_VIEW, 70, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_01_Team_2, CAMERA_FIELD_FARZ, 10000, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_01_Team_2, CAMERA_FIELD_NEARZ, 16, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_01_Team_2, CAMERA_FIELD_LOCAL_PITCH, 0, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_01_Team_2, CAMERA_FIELD_LOCAL_YAW, 0, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_01_Team_2, CAMERA_FIELD_LOCAL_ROLL, 0, 0.0)
call CameraSetupSetDestPosition(gg_cam_Cinematic_01_Team_2, - 501.91595, 4379.3433, 0.0)

set gg_cam_Cinematic_02_Team_2=CreateCameraSetup()
call CameraSetupSetField(gg_cam_Cinematic_02_Team_2, CAMERA_FIELD_ZOFFSET, 0, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_02_Team_2, CAMERA_FIELD_ROTATION, 45, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_02_Team_2, CAMERA_FIELD_ANGLE_OF_ATTACK, 327.57, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_02_Team_2, CAMERA_FIELD_TARGET_DISTANCE, 2196.15, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_02_Team_2, CAMERA_FIELD_ROLL, 0, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_02_Team_2, CAMERA_FIELD_FIELD_OF_VIEW, 70, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_02_Team_2, CAMERA_FIELD_FARZ, 7500, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_02_Team_2, CAMERA_FIELD_NEARZ, 16, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_02_Team_2, CAMERA_FIELD_LOCAL_PITCH, 0, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_02_Team_2, CAMERA_FIELD_LOCAL_YAW, 0, 0.0)
call CameraSetupSetField(gg_cam_Cinematic_02_Team_2, CAMERA_FIELD_LOCAL_ROLL, 0, 0.0)
call CameraSetupSetDestPosition(gg_cam_Cinematic_02_Team_2, - 2820.2168, - 384.60913, 0.0)

set gg_cam_DSR_Unit_Preview_Angle=CreateCameraSetup()
call CameraSetupSetField(gg_cam_DSR_Unit_Preview_Angle, CAMERA_FIELD_ZOFFSET, 0, 0.0)
call CameraSetupSetField(gg_cam_DSR_Unit_Preview_Angle, CAMERA_FIELD_ROTATION, 90, 0.0)
call CameraSetupSetField(gg_cam_DSR_Unit_Preview_Angle, CAMERA_FIELD_ANGLE_OF_ATTACK, 321.13, 0.0)
call CameraSetupSetField(gg_cam_DSR_Unit_Preview_Angle, CAMERA_FIELD_TARGET_DISTANCE, 846.71, 0.0)
call CameraSetupSetField(gg_cam_DSR_Unit_Preview_Angle, CAMERA_FIELD_ROLL, 0, 0.0)
call CameraSetupSetField(gg_cam_DSR_Unit_Preview_Angle, CAMERA_FIELD_FIELD_OF_VIEW, 70, 0.0)
call CameraSetupSetField(gg_cam_DSR_Unit_Preview_Angle, CAMERA_FIELD_FARZ, 5000, 0.0)
call CameraSetupSetField(gg_cam_DSR_Unit_Preview_Angle, CAMERA_FIELD_NEARZ, 16, 0.0)
call CameraSetupSetField(gg_cam_DSR_Unit_Preview_Angle, CAMERA_FIELD_LOCAL_PITCH, 0, 0.0)
call CameraSetupSetField(gg_cam_DSR_Unit_Preview_Angle, CAMERA_FIELD_LOCAL_YAW, 0, 0.0)
call CameraSetupSetField(gg_cam_DSR_Unit_Preview_Angle, CAMERA_FIELD_LOCAL_ROLL, 0, 0.0)
call CameraSetupSetDestPosition(gg_cam_DSR_Unit_Preview_Angle, 5632.0923, 2557.9475, 0.0)

endfunction

//****************************************************************************
//* 
//*   Custom Script Code
//* 
//****************************************************************************
//TESH.scrollpos=0
//TESH.alwaysfold=0
///////////////////////////////////////////////////////////////
/// The Map Meta Data Library
/// Version: v1.00       
/// Last Modified: April 24, 2009
/// Author Chain: Strilanc, [insert next ...]
///////////////////////////////////////////////////////////////
/// This library is used to emit standardized meta data which parsers and bot hosts can use to record relevant
/// game statistics like "hero kills" which would otherwise be impossible to record automatically.
///
/// In particular, the flag function can be used to indicate if a leaver should be awarded a win or not. Replays
/// don't contain enough information to easily tell winners who leave from losers who leave. (for example: people
/// who leave while end-game stats are being shown)
///////////////////////////////////////////////////////////////
/// Interface:
///   void FlagPlayer(player, flag_constant)
///   void DefineValue(name, type_constant, goal_constant, suggest_constant)
///   void UpdateValueInt(name, player, operation_constant, value)
///   void UpdateValueReal(name, player, operation_constant, value)
///   void UpdateValueString(name, player, value)
///   void DefineEvent0(name, format) /////////////////////////


 
 

    





    
    


function ShowHideGrid takes nothing returns nothing
    local integer p= GetConvertedPlayerId(GetTriggerPlayer())
    local integer i= 1
    local integer endIndex= 96
    local integer val

    call BlzFrameSetEnable(BlzGetTriggerFrame(), false)
    call BlzFrameSetEnable(BlzGetTriggerFrame(), true)

    if isGridOn[p] then
        set isGridOn[p]=false
        set val=0
    else
        set isGridOn[p]=true
        set val=255
    endif

    loop
        exitwhen i > endIndex
        if ( GetLocalPlayer() == GetTriggerPlayer() ) then
            call SetImageColor(s__gridEffect[(p)*(96)+i], 255, 255, 255, val)
        endif
        set i=i + 1
    endloop
endfunction

function SetupGrid takes nothing returns nothing
    local integer p= 1
    local integer endIndex= 6
    local integer i= 1
    local integer x= 1
    local integer endIndex1= 96
    local integer y= 1
    local real px
    local real py
    local trigger trig

    loop
        exitwhen p > endIndex
        set px=GetRectCenterX(s__udg_BuildRegion[p])
        set py=GetRectCenterY(s__udg_BuildRegion[p])
        set x=1
        set y=1
        set i=1

        loop
            exitwhen i > endIndex1

            if ( ModuloInteger(x, 9) == 0 ) then
                set x=1
                set y=y + 1
            endif

            // CreateImage(string file, real sizeX, real sizeY, real sizeZ, real posX, real posY, real posZ, real originX, real originY, real originZ, integer imageType)
            set s__gridEffect[(p)*(96)+i]= CreateImage("Gridplane.dds", 128, 128, 0, 0, 0, 0, 1, 1, 1, 1)
            call SetImageRenderAlways(s__gridEffect[(p)*(96)+i], true)
            call SetImageColor(s__gridEffect[(p)*(96)+i], 255, 255, 255, 0)
            call SetImagePosition(s__gridEffect[(p)*(96)+i], ( px - 128 * 5 ) + ( x * 128 ), ( py - 128 * 7 ) + ( y * 128 ), 0)

            set x=x + 1
            set i=i + 1
        endloop

        set p=p + 1
    endloop

    set btnGrid=BlzCreateFrame("ScriptDialogButton", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), 0, 0)
    call BlzFrameSetSize(btnGrid, 0.06, 0.03)
    call BlzFrameSetAbsPoint(btnGrid, FRAMEPOINT_CENTER, 0.28, 0.14)
    call BlzFrameSetText(btnGrid, "Grid")
    call BlzFrameSetVisible(btnGrid, false)

    // Button trigger
    set trig=CreateTrigger()
    call BlzTriggerRegisterFrameEvent(trig, btnGrid, FRAMEEVENT_CONTROL_CLICK)
    call TriggerAddAction(trig, function ShowHideGrid)

endfunction



function MenuAbilities takes nothing returns nothing
    local integer p= GetConvertedPlayerId(GetTriggerPlayer())
    local integer r= s__udg_PlayerRace[p]

    set s__isVisibleProgressionMenu[p]= false
    if ( GetLocalPlayer() == GetTriggerPlayer() ) then
        call BlzFrameSetEnable(btnAbilityControl, false)
        call BlzFrameSetEnable(btnAbilityControl, true)
        call BlzFrameSetVisible(progressionMenu, false)
    endif

    if ( isVisibleAbilityMenu[p] == false ) then
        set isVisibleAbilityMenu[p]=true
        if ( GetLocalPlayer() == GetTriggerPlayer() ) then
            call BlzFrameSetVisible(abilityMenu[r], true)
        endif
    else
        set isVisibleAbilityMenu[p]=false
        set isVisibleNeutralAbilityMenu[p]=false
        if ( GetLocalPlayer() == GetTriggerPlayer() ) then
            call BlzFrameSetVisible(abilityMenu[r], false)
            call BlzFrameSetVisible(neutralAbilityMenu, false)
        endif
    endif
endfunction

function MenuNeutralAbilities takes nothing returns nothing
    local integer p= GetConvertedPlayerId(GetTriggerPlayer())

    if ( GetLocalPlayer() == GetTriggerPlayer() ) then
        call BlzFrameSetEnable(BlzGetTriggerFrame(), false)
        call BlzFrameSetEnable(BlzGetTriggerFrame(), true)
    endif

    if ( isVisibleNeutralAbilityMenu[p] == false ) then
        set isVisibleNeutralAbilityMenu[p]=true
        if ( GetLocalPlayer() == GetTriggerPlayer() ) then
            call BlzFrameSetVisible(neutralAbilityMenu, true)
        endif
    else
        set isVisibleNeutralAbilityMenu[p]=false
        if ( GetLocalPlayer() == GetTriggerPlayer() ) then
            call BlzFrameSetVisible(neutralAbilityMenu, false)
        endif
    endif
endfunction

function ToggleAutoCastEnum takes nothing returns nothing
    if ( Player(gl_player - 1) == GetOwningPlayer(GetEnumUnit()) ) then
        call IssueImmediateOrder(GetEnumUnit(), tempOrder)
        call UnitMoveLoc(GetEnumUnit())
    endif
endfunction

function ToggleAutoCast takes group unitGroup,string abilityCode returns nothing
    set tempOrder=abilityCode
    call ForGroup(unitGroup, function ToggleAutoCastEnum)
endfunction

function toggleDefend takes nothing returns nothing
    set s__udg_activeDefend[gl_player]= gl_state
endfunction

function toggleSlow takes nothing returns nothing
    set s__udg_activeSlow[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_Sorceress , "slowoff")
    else
        call ToggleAutoCast(udg_Sorceress , "slowon")
    endif
endfunction

function toggleInvisibility takes nothing returns nothing
    set s__udg_activeInvisibility[gl_player]= gl_state
endfunction

function togglePolymorph takes nothing returns nothing
    set s__udg_activePolymorph[gl_player]= gl_state
endfunction

function toggleFlare takes nothing returns nothing
    set s__udg_activeFlare[gl_player]= gl_state
endfunction

function toggleHeal takes nothing returns nothing
    set s__udg_activeHeal[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_Priests , "healoff")
    else
        call ToggleAutoCast(udg_Priests , "healon")
    endif
endfunction

function toggleDispelMagic takes nothing returns nothing
    set s__udg_activeDispelMagic[gl_player]= gl_state
endfunction

function toggleInnerFire takes nothing returns nothing
    set s__udg_activeInnerFire[gl_player]= gl_state
endfunction

function toggleControlMagic takes nothing returns nothing
    set s__udg_activeControlMagic[gl_player]= gl_state
endfunction

function toggleAerialShackles takes nothing returns nothing
    set s__udg_activeAerialShackles[gl_player]= gl_state
endfunction

function toggleHolyLight takes nothing returns nothing
    set s__udg_activeHolyLight[gl_player]= gl_state
endfunction

function toggleDivineShield takes nothing returns nothing
    set s__udg_activeDivineShield[gl_player]= gl_state
endfunction

function toggleResurrection takes nothing returns nothing
    set s__udg_activeResurrection[gl_player]= gl_state
endfunction

function toggleBlizzard takes nothing returns nothing
    set s__udg_activeBlizzard[gl_player]= gl_state
endfunction

function toggleWaterElemental takes nothing returns nothing
    set s__udg_activeWaterElemental[gl_player]= gl_state
endfunction

function toggleTornado takes nothing returns nothing
    set s__udg_activeTornado[gl_player]= gl_state
endfunction

function toggleStormBolt takes nothing returns nothing
    set s__udg_activeStormBolt[gl_player]= gl_state
endfunction

function toggleThunderClap takes nothing returns nothing
    set s__udg_activeThunderClap[gl_player]= gl_state
endfunction

function toggleAvatar takes nothing returns nothing
    set s__udg_activeAvatar[gl_player]= gl_state
endfunction

function toggleFlamestrike takes nothing returns nothing
    set s__udg_activeFlamestrike[gl_player]= gl_state
endfunction

function toggleBanish takes nothing returns nothing
    set s__udg_activeBanish[gl_player]= gl_state
endfunction

function toggleSiphonMana takes nothing returns nothing
    set s__udg_activeSiphonMana[gl_player]= gl_state
endfunction

function togglePhoenix takes nothing returns nothing
    set s__udg_activePhoenix[gl_player]= gl_state
endfunction

//

function toggleBerserk takes nothing returns nothing
    set s__udg_activeBerserk[gl_player]= gl_state
endfunction

function togglePurge takes nothing returns nothing
    set s__udg_activePurge[gl_player]= gl_state
endfunction

function toggleLightningShield takes nothing returns nothing
    set s__udg_activeLightningShield[gl_player]= gl_state
endfunction

function toggleBloodlust takes nothing returns nothing
    set s__udg_activeBloodlust[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_Shamans , "bloodlustoff")
    else
        call ToggleAutoCast(udg_Shamans , "bloodluston")
    endif
endfunction

function toggleEnsnare takes nothing returns nothing
    set s__udg_activeEnsnare[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_Raiders , "weboff")
    else
        call ToggleAutoCast(udg_Raiders , "webon")
    endif
endfunction

function toggleSentryWard takes nothing returns nothing
    set s__udg_activeSentryWard[gl_player]= gl_state
endfunction

function toggleStasisTrap takes nothing returns nothing
    set s__udg_activeStasisTrap[gl_player]= gl_state
endfunction

function toggleHealingWard takes nothing returns nothing
    set s__udg_activeHealingWard[gl_player]= gl_state
endfunction

function toggleSpiritLink takes nothing returns nothing
    set s__udg_activeSpiritLink[gl_player]= gl_state
endfunction

function toggleDisenchant takes nothing returns nothing
    set s__udg_activeDisenchant[gl_player]= gl_state
endfunction

function toggleAncestralSpirit takes nothing returns nothing
    set s__udg_activeAncestralSpirit[gl_player]= gl_state
endfunction

function toggleUnstableConcoction takes nothing returns nothing
    set s__udg_activeUnstableConcoction[gl_player]= gl_state
endfunction

function toggleDevour takes nothing returns nothing
    set s__udg_activeDevour[gl_player]= gl_state
endfunction

function toggleWindWalk takes nothing returns nothing
    set s__udg_activeWindWalk[gl_player]= gl_state
endfunction

function toggleMirrorImage takes nothing returns nothing
    set s__udg_activeMirrorImage[gl_player]= gl_state
endfunction

function toggleBladestorm takes nothing returns nothing
    set s__udg_activeBladestorm[gl_player]= gl_state
endfunction

function toggleChainLightning takes nothing returns nothing
    set s__udg_activeChainLightning[gl_player]= gl_state
endfunction

function toggleFirebolt takes nothing returns nothing
    set s__udg_activeFirebolt[gl_player]= gl_state
endfunction

function toggleSpiritWolves takes nothing returns nothing
    set s__udg_activeSpiritWolves[gl_player]= gl_state
endfunction

function toggleEarthquake takes nothing returns nothing
    set s__udg_activeEarthquake[gl_player]= gl_state
endfunction

function toggleShockwave takes nothing returns nothing
    set s__udg_activeShockwave[gl_player]= gl_state
endfunction

function toggleWarStomp takes nothing returns nothing
    set s__udg_activeWarStomp[gl_player]= gl_state
endfunction

function toggleHealingWave takes nothing returns nothing
    set s__udg_activeHealingWave[gl_player]= gl_state
endfunction

function toggleHex takes nothing returns nothing
    set s__udg_activeHex[gl_player]= gl_state
endfunction

function toggleSerpentWard takes nothing returns nothing
    set s__udg_activeSerpentWard[gl_player]= gl_state
endfunction

function toggleBigBadVoodoo takes nothing returns nothing
    set s__udg_activeBigBadVoodoo[gl_player]= gl_state
endfunction

//
        
function toggleWeb takes nothing returns nothing
    set s__udg_activeWeb[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_CryptFiends , "weboff")
    else
        call ToggleAutoCast(udg_CryptFiends , "webon")
    endif
endfunction

function toggleBurrow takes nothing returns nothing
    set s__udg_activeBurrow[gl_player]= gl_state
endfunction

function toggleCurse takes nothing returns nothing
    set s__udg_activeCurse[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_Banshees , "curseoff")
    else
        call ToggleAutoCast(udg_Banshees , "curseon")
    endif
endfunction

function toggleAntiMagicShell takes nothing returns nothing
    set s__udg_activeAntiMagicShell[gl_player]= gl_state
endfunction

function togglePossession takes nothing returns nothing
    set s__udg_activePossession[gl_player]= gl_state
endfunction

function toggleSpiritTouch takes nothing returns nothing
    set s__udg_activeSpiritTouch[gl_player]= gl_state
endfunction

function toggleEssenceOfBlight takes nothing returns nothing
    set s__udg_activeEssenceOfBlight[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_ObsidianStatues , "replenishlifeoff")
    else
        call ToggleAutoCast(udg_ObsidianStatues , "replenishlifeon")
    endif
endfunction

function toggleStoneForm takes nothing returns nothing
    set s__udg_activeStoneForm[gl_player]= gl_state
endfunction

function toggleRaiseDead takes nothing returns nothing
    set s__udg_activeRaiseDead[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_Necromancers , "raisedeadoff")
    else
        call ToggleAutoCast(udg_Necromancers , "raisedeadon")
    endif
endfunction

function toggleUnholyFrenzy takes nothing returns nothing
    set s__udg_activeUnholyFrenzy[gl_player]= gl_state
endfunction

function toggleCripple takes nothing returns nothing
    set s__udg_activeCripple[gl_player]= gl_state
endfunction

function toggleDevourMagic takes nothing returns nothing
    set s__udg_activeDevourMagic[gl_player]= gl_state
endfunction

function toggleOrbOfAnnihilation takes nothing returns nothing
    set s__udg_activeOrbOfAnnihilation[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_Destroyers , "unflamingattack")
    else
        call ToggleAutoCast(udg_Destroyers , "flamingattack")
    endif
endfunction

function toggleAbsorbMana takes nothing returns nothing
    set s__udg_activeAbsorbMana[gl_player]= gl_state
endfunction

function toggleDeathCoil takes nothing returns nothing
    set s__udg_activeDeathCoil[gl_player]= gl_state
endfunction

function toggleDeathPact takes nothing returns nothing
    set s__udg_activeDeathPact[gl_player]= gl_state
endfunction

function toggleAnimateDead takes nothing returns nothing
    set s__udg_activeAnimateDead[gl_player]= gl_state
endfunction

function toggleFrostNova takes nothing returns nothing
    set s__udg_activeFrostNova[gl_player]= gl_state
endfunction

function toggleFrostShield takes nothing returns nothing
    set s__udg_activeFrostShield[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_Liches , "frostarmoroff")
    else
        call ToggleAutoCast(udg_Liches , "frostarmoron")
    endif
endfunction

function toggleDarkRitual takes nothing returns nothing
    set s__udg_activeDarkRitual[gl_player]= gl_state
endfunction

function toggleDeathAndDecay takes nothing returns nothing
    set s__udg_activeDeathAndDecay[gl_player]= gl_state
endfunction

function toggleCarrionSwarm takes nothing returns nothing
    set s__udg_activeCarrionSwarm[gl_player]= gl_state
endfunction

function toggleSleep takes nothing returns nothing
    set s__udg_activeSleep[gl_player]= gl_state
endfunction

function toggleInferno takes nothing returns nothing
    set s__udg_activeInferno[gl_player]= gl_state
endfunction

function toggleImpale takes nothing returns nothing
    set s__udg_activeImpale[gl_player]= gl_state
endfunction

function toggleCarrionBeetles takes nothing returns nothing
    set s__udg_activeCarrionBeetles[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_CryptLords , "Carrionscarabsoff")
    else
        call ToggleAutoCast(udg_CryptLords , "Carrionscarabson")
    endif
endfunction

function toggleLocustSwarm takes nothing returns nothing
    set s__udg_activeLocustSwarm[gl_player]= gl_state
endfunction


//

function toggleSentinel takes nothing returns nothing
    set s__udg_activeSentinel[gl_player]= gl_state
endfunction

function toggleAbolishMagic takes nothing returns nothing
    set s__udg_activeAbolishMagic[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_Dryads , "autodispeloff")
    else
        call ToggleAutoCast(udg_Dryads , "autodispelon")
    endif
endfunction

function toggleRoar takes nothing returns nothing
    set s__udg_activeRoar[gl_player]= gl_state
endfunction

function toggleRejuvenation takes nothing returns nothing
    set s__udg_activeRejuvenation[gl_player]= gl_state
endfunction

function toggleBearForm takes nothing returns nothing
    set s__udg_activeBearForm[gl_player]= gl_state
endfunction

function toggleFaerieFire takes nothing returns nothing
    set s__udg_activeFaerieFire[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_DruidOfTheTalons , "faeriefireoff")
    else
        call ToggleAutoCast(udg_DruidOfTheTalons , "faeriefireon")
    endif
endfunction

function toggleCrowForm takes nothing returns nothing
    set s__udg_activeCrowForm[gl_player]= gl_state
endfunction

function toggleCyclone takes nothing returns nothing
    set s__udg_activeCyclone[gl_player]= gl_state
endfunction

function togglePhaseShift takes nothing returns nothing
    set s__udg_activePhaseShift[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_FaerieDragons , "phaseshiftoff")
    else
        call ToggleAutoCast(udg_FaerieDragons , "phaseshifton")
    endif
endfunction

function toggleManaFlare takes nothing returns nothing
    set s__udg_activeManaFlare[gl_player]= gl_state
endfunction

function toggleTaunt takes nothing returns nothing
    set s__udg_activeTaunt[gl_player]= gl_state
endfunction

function toggleEntanglingRoots takes nothing returns nothing
    set s__udg_activeEntanglingRoots[gl_player]= gl_state
endfunction

function toggleForceOfNature takes nothing returns nothing
    set s__udg_activeForceOfNature[gl_player]= gl_state
endfunction

function toggleTranquility takes nothing returns nothing
    set s__udg_activeTranquility[gl_player]= gl_state
endfunction

function toggleSilence takes nothing returns nothing
    set s__udg_activeSilence[gl_player]= gl_state
endfunction

function toggleSearingArrows takes nothing returns nothing
    set s__udg_activeSearingArrows[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_PriestessOfTheMoons , "unflamingarrows")
    else
        call ToggleAutoCast(udg_PriestessOfTheMoons , "flamingarrows")
    endif
endfunction

function toggleStarfall takes nothing returns nothing
    set s__udg_activeStarfall[gl_player]= gl_state
endfunction

function toggleManaBurn takes nothing returns nothing
    set s__udg_activeManaBurn[gl_player]= gl_state
endfunction

function toggleImmolation takes nothing returns nothing
    set s__udg_activeImmolation[gl_player]= gl_state
endfunction

function toggleMetamorphosis takes nothing returns nothing
    set s__udg_activeMetamorphosis[gl_player]= gl_state
endfunction

function toggleFanOfKnives takes nothing returns nothing
    set s__udg_activeFanOfKnives[gl_player]= gl_state
endfunction

function toggleBlink takes nothing returns nothing
    set s__udg_activeBlink[gl_player]= gl_state
endfunction

function toggleShadowStrike takes nothing returns nothing
    set s__udg_activeShadowStrike[gl_player]= gl_state
endfunction

function toggleVengeance takes nothing returns nothing
    set s__udg_activeVengeance[gl_player]= gl_state
endfunction

//

function toggleHealingSpray takes nothing returns nothing
    set s__udg_activeHealingSpray[gl_player]= gl_state
endfunction

function toggleChemicalRage takes nothing returns nothing
    set s__udg_activeChemicalRage[gl_player]= gl_state
endfunction

function toggleAcidBomb takes nothing returns nothing
    set s__udg_activeAcidBomb[gl_player]= gl_state
endfunction

function toggleTransmute takes nothing returns nothing
    set s__udg_activeTransmute[gl_player]= gl_state
endfunction

function toggleForkedLightning takes nothing returns nothing
    set s__udg_activeForkedLightning[gl_player]= gl_state
endfunction

function toggleFrostArrows takes nothing returns nothing
    set s__udg_activeFrostArrows[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_SeaWitches , "uncoldarrows")
    else
        call ToggleAutoCast(udg_SeaWitches , "coldarrows")
    endif
endfunction

function toggleManaShield takes nothing returns nothing
    set s__udg_activeManaShield[gl_player]= gl_state
endfunction

function toggleTornadoNeutral takes nothing returns nothing
    set s__udg_activeTornadoNeutral[gl_player]= gl_state
endfunction

function togglePocketFactory takes nothing returns nothing
    set s__udg_activePocketFactory[gl_player]= gl_state
endfunction

function toggleClusterRockets takes nothing returns nothing
    set s__udg_activeClusterRockets[gl_player]= gl_state
endfunction

function toggleRoboGoblin takes nothing returns nothing
    set s__udg_activeRoboGoblin[gl_player]= gl_state
endfunction

function toggleSummonBear takes nothing returns nothing
    set s__udg_activeSummonBear[gl_player]= gl_state
endfunction

function toggleSummonQuilbeast takes nothing returns nothing
    set s__udg_activeSummonQuilbeast[gl_player]= gl_state
endfunction

function toggleSummonHawk takes nothing returns nothing
    set s__udg_activeSummonHawk[gl_player]= gl_state
endfunction

function toggleStampede takes nothing returns nothing
    set s__udg_activeStampede[gl_player]= gl_state
endfunction

function toggleBreathOfFire takes nothing returns nothing
    set s__udg_activeBreathOfFire[gl_player]= gl_state
endfunction

function toggleDrunkenHaze takes nothing returns nothing
    set s__udg_activeDrunkenHaze[gl_player]= gl_state
endfunction

function toggleStormEarthFire takes nothing returns nothing
    set s__udg_activeStormEarthFire[gl_player]= gl_state
endfunction

function toggleSilenceNeutral takes nothing returns nothing
    set s__udg_activeSilenceNeutral[gl_player]= gl_state
endfunction

function toggleBlackArrow takes nothing returns nothing
    set s__udg_activeFrostArrows[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_DarkRangers , "blackarrowoff")
    else
        call ToggleAutoCast(udg_DarkRangers , "blackarrowon")
    endif
endfunction

function toggleLifeDrain takes nothing returns nothing
    set s__udg_activeLifeDrain[gl_player]= gl_state
endfunction

function toggleCharm takes nothing returns nothing
    set s__udg_activeCharm[gl_player]= gl_state
endfunction

function toggleSoulBurn takes nothing returns nothing
    set s__udg_activeSoulBurn[gl_player]= gl_state
endfunction

function toggleLavaSpawn takes nothing returns nothing
    set s__udg_activeLavaSpawn[gl_player]= gl_state
endfunction

function toggleVolcano takes nothing returns nothing
    set s__udg_activeVolcano[gl_player]= gl_state
endfunction

function toggleRainOfFire takes nothing returns nothing
    set s__udg_activeRainOfFire[gl_player]= gl_state
endfunction

function toggleHowlOfTerror takes nothing returns nothing
    set s__udg_activeHowlOfTerror[gl_player]= gl_state
endfunction

function toggleDoom takes nothing returns nothing
    set s__udg_activeDoom[gl_player]= gl_state
endfunction


// ------------ CUSTOM RACES ------------ //

function toggleBurn takes nothing returns nothing
    set s__udg_activeBurn[gl_player]= gl_state
endfunction

function toggleLivingBomb takes nothing returns nothing
    set s__udg_activeLivingBomb[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_Pyromancers , "curseoff")
    else
        call ToggleAutoCast(udg_Pyromancers , "curseon")
    endif
endfunction

function toggleDalaranRune takes nothing returns nothing
    set s__udg_activeDalaranRune[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_Apprentices , "innerfireoff")
    else
        call ToggleAutoCast(udg_Apprentices , "innerfireon")
    endif
endfunction

function toggleWeaken takes nothing returns nothing
    set s__udg_activeWeaken[gl_player]= gl_state
endfunction

function toggleBarrier takes nothing returns nothing
    set s__udg_activeBarrierDalaran[gl_player]= gl_state
endfunction

function toggleInversion takes nothing returns nothing
    set s__udg_activeInversion[gl_player]= gl_state
endfunction

function toggleWisdomEmbrace takes nothing returns nothing
    set s__udg_activeWisdomEmbrace[gl_player]= gl_state
endfunction

function togglePolymorphDalaran takes nothing returns nothing
    set s__udg_activePolymorphDalaran[gl_player]= gl_state
endfunction

function toggleDefendDalaran takes nothing returns nothing
    set s__udg_activeDefendDalaran[gl_player]= gl_state
endfunction

function toggleProtectiveField takes nothing returns nothing
    set s__udg_activeProtectiveField[gl_player]= gl_state
endfunction

function toggleAbsorbManaDalaran takes nothing returns nothing
    set s__udg_activeAbsorbManaDalaran[gl_player]= gl_state
endfunction

function toggleFusion takes nothing returns nothing
    set s__udg_activeFusion[gl_player]= gl_state
endfunction

function toggleMagicalDestruction takes nothing returns nothing
    set s__udg_activeMagicalDestruction[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_Constructs , "unflamingattack")
    else
        call ToggleAutoCast(udg_Constructs , "flamingattack")
    endif
endfunction

function toggleFrostNovaDalaran takes nothing returns nothing
    set s__udg_activeFrostPillar[gl_player]= gl_state
endfunction

function toggleArcaneLeash takes nothing returns nothing
    set s__udg_activeArcaneLeash[gl_player]= gl_state
endfunction

function toggleBlinkDalaran takes nothing returns nothing
    set s__udg_activeBlinkDalaran[gl_player]= gl_state
endfunction

function toggleFrostBolt takes nothing returns nothing
    set s__udg_activeFrostBolt[gl_player]= gl_state
endfunction

function toggleMassFrostArmor takes nothing returns nothing
    set s__udg_activeMassFrostArmor[gl_player]= gl_state
endfunction

function toggleBlinkMage takes nothing returns nothing
    set s__udg_activeBlinkMage[gl_player]= gl_state
endfunction

function togglePermafrost takes nothing returns nothing
    set s__udg_activePermafrost[gl_player]= gl_state
endfunction

function toggleUnstablePortal takes nothing returns nothing
    set s__udg_activeUnstablePortal[gl_player]= gl_state
endfunction

function toggleBlinkHighWizard takes nothing returns nothing
    set s__udg_activeBlinkHighWizard[gl_player]= gl_state
endfunction

function toggleManaWard takes nothing returns nothing
    set s__udg_activeManaWard[gl_player]= gl_state
endfunction

function toggleDisruption takes nothing returns nothing
    set s__udg_activeDisruption[gl_player]= gl_state
endfunction

function toggleEarthElemental takes nothing returns nothing
    set s__udg_activeSummonEarthElemental[gl_player]= gl_state
endfunction

function toggleWaterElementalDalaran takes nothing returns nothing
    set s__udg_activeSummonWaterEleDALARAN[gl_player]= gl_state
endfunction

function toggleAetherElemental takes nothing returns nothing
    set s__udg_activeSummonAetherElemental[gl_player]= gl_state
endfunction

function toggleFireElemental takes nothing returns nothing
    set s__udg_activeSummonFireElemental[gl_player]= gl_state
endfunction

function toggleAntiEnergy takes nothing returns nothing
    set s__udg_activeAntiEnergy[gl_player]= gl_state
endfunction

function toggleOverpower takes nothing returns nothing
    set s__udg_activeOverpower[gl_player]= gl_state
endfunction

function toggleEpicenter takes nothing returns nothing
    set s__udg_activeEpicenter[gl_player]= gl_state
endfunction


//

function toggleConcentration takes nothing returns nothing
    set s__udg_activeConcentration[gl_player]= gl_state
endfunction

function toggleMagicHunger takes nothing returns nothing
    set s__udg_activeMagicHunger[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_BloodArchers , "curseoff")
    else
        call ToggleAutoCast(udg_BloodArchers , "curseon")
    endif
endfunction

function toggleSilverEdgeForm takes nothing returns nothing
    set s__udg_activeSilverEdgeForm[gl_player]= gl_state
endfunction

function toggleVerbisVertus takes nothing returns nothing
    set s__udg_activeVerbisVirtus[gl_player]= gl_state
endfunction

function toggleLiberateShield takes nothing returns nothing
    set s__udg_activeLiberateShield[gl_player]= gl_state
endfunction

function toggleSlowBELF takes nothing returns nothing
    set s__udg_activeSlowBloodElf[gl_player]= gl_state
endfunction

function toggleSpellStealBELF takes nothing returns nothing
    set s__udg_activeSpellSteal[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_Magisters , "spellstealoff")
    else
        call ToggleAutoCast(udg_Magisters , "spellstealon")
    endif
endfunction

function toggleArcaneShield takes nothing returns nothing
    set s__udg_activeArcaneShield[gl_player]= gl_state
endfunction

function toggleManaDecay takes nothing returns nothing
    set s__udg_activeManaDecay[gl_player]= gl_state
endfunction

function toggleSiegeMode takes nothing returns nothing
    set s__udg_activeEmberCannonMode[gl_player]= gl_state
endfunction

function toggleRefraction takes nothing returns nothing
    set s__udg_activeRefraction[gl_player]= gl_state
endfunction

function toggleMeld takes nothing returns nothing
    set s__udg_activeMeld[gl_player]= gl_state
endfunction

function toggleManaBurnBELF takes nothing returns nothing
    set s__udg_activeManaBurnBELF[gl_player]= gl_state
endfunction

function toggleSinDoreiBlades takes nothing returns nothing
    set s__udg_activeSinDoreiBlades[gl_player]= gl_state
endfunction

function toggleBladestormBELF takes nothing returns nothing
    set s__udg_activeBladestormBELF[gl_player]= gl_state
endfunction

function toggleBerserkersCall takes nothing returns nothing
    set s__udg_activeBerserkersCall[gl_player]= gl_state
endfunction

function toggleShieldBash takes nothing returns nothing
    set s__udg_activeShieldBash[gl_player]= gl_state
endfunction

function toggleHavok takes nothing returns nothing
    set s__udg_activeHavok[gl_player]= gl_state
endfunction

function toggleUltimateStrength takes nothing returns nothing
    set s__udg_activeUltimateStrength[gl_player]= gl_state
endfunction

function toggleSiphonLifeMana takes nothing returns nothing
    set s__udg_activeSiphonLifeMana[gl_player]= gl_state
endfunction

function toggleLiberate takes nothing returns nothing
    set s__udg_activeLiberate[gl_player]= gl_state
endfunction

function toggleRainOfChaos takes nothing returns nothing
    set s__udg_activeRainOfChaos[gl_player]= gl_state
endfunction


//

function togglePhaseStrike takes nothing returns nothing
    set s__udg_activePhaseStrike[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_DarkRogues , "curseoff")
    else
        call ToggleAutoCast(udg_DarkRogues , "curseon")
    endif
endfunction

function togglePotentRemedy takes nothing returns nothing
    set s__udg_activePotentRemedy[gl_player]= gl_state
endfunction

function toggleForsakenConcoction takes nothing returns nothing
    set s__udg_activeForsakenConcoction[gl_player]= gl_state
endfunction

function toggleDeathFumes takes nothing returns nothing
    set s__udg_activeDeathFumes[gl_player]= gl_state
endfunction

function toggleShadowsCall takes nothing returns nothing
    set s__udg_activeShadowsCall[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_Spectres , "bloodlustoff")
    else
        call ToggleAutoCast(udg_Spectres , "bloodluston")
    endif
endfunction

function toggleConsume takes nothing returns nothing
    set s__udg_activeConsume[gl_player]= gl_state
endfunction

function toggleFade takes nothing returns nothing
    set s__udg_activeFade[gl_player]= gl_state
endfunction

function toggleHook takes nothing returns nothing
    set s__udg_activeHook[gl_player]= gl_state
endfunction

function toggleRaiseFromGraves takes nothing returns nothing
    set s__udg_activeRaiseFromGraves[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_Valkyrs , "raisedeadoff")
    else
        call ToggleAutoCast(udg_Valkyrs , "raisedeadon")
    endif
endfunction

function toggleUndeadEmbrace takes nothing returns nothing
    set s__udg_activeUndeadEmbrace[gl_player]= gl_state
endfunction

function toggleGraveBlow takes nothing returns nothing
    set s__udg_activeGraveBlow[gl_player]= gl_state
endfunction

function toggleDread takes nothing returns nothing
    set s__udg_activeDread[gl_player]= gl_state
endfunction

function toggleShadowAscendant takes nothing returns nothing
    set s__udg_activeShadowAscendant[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_Reapers , "carrionscarabsoff")
    else
        call ToggleAutoCast(udg_Reapers , "carrionscarabson")
    endif
endfunction

function toggleLifeDrainForsaken takes nothing returns nothing
    set s__udg_activeLifeDrainForsaken[gl_player]= gl_state
endfunction

function toggleRemorseless takes nothing returns nothing
    set s__udg_activeRemorseless[gl_player]= gl_state
endfunction

function toggleBansheeScream takes nothing returns nothing
    set s__udg_activeBansheeScream[gl_player]= gl_state
endfunction

function togglePunish takes nothing returns nothing
    set s__udg_activePunish[gl_player]= gl_state
endfunction

function toggleDeathBound takes nothing returns nothing
    set s__udg_activePunish[gl_player]= gl_state
endfunction

function toggleVileBlast takes nothing returns nothing
    set s__udg_activeVileBlast[gl_player]= gl_state
endfunction

function toggleVirus takes nothing returns nothing
    set s__udg_activeVirus[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_Exterminators , "parasiteoff")
    else
        call ToggleAutoCast(udg_Exterminators , "parasiteon")
    endif
endfunction

function togglePlague takes nothing returns nothing
    set s__udg_activePlague[gl_player]= gl_state
endfunction

function toggleGreaterAbomination takes nothing returns nothing
    set s__udg_activeGreaterAbomination[gl_player]= gl_state
endfunction


//

function toggleParasite takes nothing returns nothing
    set s__udg_activeParasite[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_Summoners , "parasiteoff")
    else
        call ToggleAutoCast(udg_Summoners , "parasiteon")
    endif
endfunction

function toggleMendingWater takes nothing returns nothing
    set s__udg_activeMendingWater[gl_player]= gl_state
endfunction

function toggleTyphoon takes nothing returns nothing
    set s__udg_activeTyphoon[gl_player]= gl_state
endfunction

function toggleMadness takes nothing returns nothing
    set s__udg_activeMadness[gl_player]= gl_state
endfunction

function toggleWaterShield takes nothing returns nothing
    set s__udg_activeWaterShield[gl_player]= gl_state
    if ( gl_state == false ) then
        call ToggleAutoCast(udg_Swellers , "frostarmoroff")
    else
        call ToggleAutoCast(udg_Swellers , "frostarmoron")
    endif
endfunction

function toggleSuffocate takes nothing returns nothing
    set s__udg_activeSuffocate[gl_player]= gl_state
endfunction

function toggleDevourNaga takes nothing returns nothing
    set s__udg_activeDevourNaga[gl_player]= gl_state
endfunction

function toggleCrystalized takes nothing returns nothing
    set s__udg_activeCrystalized[gl_player]= gl_state
endfunction

function toggleSubmerge takes nothing returns nothing
    set s__udg_activeSubmerge[gl_player]= gl_state
endfunction

function toggleThermalEruption takes nothing returns nothing
    set s__udg_activeThermalEruption[gl_player]= gl_state
endfunction

function toggleAquaBurst takes nothing returns nothing
    set s__udg_activeAquaBurst[gl_player]= gl_state
endfunction

function toggleCurseOfTheDepth takes nothing returns nothing
    set s__udg_activeCurseOfTheDepth[gl_player]= gl_state
endfunction

function toggleGust takes nothing returns nothing
    set s__udg_activeGust[gl_player]= gl_state
endfunction

function toggleRavage takes nothing returns nothing
    set s__udg_activeRavage[gl_player]= gl_state
endfunction

function toggleHealingWater takes nothing returns nothing
    set s__udg_activeHealingWater[gl_player]= gl_state
endfunction

function toggleMist takes nothing returns nothing
    set s__udg_activeMist[gl_player]= gl_state
endfunction

function toggleMonsoon takes nothing returns nothing
    set s__udg_activeMonsoon[gl_player]= gl_state
endfunction

function toggleRazorEdge takes nothing returns nothing
    set s__udg_activeRazorEdge[gl_player]= gl_state
endfunction

function toggleRetreat takes nothing returns nothing
    set s__udg_activeRetreat[gl_player]= gl_state
endfunction

function toggleHunterInstinct takes nothing returns nothing
    set s__udg_activeHunterInstinct[gl_player]= gl_state
endfunction





function abilityToggleTest takes integer p_race,integer abilityID returns nothing

    if ( p_race == 1 ) then
        if ( abilityID == 1 ) then
            set s__udg_activeDefend[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 2 ) then
            call toggleSlow()
        elseif ( abilityID == 3 ) then
            set s__udg_activeInvisibility[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 4 ) then
            set s__udg_activePolymorph[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 5 ) then
            set s__udg_activeFlare[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 6 ) then
            call toggleHeal()
        elseif ( abilityID == 7 ) then
            set s__udg_activeDispelMagic[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 8 ) then
            set s__udg_activeInnerFire[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 9 ) then
            set s__udg_activeControlMagic[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 10 ) then
            set s__udg_activeAerialShackles[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 11 ) then
            set s__udg_activeHolyLight[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 12 ) then
            set s__udg_activeDivineShield[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 13 ) then
            set s__udg_activeResurrection[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 14 ) then
            set s__udg_activeBlizzard[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 15 ) then
            set s__udg_activeWaterElemental[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 16 ) then
            set s__udg_activeTornado[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 17 ) then
            set s__udg_activeStormBolt[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 18 ) then
            set s__udg_activeThunderClap[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 19 ) then
            set s__udg_activeAvatar[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 20 ) then
            set s__udg_activeFlamestrike[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 21 ) then
            set s__udg_activeBanish[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 22 ) then
            set s__udg_activeSiphonMana[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 23 ) then
            set s__udg_activePhoenix[gl_player]= gl_state // INLINED!!
        endif
    elseif ( p_race == 2 ) then
        if ( abilityID == 1 ) then
            set s__udg_activeBerserk[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 2 ) then
            set s__udg_activePurge[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 3 ) then
            set s__udg_activeLightningShield[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 4 ) then
            call toggleBloodlust()
        elseif ( abilityID == 5 ) then
            call toggleEnsnare()
        elseif ( abilityID == 6 ) then
            set s__udg_activeSentryWard[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 7 ) then
            set s__udg_activeStasisTrap[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 8 ) then
            set s__udg_activeHealingWard[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 9 ) then
            set s__udg_activeSpiritLink[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 10 ) then
            set s__udg_activeDisenchant[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 11 ) then
            set s__udg_activeAncestralSpirit[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 12 ) then
            set s__udg_activeUnstableConcoction[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 13 ) then
            set s__udg_activeDevour[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 14 ) then
            set s__udg_activeWindWalk[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 15 ) then
            set s__udg_activeMirrorImage[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 16 ) then
            set s__udg_activeBladestorm[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 17 ) then
            set s__udg_activeChainLightning[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 18 ) then
            set s__udg_activeFirebolt[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 19 ) then
            set s__udg_activeSpiritWolves[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 20 ) then
            set s__udg_activeEarthquake[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 21 ) then
            set s__udg_activeShockwave[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 22 ) then
            set s__udg_activeWarStomp[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 23 ) then
            set s__udg_activeHealingWave[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 24 ) then
            set s__udg_activeHex[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 25 ) then
            set s__udg_activeSerpentWard[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 26 ) then
            set s__udg_activeBigBadVoodoo[gl_player]= gl_state // INLINED!!
        endif
    elseif ( p_race == 3 ) then
        if ( abilityID == 1 ) then
            call toggleWeb()
        elseif ( abilityID == 2 ) then
            set s__udg_activeBurrow[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 3 ) then
            call toggleCurse()
        elseif ( abilityID == 4 ) then
            set s__udg_activeAntiMagicShell[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 5 ) then
            set s__udg_activePossession[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 6 ) then
            set s__udg_activeSpiritTouch[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 7 ) then
            call toggleEssenceOfBlight()
        elseif ( abilityID == 8 ) then
            set s__udg_activeStoneForm[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 9 ) then
            call toggleRaiseDead()
        elseif ( abilityID == 10 ) then
            set s__udg_activeUnholyFrenzy[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 11 ) then
            set s__udg_activeCripple[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 12 ) then
            set s__udg_activeDevourMagic[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 13 ) then
            call toggleOrbOfAnnihilation()
        elseif ( abilityID == 14 ) then
            set s__udg_activeAbsorbMana[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 15 ) then
            set s__udg_activeDeathCoil[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 16 ) then
            set s__udg_activeDeathPact[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 17 ) then
            set s__udg_activeAnimateDead[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 18 ) then
            set s__udg_activeFrostNova[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 19 ) then
            call toggleFrostShield()
        elseif ( abilityID == 20 ) then
            set s__udg_activeDarkRitual[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 21 ) then
            set s__udg_activeDeathAndDecay[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 22 ) then
            set s__udg_activeCarrionSwarm[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 23 ) then
            set s__udg_activeSleep[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 24 ) then
            set s__udg_activeInferno[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 25 ) then
            set s__udg_activeImpale[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 26 ) then
            call toggleCarrionBeetles()
        elseif ( abilityID == 27 ) then
            set s__udg_activeLocustSwarm[gl_player]= gl_state // INLINED!!
        endif
    elseif ( p_race == 4 ) then
        if ( abilityID == 1 ) then
            set s__udg_activeSentinel[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 2 ) then
            call toggleAbolishMagic()
        elseif ( abilityID == 3 ) then
            set s__udg_activeRoar[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 4 ) then
            set s__udg_activeRejuvenation[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 5 ) then
            set s__udg_activeBearForm[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 6 ) then
            call toggleFaerieFire()
        elseif ( abilityID == 7 ) then
            set s__udg_activeCrowForm[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 8 ) then
            set s__udg_activeCyclone[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 9 ) then
            call togglePhaseShift()
        elseif ( abilityID == 10 ) then
            set s__udg_activeManaFlare[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 11 ) then
            set s__udg_activeTaunt[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 12 ) then
            set s__udg_activeEntanglingRoots[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 13 ) then
            set s__udg_activeForceOfNature[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 14 ) then
            set s__udg_activeTranquility[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 15 ) then
            set s__udg_activeSilence[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 16 ) then
            call toggleSearingArrows()
        elseif ( abilityID == 17 ) then
            set s__udg_activeStarfall[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 18 ) then
            set s__udg_activeManaBurn[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 19 ) then
            set s__udg_activeImmolation[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 20 ) then
            set s__udg_activeMetamorphosis[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 21 ) then
            set s__udg_activeFanOfKnives[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 22 ) then
            set s__udg_activeBlink[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 23 ) then
            set s__udg_activeShadowStrike[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 24 ) then
            set s__udg_activeVengeance[gl_player]= gl_state // INLINED!!
        endif
    elseif ( p_race == 5 ) then
        if ( abilityID == 1 ) then
            set s__udg_activeBurn[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 2 ) then
            call toggleLivingBomb()
        elseif ( abilityID == 3 ) then
            call toggleDalaranRune()
        elseif ( abilityID == 4 ) then
            set s__udg_activeWeaken[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 5 ) then
            set s__udg_activeBarrierDalaran[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 6 ) then
            set s__udg_activeInversion[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 7 ) then
            set s__udg_activeWisdomEmbrace[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 8 ) then
            set s__udg_activePolymorphDalaran[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 9 ) then
            set s__udg_activeDefendDalaran[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 10 ) then
            set s__udg_activeProtectiveField[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 11 ) then
            set s__udg_activeAbsorbManaDalaran[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 12 ) then
            set s__udg_activeFusion[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 13 ) then
            call toggleMagicalDestruction()
        elseif ( abilityID == 14 ) then
            set s__udg_activeFrostPillar[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 15 ) then
            set s__udg_activeArcaneLeash[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 16 ) then
            set s__udg_activeBlinkDalaran[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 17 ) then
            set s__udg_activeFrostBolt[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 18 ) then
            set s__udg_activeMassFrostArmor[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 19 ) then
            set s__udg_activeBlinkMage[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 20 ) then
            set s__udg_activePermafrost[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 21 ) then
            set s__udg_activeUnstablePortal[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 22 ) then
            set s__udg_activeBlinkHighWizard[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 23 ) then
            set s__udg_activeManaWard[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 24 ) then
            set s__udg_activeDisruption[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 25 ) then
            set s__udg_activeSummonEarthElemental[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 26 ) then
            set s__udg_activeSummonWaterEleDALARAN[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 27 ) then
            set s__udg_activeSummonAetherElemental[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 28 ) then
            set s__udg_activeSummonFireElemental[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 29 ) then
            set s__udg_activeAntiEnergy[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 30 ) then
            set s__udg_activeOverpower[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 31 ) then
            set s__udg_activeEpicenter[gl_player]= gl_state // INLINED!!
        endif

    elseif ( p_race == 6 ) then
        if ( abilityID == 1 ) then
            set s__udg_activeConcentration[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 2 ) then
            call toggleMagicHunger()
        elseif ( abilityID == 3 ) then
            set s__udg_activeSilverEdgeForm[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 4 ) then
            set s__udg_activeSlowBloodElf[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 5 ) then
            call toggleSpellStealBELF()
        elseif ( abilityID == 6 ) then
            set s__udg_activeVerbisVirtus[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 7 ) then
            set s__udg_activeLiberateShield[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 8 ) then
            set s__udg_activeArcaneShield[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 9 ) then
            set s__udg_activeManaDecay[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 10 ) then
            set s__udg_activeEmberCannonMode[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 11 ) then
            set s__udg_activeRefraction[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 12 ) then
            set s__udg_activeMeld[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 13 ) then
            set s__udg_activeManaBurnBELF[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 14 ) then
            set s__udg_activeSinDoreiBlades[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 15 ) then
            set s__udg_activeBladestormBELF[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 16 ) then
            set s__udg_activeBerserkersCall[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 17 ) then
            set s__udg_activeHavok[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 18 ) then
            set s__udg_activeUltimateStrength[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 19 ) then
            set s__udg_activeSiphonLifeMana[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 20 ) then
            set s__udg_activeLiberate[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 21 ) then
            set s__udg_activeRainOfChaos[gl_player]= gl_state // INLINED!!
        endif
    elseif ( p_race == 7 ) then
        if ( abilityID == 1 ) then
            call togglePhaseStrike()
        elseif ( abilityID == 2 ) then
            set s__udg_activePotentRemedy[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 3 ) then
            set s__udg_activeForsakenConcoction[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 4 ) then
            set s__udg_activeDeathFumes[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 5 ) then
            call toggleShadowsCall()
        elseif ( abilityID == 6 ) then
            set s__udg_activeConsume[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 7 ) then
            set s__udg_activeFade[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 8 ) then
            set s__udg_activeHook[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 9 ) then
            call toggleRaiseFromGraves()
        elseif ( abilityID == 10 ) then
            set s__udg_activeUndeadEmbrace[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 11 ) then
            set s__udg_activeGraveBlow[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 12 ) then
            set s__udg_activeDread[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 13 ) then
            call toggleShadowAscendant()
        elseif ( abilityID == 14 ) then
            set s__udg_activeLifeDrainForsaken[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 15 ) then
            set s__udg_activeRemorseless[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 16 ) then
            set s__udg_activeBansheeScream[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 17 ) then
            set s__udg_activePunish[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 18 ) then
            set s__udg_activePunish[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 19 ) then
            set s__udg_activeVileBlast[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 20 ) then
            call toggleVirus()
        elseif ( abilityID == 21 ) then
            set s__udg_activePlague[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 22 ) then
            set s__udg_activeGreaterAbomination[gl_player]= gl_state // INLINED!!
        endif
    elseif ( p_race == 8 ) then
        if ( abilityID == 1 ) then
            call toggleParasite()
        elseif ( abilityID == 2 ) then
            set s__udg_activeMendingWater[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 3 ) then
            set s__udg_activeTyphoon[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 4 ) then
            set s__udg_activeMadness[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 5 ) then
            call toggleWaterShield()
        elseif ( abilityID == 6 ) then
            set s__udg_activeSuffocate[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 7 ) then
            set s__udg_activeDevourNaga[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 8 ) then
            set s__udg_activeCrystalized[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 9 ) then
            set s__udg_activeSubmerge[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 10 ) then
            set s__udg_activeThermalEruption[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 11 ) then
            set s__udg_activeAquaBurst[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 12 ) then
            set s__udg_activeCurseOfTheDepth[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 13 ) then
            set s__udg_activeGust[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 14 ) then
            set s__udg_activeRavage[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 15 ) then
            set s__udg_activeHealingWater[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 16 ) then
            set s__udg_activeMist[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 17 ) then
            set s__udg_activeMonsoon[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 18 ) then
            set s__udg_activeRazorEdge[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 19 ) then
            set s__udg_activeRetreat[gl_player]= gl_state // INLINED!!
        elseif ( abilityID == 20 ) then
            set s__udg_activeHunterInstinct[gl_player]= gl_state // INLINED!!
        endif
    endif
endfunction

function abilityToggleTestNeutral takes integer abilityID returns nothing
    if ( abilityID == 1 ) then
        set s__udg_activeHealingSpray[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 2 ) then
        set s__udg_activeChemicalRage[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 3 ) then
        set s__udg_activeAcidBomb[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 4 ) then
        set s__udg_activeTransmute[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 5 ) then
        set s__udg_activeForkedLightning[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 6 ) then
        call toggleFrostArrows()
    elseif ( abilityID == 7 ) then
        set s__udg_activeManaShield[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 8 ) then
        set s__udg_activeTornadoNeutral[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 9 ) then
        set s__udg_activePocketFactory[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 10 ) then
        set s__udg_activeClusterRockets[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 11 ) then
        set s__udg_activeRoboGoblin[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 12 ) then
        set s__udg_activeSummonBear[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 13 ) then
        set s__udg_activeSummonQuilbeast[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 14 ) then
        set s__udg_activeSummonHawk[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 15 ) then
        set s__udg_activeStampede[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 16 ) then
        set s__udg_activeBreathOfFire[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 17 ) then
        set s__udg_activeDrunkenHaze[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 18 ) then
        set s__udg_activeStormEarthFire[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 19 ) then
        set s__udg_activeSilenceNeutral[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 20 ) then
        call toggleBlackArrow()
    elseif ( abilityID == 21 ) then
        set s__udg_activeLifeDrain[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 22 ) then
        set s__udg_activeCharm[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 23 ) then
        set s__udg_activeSoulBurn[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 24 ) then
        set s__udg_activeLavaSpawn[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 25 ) then
        set s__udg_activeVolcano[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 26 ) then
        set s__udg_activeRainOfFire[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 27 ) then
        set s__udg_activeHowlOfTerror[gl_player]= gl_state // INLINED!!
    elseif ( abilityID == 28 ) then
        set s__udg_activeDoom[gl_player]= gl_state // INLINED!!
    endif
endfunction

function AbilityToggle takes nothing returns nothing
    local integer p= GetConvertedPlayerId(GetTriggerPlayer())
    local integer r= s__udg_PlayerRace[p]
    local integer i
    local integer endIndex
    set gl_state=true
    set gl_player=p + 6

    set i=1
    set endIndex=33
    loop
        exitwhen i > 33
        if ( BlzGetTriggerFrame() == s__btnAbilityEnabled[(r)*(33)+i] ) then
            set gl_state=false
            call abilityToggleTest(r , i) // custom function
            if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                call BlzFrameSetEnable(BlzGetTriggerFrame(), false)
                call BlzFrameSetEnable(BlzGetTriggerFrame(), true)
                call BlzFrameSetVisible(s__btnAbilityEnabled[(r)*(33)+i], false)
                call BlzFrameSetVisible(s__btnAbilityDisabled[(r)*(33)+i], true)
            endif
        endif

        if ( BlzGetTriggerFrame() == s__btnAbilityDisabled[(r)*(33)+i] ) then
            set gl_state=true
            call abilityToggleTest(r , i) // custom function
            if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                call BlzFrameSetEnable(BlzGetTriggerFrame(), false)
                call BlzFrameSetEnable(BlzGetTriggerFrame(), true)
                call BlzFrameSetVisible(s__btnAbilityDisabled[(r)*(33)+i], false)
                call BlzFrameSetVisible(s__btnAbilityEnabled[(r)*(33)+i], true)
            endif
        endif
        
        set i=i + 1
    endloop
endfunction

function NeutralAbilityToggle takes nothing returns nothing
    local integer p= GetConvertedPlayerId(GetTriggerPlayer())
    local integer i
    local integer endIndex
    set gl_state=true
    set gl_player=p + 6

    set i=1
    set endIndex=28
    loop
        exitwhen i > endIndex
        if ( BlzGetTriggerFrame() == btnNeutralAbilityEnabled[i] ) then
            set gl_state=false
            call abilityToggleTestNeutral(i) // custom function
            if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                call BlzFrameSetEnable(BlzGetTriggerFrame(), false)
                call BlzFrameSetEnable(BlzGetTriggerFrame(), true)
                call BlzFrameSetVisible(btnNeutralAbilityEnabled[i], false)
                call BlzFrameSetVisible(btnNeutralAbilityDisabled[i], true)
            endif
        endif

        if ( BlzGetTriggerFrame() == btnNeutralAbilityDisabled[i] ) then
            set gl_state=true
            call abilityToggleTestNeutral(i) // custom function
            if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                call BlzFrameSetEnable(BlzGetTriggerFrame(), false)
                call BlzFrameSetEnable(BlzGetTriggerFrame(), true)
                call BlzFrameSetVisible(btnNeutralAbilityDisabled[i], false)
                call BlzFrameSetVisible(btnNeutralAbilityEnabled[i], true)
            endif
        endif
        set i=i + 1
    endloop
endfunction

function AbilityHover takes nothing returns nothing
    local integer p= GetConvertedPlayerId(GetTriggerPlayer())
    local integer r= s__udg_PlayerRace[p]
    local integer i
    local integer endIndex

    set i=1
    set endIndex=33
    loop
        exitwhen i > endIndex
        if ( BlzGetTriggerFrame() == s__btnAbilityEnabled[(r)*(33)+i] ) then
            if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                call BlzFrameSetText(frameAbilityName[r], s__abilityName[(r)*(33)+i])
                call BlzFrameSetText(frameAbilityState[r], "|cff03ff0bActive|r")
            endif
        endif

        if ( BlzGetTriggerFrame() == s__btnAbilityDisabled[(r)*(33)+i] ) then
            if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                call BlzFrameSetText(frameAbilityName[r], s__abilityName[(r)*(33)+i])
                call BlzFrameSetText(frameAbilityState[r], "|cffff0303Disabled|r")
            endif
        endif

        set i=i + 1
    endloop
endfunction

function NeutralAbilityHover takes nothing returns nothing
    local integer p= GetConvertedPlayerId(GetTriggerPlayer())
    local integer i
    local integer endIndex

    set i=1
    set endIndex=27
    loop
        exitwhen i > endIndex
        if ( BlzGetTriggerFrame() == btnNeutralAbilityEnabled[i] ) then
            if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                call BlzFrameSetText(frameNeutralAbilityName, neutralAbilityName[i])
                call BlzFrameSetText(frameNeutralAbilityState, "|cff03ff0bActive|r")
            endif
        endif

        if ( BlzGetTriggerFrame() == btnNeutralAbilityDisabled[i] ) then
            if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                call BlzFrameSetText(frameNeutralAbilityName, neutralAbilityName[i])
                call BlzFrameSetText(frameNeutralAbilityState, "|cffff0303Disabled|r")
            endif
        endif

        set i=i + 1
    endloop
endfunction




function SetupAbilityControl takes nothing returns nothing
    local trigger trig
    local framehandle frameUnitAbilityText
    local integer r
    local integer endIndex
    local framehandle frameNeutralHeroAbilityText
    local integer i
    local real frameXPOS
    local real frameYPOS
    local integer incr
    local integer endIndex1
    local framehandle imgFrame
    local trigger trig3
    local framehandle imgFrame2
    local trigger trig2
    local trigger trig4

    set btnAbilityControl=BlzCreateFrame("ScriptDialogButton", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), 0, 0)
    call BlzFrameSetSize(btnAbilityControl, 0.07, 0.03)
    call BlzFrameSetAbsPoint(btnAbilityControl, FRAMEPOINT_CENTER, 0.155, 0.165)
    call BlzFrameSetText(btnAbilityControl, "Ability A.I.")
    call BlzFrameSetVisible(btnAbilityControl, false)

    // Button trigger
    set trig=CreateTrigger()
    call BlzTriggerRegisterFrameEvent(trig, btnAbilityControl, FRAMEEVENT_CONTROL_CLICK)
    call TriggerAddAction(trig, function MenuAbilities)

    set r=1
    set endIndex=DS_RACES_MAX
    loop
        exitwhen r > endIndex
        set abilityMenu[r]=BlzCreateFrame("EscMenuBackdrop", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), 0, 0)
        call BlzFrameSetSize(abilityMenu[r], 0.25, 0.34)
        call BlzFrameSetAbsPoint(abilityMenu[r], FRAMEPOINT_CENTER, 0.17, 0.36)
        call BlzFrameSetVisible(abilityMenu[r], false)

        set frameUnitAbilityText=BlzCreateFrameByType("BACKDROP", "", abilityMenu[r], "", 0)
        call BlzFrameSetSize(frameUnitAbilityText, 0.138, 0.048)
        call BlzFrameSetAbsPoint(frameUnitAbilityText, FRAMEPOINT_CENTER, 0.17, 0.495)
        call BlzFrameSetTexture(frameUnitAbilityText, "war3mapImported\\UnitAbilities.dds", 0, true)

        set frameHeroAbilityText=BlzCreateFrameByType("BACKDROP", "", abilityMenu[r], "", 0)
        call BlzFrameSetSize(frameHeroAbilityText, 0.138, 0.048)
        call BlzFrameSetAbsPoint(frameHeroAbilityText, FRAMEPOINT_CENTER, 0.17, 0.375)
        call BlzFrameSetTexture(frameHeroAbilityText, "war3mapImported\\HeroAbilities.tga", 0, true)

        if ( r <= 4 ) then
            set btnNeutralHeroes[r]=BlzCreateFrame("ScriptDialogButton", abilityMenu[r], 0, 0)
            call BlzFrameSetSize(btnNeutralHeroes[r], 0.1, 0.04)
            call BlzFrameSetAbsPoint(btnNeutralHeroes[r], FRAMEPOINT_CENTER, 0.22, 0.23)
            call BlzFrameSetText(btnNeutralHeroes[r], "Tavern Heroes")
            
            // Button trigger
            set trig=CreateTrigger()
            call BlzTriggerRegisterFrameEvent(trig, btnNeutralHeroes[r], FRAMEEVENT_CONTROL_CLICK)
            call TriggerAddAction(trig, function MenuNeutralAbilities)
        endif
        
        set r=r + 1
    endloop

    set neutralAbilityMenu=BlzCreateFrame("EscMenuBackdrop", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), 0, 0)
    call BlzFrameSetSize(neutralAbilityMenu, 0.25, 0.28)
    call BlzFrameSetAbsPoint(neutralAbilityMenu, FRAMEPOINT_CENTER, 0.42, 0.330)
    call BlzFrameSetVisible(neutralAbilityMenu, false)

    set frameNeutralHeroAbilityText=BlzCreateFrameByType("BACKDROP", "", neutralAbilityMenu, "", 0)
    call BlzFrameSetSize(frameNeutralHeroAbilityText, 0.194, 0.048)
    call BlzFrameSetAbsPoint(frameNeutralHeroAbilityText, FRAMEPOINT_CENTER, 0.42, 0.430)
    call BlzFrameSetTexture(frameNeutralHeroAbilityText, "war3mapImported\\NeutralAbilities.tga", 0, true)

    set i=1
    set endIndex=6
    loop
        exitwhen i > endIndex
        set isVisibleAbilityMenu[i]=false
        set isVisibleNeutralAbilityMenu[i]=false
        set i=i + 1
    endloop


    // Human
    set s__abilityName[(1)*(33)+1]= "Defend:"
    set s__btnAbilityImgEnabled[(1)*(33)+1]= "ReplaceableTextures\\CommandButtons\\BTNDefend.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+1]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDefend.blp"
    set s__abilityName[(1)*(33)+2]= "Slow:"
    set s__btnAbilityImgEnabled[(1)*(33)+2]= "ReplaceableTextures\\CommandButtons\\BTNSlowOn.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+2]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSlowOn.blp"
    set s__abilityName[(1)*(33)+3]= "Invisibility:"
    set s__btnAbilityImgEnabled[(1)*(33)+3]= "ReplaceableTextures\\CommandButtons\\BTNInvisibility.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+3]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNInvisibility.blp"
    set s__abilityName[(1)*(33)+4]= "Polymorph:"
    set s__btnAbilityImgEnabled[(1)*(33)+4]= "ReplaceableTextures\\CommandButtons\\BTNPolymorph.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+4]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPolymorph.blp"
    set s__abilityName[(1)*(33)+5]= "Flare:"
    set s__btnAbilityImgEnabled[(1)*(33)+5]= "ReplaceableTextures\\CommandButtons\\BTNFlare.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+5]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFlare.blp"
    set s__abilityName[(1)*(33)+6]= "Heal:"
    set s__btnAbilityImgEnabled[(1)*(33)+6]= "ReplaceableTextures\\CommandButtons\\BTNHealOn.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+6]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHealOn.blp"
    set s__abilityName[(1)*(33)+7]= "Dispel Magic:"
    set s__btnAbilityImgEnabled[(1)*(33)+7]= "ReplaceableTextures\\CommandButtons\\BTNDispelMagic.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+7]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDispelMagic.blp"
    set s__abilityName[(1)*(33)+8]= "Inner Fire:"
    set s__btnAbilityImgEnabled[(1)*(33)+8]= "ReplaceableTextures\\CommandButtons\\BTNInnerFireOn.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+8]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNInnerFireOn.blp"
    set s__abilityName[(1)*(33)+9]= "Control Magic:"
    set s__btnAbilityImgEnabled[(1)*(33)+9]= "ReplaceableTextures\\CommandButtons\\BTNControlMagic.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+9]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNControlMagic.blp"
    set s__abilityName[(1)*(33)+10]= "Aerial Shackles:"
    set s__btnAbilityImgEnabled[(1)*(33)+10]= "ReplaceableTextures\\CommandButtons\\BTNMagicLariet.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+10]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMagicLariet.blp"
    
    set s__abilityName[(1)*(33)+11]= "Holy Light:"
    set s__btnAbilityImgEnabled[(1)*(33)+11]= "ReplaceableTextures\\CommandButtons\\BTNHolyBolt.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+11]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHolyBolt.blp"
    set s__abilityName[(1)*(33)+12]= "Divine Shield:"
    set s__btnAbilityImgEnabled[(1)*(33)+12]= "ReplaceableTextures\\CommandButtons\\BTNDivineIntervention.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+12]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDivineIntervention.blp"
    set s__abilityName[(1)*(33)+13]= "Resurrection:"
    set s__btnAbilityImgEnabled[(1)*(33)+13]= "ReplaceableTextures\\CommandButtons\\BTNResurrection.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+13]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNResurrection.blp"
    set s__abilityName[(1)*(33)+14]= "Blizzard:"
    set s__btnAbilityImgEnabled[(1)*(33)+14]= "ReplaceableTextures\\CommandButtons\\BTNBlizzard.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+14]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBlizzard.blp"
    set s__abilityName[(1)*(33)+15]= "Water Elemental:"
    set s__btnAbilityImgEnabled[(1)*(33)+15]= "ReplaceableTextures\\CommandButtons\\BTNSummonWaterElemental.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+15]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSummonWaterElemental.blp"
    set s__abilityName[(1)*(33)+16]= "Tornado:"
    set s__btnAbilityImgEnabled[(1)*(33)+16]= "ReplaceableTextures\\CommandButtons\\BTNTornado.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+16]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTornado.blp"
    set s__abilityName[(1)*(33)+17]= "Storm Bolt:"
    set s__btnAbilityImgEnabled[(1)*(33)+17]= "ReplaceableTextures\\CommandButtons\\BTNStormBolt.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+17]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStormBolt.blp"
    set s__abilityName[(1)*(33)+18]= "Thunder Clap:"
    set s__btnAbilityImgEnabled[(1)*(33)+18]= "ReplaceableTextures\\CommandButtons\\BTNThunderclap.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+18]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNThunderclap.blp"
    set s__abilityName[(1)*(33)+19]= "Avatar:"
    set s__btnAbilityImgEnabled[(1)*(33)+19]= "ReplaceableTextures\\CommandButtons\\BTNAvatarOn.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+19]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAvatarOn.blp"
    set s__abilityName[(1)*(33)+20]= "Flamestrike:"
    set s__btnAbilityImgEnabled[(1)*(33)+20]= "ReplaceableTextures\\CommandButtons\\BTNWallOfFire.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+20]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWallOfFire.blp"
    set s__abilityName[(1)*(33)+21]= "Banish:"
    set s__btnAbilityImgEnabled[(1)*(33)+21]= "ReplaceableTextures\\CommandButtons\\BTNBanish.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+21]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBanish.blp"
    set s__abilityName[(1)*(33)+22]= "Siphon Mana:"
    set s__btnAbilityImgEnabled[(1)*(33)+22]= "ReplaceableTextures\\CommandButtons\\BTNManaDrain.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+22]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNManaDrain.blp"
    set s__abilityName[(1)*(33)+23]= "Phoenix:"
    set s__btnAbilityImgEnabled[(1)*(33)+23]= "ReplaceableTextures\\CommandButtons\\BTNMarkOfFire.blp"
    set s__btnAbilityImgDisabled[(1)*(33)+23]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMarkOfFire.blp"


    // Orc
    set s__abilityName[(2)*(33)+1]= "Berserker:"
    set s__btnAbilityImgEnabled[(2)*(33)+1]= "ReplaceableTextures\\CommandButtons\\BTNBerserkForTrolls.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+1]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBerserkForTrolls.blp"
    set s__abilityName[(2)*(33)+2]= "Purge:"
    set s__btnAbilityImgEnabled[(2)*(33)+2]= "ReplaceableTextures\\CommandButtons\\BTNPurge.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+2]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPurge.blp"
    set s__abilityName[(2)*(33)+3]= "Lightning Shield:"
    set s__btnAbilityImgEnabled[(2)*(33)+3]= "ReplaceableTextures\\CommandButtons\\BTNLightningShield.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+3]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLightningShield.blp"
    set s__abilityName[(2)*(33)+4]= "Bloodlust:"
    set s__btnAbilityImgEnabled[(2)*(33)+4]= "ReplaceableTextures\\CommandButtons\\BTNBloodLustOn.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+4]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBloodLustOn.blp"
    set s__abilityName[(2)*(33)+5]= "Ensnare:"
    set s__btnAbilityImgEnabled[(2)*(33)+5]= "ReplaceableTextures\\CommandButtons\\BTNEnsnare.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+5]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEnsnare.blp"
    set s__abilityName[(2)*(33)+6]= "Sentry Ward:"
    set s__btnAbilityImgEnabled[(2)*(33)+6]= "ReplaceableTextures\\CommandButtons\\BTNSentryWard.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+6]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSentryWard.blp"
    set s__abilityName[(2)*(33)+7]= "Stasis Trap:"
    set s__btnAbilityImgEnabled[(2)*(33)+7]= "ReplaceableTextures\\CommandButtons\\BTNStasisTrap.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+7]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStasisTrap.blp"
    set s__abilityName[(2)*(33)+8]= "Healing Ward:"
    set s__btnAbilityImgEnabled[(2)*(33)+8]= "ReplaceableTextures\\CommandButtons\\BTNHealingWard.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+8]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHealingWard.blp"
    set s__abilityName[(2)*(33)+9]= "Spirit Link:"
    set s__btnAbilityImgEnabled[(2)*(33)+9]= "ReplaceableTextures\\CommandButtons\\BTNSpiritLink.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+9]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpiritLink.blp"
    set s__abilityName[(2)*(33)+10]= "Disenchant:"
    set s__btnAbilityImgEnabled[(2)*(33)+10]= "ReplaceableTextures\\CommandButtons\\BTNDisenchant.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+10]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDisenchant.blp"
    set s__abilityName[(2)*(33)+11]= "Ancestral Spirit:"
    set s__btnAbilityImgEnabled[(2)*(33)+11]= "ReplaceableTextures\\CommandButtons\\BTNAncestralSpirit.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+11]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAncestralSpirit.blp"
    set s__abilityName[(2)*(33)+12]= "Unstable Concoction:"
    set s__btnAbilityImgEnabled[(2)*(33)+12]= "ReplaceableTextures\\CommandButtons\\BTNUnstableConcoction.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+12]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUnstableConcoction.blp"
    set s__abilityName[(2)*(33)+13]= "Devour:"
    set s__btnAbilityImgEnabled[(2)*(33)+13]= "ReplaceableTextures\\CommandButtons\\BTNDevour.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+13]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDevour.blp"
    
    set s__abilityName[(2)*(33)+14]= "Wind Walk:"
    set s__btnAbilityImgEnabled[(2)*(33)+14]= "ReplaceableTextures\\CommandButtons\\BTNWindWalkOn.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+14]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWindWalkOn.blp"
    set s__abilityName[(2)*(33)+15]= "Mirror Image:"
    set s__btnAbilityImgEnabled[(2)*(33)+15]= "ReplaceableTextures\\CommandButtons\\BTNMirrorImage.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+15]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMirrorImage.blp"
    set s__abilityName[(2)*(33)+16]= "Bladestorm:"
    set s__btnAbilityImgEnabled[(2)*(33)+16]= "ReplaceableTextures\\CommandButtons\\BTNWhirlwind.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+16]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWhirlwind.blp"
    set s__abilityName[(2)*(33)+17]= "Chain Lightning:"
    set s__btnAbilityImgEnabled[(2)*(33)+17]= "ReplaceableTextures\\CommandButtons\\BTNChainLightning.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+17]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNChainLightning.blp"
    set s__abilityName[(2)*(33)+18]= "Firebolt:"
    set s__btnAbilityImgEnabled[(2)*(33)+18]= "ReplaceableTextures\\CommandButtons\\BTNFireBolt.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+18]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFireBolt.blp"
    set s__abilityName[(2)*(33)+19]= "Spirit Wolves:"
    set s__btnAbilityImgEnabled[(2)*(33)+19]= "ReplaceableTextures\\CommandButtons\\BTNSpiritWolf.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+19]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpiritWolf.blp"
    set s__abilityName[(2)*(33)+20]= "Earthquake:"
    set s__btnAbilityImgEnabled[(2)*(33)+20]= "ReplaceableTextures\\CommandButtons\\BTNEarthquake.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+20]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEarthquake.blp"
    set s__abilityName[(2)*(33)+21]= "Shockwave:"
    set s__btnAbilityImgEnabled[(2)*(33)+21]= "ReplaceableTextures\\CommandButtons\\BTNShockWave.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+21]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNShockWave.blp"
    set s__abilityName[(2)*(33)+22]= "War Stomp:"
    set s__btnAbilityImgEnabled[(2)*(33)+22]= "ReplaceableTextures\\CommandButtons\\BTNWarStomp.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+22]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWarStomp.blp"
    set s__abilityName[(2)*(33)+23]= "Healing Wave:"
    set s__btnAbilityImgEnabled[(2)*(33)+23]= "ReplaceableTextures\\CommandButtons\\BTNHealingWave.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+23]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHealingWave.blp"
    set s__abilityName[(2)*(33)+24]= "Hex:"
    set s__btnAbilityImgEnabled[(2)*(33)+24]= "ReplaceableTextures\\CommandButtons\\BTNHex.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+24]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHex.blp"
    set s__abilityName[(2)*(33)+25]= "Serpent Ward:"
    set s__btnAbilityImgEnabled[(2)*(33)+25]= "ReplaceableTextures\\CommandButtons\\BTNSerpentWard.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+25]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSerpentWard.blp"
    set s__abilityName[(2)*(33)+26]= "Big Bad Voodoo:"
    set s__btnAbilityImgEnabled[(2)*(33)+26]= "ReplaceableTextures\\CommandButtons\\BTNBigBadVoodooSpell.blp"
    set s__btnAbilityImgDisabled[(2)*(33)+26]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBigBadVoodooSpell.blp"


    // Undead
    set s__abilityName[(3)*(33)+1]= "Web:"
    set s__btnAbilityImgEnabled[(3)*(33)+1]= "ReplaceableTextures\\CommandButtons\\BTNWebOn.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+1]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWebOn.blp"
    set s__abilityName[(3)*(33)+2]= "Burrow:"
    set s__btnAbilityImgEnabled[(3)*(33)+2]= "ReplaceableTextures\\CommandButtons\\BTNCryptFiendBurrow.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+2]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCryptFiendBurrow.blp"
    set s__abilityName[(3)*(33)+3]= "Curse:"
    set s__btnAbilityImgEnabled[(3)*(33)+3]= "ReplaceableTextures\\CommandButtons\\BTNCurseOn.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+3]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCurseOn.blp"
    set s__abilityName[(3)*(33)+4]= "Anti-Magic Shell:"
    set s__btnAbilityImgEnabled[(3)*(33)+4]= "ReplaceableTextures\\CommandButtons\\BTNAntiMagicShell.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+4]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAntiMagicShell.blp"
    set s__abilityName[(3)*(33)+5]= "Possession:"
    set s__btnAbilityImgEnabled[(3)*(33)+5]= "ReplaceableTextures\\CommandButtons\\BTNPossession.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+5]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPossession.blp"
    set s__abilityName[(3)*(33)+6]= "Spirit Touch:"
    set s__btnAbilityImgEnabled[(3)*(33)+6]= "ReplaceableTextures\\CommandButtons\\BTNReplenishManaOn.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+6]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNReplenishManaOn.blp"
    set s__abilityName[(3)*(33)+7]= "Essence of Blight:"
    set s__btnAbilityImgEnabled[(3)*(33)+7]= "ReplaceableTextures\\CommandButtons\\BTNReplenishHealthOn.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+7]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNReplenishHealthOn.blp"
    set s__abilityName[(3)*(33)+8]= "Stone Form:"
    set s__btnAbilityImgEnabled[(3)*(33)+8]= "ReplaceableTextures\\CommandButtons\\BTNStoneForm.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+8]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStoneForm.blp"
    set s__abilityName[(3)*(33)+9]= "Raise Dead:"
    set s__btnAbilityImgEnabled[(3)*(33)+9]= "ReplaceableTextures\\CommandButtons\\BTNRaiseDeadOn.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+9]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRaiseDeadOn.blp"
    set s__abilityName[(3)*(33)+10]= "Unholy Frenzy:"
    set s__btnAbilityImgEnabled[(3)*(33)+10]= "ReplaceableTextures\\CommandButtons\\BTNUnholyFrenzy.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+10]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUnholyFrenzy.blp"
    set s__abilityName[(3)*(33)+11]= "Cripple:"
    set s__btnAbilityImgEnabled[(3)*(33)+11]= "ReplaceableTextures\\CommandButtons\\BTNCripple.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+11]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCripple.blp"
    set s__abilityName[(3)*(33)+12]= "Devour Magic:"
    set s__btnAbilityImgEnabled[(3)*(33)+12]= "ReplaceableTextures\\CommandButtons\\BTNDevourMagic.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+12]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDevourMagic.blp"
    set s__abilityName[(3)*(33)+13]= "Orb of Annihilation:"
    set s__btnAbilityImgEnabled[(3)*(33)+13]= "ReplaceableTextures\\CommandButtons\\BTNOrbOfDeathOn.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+13]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrbOfDeathOn.blp"
    set s__abilityName[(3)*(33)+14]= "Absorb Magic:"
    set s__btnAbilityImgEnabled[(3)*(33)+14]= "ReplaceableTextures\\CommandButtons\\BTNAbsorbMagic.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+14]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAbsorbMagic.blp"

    set s__abilityName[(3)*(33)+15]= "Death Coil:"
    set s__btnAbilityImgEnabled[(3)*(33)+15]= "ReplaceableTextures\\CommandButtons\\BTNDeathCoil.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+15]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDeathCoil.blp"
    set s__abilityName[(3)*(33)+16]= "Death Pact:"
    set s__btnAbilityImgEnabled[(3)*(33)+16]= "ReplaceableTextures\\CommandButtons\\BTNDeathPact.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+16]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDeathPact.blp"
    set s__abilityName[(3)*(33)+17]= "Animate Dead:"
    set s__btnAbilityImgEnabled[(3)*(33)+17]= "ReplaceableTextures\\CommandButtons\\BTNAnimateDead.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+17]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAnimateDead.blp"
    set s__abilityName[(3)*(33)+18]= "Frost Nova:"
    set s__btnAbilityImgEnabled[(3)*(33)+18]= "ReplaceableTextures\\CommandButtons\\BTNGlacier.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+18]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGlacier.blp"
    set s__abilityName[(3)*(33)+19]= "Frost Armor:"
    set s__btnAbilityImgEnabled[(3)*(33)+19]= "ReplaceableTextures\\CommandButtons\\BTNFrostArmor.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+19]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFrostArmor.blp"
    set s__abilityName[(3)*(33)+20]= "Dark Ritual:"
    set s__btnAbilityImgEnabled[(3)*(33)+20]= "ReplaceableTextures\\CommandButtons\\BTNDarkRitual.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+20]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDarkRitual.blp"
    set s__abilityName[(3)*(33)+21]= "Death and Decay:"
    set s__btnAbilityImgEnabled[(3)*(33)+21]= "ReplaceableTextures\\CommandButtons\\BTNDeathAndDecay.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+21]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDeathAndDecay.blp"
    set s__abilityName[(3)*(33)+22]= "Carrion Swarm:"
    set s__btnAbilityImgEnabled[(3)*(33)+22]= "ReplaceableTextures\\CommandButtons\\BTNCarrionSwarm.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+22]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCarrionSwarm.blp"
    set s__abilityName[(3)*(33)+23]= "Sleep:"
    set s__btnAbilityImgEnabled[(3)*(33)+23]= "ReplaceableTextures\\CommandButtons\\BTNSleep.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+23]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSleep.blp"
    set s__abilityName[(3)*(33)+24]= "Inferno:"
    set s__btnAbilityImgEnabled[(3)*(33)+24]= "ReplaceableTextures\\CommandButtons\\BTNInfernal.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+24]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNInfernal.blp"
    set s__abilityName[(3)*(33)+25]= "Impale:"
    set s__btnAbilityImgEnabled[(3)*(33)+25]= "ReplaceableTextures\\CommandButtons\\BTNImpale.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+25]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNImpale.blp"
    set s__abilityName[(3)*(33)+26]= "Carrion Beetles:"
    set s__btnAbilityImgEnabled[(3)*(33)+26]= "ReplaceableTextures\\CommandButtons\\BTNCarrionScarabsOn.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+26]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCarrionScarabsOn.blp"
    set s__abilityName[(3)*(33)+27]= "Locust Swarm:"
    set s__btnAbilityImgEnabled[(3)*(33)+27]= "ReplaceableTextures\\CommandButtons\\BTNLocustSwarm.blp"
    set s__btnAbilityImgDisabled[(3)*(33)+27]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLocustSwarm.blp"


    // Night Elf
    set s__abilityName[(4)*(33)+1]= "Sentinel:"
    set s__btnAbilityImgEnabled[(4)*(33)+1]= "ReplaceableTextures\\CommandButtons\\BTNSentinel.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+1]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSentinel.blp"
    set s__abilityName[(4)*(33)+2]= "Abolish Magic:"
    set s__btnAbilityImgEnabled[(4)*(33)+2]= "ReplaceableTextures\\CommandButtons\\BTNDryadDispelMagicOn.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+2]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDryadDispelMagicOn.blp"
    set s__abilityName[(4)*(33)+3]= "Roar:"
    set s__btnAbilityImgEnabled[(4)*(33)+3]= "ReplaceableTextures\\CommandButtons\\BTNBattleRoar.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+3]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBattleRoar.blp"
    set s__abilityName[(4)*(33)+4]= "Rejuvenation:"
    set s__btnAbilityImgEnabled[(4)*(33)+4]= "ReplaceableTextures\\CommandButtons\\BTNRejuvenation.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+4]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRejuvenation.blp"
    set s__abilityName[(4)*(33)+5]= "Bear Form:"
    set s__btnAbilityImgEnabled[(4)*(33)+5]= "ReplaceableTextures\\CommandButtons\\BTNBearForm.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+5]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBearForm.blp"
    set s__abilityName[(4)*(33)+6]= "Faerie Fire:"
    set s__btnAbilityImgEnabled[(4)*(33)+6]= "ReplaceableTextures\\CommandButtons\\BTNFaerieFireOn.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+6]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFaerieFireOn.blp"
    set s__abilityName[(4)*(33)+7]= "Storm Crow Form:"
    set s__btnAbilityImgEnabled[(4)*(33)+7]= "ReplaceableTextures\\CommandButtons\\BTNRavenForm.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+7]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRavenForm.blp"
    set s__abilityName[(4)*(33)+8]= "Cyclone:"
    set s__btnAbilityImgEnabled[(4)*(33)+8]= "ReplaceableTextures\\CommandButtons\\BTNCyclone.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+8]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCyclone.blp"
    set s__abilityName[(4)*(33)+9]= "Phase Shift:"
    set s__btnAbilityImgEnabled[(4)*(33)+9]= "ReplaceableTextures\\CommandButtons\\BTNPhaseShiftOn.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+9]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPhaseShiftOn.blp"
    set s__abilityName[(4)*(33)+10]= "Mana Flare:"
    set s__btnAbilityImgEnabled[(4)*(33)+10]= "ReplaceableTextures\\CommandButtons\\BTNManaFlare.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+10]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNManaFlare.blp"
    set s__abilityName[(4)*(33)+11]= "Taunt:"
    set s__btnAbilityImgEnabled[(4)*(33)+11]= "ReplaceableTextures\\CommandButtons\\BTNTaunt.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+11]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTaunt.blp"

    set s__abilityName[(4)*(33)+12]= "Entangling Roots:"
    set s__btnAbilityImgEnabled[(4)*(33)+12]= "ReplaceableTextures\\CommandButtons\\BTNEntanglingRoots.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+12]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEntanglingRoots.blp"
    set s__abilityName[(4)*(33)+13]= "Force of Nature:"
    set s__btnAbilityImgEnabled[(4)*(33)+13]= "ReplaceableTextures\\CommandButtons\\BTNEnt.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+13]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEnt.blp"
    set s__abilityName[(4)*(33)+14]= "Tranquility:"
    set s__btnAbilityImgEnabled[(4)*(33)+14]= "ReplaceableTextures\\CommandButtons\\BTNTranquility.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+14]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTranquility.blp"
    set s__abilityName[(4)*(33)+15]= "Silence:"
    set s__btnAbilityImgEnabled[(4)*(33)+15]= "ReplaceableTextures\\CommandButtons\\BTNSilence.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+15]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSilence.blp"
    set s__abilityName[(4)*(33)+16]= "Searing Arrows:"
    set s__btnAbilityImgEnabled[(4)*(33)+16]= "ReplaceableTextures\\CommandButtons\\BTNSearingArrowsOn.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+16]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSearingArrowsOn.blp"
    set s__abilityName[(4)*(33)+17]= "Starfall:"
    set s__btnAbilityImgEnabled[(4)*(33)+17]= "ReplaceableTextures\\CommandButtons\\BTNStarfall.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+17]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStarfall.blp"
    set s__abilityName[(4)*(33)+18]= "Mana Burn:"
    set s__btnAbilityImgEnabled[(4)*(33)+18]= "ReplaceableTextures\\CommandButtons\\BTNManaBurn.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+18]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNManaBurn.blp"
    set s__abilityName[(4)*(33)+19]= "Immolation:"
    set s__btnAbilityImgEnabled[(4)*(33)+19]= "ReplaceableTextures\\CommandButtons\\BTNImmolationOn.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+19]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNImmolationOn.blp"
    set s__abilityName[(4)*(33)+20]= "Metamorphosis:"
    set s__btnAbilityImgEnabled[(4)*(33)+20]= "ReplaceableTextures\\CommandButtons\\BTNMetamorphosis.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+20]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMetamorphosis.blp"
    set s__abilityName[(4)*(33)+21]= "Fan of Knives:"
    set s__btnAbilityImgEnabled[(4)*(33)+21]= "ReplaceableTextures\\CommandButtons\\BTNFanOfKnives.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+21]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFanOfKnives.blp"
    set s__abilityName[(4)*(33)+22]= "Blink:"
    set s__btnAbilityImgEnabled[(4)*(33)+22]= "ReplaceableTextures\\CommandButtons\\BTNBlink.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+22]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBlink.blp"
    set s__abilityName[(4)*(33)+23]= "Shadow Strike:"
    set s__btnAbilityImgEnabled[(4)*(33)+23]= "ReplaceableTextures\\CommandButtons\\BTNShadowStrike.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+23]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNShadowStrike.blp"
    set s__abilityName[(4)*(33)+24]= "Vengeance:"
    set s__btnAbilityImgEnabled[(4)*(33)+24]= "ReplaceableTextures\\CommandButtons\\BTNSpiritOfVengeance.blp"
    set s__btnAbilityImgDisabled[(4)*(33)+24]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpiritOfVengeance.blp"


    // Dalaran
    set s__abilityName[(5)*(33)+1]= "Burn:"
    set s__btnAbilityImgEnabled[(5)*(33)+1]= "ReplaceableTextures\\CommandButtons\\BTNSpell_Fire_BurningSpeed"
    set s__btnAbilityImgDisabled[(5)*(33)+1]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpell_Fire_BurningSpeed"
    set s__abilityName[(5)*(33)+2]= "Living Bomb:"
    set s__btnAbilityImgEnabled[(5)*(33)+2]= "ReplaceableTextures\\CommandButtons\\BTNSpell_Fire_FlameShock"
    set s__btnAbilityImgDisabled[(5)*(33)+2]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpell_Fire_FlameShock"
    set s__abilityName[(5)*(33)+3]= "Dalaran Rune:"
    set s__btnAbilityImgEnabled[(5)*(33)+3]= "Dalaran\\ATCEntice"
    set s__btnAbilityImgDisabled[(5)*(33)+3]= "Dalaran\\ATCEntice"
    set s__abilityName[(5)*(33)+4]= "Weaken:"
    set s__btnAbilityImgEnabled[(5)*(33)+4]= "ReplaceableTextures\\CommandButtons\\BTNNecromancyBlue"
    set s__btnAbilityImgDisabled[(5)*(33)+4]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNecromancyBlue"
    set s__abilityName[(5)*(33)+5]= "Barrier:"
    set s__btnAbilityImgEnabled[(5)*(33)+5]= "ReplaceableTextures\\CommandButtons\\BTNMana Shield"
    set s__btnAbilityImgDisabled[(5)*(33)+5]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMana Shield"
    set s__abilityName[(5)*(33)+6]= "Inversion:"
    set s__btnAbilityImgEnabled[(5)*(33)+6]= "ReplaceableTextures\\CommandButtons\\BTNArcanistAbility1"
    set s__btnAbilityImgDisabled[(5)*(33)+6]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNArcanistAbility1"
    set s__abilityName[(5)*(33)+7]= "Wisdom Embrace:"
    set s__btnAbilityImgEnabled[(5)*(33)+7]= "ReplaceableTextures\\CommandButtons\\BTNArcanistAbility2"
    set s__btnAbilityImgDisabled[(5)*(33)+7]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNArcanistAbility2"
    set s__abilityName[(5)*(33)+8]= "Polymorph:"
    set s__btnAbilityImgEnabled[(5)*(33)+8]= "ReplaceableTextures\\CommandButtons\\BTNPolymorph"
    set s__btnAbilityImgDisabled[(5)*(33)+8]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPolymorph"
    set s__abilityName[(5)*(33)+9]= "Defend:"
    set s__btnAbilityImgEnabled[(5)*(33)+9]= "ReplaceableTextures\\CommandButtons\\BTNMagicDefend"
    set s__btnAbilityImgDisabled[(5)*(33)+9]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMagicDefend"
    set s__abilityName[(5)*(33)+10]= "Protective Field:"
    set s__btnAbilityImgEnabled[(5)*(33)+10]= "ReplaceableTextures\\CommandButtons\\BTNability-protoss-timewarp"
    set s__btnAbilityImgDisabled[(5)*(33)+10]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNability-protoss-timewarp"
    set s__abilityName[(5)*(33)+11]= "Absorb Mana:"
    set s__btnAbilityImgEnabled[(5)*(33)+11]= "ReplaceableTextures\\CommandButtons\\BTNAbsorbMagic"
    set s__btnAbilityImgDisabled[(5)*(33)+11]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAbsorbMagic"
    set s__abilityName[(5)*(33)+12]= "Fusion:"
    set s__btnAbilityImgEnabled[(5)*(33)+12]= "ReplaceableTextures\\CommandButtons\\BTNSpell_Nature_InvisibilityTotem"
    set s__btnAbilityImgDisabled[(5)*(33)+12]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpell_Nature_InvisibilityTotem"
    set s__abilityName[(5)*(33)+13]= "Magical Destruction:"
    set s__btnAbilityImgEnabled[(5)*(33)+13]= "ReplaceableTextures\\CommandButtons\\ATCOrbOfLightning"
    set s__btnAbilityImgDisabled[(5)*(33)+13]= "ReplaceableTextures\\CommandButtonsDisabled\\DISATCOrbOfLightning"
    set s__abilityName[(5)*(33)+14]= "Frost Nova:"
    set s__btnAbilityImgEnabled[(5)*(33)+14]= "ReplaceableTextures\\CommandButtons\\BTNSpell_Fire_BlueFlameBolt"
    set s__btnAbilityImgDisabled[(5)*(33)+14]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpell_Fire_BlueFlameBolt"
    set s__abilityName[(5)*(33)+15]= "Arcane Leash:"
    set s__btnAbilityImgEnabled[(5)*(33)+15]= "ReplaceableTextures\\CommandButtons\\BTNspell_shaman_crashlightning"
    set s__btnAbilityImgDisabled[(5)*(33)+15]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNspell_shaman_crashlightning"
    set s__abilityName[(5)*(33)+16]= "Blink:"
    set s__btnAbilityImgEnabled[(5)*(33)+16]= "ReplaceableTextures\\CommandButtons\\BTNBlink"
    set s__btnAbilityImgDisabled[(5)*(33)+16]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBlink"
    
    set s__abilityName[(5)*(33)+17]= "Frost Bolt:"
    set s__btnAbilityImgEnabled[(5)*(33)+17]= "ReplaceableTextures\\CommandButtons\\BTNFrostBolt"
    set s__btnAbilityImgDisabled[(5)*(33)+17]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFrostBolt"
    set s__abilityName[(5)*(33)+18]= "Mass Frost Armor:"
    set s__btnAbilityImgEnabled[(5)*(33)+18]= "ReplaceableTextures\\CommandButtons\\BTNspell_frost_frostarmor02"
    set s__btnAbilityImgDisabled[(5)*(33)+18]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNspell_frost_frostarmor02"
    set s__abilityName[(5)*(33)+19]= "Blink (Mage):"
    set s__btnAbilityImgEnabled[(5)*(33)+19]= "ReplaceableTextures\\CommandButtons\\BTNBlink"
    set s__btnAbilityImgDisabled[(5)*(33)+19]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBlink"
    set s__abilityName[(5)*(33)+20]= "Permafrost:"
    set s__btnAbilityImgEnabled[(5)*(33)+20]= "ReplaceableTextures\\CommandButtons\\BTNBlizzard"
    set s__btnAbilityImgDisabled[(5)*(33)+20]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBlizzard"
    set s__abilityName[(5)*(33)+21]= "Unstable Portal:"
    set s__btnAbilityImgEnabled[(5)*(33)+21]= "ReplaceableTextures\\CommandButtons\\BTNUnstable Portal"
    set s__btnAbilityImgDisabled[(5)*(33)+21]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUnstable Portal"
    set s__abilityName[(5)*(33)+22]= "Blink (High Wizard):"
    set s__btnAbilityImgEnabled[(5)*(33)+22]= "ReplaceableTextures\\CommandButtons\\BTNBlink"
    set s__btnAbilityImgDisabled[(5)*(33)+22]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBlink"
    set s__abilityName[(5)*(33)+23]= "Mana Ward:"
    set s__btnAbilityImgEnabled[(5)*(33)+23]= "ReplaceableTextures\\CommandButtons\\BTNMana Ward"
    set s__btnAbilityImgDisabled[(5)*(33)+23]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMana Ward"
    set s__abilityName[(5)*(33)+24]= "Disruption:"
    set s__btnAbilityImgEnabled[(5)*(33)+24]= "ReplaceableTextures\\CommandButtons\\BTNSpell_DeathKnight_AntiMagicZone"
    set s__btnAbilityImgDisabled[(5)*(33)+24]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpell_DeathKnight_AntiMagicZone"
    set s__abilityName[(5)*(33)+25]= "Earth Elemental:"
    set s__btnAbilityImgEnabled[(5)*(33)+25]= "ReplaceableTextures\\CommandButtons\\BTNStoneElementalIcon"
    set s__btnAbilityImgDisabled[(5)*(33)+25]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStoneElementalIcon"
    set s__abilityName[(5)*(33)+26]= "Water Elemental:"
    set s__btnAbilityImgEnabled[(5)*(33)+26]= "ReplaceableTextures\\CommandButtons\\BTNSummonWaterElemental"
    set s__btnAbilityImgDisabled[(5)*(33)+26]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSummonWaterElemental"
    set s__abilityName[(5)*(33)+27]= "Aether Elemental:"
    set s__btnAbilityImgEnabled[(5)*(33)+27]= "ReplaceableTextures\\CommandButtons\\BTNAetherDragon"
    set s__btnAbilityImgDisabled[(5)*(33)+27]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAetherDragon"
    set s__abilityName[(5)*(33)+28]= "Fire Elemental:"
    set s__btnAbilityImgEnabled[(5)*(33)+28]= "ReplaceableTextures\\CommandButtons\\BTNspell_fire_elemental_totem"
    set s__btnAbilityImgDisabled[(5)*(33)+28]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNspell_fire_elemental_totem"
    set s__abilityName[(5)*(33)+29]= "Anti-Energy:"
    set s__btnAbilityImgEnabled[(5)*(33)+29]= "ReplaceableTextures\\CommandButtons\\BTNAnti-Energy"
    set s__btnAbilityImgDisabled[(5)*(33)+29]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAnti-Energy"
    set s__abilityName[(5)*(33)+30]= "Overpower:"
    set s__btnAbilityImgEnabled[(5)*(33)+30]= "ReplaceableTextures\\CommandButtons\\BTNOverpower"
    set s__btnAbilityImgDisabled[(5)*(33)+30]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOverpower"
    set s__abilityName[(5)*(33)+31]= "Epicenter:"
    set s__btnAbilityImgEnabled[(5)*(33)+31]= "ReplaceableTextures\\CommandButtons\\BTNEpicenter"
    set s__btnAbilityImgDisabled[(5)*(33)+31]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEpicenter"


    // Blood Elf
    set s__abilityName[(6)*(33)+1]= "Concentration:"
    set s__btnAbilityImgEnabled[(6)*(33)+1]= "ReplaceableTextures\\CommandButtons\\BTNFlamingArrows"
    set s__btnAbilityImgDisabled[(6)*(33)+1]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFlamingArrows"
    set s__abilityName[(6)*(33)+2]= "Magic Hunger:"
    set s__btnAbilityImgEnabled[(6)*(33)+2]= "ReplaceableTextures\\CommandButtons\\BTNCurse2"
    set s__btnAbilityImgDisabled[(6)*(33)+2]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCurse2"
    set s__abilityName[(6)*(33)+3]= "Silver Edge Form:"
    set s__btnAbilityImgEnabled[(6)*(33)+3]= "ReplaceableTextures\\CommandButtons\\BTNFlyClaw"
    set s__btnAbilityImgDisabled[(6)*(33)+3]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFlyClaw"
    set s__abilityName[(6)*(33)+4]= "Slow:"
    set s__btnAbilityImgEnabled[(6)*(33)+4]= "ReplaceableTextures\\CommandButtons\\BTNSlowOn"
    set s__btnAbilityImgDisabled[(6)*(33)+4]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSlowOn"
    set s__abilityName[(6)*(33)+5]= "Spell Steal:"
    set s__btnAbilityImgEnabled[(6)*(33)+5]= "ReplaceableTextures\\CommandButtons\\BTNSpellSteal"
    set s__btnAbilityImgDisabled[(6)*(33)+5]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpellSteal"
    set s__abilityName[(6)*(33)+6]= "Verbis Virtus:"
    set s__btnAbilityImgEnabled[(6)*(33)+6]= "ReplaceableTextures\\CommandButtons\\BTNToxicBarrier"
    set s__btnAbilityImgDisabled[(6)*(33)+6]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNToxicBarrier"
    set s__abilityName[(6)*(33)+7]= "Liberate Shield:"
    set s__btnAbilityImgEnabled[(6)*(33)+7]= "ReplaceableTextures\\CommandButtons\\ATCWind Shield"
    set s__btnAbilityImgDisabled[(6)*(33)+7]= "ReplaceableTextures\\CommandButtonsDisabled\\DISATCWind Shield"
    set s__abilityName[(6)*(33)+8]= "Arcane Shield:"
    set s__btnAbilityImgEnabled[(6)*(33)+8]= "ReplaceableTextures\\CommandButtons\\BTNMagicDefend"
    set s__btnAbilityImgDisabled[(6)*(33)+8]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMagicDefend"
    set s__abilityName[(6)*(33)+9]= "Mana Decay:"
    set s__btnAbilityImgEnabled[(6)*(33)+9]= "ReplaceableTextures\\CommandButtons\\BTNMana Decay"
    set s__btnAbilityImgDisabled[(6)*(33)+9]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMana Decay"
    set s__abilityName[(6)*(33)+10]= "Siege Mode:"
    set s__btnAbilityImgEnabled[(6)*(33)+10]= "ReplaceableTextures\\CommandButtons\\BTNDecimatorV2"
    set s__btnAbilityImgDisabled[(6)*(33)+10]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDecimatorV2"

    set s__abilityName[(6)*(33)+11]= "Refraction:"
    set s__btnAbilityImgEnabled[(6)*(33)+11]= "ReplaceableTextures\\CommandButtons\\BTNinv_staff_2h_artifactaegwynsstaff_d_01"
    set s__btnAbilityImgDisabled[(6)*(33)+11]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNinv_staff_2h_artifactaegwynsstaff_d_01"
    set s__abilityName[(6)*(33)+12]= "Meld:"
    set s__btnAbilityImgEnabled[(6)*(33)+12]= "ReplaceableTextures\\CommandButtons\\BTNBloodElfCloaking"
    set s__btnAbilityImgDisabled[(6)*(33)+12]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBloodElfCloaking"
    set s__abilityName[(6)*(33)+13]= "Mana Burn:"
    set s__btnAbilityImgEnabled[(6)*(33)+13]= "ReplaceableTextures\\CommandButtons\\BTNManaBurn"
    set s__btnAbilityImgDisabled[(6)*(33)+13]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNManaBurn"
    set s__abilityName[(6)*(33)+14]= "Sin'dorei Blades:"
    set s__btnAbilityImgEnabled[(6)*(33)+14]= "ReplaceableTextures\\CommandButtons\\BTN_cr_VeeR6"
    set s__btnAbilityImgDisabled[(6)*(33)+14]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTN_cr_VeeR6"
    set s__abilityName[(6)*(33)+15]= "Bladestorm:"
    set s__btnAbilityImgEnabled[(6)*(33)+15]= "ReplaceableTextures\\CommandButtons\\BTNWhirlwind"
    set s__btnAbilityImgDisabled[(6)*(33)+15]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWhirlwind"
    set s__abilityName[(6)*(33)+16]= "Berserker's Call:"
    set s__btnAbilityImgEnabled[(6)*(33)+16]= "ReplaceableTextures\\CommandButtons\\BTNCR_Human_rage_two"
    set s__btnAbilityImgDisabled[(6)*(33)+16]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCR_Human_rage_two"
    set s__abilityName[(6)*(33)+17]= "Shield Bash:"
    set s__btnAbilityImgEnabled[(6)*(33)+17]= "ReplaceableTextures\\CommandButtons\\BTN_CR_SHEILD_Bash"
    set s__btnAbilityImgDisabled[(6)*(33)+17]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTN_CR_SHEILD_Bash"
    set s__abilityName[(6)*(33)+17]= "Havok:"
    set s__btnAbilityImgEnabled[(6)*(33)+17]= "ReplaceableTextures\\CommandButtons\\BTNShackle"
    set s__btnAbilityImgDisabled[(6)*(33)+17]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNShackle"
    set s__abilityName[(6)*(33)+18]= "Ultimate Strength:"
    set s__btnAbilityImgEnabled[(6)*(33)+18]= "ReplaceableTextures\\CommandButtons\\BTNRoar of Power"
    set s__btnAbilityImgDisabled[(6)*(33)+18]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRoar of Power"
    set s__abilityName[(6)*(33)+19]= "Siphon Life and Mana:"
    set s__btnAbilityImgEnabled[(6)*(33)+19]= "ReplaceableTextures\\CommandButtons\\BTNDrain"
    set s__btnAbilityImgDisabled[(6)*(33)+19]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDrain"
    set s__abilityName[(6)*(33)+20]= "Liberate:"
    set s__btnAbilityImgEnabled[(6)*(33)+20]= "ReplaceableTextures\\CommandButtons\\BTNLifeGift"
    set s__btnAbilityImgDisabled[(6)*(33)+20]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLifeGift"
    set s__abilityName[(6)*(33)+21]= "Fire Dance:"
    set s__btnAbilityImgEnabled[(6)*(33)+21]= "ReplaceableTextures\\CommandButtons\\BTNLavaSpawn"
    set s__btnAbilityImgDisabled[(6)*(33)+21]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLavaSpawn"


    // Forsaken
    set s__abilityName[(7)*(33)+1]= "Phase Strike:"
    set s__btnAbilityImgEnabled[(7)*(33)+1]= "ReplaceableTextures\\CommandButtons\\BTNForcePulse"
    set s__btnAbilityImgDisabled[(7)*(33)+1]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNForcePulse"
    set s__abilityName[(7)*(33)+2]= "Potent Remedy:"
    set s__btnAbilityImgEnabled[(7)*(33)+2]= "ReplaceableTextures\\CommandButtons\\BTNAntiMagicShell"
    set s__btnAbilityImgDisabled[(7)*(33)+2]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAntiMagicShell"
    set s__abilityName[(7)*(33)+3]= "Forsaken Concoction:"
    set s__btnAbilityImgEnabled[(7)*(33)+3]= "ReplaceableTextures\\CommandButtons\\BTNPoisonPotionTP1"
    set s__btnAbilityImgDisabled[(7)*(33)+3]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPoisonPotionTP1"
    set s__abilityName[(7)*(33)+4]= "Death Fumes:"
    set s__btnAbilityImgEnabled[(7)*(33)+4]= "ReplaceableTextures\\CommandButtons\\BTNDeath Draught"
    set s__btnAbilityImgDisabled[(7)*(33)+4]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDeath Draught"
    set s__abilityName[(7)*(33)+5]= "Shadow's Call:"
    set s__btnAbilityImgEnabled[(7)*(33)+5]= "ReplaceableTextures\\CommandButtons\\BTNShadow Call"
    set s__btnAbilityImgDisabled[(7)*(33)+5]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNShadow Call"
    set s__abilityName[(7)*(33)+6]= "Consume:"
    set s__btnAbilityImgEnabled[(7)*(33)+6]= "ReplaceableTextures\\CommandButtons\\BTNConsume"
    set s__btnAbilityImgDisabled[(7)*(33)+6]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNConsume"
    set s__abilityName[(7)*(33)+7]= "Fade:"
    set s__btnAbilityImgEnabled[(7)*(33)+7]= "ReplaceableTextures\\CommandButtons\\BTNFade"
    set s__btnAbilityImgDisabled[(7)*(33)+7]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFade"
    set s__abilityName[(7)*(33)+8]= "Hook:"
    set s__btnAbilityImgEnabled[(7)*(33)+8]= "ReplaceableTextures\\CommandButtons\\BTNGrapplingHook"
    set s__btnAbilityImgDisabled[(7)*(33)+8]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGrapplingHook"
    set s__abilityName[(7)*(33)+9]= "Raise From Graves:"
    set s__btnAbilityImgEnabled[(7)*(33)+9]= "ReplaceableTextures\\CommandButtons\\ATCRise From the GRaves"
    set s__btnAbilityImgDisabled[(7)*(33)+9]= "ReplaceableTextures\\CommandButtonsDisabled\\DISATCRise From the GRaves"
    set s__abilityName[(7)*(33)+10]= "Undead Embrace:"
    set s__btnAbilityImgEnabled[(7)*(33)+10]= "ReplaceableTextures\\CommandButtons\\BTNUndead Embrace"
    set s__btnAbilityImgDisabled[(7)*(33)+10]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUndead Embrace"

    set s__abilityName[(7)*(33)+11]= "Grave Blow:"
    set s__btnAbilityImgEnabled[(7)*(33)+11]= "ReplaceableTextures\\CommandButtons\\BTNSpell_DeathKnight_SpellDeflection"
    set s__btnAbilityImgDisabled[(7)*(33)+11]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpell_DeathKnight_SpellDeflection"
    set s__abilityName[(7)*(33)+12]= "Dread:"
    set s__btnAbilityImgEnabled[(7)*(33)+12]= "ReplaceableTextures\\CommandButtons\\BTNSpell_Shadow_Shadowfiend"
    set s__btnAbilityImgDisabled[(7)*(33)+12]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpell_Shadow_Shadowfiend"
    set s__abilityName[(7)*(33)+13]= "Shadow Ascendant:"
    set s__btnAbilityImgEnabled[(7)*(33)+13]= "ReplaceableTextures\\CommandButtons\\BTNSpell_Shadow_GatherShadows"
    set s__btnAbilityImgDisabled[(7)*(33)+13]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpell_Shadow_GatherShadows"
    set s__abilityName[(7)*(33)+14]= "Life Drain:"
    set s__btnAbilityImgEnabled[(7)*(33)+14]= "ReplaceableTextures\\CommandButtons\\BTNLifeDrain"
    set s__btnAbilityImgDisabled[(7)*(33)+14]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLifeDrain"
    set s__abilityName[(7)*(33)+15]= "Remorseless:"
    set s__btnAbilityImgEnabled[(7)*(33)+15]= "ReplaceableTextures\\CommandButtons\\BTNSpell_Holy_PrayerofShadowProtection"
    set s__btnAbilityImgDisabled[(7)*(33)+15]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpell_Holy_PrayerofShadowProtection"
    set s__abilityName[(7)*(33)+16]= "Banshee Scream:"
    set s__btnAbilityImgEnabled[(7)*(33)+16]= "ReplaceableTextures\\CommandButtons\\BTNPossession"
    set s__btnAbilityImgDisabled[(7)*(33)+16]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPossession"
    set s__abilityName[(7)*(33)+17]= "Punish:"
    set s__btnAbilityImgEnabled[(7)*(33)+17]= "ReplaceableTextures\\CommandButtons\\BTNPunish2"
    set s__btnAbilityImgDisabled[(7)*(33)+17]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPunish2"
    set s__abilityName[(7)*(33)+18]= "Death Bound:"
    set s__btnAbilityImgEnabled[(7)*(33)+18]= "ReplaceableTextures\\CommandButtons\\BTNShift"
    set s__btnAbilityImgDisabled[(7)*(33)+18]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNShift"
    set s__abilityName[(7)*(33)+19]= "Vile Blast:"
    set s__btnAbilityImgEnabled[(7)*(33)+19]= "ReplaceableTextures\\CommandButtons\\BTNVile blast"
    set s__btnAbilityImgDisabled[(7)*(33)+19]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNVile blast"
    set s__abilityName[(7)*(33)+20]= "Virus:"
    set s__btnAbilityImgEnabled[(7)*(33)+20]= "ReplaceableTextures\\CommandButtons\\BTNVirus"
    set s__btnAbilityImgDisabled[(7)*(33)+20]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNVirus"
    set s__abilityName[(7)*(33)+21]= "Plague:"
    set s__btnAbilityImgEnabled[(7)*(33)+21]= "ReplaceableTextures\\CommandButtons\\BTNPleague"
    set s__btnAbilityImgDisabled[(7)*(33)+21]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPleague"
    set s__abilityName[(7)*(33)+22]= "Greater Abomination:"
    set s__btnAbilityImgEnabled[(7)*(33)+22]= "ReplaceableTextures\\CommandButtons\\BTNGreaterAbo"
    set s__btnAbilityImgDisabled[(7)*(33)+22]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGreaterAbo"


    // Naga
    set s__abilityName[(8)*(33)+1]= "Parasite:"
    set s__btnAbilityImgEnabled[(8)*(33)+1]= "ReplaceableTextures\\CommandButtons\\BTNParasite"
    set s__btnAbilityImgDisabled[(8)*(33)+1]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNParasite"
    set s__abilityName[(8)*(33)+2]= "Mending Water:"
    set s__btnAbilityImgEnabled[(8)*(33)+2]= "ReplaceableTextures\\CommandButtons\\BTNWash"
    set s__btnAbilityImgDisabled[(8)*(33)+2]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWash"
    set s__abilityName[(8)*(33)+3]= "Typhoon:"
    set s__btnAbilityImgEnabled[(8)*(33)+3]= "ReplaceableTextures\\CommandButtons\\BTNWhirlpool"
    set s__btnAbilityImgDisabled[(8)*(33)+3]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWhirlpool"
    set s__abilityName[(8)*(33)+4]= "Madness:"
    set s__btnAbilityImgEnabled[(8)*(33)+4]= "ReplaceableTextures\\CommandButtons\\BTNChainOfWater"
    set s__btnAbilityImgDisabled[(8)*(33)+4]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNChainOfWater"
    set s__abilityName[(8)*(33)+5]= "Water Shield:"
    set s__btnAbilityImgEnabled[(8)*(33)+5]= "ReplaceableTextures\\CommandButtons\\ATCTS"
    set s__btnAbilityImgDisabled[(8)*(33)+5]= "ReplaceableTextures\\CommandButtonsDisabled\\DISATCTS"
    set s__abilityName[(8)*(33)+6]= "Suffocate:"
    set s__btnAbilityImgEnabled[(8)*(33)+6]= "ReplaceableTextures\\CommandButtons\\BTNANA_WaterShockwave"
    set s__btnAbilityImgDisabled[(8)*(33)+6]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNANA_WaterShockwave"
    set s__abilityName[(8)*(33)+7]= "Devour:"
    set s__btnAbilityImgEnabled[(8)*(33)+7]= "ReplaceableTextures\\CommandButtons\\BTNDevour"
    set s__btnAbilityImgDisabled[(8)*(33)+7]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDevour"
    set s__abilityName[(8)*(33)+8]= "Crystalized:"
    set s__btnAbilityImgEnabled[(8)*(33)+8]= "ReplaceableTextures\\CommandButtons\\BTNFrostNova"
    set s__btnAbilityImgDisabled[(8)*(33)+8]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFrostNova"
    set s__abilityName[(8)*(33)+9]= "Submerge:"
    set s__btnAbilityImgEnabled[(8)*(33)+9]= "ReplaceableTextures\\CommandButtons\\BTNNagaBurrow"
    set s__btnAbilityImgDisabled[(8)*(33)+9]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNagaBurrow"

    set s__abilityName[(8)*(33)+10]= "Thermal Eruption:"
    set s__btnAbilityImgEnabled[(8)*(33)+10]= "ReplaceableTextures\\CommandButtons\\BTN_cr_Shield"
    set s__btnAbilityImgDisabled[(8)*(33)+10]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTN_cr_Shield"
    set s__abilityName[(8)*(33)+11]= "Aqua Burst:"
    set s__btnAbilityImgEnabled[(8)*(33)+11]= "ReplaceableTextures\\CommandButtons\\BTNNagaRoyalGuardWarStomp"
    set s__btnAbilityImgDisabled[(8)*(33)+11]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNagaRoyalGuardWarStomp"
    set s__abilityName[(8)*(33)+12]= "Curse of the Depth:"
    set s__btnAbilityImgEnabled[(8)*(33)+12]= "ReplaceableTextures\\CommandButtons\\BTNNagaMend"
    set s__btnAbilityImgDisabled[(8)*(33)+12]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNagaMend"
    set s__abilityName[(8)*(33)+13]= "Gust:"
    set s__btnAbilityImgEnabled[(8)*(33)+13]= "ReplaceableTextures\\CommandButtons\\BTN_CR_TIDE_strike"
    set s__btnAbilityImgDisabled[(8)*(33)+13]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTN_CR_TIDE_strike"
    set s__abilityName[(8)*(33)+14]= "Ravage:"
    set s__btnAbilityImgEnabled[(8)*(33)+14]= "ReplaceableTextures\\CommandButtons\\BTNFrostImpale2"
    set s__btnAbilityImgDisabled[(8)*(33)+14]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFrostImpale2"
    set s__abilityName[(8)*(33)+15]= "Healing Water:"
    set s__btnAbilityImgEnabled[(8)*(33)+15]= "ReplaceableTextures\\CommandButtons\\BTNSphere-of-water"
    set s__btnAbilityImgDisabled[(8)*(33)+15]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSphere-of-water"
    set s__abilityName[(8)*(33)+16]= "Mist:"
    set s__btnAbilityImgEnabled[(8)*(33)+16]= "ReplaceableTextures\\CommandButtons\\BTNSealFrost"
    set s__btnAbilityImgDisabled[(8)*(33)+16]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSealFrost"
    set s__abilityName[(8)*(33)+17]= "Monsoon:"
    set s__btnAbilityImgEnabled[(8)*(33)+17]= "ReplaceableTextures\\CommandButtons\\BTNMonsoon"
    set s__btnAbilityImgDisabled[(8)*(33)+17]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMonsoon"
    set s__abilityName[(8)*(33)+18]= "Razor Edge:"
    set s__btnAbilityImgEnabled[(8)*(33)+18]= "ReplaceableTextures\\CommandButtons\\BTN_CR_Bladestorm"
    set s__btnAbilityImgDisabled[(8)*(33)+18]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTN_CR_Bladestorm"
    set s__abilityName[(8)*(33)+19]= "Retreat:"
    set s__btnAbilityImgEnabled[(8)*(33)+19]= "ReplaceableTextures\\CommandButtons\\BTNNagaBurrow"
    set s__btnAbilityImgDisabled[(8)*(33)+19]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNagaBurrow"
    set s__abilityName[(8)*(33)+20]= "Hunter Instinct:"
    set s__btnAbilityImgEnabled[(8)*(33)+20]= "ReplaceableTextures\\CommandButtons\\BTNNagaTrueSight"
    set s__btnAbilityImgDisabled[(8)*(33)+20]= "ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNagaTrueSight"




    set frameXPOS=0.0
    set frameYPOS=0.0
    set incr=1

    set r=1
    set endIndex=DS_RACES_MAX
    loop
        exitwhen r > endIndex
        set frameAbilityName[r]=BlzCreateFrame("TasButtonTextTemplate", abilityMenu[r], 0, 0)
        call BlzFrameSetAbsPoint(frameAbilityName[r], FRAMEPOINT_LEFT, 0.075, 0.235)
        call BlzFrameSetText(frameAbilityName[r], "")
        call BlzFrameSetVisible(frameAbilityName[r], true)

        set frameAbilityState[r]=BlzCreateFrame("TasButtonTextTemplate", abilityMenu[r], 0, 0)
        call BlzFrameSetAbsPoint(frameAbilityState[r], FRAMEPOINT_LEFT, 0.075, 0.225)
        call BlzFrameSetText(frameAbilityState[r], "")
        call BlzFrameSetVisible(frameAbilityState[r], true)

        set i=1
        set endIndex1=33
        loop
            exitwhen i > endIndex1
            if ( s__btnAbilityImgEnabled[(r)*(33)+i] != null ) then
                // Enabled
                set s__btnAbilityEnabled[(r)*(33)+i]= BlzCreateFrame("ScoreScreenBottomButtonTemplate", abilityMenu[r], 0, 0)
                call BlzFrameSetSize(s__btnAbilityEnabled[(r)*(33)+i], 0.04, 0.04)
                call BlzFrameSetAbsPoint(s__btnAbilityEnabled[(r)*(33)+i], FRAMEPOINT_CENTER, 0.09 + frameXPOS, 0.47 - frameYPOS)
                call BlzFrameSetVisible(s__btnAbilityEnabled[(r)*(33)+i], true)
                set imgFrame=BlzGetFrameByName("ScoreScreenButtonBackdrop", 0)
                call BlzFrameSetTexture(imgFrame, s__btnAbilityImgEnabled[(r)*(33)+i], 0, true)

                // Button trigger
                set trig=CreateTrigger()
                call BlzTriggerRegisterFrameEvent(trig, s__btnAbilityEnabled[(r)*(33)+i], FRAMEEVENT_CONTROL_CLICK)
                call TriggerAddAction(trig, function AbilityToggle)

                // Hover trigger
                set trig3=CreateTrigger()
                call BlzTriggerRegisterFrameEvent(trig3, s__btnAbilityEnabled[(r)*(33)+i], FRAMEEVENT_MOUSE_ENTER)
                call TriggerAddAction(trig3, function AbilityHover)

                // Disabled
                set s__btnAbilityDisabled[(r)*(33)+i]= BlzCreateFrame("ScoreScreenBottomButtonTemplate", abilityMenu[r], 0, 0)
                call BlzFrameSetSize(s__btnAbilityDisabled[(r)*(33)+i], 0.04, 0.04)
                call BlzFrameSetAbsPoint(s__btnAbilityDisabled[(r)*(33)+i], FRAMEPOINT_CENTER, 0.09 + frameXPOS, 0.47 - frameYPOS)
                call BlzFrameSetVisible(s__btnAbilityDisabled[(r)*(33)+i], false)
                set imgFrame2=BlzGetFrameByName("ScoreScreenButtonBackdrop", 0)
                call BlzFrameSetTexture(imgFrame2, s__btnAbilityImgDisabled[(r)*(33)+i], 0, true)

                // Button trigger
                set trig2=CreateTrigger()
                call BlzTriggerRegisterFrameEvent(trig2, s__btnAbilityDisabled[(r)*(33)+i], FRAMEEVENT_CONTROL_CLICK)
                call TriggerAddAction(trig2, function AbilityToggle)

                // Hover trigger
                set trig4=CreateTrigger()
                call BlzTriggerRegisterFrameEvent(trig4, s__btnAbilityDisabled[(r)*(33)+i], FRAMEEVENT_MOUSE_ENTER)
                call TriggerAddAction(trig4, function AbilityHover)

                set frameXPOS=frameXPOS + 0.032

                if ( ModuloInteger(incr, 6) == 0 ) then
                    set frameYPOS=frameYPOS + 0.032
                    set frameXPOS=0
                endif

                // Move hero buttons down
                if ( r == 1 and i == 10 ) then
                    set frameYPOS=frameYPOS + 0.09
                    set frameXPOS=0
                    set incr=0
                elseif ( r == 2 and i == 13 ) then
                    set frameYPOS=frameYPOS + 0.058
                    set frameXPOS=0
                    set incr=0
                elseif ( r == 3 and i == 14 ) then
                    set frameYPOS=frameYPOS + 0.058
                    set frameXPOS=0
                    set incr=0
                elseif ( r == 4 and i == 10 ) then
                    set frameYPOS=frameYPOS + 0.09
                    set frameXPOS=0
                    set incr=0
                elseif ( r == 5 and i == 16 ) then
                    set frameYPOS=frameYPOS + 0.058
                    set frameXPOS=0
                    set incr=0
                elseif ( r == 6 and i == 10 ) then
                    set frameYPOS=frameYPOS + 0.09
                    set frameXPOS=0
                    set incr=0
                elseif ( r == 7 and i == 10 ) then
                    set frameYPOS=frameYPOS + 0.09
                    set frameXPOS=0
                    set incr=0
                elseif ( r == 8 and i == 9 ) then
                    set frameYPOS=frameYPOS + 0.09
                    set frameXPOS=0
                    set incr=0
                endif
            endif
            set incr=incr + 1

            set i=i + 1
        endloop

        // reset for next race
        set frameYPOS=0
        set frameXPOS=0
        set incr=1

        set r=r + 1
    endloop


    // Neutral

    set neutralAbilityName[1]="Healing Spray:"
    set btnNeutralAbilityImgEnabled[1]="ReplaceableTextures\\CommandButtons\\BTNHealingSpray.blp"
    set btnNeutralAbilityImgDisabled[1]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHealingSpray.blp"
    set neutralAbilityName[2]="Chemical Rage:"
    set btnNeutralAbilityImgEnabled[2]="ReplaceableTextures\\CommandButtons\\BTNChemicalRage.blp"
    set btnNeutralAbilityImgDisabled[2]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNChemicalRage.blp"
    set neutralAbilityName[3]="Acid Bomb:"
    set btnNeutralAbilityImgEnabled[3]="ReplaceableTextures\\CommandButtons\\BTNAcidBomb.blp"
    set btnNeutralAbilityImgDisabled[3]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAcidBomb.blp"
    set neutralAbilityName[4]="Transmute:"
    set btnNeutralAbilityImgEnabled[4]="ReplaceableTextures\\CommandButtons\\BTNTransmute.blp"
    set btnNeutralAbilityImgDisabled[4]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTransmute.blp"
    set neutralAbilityName[5]="Forked Lightning:"
    set btnNeutralAbilityImgEnabled[5]="ReplaceableTextures\\CommandButtons\\BTNMonsoon.blp"
    set btnNeutralAbilityImgDisabled[5]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMonsoon.blp"
    set neutralAbilityName[6]="Frost Arrows:"
    set btnNeutralAbilityImgEnabled[6]="ReplaceableTextures\\CommandButtons\\BTNColdArrowsOn.blp"
    set btnNeutralAbilityImgDisabled[6]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNColdArrowsOn.blp"
    set neutralAbilityName[7]="Mana Shield:"
    set btnNeutralAbilityImgEnabled[7]="ReplaceableTextures\\CommandButtons\\BTNNeutralManaShield.blp"
    set btnNeutralAbilityImgDisabled[7]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNeutralManaShield.blp"
    set neutralAbilityName[8]="Tornado:"
    set btnNeutralAbilityImgEnabled[8]="ReplaceableTextures\\CommandButtons\\BTNTornado.blp"
    set btnNeutralAbilityImgDisabled[8]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTornado.blp"
    set neutralAbilityName[9]="Pocket Factory:"
    set btnNeutralAbilityImgEnabled[9]="ReplaceableTextures\\CommandButtons\\BTNPocketFactory.blp"
    set btnNeutralAbilityImgDisabled[9]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPocketFactory.blp"
    set neutralAbilityName[10]="Cluster Rockets:"
    set btnNeutralAbilityImgEnabled[10]="ReplaceableTextures\\CommandButtons\\BTNClusterRockets.blp"
    set btnNeutralAbilityImgDisabled[10]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNClusterRockets.blp"
    set neutralAbilityName[11]="Robo Goblin:"
    set btnNeutralAbilityImgEnabled[11]="ReplaceableTextures\\CommandButtons\\BTNROBOGOBLIN.blp"
    set btnNeutralAbilityImgDisabled[11]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNROBOGOBLIN.blp"
    set neutralAbilityName[12]="Summon Bear:"
    set btnNeutralAbilityImgEnabled[12]="ReplaceableTextures\\CommandButtons\\BTNGrizzlyBear.blp"
    set btnNeutralAbilityImgDisabled[12]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGrizzlyBear.blp"
    set neutralAbilityName[13]="Summon Quilbeast:"
    set btnNeutralAbilityImgEnabled[13]="ReplaceableTextures\\CommandButtons\\BTNQuillBeast.blp"
    set btnNeutralAbilityImgDisabled[13]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNQuillBeast.blp"
    set neutralAbilityName[14]="Summon Hawk:"
    set btnNeutralAbilityImgEnabled[14]="ReplaceableTextures\\CommandButtons\\BTNWarEagle.blp"
    set btnNeutralAbilityImgDisabled[14]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWarEagle.blp"
    set neutralAbilityName[15]="Stampede:"
    set btnNeutralAbilityImgEnabled[15]="ReplaceableTextures\\CommandButtons\\BTNStampede.blp"
    set btnNeutralAbilityImgDisabled[15]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStampede.blp"
    set neutralAbilityName[16]="Breath of Fire:"
    set btnNeutralAbilityImgEnabled[16]="ReplaceableTextures\\CommandButtons\\BTNBreathOfFire.blp"
    set btnNeutralAbilityImgDisabled[16]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBreathOfFire.blp"
    set neutralAbilityName[17]="Drunken Haze:"
    set btnNeutralAbilityImgEnabled[17]="ReplaceableTextures\\CommandButtons\\BTNStrongDrink.blp"
    set btnNeutralAbilityImgDisabled[17]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStrongDrink.blp"
    set neutralAbilityName[18]="Storm Earth & Fire:"
    set btnNeutralAbilityImgEnabled[18]="ReplaceableTextures\\CommandButtons\\BTNStormEarth&Fire.blp"
    set btnNeutralAbilityImgDisabled[18]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStormEarth&Fire.blp"
    set neutralAbilityName[19]="Silence:"
    set btnNeutralAbilityImgEnabled[19]="ReplaceableTextures\\CommandButtons\\BTNSilence.blp"
    set btnNeutralAbilityImgDisabled[19]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSilence.blp"
    set neutralAbilityName[20]="Black Arrow:"
    set btnNeutralAbilityImgEnabled[20]="ReplaceableTextures\\CommandButtons\\BTNTheBlackArrowOnOff.blp"
    set btnNeutralAbilityImgDisabled[20]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTheBlackArrowOnOff.blp"
    set neutralAbilityName[21]="Life Drain:"
    set btnNeutralAbilityImgEnabled[21]="ReplaceableTextures\\CommandButtons\\BTNLifeDrain.blp"
    set btnNeutralAbilityImgDisabled[21]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLifeDrain.blp"
    set neutralAbilityName[22]="Charm:"
    set btnNeutralAbilityImgEnabled[22]="ReplaceableTextures\\CommandButtons\\BTNCharm.blp"
    set btnNeutralAbilityImgDisabled[22]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCharm.blp"
    set neutralAbilityName[23]="Soul Burn:"
    set btnNeutralAbilityImgEnabled[23]="ReplaceableTextures\\CommandButtons\\BTNSoulBurn.blp"
    set btnNeutralAbilityImgDisabled[23]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSoulBurn.blp"
    set neutralAbilityName[24]="Lava Spawn:"
    set btnNeutralAbilityImgEnabled[24]="ReplaceableTextures\\CommandButtons\\BTNLavaSpawn.blp"
    set btnNeutralAbilityImgDisabled[24]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLavaSpawn.blp"
    set neutralAbilityName[25]="Volcano:"
    set btnNeutralAbilityImgEnabled[25]="ReplaceableTextures\\CommandButtons\\BTNVolcano.blp"
    set btnNeutralAbilityImgDisabled[25]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNVolcano.blp"
    set neutralAbilityName[26]="Rain of Fire:"
    set btnNeutralAbilityImgEnabled[26]="ReplaceableTextures\\CommandButtons\\BTNFire.blp"
    set btnNeutralAbilityImgDisabled[26]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFire.blp"
    set neutralAbilityName[27]="Howl of Terror:"
    set btnNeutralAbilityImgEnabled[27]="ReplaceableTextures\\CommandButtons\\BTNHowlOfTerror.blp"
    set btnNeutralAbilityImgDisabled[27]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHowlOfTerror.blp"
    set neutralAbilityName[28]="Doom:"
    set btnNeutralAbilityImgEnabled[28]="ReplaceableTextures\\CommandButtons\\BTNDoom.blp"
    set btnNeutralAbilityImgDisabled[28]="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDoom.blp"


    // Neutral buttons

    set frameNeutralAbilityName=BlzCreateFrame("TasButtonTextTemplate", neutralAbilityMenu, 0, 0)
    call BlzFrameSetAbsPoint(frameNeutralAbilityName, FRAMEPOINT_LEFT, 0.323, 0.235)
    call BlzFrameSetText(frameNeutralAbilityName, "")
    call BlzFrameSetVisible(frameNeutralAbilityName, true)

    set frameNeutralAbilityState=BlzCreateFrame("TasButtonTextTemplate", neutralAbilityMenu, 0, 0)
    call BlzFrameSetAbsPoint(frameNeutralAbilityState, FRAMEPOINT_LEFT, 0.323, 0.225)
    call BlzFrameSetText(frameNeutralAbilityState, "")
    call BlzFrameSetVisible(frameNeutralAbilityState, true)

    set i=1
    set endIndex=28
    loop
        exitwhen i > endIndex
        if ( btnNeutralAbilityImgEnabled[i] != null ) then
            // Enabled
            set btnNeutralAbilityEnabled[i]=BlzCreateFrame("ScoreScreenBottomButtonTemplate", neutralAbilityMenu, 0, 0)
            call BlzFrameSetSize(btnNeutralAbilityEnabled[i], 0.04, 0.04)
            call BlzFrameSetAbsPoint(btnNeutralAbilityEnabled[i], FRAMEPOINT_CENTER, 0.34 + frameXPOS, 0.405 - frameYPOS)
            call BlzFrameSetVisible(btnNeutralAbilityEnabled[i], true)
            set imgFrame=BlzGetFrameByName("ScoreScreenButtonBackdrop", 0)
            call BlzFrameSetTexture(imgFrame, btnNeutralAbilityImgEnabled[i], 0, true)

            // Button trigger
            set trig=CreateTrigger()
            call BlzTriggerRegisterFrameEvent(trig, btnNeutralAbilityEnabled[i], FRAMEEVENT_CONTROL_CLICK)
            call TriggerAddAction(trig, function NeutralAbilityToggle)

            // Hover trigger
            set trig3=CreateTrigger()
            call BlzTriggerRegisterFrameEvent(trig3, btnNeutralAbilityEnabled[i], FRAMEEVENT_MOUSE_ENTER)
            call TriggerAddAction(trig3, function NeutralAbilityHover)

            // Disabled
            set btnNeutralAbilityDisabled[i]=BlzCreateFrame("ScoreScreenBottomButtonTemplate", neutralAbilityMenu, 0, 0)
            call BlzFrameSetSize(btnNeutralAbilityDisabled[i], 0.04, 0.04)
            call BlzFrameSetAbsPoint(btnNeutralAbilityDisabled[i], FRAMEPOINT_CENTER, 0.34 + frameXPOS, 0.405 - frameYPOS)
            call BlzFrameSetVisible(btnNeutralAbilityDisabled[i], false)
            set imgFrame2=BlzGetFrameByName("ScoreScreenButtonBackdrop", 0)
            call BlzFrameSetTexture(imgFrame2, btnNeutralAbilityImgDisabled[i], 0, true)

            // Button trigger
            set trig2=CreateTrigger()
            call BlzTriggerRegisterFrameEvent(trig2, btnNeutralAbilityDisabled[i], FRAMEEVENT_CONTROL_CLICK)
            call TriggerAddAction(trig2, function NeutralAbilityToggle)

            // Hover trigger
            set trig4=CreateTrigger()
            call BlzTriggerRegisterFrameEvent(trig4, btnNeutralAbilityDisabled[i], FRAMEEVENT_MOUSE_ENTER)
            call TriggerAddAction(trig4, function NeutralAbilityHover)

            set frameXPOS=frameXPOS + 0.032

            if ( ModuloInteger(incr, 6) == 0 ) then
                set frameYPOS=frameYPOS + 0.032
                set frameXPOS=0
            endif

            set incr=incr + 1
        endif

        set i=i + 1
    endloop
endfunction
function UnitBuilds takes nothing returns nothing
 local integer p= GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))
 local integer unitType= GetUnitTypeId(GetTriggerUnit())
 local integer i= 1
 local integer endIndex= 130
 local integer r= s__udg_PlayerRace[p]
 local integer skinId= 0
 local integer unitCustomValue= 0
    
	set unitCustomValue=LoadInteger(udg_CustomValueSkinTable, GetUnitTypeId(GetTriggerUnit()), s__udg_PlayerRace[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))])
	call SetUnitUserData(GetTriggerUnit(), unitCustomValue)
    
	if ( r == 1 ) then
		set skinId=LoadInteger(s__udg_SkinTable[r], unitCustomValue, s__equippedSkinHum[(p)*(5)+unitCustomValue])
	elseif ( r == 2 ) then
		set skinId=LoadInteger(s__udg_SkinTable[r], unitCustomValue, s__equippedSkinOrc[(p)*(5)+unitCustomValue])
	elseif ( r == 3 ) then
		set skinId=LoadInteger(s__udg_SkinTable[r], unitCustomValue, s__equippedSkinUnd[(p)*(5)+unitCustomValue])
	elseif ( r == 4 ) then
		set skinId=LoadInteger(s__udg_SkinTable[r], unitCustomValue, s__equippedSkinNig[(p)*(5)+unitCustomValue])
	endif

	if ( skinId != 0 ) then
		call BlzSetUnitSkin(GetTriggerUnit(), skinId)
	endif

	loop
	exitwhen i > endIndex
		if ( s__udg_TableUnitTypes[i] == unitType ) then
			set s__unitSpawns[(p)*(65)+i]= s__unitSpawns[(p)*(65)+i] + 1
			set s__udg_TotalUnits[p]= s__udg_TotalUnits[p] + 1
		else
		endif
		set i=i + 1
	endloop
endfunction

function UnitSell takes real costFraction returns nothing
 local integer p= GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))
 local integer unitType= GetUnitTypeId(GetTriggerUnit())
 local integer cost= R2I(GetUnitGoldCost(unitType) * costFraction)
 local location loc= GetUnitLoc(GetTriggerUnit())
 local texttag tt
	call AdjustPlayerStateBJ(cost, Player(p - 1), PLAYER_STATE_RESOURCE_GOLD)
	set tt=CreateTextTagLocBJ("+" + I2S(cost), loc, 10, 10, 100, 100, 0, 0)
	call SetTextTagVelocityBJ(tt, 20, 90)
	call SetTextTagPermanent(tt, false)
	call SetTextTagLifespan(tt, 2.00)

	call RemoveLocation(loc)
endfunction


function BuildHero takes nothing returns nothing
	// This function will spawn and kill the hero linked to the building.
 local integer p= GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))
 local integer unitTypeBuilding= GetUnitTypeId(GetTriggerUnit())
 local integer unitType= LoadInteger(udg_SpawnTable, 0, GetUnitTypeId(GetTriggerUnit()))
 local location point= GetRectCenter(gg_rct_UnitLoad)
 local location point2= GetUnitLoc(GetTriggerUnit())
 local unit ub
 local unit u
 local group unitGroup
 local integer customValue

	call ShowUnit(GetTriggerUnit(), false)
	call ShowUnit(GetTriggerUnit(), true)
	set ub=GetTriggerUnit()
	set u=CreateUnitAtLoc(Player(p + 5), unitType, point, 270)
	call SetUnitUserData(ub, LoadInteger(udg_CustomValueSkinTable, GetUnitTypeId(ub), s__udg_PlayerRace[p]))
	call SaveUnitHandle(udg_HeroTable, 0, GetHandleId(ub), u)
	call SaveUnitHandle(udg_HeroTable, GetHandleId(u), 0, ub)
	call GroupAddUnit(udg_Heroes, u)
	call GroupAddUnit(udg_HeroBuildings, ub)
	set unitGroup=LoadGroupHandle(udg_UnitTypeTable, unitType, 0)
	call GroupAddUnit(unitGroup, u)
	call KillUnit(u)

	call RemoveLocation(point)
	call RemoveLocation(point2)

	// Prevents enabling of the hero for the hero builder so it can't be built multiple times
	set customValue=LoadInteger(udg_CustomValueSkinTable, unitTypeBuilding, s__udg_PlayerRace[p])
endfunction

function EnergyBond takes nothing returns boolean
	if ( BlzGetEventIsAttack() ) then
		if ( GetUnitAbilityLevelSwapped('A058', BlzGetEventDamageTarget()) == 1 and GetRandomInt(1, 100) <= 4 ) then
			call SetUnitManaBJ(GetEventDamageSource(), GetUnitState(GetEventDamageSource(), UNIT_STATE_MANA) + 100)
		else
			if ( GetUnitAbilityLevelSwapped('A058', BlzGetEventDamageTarget()) == 2 and GetRandomInt(1, 100) <= 6 ) then
				call SetUnitManaBJ(GetEventDamageSource(), GetUnitState(GetEventDamageSource(), UNIT_STATE_MANA) + 100)
			else
				if ( GetUnitAbilityLevelSwapped('A058', BlzGetEventDamageTarget()) == 1 and GetRandomInt(1, 100) <= 8 ) then
					call SetUnitManaBJ(GetEventDamageSource(), GetUnitState(GetEventDamageSource(), UNIT_STATE_MANA) + 100)
				endif
			endif
		endif
		return true
	endif
	return false
endfunction

function GreatCleave takes nothing returns nothing
	if ( GetUnitTypeId(GetEventDamageSource()) == 'H03B' and BlzGetEventIsAttack() == true ) then
		call SetUnitLifeBJ(GetEventDamageSource(), GetUnitStateSwap(UNIT_STATE_LIFE, GetEventDamageSource()) + ( 5 * GetUnitAbilityLevelSwapped('A076', GetEventDamageSource()) ))
	endif
endfunction

function HydroBladeCondition takes nothing returns boolean
	if ( GetUnitTypeId(GetEventDamageSource()) == 'N02G' and BlzGetEventIsAttack() == true and GetUnitAbilityLevelSwapped('A0AX', GetEventDamageSource()) > 0 ) then
		return true
	endif
	
	return false
endfunction

function HydroBlade takes nothing returns nothing
 local real dmgBonus= 0.0
 local real manaDrainPercent= 0.0
	if ( GetRandomInt(1, 100) <= 20 ) then
		if ( GetUnitAbilityLevelSwapped('A0AX', GetEventDamageSource()) == 1 ) then
			set dmgBonus=40
			set manaDrainPercent=0.03
		else
			if ( GetUnitAbilityLevelSwapped('A0AX', GetEventDamageSource()) == 2 ) then
				set dmgBonus=60
				set manaDrainPercent=0.04
			else
				if ( GetUnitAbilityLevelSwapped('A0AX', GetEventDamageSource()) == 3 ) then
					set dmgBonus=80
					set manaDrainPercent=0.05
				endif
				call BlzSetEventDamage(GetEventDamage() + dmgBonus)
				call SetUnitState(BlzGetEventDamageTarget(), UNIT_STATE_MANA, GetUnitState(BlzGetEventDamageTarget(), UNIT_STATE_MANA) * ( 1.0 - manaDrainPercent ))
			endif
		endif
	endif
endfunction

function LapizBeamCondition takes nothing returns boolean
	if ( GetUnitTypeId(GetEventDamageSource()) == 'o00K' or GetUnitTypeId(GetEventDamageSource()) == 'o00R' and GetUnitState(GetEventDamageSource(), UNIT_STATE_MANA) >= 10 and GetPlayerTechCountSimple('R00B', GetOwningPlayer(GetEventDamageSource())) > 0 ) then
		return true
	endif

	return false
endfunction

function LapizBeamFilter takes nothing returns boolean
	if ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetEventDamageSource())) == false and IsUnitAliveBJ(GetFilterUnit()) == true ) then
		return true
	endif

	return false
endfunction

function LapizBeamForGroup takes nothing returns nothing
	call SetUnitLifeBJ(GetEnumUnit(), GetUnitStateSwap(UNIT_STATE_LIFE, GetEnumUnit()) + 35)
	call SetUnitManaBJ(GetEnumUnit(), GetUnitStateSwap(UNIT_STATE_MANA, GetEnumUnit()) + 15)
endfunction

function LapizBeam takes nothing returns nothing
 local real x= GetUnitX(BlzGetEventDamageTarget())
 local real y= GetUnitY(BlzGetEventDamageTarget())
 local group tmpgroup= CreateGroup()
	call GroupEnumUnitsInRange(tmpgroup, x, y, 250, Filter(function LapizBeamFilter))
	call ForGroup(tmpgroup, function LapizBeamForGroup)
	call DestroyGroup(tmpgroup)
endfunction

function LapizBeamResearchForGroup takes nothing returns nothing
 local integer p= GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))
	if ( GetOwningPlayer(GetEnumUnit()) == Player(p + 5) ) then
		call IssueImmediateOrderBJ(GetEnumUnit(), "flamingattack")
	endif
endfunction

function LapizBeamResearch takes nothing returns nothing
	if ( GetResearched() == 'R00B' ) then
		call ForGroup(udg_Decimators, function LapizBeamResearchForGroup)
	endif
endfunction


function Madness takes nothing returns nothing
	if ( UnitHasBuffBJ(GetEventDamageSource(), 'B02F') == true ) then
		call BlzSetEventDamage(GetEventDamage() + 3)
		call SetUnitManaBJ(GetEventDamageSource(), GetUnitState(GetEventDamageSource(), UNIT_STATE_MANA) - 1)
	endif
endfunction

function RefractionCondition takes nothing returns boolean
	if ( UnitHasBuffBJ(GetEventDamageSource(), 'B00Z') == true ) then
		return true
	endif

	return false
endfunction

function Refraction takes nothing returns nothing
 local real damage= GetEventDamage() + ( 5 * GetUnitAbilityLevelSwapped('B00Z', GetEventDamageSource()) )
	call BlzSetEventDamage(damage)
endfunction

function SpellHunterCondition takes nothing returns boolean
	if ( GetUnitTypeId(GetEventDamageSource()) == 'N01F' and GetUnitManaPercent(BlzGetEventDamageTarget()) >= 50 ) then
		return true
	endif

	return false
endfunction

function SpellHunter takes nothing returns nothing
	if ( GetUnitAbilityLevelSwapped('A04W', GetEventDamageSource()) == 1 ) then
		call BlzSetEventDamage(GetEventDamage() + 5)
		call SetUnitManaBJ(BlzGetEventDamageTarget(), GetUnitState(BlzGetEventDamageTarget(), UNIT_STATE_MANA) - 10)
		call SetUnitManaBJ(GetEventDamageSource(), GetUnitState(GetEventDamageSource(), UNIT_STATE_MANA) + 10)
	else
		if ( GetUnitAbilityLevelSwapped('A04W', GetEventDamageSource()) == 2 ) then
			call BlzSetEventDamage(GetEventDamage() + 8)
			call SetUnitManaBJ(BlzGetEventDamageTarget(), GetUnitState(BlzGetEventDamageTarget(), UNIT_STATE_MANA) - 15)
			call SetUnitManaBJ(GetEventDamageSource(), GetUnitState(GetEventDamageSource(), UNIT_STATE_MANA) + 15)
		else
			if ( GetUnitAbilityLevelSwapped('A04W', GetEventDamageSource()) == 3 ) then
				call BlzSetEventDamage(GetEventDamage() + 10)
				call SetUnitManaBJ(BlzGetEventDamageTarget(), GetUnitState(BlzGetEventDamageTarget(), UNIT_STATE_MANA) - 20)
				call SetUnitManaBJ(GetEventDamageSource(), GetUnitState(GetEventDamageSource(), UNIT_STATE_MANA) + 20)
			endif
		endif
	endif
endfunction

function Invisibility takes nothing returns nothing
 local unit target= GetSpellTargetUnit()
	call UnitAddAbilityBJ('A01D', target)
	call TriggerSleepAction(2)
	call UnitRemoveAbilityBJ('A01D', target)
endfunction

function BarrierCOND takes nothing returns boolean
	if ( UnitHasBuffBJ(BlzGetEventDamageTarget(), BUFF_BARRIER) == true ) then
		return true
	endif

	return false
endfunction

function Barrier takes nothing returns nothing
 local real shieldLife= LoadReal(barrierHashtable, 0, GetHandleId(BlzGetEventDamageTarget()))

	// Init first time the unit is hit
	if ( shieldLife == 0.00 ) then
		set shieldLife=75
		call SaveReal(barrierHashtable, 0, GetHandleId(BlzGetEventDamageTarget()), shieldLife)
	endif
	
	if ( GetEventDamage() < shieldLife ) then
		set shieldLife=shieldLife - GetEventDamage()
		call BlzSetEventDamage(0)
		call SaveReal(barrierHashtable, 0, GetHandleId(BlzGetEventDamageTarget()), shieldLife)
	else
		call BlzSetEventDamage(0)
		call SaveReal(barrierHashtable, 0, GetHandleId(BlzGetEventDamageTarget()), 0)
		call UnitRemoveBuffBJ(BUFF_BARRIER, BlzGetEventDamageTarget())
	endif
endfunction

function SetupCustomSpells takes nothing returns nothing
 local trigger trig

	// Spell Hunter
	set trig=CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(trig, EVENT_PLAYER_UNIT_DAMAGING)
	call TriggerAddCondition(trig, Condition(function SpellHunterCondition))
	call TriggerAddAction(trig, function SpellHunter)
	
	// EnergyBond (Dalaran)
	set trig=CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(trig, EVENT_PLAYER_UNIT_DAMAGED)
	call TriggerAddCondition(trig, Condition(function EnergyBond))

	// Great Cleave
	set trig=CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(trig, EVENT_PLAYER_UNIT_DAMAGING)
	call TriggerAddCondition(trig, Condition(function GreatCleave))

	// HydroBlade
	set trig=CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(trig, EVENT_PLAYER_UNIT_DAMAGING)
	call TriggerAddCondition(trig, Condition(function HydroBladeCondition))
	call TriggerAddAction(trig, function HydroBlade)

	// Lapiz Beam
	set trig=CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(trig, EVENT_PLAYER_UNIT_DAMAGED)
	call TriggerAddCondition(trig, Condition(function LapizBeamCondition))
	call TriggerAddAction(trig, function LapizBeam)

	// Very sketchy research fix. The Lapiz Beam is actually Orb of Annihilation in disguise,
	// so we need to enable the spell on all the player's units that are already out.
	// This is because idk how to check if a unit has the auto-cast spell enabled.
	// The only reason the ability is there is so we can easily change the model of the projectile.
	set trig=CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(trig, EVENT_PLAYER_UNIT_RESEARCH_FINISH)
	call TriggerAddCondition(trig, Condition(function LapizBeamResearch))

	// Madness
	set trig=CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(trig, EVENT_PLAYER_UNIT_DAMAGING)
	call TriggerAddCondition(trig, Condition(function Madness))

	// Refraction
	set trig=CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(trig, EVENT_PLAYER_UNIT_DAMAGING)
	call TriggerAddCondition(trig, Condition(function RefractionCondition))
	call TriggerAddAction(trig, function Refraction)

	// Barrier
	set trig=CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(trig, EVENT_PLAYER_UNIT_DAMAGED)
	call TriggerAddCondition(trig, Condition(function BarrierCOND))
	call TriggerAddAction(trig, function Barrier)
	set barrierHashtable=InitHashtable()

endfunction

function RaceSelectClassic takes nothing returns nothing
    local integer p= GetConvertedPlayerId(GetTriggerPlayer())
    local string statusColor= "|cff03ff10"
    local boolean start
    local integer o

    // Sets the race the player selected
    local integer i= 1
    local integer endIndex= 5
    loop
        exitwhen i > endIndex
        if ( BlzGetTriggerFrame() == s__btnRaceClassic[i] ) then
            if ( i != 5 ) then
                set s__udg_PlayerRace[p]= i
            else
                set s__udg_PlayerRace[p]= 0
            endif
            set s__isRaceSelected[p]= true
        endif

        set o=1
        loop
            exitwhen o > 6
            if ( IsPlayerEnemy(GetTriggerPlayer(), Player(o - 1)) == false ) then
                if ( GetLocalPlayer() == Player(o - 1) ) then
                    call BlzFrameSetText(s__framePlayerHasSelectedClassic[p], s__pColor[p] + GetShortPlayerName(Player(p - 1)) + "|r: " + statusColor + "Ready|r (" + raceNameWithColor[s__udg_PlayerRace[p]] + ")")
                endif
                else
                if ( GetLocalPlayer() == Player(o - 1) ) then
                    call BlzFrameSetText(s__framePlayerHasSelectedClassic[p], s__pColor[p] + GetShortPlayerName(Player(p - 1)) + "|r: " + statusColor + "Ready|r")
                endif
            endif
            
            set o=o + 1
        endloop
        
        if ( GetLocalPlayer() == GetTriggerPlayer() ) then
            call BlzFrameSetEnable(s__btnRaceClassic[i], false)
        endif
        set i=i + 1
    endloop

    // Checks if all players have selected a race
    set start=true
    set i=1
    set endIndex=6
    loop
        exitwhen i > endIndex
        if ( s__udg_ActivePlayers[i] == true and s__isRaceSelected[i] == false ) then
            set start=false
        endif
        set i=i + 1
    endloop

    if ( start == true ) then
        set timeRemainingRace=0
    endif
endfunction

function RaceSelectCustom takes nothing returns nothing
    local integer p= GetConvertedPlayerId(GetTriggerPlayer())
    local string statusColor= "|cff03ff10"
    local boolean start
    local integer o

    // Sets the race the player selected
    local integer i= 5
    local integer endIndex= 9
    loop
        exitwhen i > endIndex
        if ( BlzGetTriggerFrame() == btnRaceCustom[i] ) then
            if ( i != 9 ) then
                set s__udg_PlayerRace[p]= i
            else
                set s__udg_PlayerRace[p]= 0
            endif
            set s__isRaceSelected[p]= true
        endif

        set o=1
        loop
            exitwhen o > 6
            if ( IsPlayerEnemy(GetTriggerPlayer(), Player(o - 1)) == false ) then
                if ( GetLocalPlayer() == Player(o - 1) ) then
                    call BlzFrameSetText(s__framePlayerHasSelectedCustom[p], s__pColor[p] + GetShortPlayerName(Player(p - 1)) + "|r: " + statusColor + "Ready|r (" + raceNameWithColor[s__udg_PlayerRace[p]] + ")")
                endif
                else
                if ( GetLocalPlayer() == Player(o - 1) ) then
                    call BlzFrameSetText(s__framePlayerHasSelectedCustom[p], s__pColor[p] + GetShortPlayerName(Player(p - 1)) + "|r: " + statusColor + "Ready|r")
                endif
            endif
            
            set o=o + 1
        endloop

        if ( GetLocalPlayer() == GetTriggerPlayer() ) then
            call BlzFrameSetEnable(btnRaceCustom[i], false)
        endif
        set i=i + 1
    endloop

    // Checks if all players have selected a race
    set start=true
    set i=1
    set endIndex=6
    loop
        exitwhen i > endIndex
        if ( s__udg_ActivePlayers[i] == true and s__isRaceSelected[i] == false ) then
            set start=false
        endif
        set i=i + 1
    endloop

    if ( start == true ) then
        set timeRemainingRace=0
    endif
endfunction

function RaceSelectionTimer takes nothing returns nothing
    local integer i
    local integer endIndex
    local string statusColor
    local string timeStr
    local integer endIndex1
    local integer num
    local integer p

    if ( timeRemainingRace > 0 ) then
        set timeRemainingRace=timeRemainingRace - 1
        call StartTimerBJ(udg_RaceSelectionTimer, false, 1)
    else
        // Resets the Race selection UI in case people vote for another round.
        set i=1
        set endIndex=5
        loop
            exitwhen i > endIndex
            call BlzFrameSetEnable(s__btnRaceClassic[i], true)
            set i=i + 1
        endloop

        set i=5
        set endIndex=9
        loop
            exitwhen i > endIndex
            call BlzFrameSetEnable(btnRaceCustom[i], true)
            set i=i + 1
        endloop

        set statusColor="|cfffffb03"
        set p=1
        set endIndex=6
        loop
            exitwhen p > endIndex
            set s__isRaceSelected[p]= false
            if ( s__udg_ActivePlayers[p] == true ) then
                call BlzFrameSetText(s__framePlayerHasSelectedClassic[p], s__pColor[p] + GetShortPlayerName(Player(p - 1)) + "|r: " + statusColor + "Selecting...|r")
                call BlzFrameSetText(s__framePlayerHasSelectedCustom[p], s__pColor[p] + GetShortPlayerName(Player(p - 1)) + "|r: " + statusColor + "Selecting...|r")
            else
                call BlzFrameSetText(s__framePlayerHasSelectedClassic[p], "<Empty>")
                call BlzFrameSetText(s__framePlayerHasSelectedCustom[p], "<Empty>")
            endif
            set p=p + 1
        endloop

        // Actual game setup
        call BlzFrameSetVisible(frameClassicSelection, false)
        call BlzFrameSetVisible(frameCustomSelection, false)
        call PlaySoundBJ(gg_snd_QuestActivateWhat1)
        call TriggerExecuteBJ(gg_trg_Start_Game, true)
    endif

    // Update Timer UI
    set timeStr=I2S(timeRemainingRace)
    set i=1
    set endIndex1=StringLength(timeStr)
    loop
        exitwhen i > endIndex1
        set num=S2I(SubStringBJ(timeStr, i, i))
        if ( timeRemainingRace < 10 ) then
            call BlzFrameSetVisible(s__frameClassicTimeRemaining[2], false)
            call BlzFrameSetTexture(s__frameClassicTimeRemaining[i], s__textureNumber[num], 0, true)
            call BlzFrameSetVisible(s__frameCustomTimeRemaining[2], false)
            call BlzFrameSetTexture(s__frameCustomTimeRemaining[i], s__textureNumber[num], 0, true)
        else
            call BlzFrameSetVisible(s__frameClassicTimeRemaining[2], true)
            call BlzFrameSetTexture(s__frameClassicTimeRemaining[i], s__textureNumber[num], 0, true)
            call BlzFrameSetVisible(s__frameCustomTimeRemaining[2], true)
            call BlzFrameSetTexture(s__frameCustomTimeRemaining[i], s__textureNumber[num], 0, true)
        endif
        set i=i + 1
    endloop
endfunction

function SetupClassicSelection takes nothing returns nothing
    local integer i
    local integer endIndex
    local real Xpos
    local trigger trig
    local string statusColor
    local integer incr
    local real YPos
    local trigger trig2
    
    set s__raceImg[1]= "war3mapImported\\Warcraft_III_Reforged_-_Humans_Icon.dds"
    set s__raceImg[2]= "war3mapImported\\Warcraft_III_Reforged_-_Orcs_Icon.dds"
    set s__raceImg[3]= "war3mapImported\\Warcraft_III_Reforged_-_Undead_Icon.dds"
    set s__raceImg[4]= "war3mapImported\\Warcraft_III_Reforged_-_Night_Elves_Icon.dds"
    set s__raceImg[5]= "war3mapImported\\Random.tga"

    set s__raceImgBanner[1]= "war3mapImported\\HumanBanner.dds"
    set s__raceImgBanner[2]= "war3mapImported\\OrcBanner.dds"
    set s__raceImgBanner[3]= "war3mapImported\\UndeadBanner.dds"
    set s__raceImgBanner[4]= "war3mapImported\\NightElfBanner.dds"
    set s__raceImgBanner[5]= "war3mapImported\\RandomBanner.dds" // import this

    set s__raceName[1]= "Human"
    set s__raceName[2]= "Orc"
    set s__raceName[3]= "Undead"
    set s__raceName[4]= "Night Elf"
    set s__raceName[5]= "Random"

    set s__textureNumber[0]= "war3mapImported\\0.dds"
    set s__textureNumber[1]= "war3mapImported\\1.dds"
    set s__textureNumber[2]= "war3mapImported\\2.dds"
    set s__textureNumber[3]= "war3mapImported\\3.dds"
    set s__textureNumber[4]= "war3mapImported\\4.dds"
    set s__textureNumber[5]= "war3mapImported\\5.dds"
    set s__textureNumber[6]= "war3mapImported\\6.dds"
    set s__textureNumber[7]= "war3mapImported\\7.dds"
    set s__textureNumber[8]= "war3mapImported\\8.dds"
    set s__textureNumber[9]= "war3mapImported\\9.dds"

    set frameClassicSelection=BlzCreateFrame("EscMenuBackdrop", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), 0, 0)
    call BlzFrameSetSize(frameClassicSelection, 0.65, 0.3)
    call BlzFrameSetAbsPoint(frameClassicSelection, FRAMEPOINT_CENTER, 0.4, 0.38)
    call BlzFrameSetVisible(frameClassicSelection, false)

    set frameSelectRace=BlzCreateFrameByType("BACKDROP", "", frameClassicSelection, "", 0)
    call BlzFrameSetSize(frameSelectRace, 0.3, 0.07)
    call BlzFrameSetAbsPoint(frameSelectRace, FRAMEPOINT_CENTER, 0.4, 0.49)
    call BlzFrameSetTexture(frameSelectRace, "war3mapImported\\Select_Your_Race.dds", 0, true)

    set i=1
    set endIndex=5
    loop
        exitwhen i > endIndex

        set Xpos=( i - 1 ) * 0.12

        // Banner
        set s__frameRaceBanner[i]= BlzCreateFrameByType("BACKDROP", "", frameClassicSelection, "", 0)
        call BlzFrameSetAbsPoint(s__frameRaceBanner[i], FRAMEPOINT_CENTER, 0.16 + Xpos, 0.401)
        call BlzFrameSetSize(s__frameRaceBanner[i], 0.133, 0.133)
        call BlzFrameSetTexture(s__frameRaceBanner[i], s__raceImgBanner[i], 0, true)

        // Coat of Arms
        set s__frameRaceImage[i]= BlzCreateFrameByType("BACKDROP", "", frameClassicSelection, "", 0)
        call BlzFrameSetAbsPoint(s__frameRaceImage[i], FRAMEPOINT_CENTER, 0.16 + Xpos, 0.401)
        call BlzFrameSetSize(s__frameRaceImage[i], 0.133, 0.133)
        call BlzFrameSetTexture(s__frameRaceImage[i], s__raceImg[i], 0, true)

        set s__btnRaceClassic[i]= BlzCreateFrame("ScriptDialogButton", frameClassicSelection, 0, 0)
        call BlzFrameSetAbsPoint(s__btnRaceClassic[i], FRAMEPOINT_CENTER, 0.16 + Xpos, 0.33)
        call BlzFrameSetSize(s__btnRaceClassic[i], 0.1, 0.025)
        call BlzFrameSetText(s__btnRaceClassic[i], s__raceName[i])
        
        set i=i + 1
    endloop

    set frameTimeRemainingRace=BlzCreateFrameByType("BACKDROP", "", frameClassicSelection, "", 0)
    call BlzFrameSetSize(frameTimeRemainingRace, 0.06, 0.045)
    call BlzFrameSetAbsPoint(frameTimeRemainingRace, FRAMEPOINT_LEFT, 0.1, 0.275)
    call BlzFrameSetTexture(frameTimeRemainingRace, "war3mapImported\\Time_Remaining.dds", 0, true)

    set i=1
    set endIndex=2
    loop
        exitwhen i > endIndex

        set s__frameClassicTimeRemaining[i]= BlzCreateFrameByType("BACKDROP", "", frameClassicSelection, "", 0)
        call BlzFrameSetSize(s__frameClassicTimeRemaining[i], 0.03, 0.02)
        if ( i == 1 ) then
            call BlzFrameSetAbsPoint(s__frameClassicTimeRemaining[i], FRAMEPOINT_LEFT, 0.165, 0.275)
            call BlzFrameSetTexture(s__frameClassicTimeRemaining[i], "war3mapImported\\3.tga", 0, true)
        else
            call BlzFrameSetAbsPoint(s__frameClassicTimeRemaining[i], FRAMEPOINT_LEFT, 0.183, 0.275)
            call BlzFrameSetTexture(s__frameClassicTimeRemaining[i], "war3mapImported\\0.tga", 0, true)
        endif
        set i=i + 1
    endloop

    //
    // BUTTON CALLBACKS
    //

    set i=1
    set endIndex=5
    loop
        exitwhen i > endIndex
        
        set trig=CreateTrigger()
        call BlzTriggerRegisterFrameEvent(trig, s__btnRaceClassic[i], FRAMEEVENT_CONTROL_CLICK)
        call TriggerAddAction(trig, function RaceSelectClassic)

        set i=i + 1
    endloop

    //
    // OTHER FUNCTIONS
    //

    set statusColor="|cfffffb03"
    set incr=1
    set YPos=0.33 - incr * 0.017

    set i=1
    set endIndex=6
    loop
        exitwhen i > endIndex

        set s__isRaceSelected[i]= false
        //set framePlayerHasSelectedClassic[i] = BlzCreateFrameByType("TEXT", "gameModeText", frameClassicSelection, "EscMenuButtonTextTemplate", 0)
        set s__framePlayerHasSelectedClassic[i]= BlzCreateFrame("TasButtonTextTemplate", frameClassicSelection, 0, 0)
        if ( ModuloInteger(i, 2) == 1 ) then
            call BlzFrameSetAbsPoint(s__framePlayerHasSelectedClassic[i], FRAMEPOINT_TOPLEFT, 0.3, YPos)
        else
            call BlzFrameSetAbsPoint(s__framePlayerHasSelectedClassic[i], FRAMEPOINT_TOPLEFT, 0.5, YPos)
            set incr=incr + 1
            set YPos=0.33 - incr * 0.017
        endif
        if ( s__udg_ActivePlayers[i] == true ) then
            call BlzFrameSetText(s__framePlayerHasSelectedClassic[i], s__pColor[i] + GetShortPlayerName(Player(i - 1)) + "|r: " + statusColor + "Selecting...|r")
        else
            call BlzFrameSetText(s__framePlayerHasSelectedClassic[i], "<Empty>")
        endif
        set i=i + 1
    endloop

    set trig2=CreateTrigger()
    call TriggerRegisterTimerExpireEvent(trig2, udg_RaceSelectionTimer)
    call TriggerAddAction(trig2, function RaceSelectionTimer)
endfunction

function SetupCustomSelection takes nothing returns nothing
    local integer i
    local integer endIndex
    local real Xpos
    local trigger trig
    local string statusColor
    local integer incr
    local real YPos
    local trigger trig2
    
    set s__raceImg[5]= "war3mapImported\\CrestDalaran.dds"
    set s__raceImg[6]= "war3mapImported\\CrestBloodElves.dds"
    set s__raceImg[7]= "war3mapImported\\CrestForsaken.dds"
    set s__raceImg[8]= "war3mapImported\\CrestNaga.dds"
    set s__raceImg[9]= "war3mapImported\\Random.tga"

    set s__raceName[5]= "Dalaran"
    set s__raceName[6]= "Blood Elf"
    set s__raceName[7]= "Forsaken"
    set s__raceName[8]= "Naga"
    set s__raceName[9]= "Random"

    set frameCustomSelection=BlzCreateFrame("EscMenuBackdrop", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), 0, 0)
    call BlzFrameSetSize(frameCustomSelection, 0.65, 0.3)
    call BlzFrameSetAbsPoint(frameCustomSelection, FRAMEPOINT_CENTER, 0.4, 0.38)
    call BlzFrameSetVisible(frameCustomSelection, false)

    set frameSelectRace=BlzCreateFrameByType("BACKDROP", "", frameCustomSelection, "", 0)
    call BlzFrameSetSize(frameSelectRace, 0.3, 0.07)
    call BlzFrameSetAbsPoint(frameSelectRace, FRAMEPOINT_CENTER, 0.4, 0.49)
    call BlzFrameSetTexture(frameSelectRace, "war3mapImported\\Select_Your_Race.dds", 0, true)

    set i=5
    set endIndex=9
    loop
        exitwhen i > endIndex

        set Xpos=( i - 5 ) * 0.12

        // Coat of Arms
        set s__frameRaceImage[i]= BlzCreateFrameByType("BACKDROP", "", frameCustomSelection, "", 0)
        call BlzFrameSetAbsPoint(s__frameRaceImage[i], FRAMEPOINT_CENTER, 0.16 + Xpos, 0.401)
        call BlzFrameSetSize(s__frameRaceImage[i], 0.133, 0.133)
        call BlzFrameSetTexture(s__frameRaceImage[i], s__raceImg[i], 0, true)

        set btnRaceCustom[i]=BlzCreateFrame("ScriptDialogButton", frameCustomSelection, 0, 0)
        call BlzFrameSetAbsPoint(btnRaceCustom[i], FRAMEPOINT_CENTER, 0.16 + Xpos, 0.33)
        call BlzFrameSetSize(btnRaceCustom[i], 0.1, 0.025)
        call BlzFrameSetText(btnRaceCustom[i], s__raceName[i])
        
        set i=i + 1
    endloop

    set frameTimeRemainingRace=BlzCreateFrameByType("BACKDROP", "", frameCustomSelection, "", 0)
    call BlzFrameSetSize(frameTimeRemainingRace, 0.06, 0.045)
    call BlzFrameSetAbsPoint(frameTimeRemainingRace, FRAMEPOINT_LEFT, 0.1, 0.275)
    call BlzFrameSetTexture(frameTimeRemainingRace, "war3mapImported\\Time_Remaining.tga", 0, true)

    set i=1
    set endIndex=2
    loop
        exitwhen i > endIndex

        set s__frameCustomTimeRemaining[i]= BlzCreateFrameByType("BACKDROP", "", frameCustomSelection, "", 0)
        call BlzFrameSetSize(s__frameCustomTimeRemaining[i], 0.03, 0.02)
        if ( i == 1 ) then
            call BlzFrameSetAbsPoint(s__frameCustomTimeRemaining[i], FRAMEPOINT_LEFT, 0.165, 0.275)
            call BlzFrameSetTexture(s__frameCustomTimeRemaining[i], "war3mapImported\\3.tga", 0, true)
        else
            call BlzFrameSetAbsPoint(s__frameCustomTimeRemaining[i], FRAMEPOINT_LEFT, 0.183, 0.275)
            call BlzFrameSetTexture(s__frameCustomTimeRemaining[i], "war3mapImported\\0.tga", 0, true)
        endif
        set i=i + 1
    endloop

    //
    // BUTTON CALLBACKS
    //

    set i=5
    set endIndex=9
    loop
        exitwhen i > endIndex
        
        set trig=CreateTrigger()
        call BlzTriggerRegisterFrameEvent(trig, btnRaceCustom[i], FRAMEEVENT_CONTROL_CLICK)
        call TriggerAddAction(trig, function RaceSelectCustom)

        set i=i + 1
    endloop

    //
    // OTHER FUNCTIONS
    //

    set statusColor="|cfffffb03"
    set incr=1
    set YPos=0.33 - incr * 0.017

    set i=1
    set endIndex=6
    loop
        exitwhen i > endIndex

        set s__isRaceSelected[i]= false
        //set framePlayerHasSelectedClassic[i] = BlzCreateFrameByType("TEXT", "gameModeText", frameClassicSelection, "EscMenuButtonTextTemplate", 0)
        set s__framePlayerHasSelectedCustom[i]= BlzCreateFrame("TasButtonTextTemplate", frameCustomSelection, 0, 0)
        if ( ModuloInteger(i, 2) == 1 ) then
            call BlzFrameSetAbsPoint(s__framePlayerHasSelectedCustom[i], FRAMEPOINT_TOPLEFT, 0.3, YPos)
        else
            call BlzFrameSetAbsPoint(s__framePlayerHasSelectedCustom[i], FRAMEPOINT_TOPLEFT, 0.5, YPos)
            set incr=incr + 1
            set YPos=0.33 - incr * 0.017
        endif
        if ( s__udg_ActivePlayers[i] == true ) then
            call BlzFrameSetText(s__framePlayerHasSelectedCustom[i], s__pColor[i] + GetShortPlayerName(Player(i - 1)) + "|r: " + statusColor + "Selecting...|r")
        else
            call BlzFrameSetText(s__framePlayerHasSelectedCustom[i], "<Empty>")
        endif
        set i=i + 1
    endloop
endfunction

function InitiateRaceSelection takes nothing returns nothing
    local integer p
    local integer endIndex

    set timeRemainingRace=30
    call BlzFrameSetVisible(frameGameModeSelection, false)
    call PlaySoundBJ(gg_snd_QuestActivateWhat1)
    if ( udg_isGameModeClassic == true ) then
        call BlzFrameSetVisible(frameClassicSelection, true)
        call StartTimerBJ(udg_RaceSelectionTimer, false, 1)
        else
        call BlzFrameSetVisible(frameCustomSelection, true)
        call StartTimerBJ(udg_RaceSelectionTimer, false, 1)
    endif

    // Resets the selected race in case people vote for another round.
    set p=1
    set endIndex=6
    loop
        exitwhen p > endIndex
        set s__udg_PlayerRace[p]= 0
        set p=p + 1
    endloop
endfunction

function RaceSelectSetNameEmpty takes nothing returns nothing
    local integer p= GetConvertedPlayerId(GetTriggerPlayer())
    call BlzFrameSetText(s__framePlayerHasSelectedClassic[p], "<Empty>")
endfunction

function InitiateGameModeSelection takes nothing returns nothing
	set timeRemaining=30
	call PlaySoundBJ(gg_snd_QuestActivateWhat1)
    call BlzFrameSetVisible(scoreboard, false)
    call BlzFrameSetVisible(frameGameModeSelection, true)
	call BlzFrameSetEnable(btnClassic, true)
	call BlzFrameSetEnable(btnCustom, true)
	call BlzFrameSetAlpha(frameCustomText, 255)
	call BlzFrameSetAlpha(frameCustomDesc, 255)
	call BlzFrameSetAlpha(frameCustomCrests, 255)
	call BlzFrameSetAlpha(frameClassicText, 255)
	call BlzFrameSetAlpha(frameClassicDesc, 255)
	call BlzFrameSetAlpha(frameClassicCrests, 255)
	call StartTimerBJ(timerGameMode, false, 1)

	call BlzFrameSetText(frameHost, "|cffff0000" + GetShortPlayerName(Player(0)) + "|r is selecting")
	if ( GetLocalPlayer() == Player(0) ) then
		call BlzFrameSetVisible(btnClassic, true)
        call BlzFrameSetVisible(btnCustom, true)
        call BlzFrameSetText(frameHost, "|cff00ff00You|r are selecting")
	endif
endfunction

function StartGameMode takes nothing returns nothing
	call PauseTimer(timerGameMode)
	if ( udg_isGameModeClassic == true ) then
		call BlzFrameSetEnable(btnClassic, false)
		call BlzFrameSetEnable(btnCustom, false)
		call BlzFrameSetAlpha(frameCustomText, 50)
		call BlzFrameSetAlpha(frameCustomDesc, 50)
		call BlzFrameSetAlpha(frameCustomCrests, 50)
	else
		call BlzFrameSetEnable(btnClassic, false)
		call BlzFrameSetEnable(btnCustom, false)
		call BlzFrameSetAlpha(frameClassicText, 50)
		call BlzFrameSetAlpha(frameClassicDesc, 50)
		call BlzFrameSetAlpha(frameClassicCrests, 50)
	endif

	call StartTimerBJ(timerGameModeDelay, false, 1.5)
endfunction

function onClickClassic takes nothing returns nothing
	set udg_isGameModeClassic=true
	call StartGameMode()
endfunction

function onClickCustom takes nothing returns nothing
	set udg_isGameModeClassic=false
	call StartGameMode()
endfunction

function GameModeSelectionExpires takes nothing returns nothing
 local integer randomMode
 local string timeStr
 local integer i
 local integer num

	if ( timeRemaining > 0 ) then
		set timeRemaining=timeRemaining - 1
		call StartTimerBJ(timerGameMode, false, 1)
	else
		set randomMode=GetRandomInt(1, 2)
		if ( randomMode == 1 ) then
			set udg_isGameModeClassic=true
		else
			set udg_isGameModeClassic=false
		endif
		call StartGameMode()
	endif

	// Update visual timer
	set timeStr=I2S(timeRemaining)

	set i=1
	loop
	exitwhen i > StringLength(timeStr) + 1
		set num=S2I(SubStringBJ(timeStr, i, i))
    
		if ( timeRemaining < 10 ) then
			call BlzFrameSetVisible(frameTimeRemaining[2], false)
			call BlzFrameSetTexture(frameTimeRemaining[i], s__textureNumber[num], 0, true)
		else
			call BlzFrameSetVisible(frameTimeRemaining[2], true)
			call BlzFrameSetTexture(frameTimeRemaining[i], s__textureNumber[num], 0, true)
		endif
            
		set i=i + 1
	endloop
endfunction

function SetupGameModeSelection takes nothing returns nothing
 local integer i
	set timerGameMode=CreateTimer()
	set timerGameModeDelay=CreateTimer()

	set s__textureNumber[0]= "war3mapImported\\0.dds"
	set s__textureNumber[1]= "war3mapImported\\1.dds"
	set s__textureNumber[2]= "war3mapImported\\2.dds"
	set s__textureNumber[3]= "war3mapImported\\3.dds"
	set s__textureNumber[4]= "war3mapImported\\4.dds"
	set s__textureNumber[5]= "war3mapImported\\5.dds"
	set s__textureNumber[6]= "war3mapImported\\6.dds"
	set s__textureNumber[7]= "war3mapImported\\7.dds"
	set s__textureNumber[8]= "war3mapImported\\8.dds"
	set s__textureNumber[9]= "war3mapImported\\9.dds"
    
	set frameGameModeSelection=BlzCreateFrame("EscMenuBackdrop", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), 0, 0)
	call BlzFrameSetSize(frameGameModeSelection, 0.65, 0.34)
	call BlzFrameSetAbsPoint(frameGameModeSelection, FRAMEPOINT_CENTER, 0.4, 0.36)
	call BlzFrameSetVisible(frameGameModeSelection, false)

	set frameClassicText=BlzCreateFrameByType("BACKDROP", "", frameGameModeSelection, "", 0)
	call BlzFrameSetSize(frameClassicText, 0.12, 0.06)
	call BlzFrameSetAbsPoint(frameClassicText, FRAMEPOINT_CENTER, 0.27, 0.48)
	call BlzFrameSetTexture(frameClassicText, "war3mapImported\\Classic_Mode_Text.dds", 0, true)

	set frameCustomText=BlzCreateFrameByType("BACKDROP", "", frameGameModeSelection, "", 0)
	call BlzFrameSetSize(frameCustomText, 0.12, 0.06)
	call BlzFrameSetAbsPoint(frameCustomText, FRAMEPOINT_CENTER, 0.53, 0.48)
	call BlzFrameSetTexture(frameCustomText, "war3mapImported\\Custom_Mode_Text.dds", 0, true)

	set frameClassicCrests=BlzCreateFrameByType("BACKDROP", "", frameGameModeSelection, "", 0)
	call BlzFrameSetSize(frameClassicCrests, 0.26, 0.13)
	call BlzFrameSetAbsPoint(frameClassicCrests, FRAMEPOINT_CENTER, 0.27, 0.4)
	call BlzFrameSetTexture(frameClassicCrests, "war3mapImported\\Classic_Races_Crests.dds", 0, true)

	set frameCustomCrests=BlzCreateFrameByType("BACKDROP", "", frameGameModeSelection, "", 0)
	call BlzFrameSetSize(frameCustomCrests, 0.26, 0.13)
	call BlzFrameSetAbsPoint(frameCustomCrests, FRAMEPOINT_CENTER, 0.53, 0.4)
	call BlzFrameSetTexture(frameCustomCrests, "war3mapImported\\Custom_Races_Crests.dds", 0, true)

	set frameBannerLeft=BlzCreateFrameByType("BACKDROP", "", frameGameModeSelection, "", 0)
	call BlzFrameSetSize(frameBannerLeft, 0.08, 0.08)
	call BlzFrameSetAbsPoint(frameBannerLeft, FRAMEPOINT_CENTER, 0.13, 0.485)
	call BlzFrameSetTexture(frameBannerLeft, "war3mapImported\\HumanBanner.dds", 0, true)

	set frameBannerRight=BlzCreateFrameByType("BACKDROP", "", frameGameModeSelection, "", 0)
	call BlzFrameSetSize(frameBannerRight, 0.08, 0.08)
	call BlzFrameSetAbsPoint(frameBannerRight, FRAMEPOINT_CENTER, 0.67, 0.485)
	call BlzFrameSetTexture(frameBannerRight, "war3mapImported\\OrcBanner.dds", 0, true)

	set frameClassicDesc=BlzCreateFrame("TasButtonTextTemplate", frameGameModeSelection, 0, 0)
	call BlzFrameSetAbsPoint(frameClassicDesc, FRAMEPOINT_TOPLEFT, 0.17, 0.335)
	call BlzFrameSetText(frameClassicDesc, "- Features all four melee Warcraft 3 races\n- Races: |cff1b6ef5Human|r, |cfff5381bOrc|r, |cff8431f7Undead|r, |cff008a17Night Elf|r\n- Features progression and skin system")

	set frameCustomDesc=BlzCreateFrame("TasButtonTextTemplate", frameGameModeSelection, 0, 0)
	call BlzFrameSetAbsPoint(frameCustomDesc, FRAMEPOINT_TOPLEFT, 0.43, 0.335)
	call BlzFrameSetText(frameCustomDesc, "- Features races created by members of Hiveworkshop\n- Races: |cffa346ffDalaran|r, |cffff3232Blood Elf|r, |cff936d96Forsaken|r, |cff0bd9c1Naga|r\n\nCredit: Wa666r, Unregret, Riki, Sunreaver")

	set btnClassic=BlzCreateFrame("ScriptDialogButton", frameGameModeSelection, 0, 0)
	call BlzFrameSetSize(btnClassic, 0.09, 0.035)
	call BlzFrameSetAbsPoint(btnClassic, FRAMEPOINT_CENTER, 0.27, 0.25)
	call BlzFrameSetText(btnClassic, "Select")
	call BlzFrameSetVisible(btnClassic, false)

	// Click Classic
	set trigClassic=CreateTrigger()
	call BlzTriggerRegisterFrameEvent(trigClassic, btnClassic, FRAMEEVENT_CONTROL_CLICK)
	call TriggerAddAction(trigClassic, function onClickClassic)

	set btnCustom=BlzCreateFrame("ScriptDialogButton", frameGameModeSelection, 0, 0)
	call BlzFrameSetSize(btnCustom, 0.09, 0.035)
	call BlzFrameSetAbsPoint(btnCustom, FRAMEPOINT_CENTER, 0.53, 0.25)
	call BlzFrameSetText(btnCustom, "Select")
	call BlzFrameSetVisible(btnCustom, false)

	// Click Custom
	set trigCustom=CreateTrigger()
	call BlzTriggerRegisterFrameEvent(trigCustom, btnCustom, FRAMEEVENT_CONTROL_CLICK)
	call TriggerAddAction(trigCustom, function onClickCustom)

	set frameHostLight=BlzCreateFrameByType("BACKDROP", "", frameGameModeSelection, "", 0)
	call BlzFrameSetSize(frameHostLight, 0.12, 0.03)
	call BlzFrameSetAbsPoint(frameHostLight, FRAMEPOINT_CENTER, 0.4, 0.22)
	call BlzFrameSetTexture(frameHostLight, "war3mapImported\\Host_Selecting_Light.dds", 0, true)

	set frameHost=BlzCreateFrame("ProfileXPText", frameGameModeSelection, 0, 0)
	call BlzFrameSetAbsPoint(frameHost, FRAMEPOINT_CENTER, 0.4, 0.22)
	call BlzFrameSetText(frameHost, "Host is selecting")

	set frameTimeRemainingMode=BlzCreateFrameByType("BACKDROP", "", frameGameModeSelection, "", 0)
	call BlzFrameSetSize(frameTimeRemainingMode, 0.06, 0.045)
	call BlzFrameSetAbsPoint(frameTimeRemainingMode, FRAMEPOINT_LEFT, 0.35, 0.25)
	call BlzFrameSetTexture(frameTimeRemainingMode, "war3mapImported\\Time_Remaining.dds", 0, true)

	set i=1
	loop
	exitwhen i > 2
		set frameTimeRemaining[i]=BlzCreateFrameByType("BACKDROP", "", frameGameModeSelection, "", 0)
		call BlzFrameSetSize(frameTimeRemaining[i], 0.03, 0.02)

		if ( i == 1 ) then
			call BlzFrameSetAbsPoint(frameTimeRemaining[i], FRAMEPOINT_LEFT, 0.415, 0.25)
			call BlzFrameSetTexture(frameTimeRemaining[i], "war3mapImported\\3.dds", 0, true)
		else
			call BlzFrameSetAbsPoint(frameTimeRemaining[i], FRAMEPOINT_LEFT, 0.433, 0.25)
			call BlzFrameSetTexture(frameTimeRemaining[i], "war3mapImported\\0.dds", 0, true)
		endif
        
		set i=i + 1
	endloop


	// Timer expire
	set trigTimer=CreateTrigger()
	call TriggerRegisterTimerExpireEvent(trigTimer, timerGameMode)
	call TriggerAddAction(trigTimer, function GameModeSelectionExpires)

	// Initiate Race Selection
	set trigInitiateRaceSelection=CreateTrigger()
	call TriggerRegisterTimerExpireEvent(trigInitiateRaceSelection, timerGameModeDelay)
	call TriggerAddAction(trigInitiateRaceSelection, function InitiateRaceSelection)
endfunction
function InitSpawns takes nothing returns nothing
		
	// Human
	call SaveInteger(udg_SpawnTable, 0, 'h000', 'hfoo') // Footman
	call SaveInteger(udg_SpawnTable, 0, 'hfoo', 'h000')
	call SaveInteger(udg_SpawnTable, 0, 'h001', 'hrif') // Rifleman
	call SaveInteger(udg_SpawnTable, 0, 'hrif', 'h001')
	call SaveInteger(udg_SpawnTable, 0, 'h002', 'hkni') // Knight
	call SaveInteger(udg_SpawnTable, 0, 'hkni', 'h002')
	call SaveInteger(udg_SpawnTable, 0, 'h003', 'hmtm') // Mortar Team
	call SaveInteger(udg_SpawnTable, 0, 'hmtm', 'h003')
	call SaveInteger(udg_SpawnTable, 0, 'h01Q', 'hsor') // Sorceress
	call SaveInteger(udg_SpawnTable, 0, 'hsor', 'h01Q')
	call SaveInteger(udg_SpawnTable, 0, 'h01P', 'hmpr') // Priest
	call SaveInteger(udg_SpawnTable, 0, 'hmpr', 'h01P')
	call SaveInteger(udg_SpawnTable, 0, 'h006', 'hspt') // Spellbreaker
	call SaveInteger(udg_SpawnTable, 0, 'hspt', 'h006')
	call SaveInteger(udg_SpawnTable, 0, 'h007', 'hgyr') // Flying Machine
	call SaveInteger(udg_SpawnTable, 0, 'hgyr', 'h007')
	call SaveInteger(udg_SpawnTable, 0, 'h008', 'hmtt') // Siege Engine
	call SaveInteger(udg_SpawnTable, 0, 'hmtt', 'h008')
	call SaveInteger(udg_SpawnTable, 0, 'h009', 'hgry') // Gryphon Rider
	call SaveInteger(udg_SpawnTable, 0, 'hgry', 'h009')
	call SaveInteger(udg_SpawnTable, 0, 'h00A', 'hdhw') // Dragonhawk Rider
	call SaveInteger(udg_SpawnTable, 0, 'hdhw', 'h00A')

	call SaveInteger(udg_SpawnTable, 0, 'H01F', 'Hpal') // Paladin
	call SaveInteger(udg_SpawnTable, 0, 'Hpal', 'H01F')
	call SaveInteger(udg_SpawnTable, 0, 'H01I', 'Hamg') // Archmage
	call SaveInteger(udg_SpawnTable, 0, 'Hamg', 'H01I')
	call SaveInteger(udg_SpawnTable, 0, 'H01J', 'Hmkg') // Mountain King
	call SaveInteger(udg_SpawnTable, 0, 'Hmkg', 'H01J')
	call SaveInteger(udg_SpawnTable, 0, 'H01L', 'Hblm') // Blood Mage
	call SaveInteger(udg_SpawnTable, 0, 'Hblm', 'H01L')


	// Orc
	call SaveInteger(udg_SpawnTable, 0, 'h00B', 'ogru') // Grunt
	call SaveInteger(udg_SpawnTable, 0, 'ogru', 'h00B')
	call SaveInteger(udg_SpawnTable, 0, 'h00D', 'ohun') // Headhunter
	call SaveInteger(udg_SpawnTable, 0, 'ohun', 'h00D')
	call SaveInteger(udg_SpawnTable, 0, 'h00E', 'orai') // Raider
	call SaveInteger(udg_SpawnTable, 0, 'orai', 'h00E')
	call SaveInteger(udg_SpawnTable, 0, 'h00F', 'otau') // Tauren
	call SaveInteger(udg_SpawnTable, 0, 'otau', 'h00F')
	call SaveInteger(udg_SpawnTable, 0, 'h00G', 'ocat') // Demolisher
	call SaveInteger(udg_SpawnTable, 0, 'ocat', 'h00G')
	call SaveInteger(udg_SpawnTable, 0, 'h00H', 'okod') // Kodo Rider
	call SaveInteger(udg_SpawnTable, 0, 'okod', 'h00H')
	call SaveInteger(udg_SpawnTable, 0, 'h00I', 'owyv') // Wyvern
	call SaveInteger(udg_SpawnTable, 0, 'owyv', 'h00I')
	call SaveInteger(udg_SpawnTable, 0, 'h00J', 'otbr') // Batrider
	call SaveInteger(udg_SpawnTable, 0, 'otbr', 'h00J')
	call SaveInteger(udg_SpawnTable, 0, 'h00K', 'odoc') // Witch Doctor
	call SaveInteger(udg_SpawnTable, 0, 'odoc', 'h00K')
	call SaveInteger(udg_SpawnTable, 0, 'h00L', 'oshm') // Shaman
	call SaveInteger(udg_SpawnTable, 0, 'oshm', 'h00L')
	call SaveInteger(udg_SpawnTable, 0, 'h00M', 'ospw') // Spirit Walker
	call SaveInteger(udg_SpawnTable, 0, 'ospw', 'h00M')

	call SaveInteger(udg_SpawnTable, 0, 'O002', 'Obla') // Blademaster
	call SaveInteger(udg_SpawnTable, 0, 'Obla', 'O002')
	call SaveInteger(udg_SpawnTable, 0, 'O003', 'Ofar') // Far Seer
	call SaveInteger(udg_SpawnTable, 0, 'Ofar', 'O003')
	call SaveInteger(udg_SpawnTable, 0, 'O004', 'Otch') // Tauren Chieftain
	call SaveInteger(udg_SpawnTable, 0, 'Otch', 'O004')
	call SaveInteger(udg_SpawnTable, 0, 'O005', 'Oshd') // Shadow Hunter
	call SaveInteger(udg_SpawnTable, 0, 'Oshd', 'O005')


	// Undead
	call SaveInteger(udg_SpawnTable, 0, 'h00N', 'ugho') // Ghoul
	call SaveInteger(udg_SpawnTable, 0, 'ugho', 'h00N')
	call SaveInteger(udg_SpawnTable, 0, 'h00O', 'ucry') // Crypt Fiend
	call SaveInteger(udg_SpawnTable, 0, 'ucry', 'h00O')
	call SaveInteger(udg_SpawnTable, 0, 'h00P', 'uabo') // Abomination
	call SaveInteger(udg_SpawnTable, 0, 'uabo', 'h00P')
	call SaveInteger(udg_SpawnTable, 0, 'h00Q', 'umtw') // Meat Wagon
	call SaveInteger(udg_SpawnTable, 0, 'umtw', 'h00Q')
	call SaveInteger(udg_SpawnTable, 0, 'h00R', 'ugar') // Gargoyle
	call SaveInteger(udg_SpawnTable, 0, 'ugar', 'h00R')
	call SaveInteger(udg_SpawnTable, 0, 'h00S', 'uban') // Banshee
	call SaveInteger(udg_SpawnTable, 0, 'uban', 'h00S')
	call SaveInteger(udg_SpawnTable, 0, 'h00T', 'unec') // Necromancer
	call SaveInteger(udg_SpawnTable, 0, 'unec', 'h00T')
	call SaveInteger(udg_SpawnTable, 0, 'h00U', 'uobs') // Obsidian Statue
	call SaveInteger(udg_SpawnTable, 0, 'uobs', 'h00U')
	call SaveInteger(udg_SpawnTable, 0, 'h00V', 'ufro') // Frost Wyrm
	call SaveInteger(udg_SpawnTable, 0, 'ufro', 'h00V')
	call SaveInteger(udg_SpawnTable, 0, 'h00X', 'ubsp') // Destroyer
	call SaveInteger(udg_SpawnTable, 0, 'ubsp', 'h00X')
	call SaveInteger(udg_SpawnTable, 0, 'h00W', 'ushd') // Shade
	call SaveInteger(udg_SpawnTable, 0, 'ushd', 'h00W')

	call SaveInteger(udg_SpawnTable, 0, 'U005', 'Udea') // Death Knight
	call SaveInteger(udg_SpawnTable, 0, 'Udea', 'U005')
	call SaveInteger(udg_SpawnTable, 0, 'U006', 'Ulic') // Lich
	call SaveInteger(udg_SpawnTable, 0, 'Ulic', 'U006')
	call SaveInteger(udg_SpawnTable, 0, 'U007', 'Udre') // Dreadlord
	call SaveInteger(udg_SpawnTable, 0, 'Udre', 'U007')
	call SaveInteger(udg_SpawnTable, 0, 'U008', 'Ucrl') // Crypt Lord
	call SaveInteger(udg_SpawnTable, 0, 'Ucrl', 'U008')


	// Night Elf
	call SaveInteger(udg_SpawnTable, 0, 'e000', 'earc') // Archer
	call SaveInteger(udg_SpawnTable, 0, 'earc', 'e000')
	call SaveInteger(udg_SpawnTable, 0, 'e001', 'esen') // Huntress
	call SaveInteger(udg_SpawnTable, 0, 'esen', 'e001')
	call SaveInteger(udg_SpawnTable, 0, 'e002', 'edry') // Dryad
	call SaveInteger(udg_SpawnTable, 0, 'edry', 'e002')
	call SaveInteger(udg_SpawnTable, 0, 'e003', 'ebal') // Glaive Thrower
	call SaveInteger(udg_SpawnTable, 0, 'ebal', 'e003')
	call SaveInteger(udg_SpawnTable, 0, 'e004', 'ehip') // Hippogryph
	call SaveInteger(udg_SpawnTable, 0, 'ehip', 'e004')
	call SaveInteger(udg_SpawnTable, 0, 'e005', 'ehpr') // Hippogryph Rider
	call SaveInteger(udg_SpawnTable, 0, 'ehpr', 'e005')
	call SaveInteger(udg_SpawnTable, 0, 'e006', 'echm') // Chimaera
	call SaveInteger(udg_SpawnTable, 0, 'echm', 'e006')
	call SaveInteger(udg_SpawnTable, 0, 'e007', 'edot') // Druid of the Talon
	call SaveInteger(udg_SpawnTable, 0, 'edot', 'e007')
	call SaveInteger(udg_SpawnTable, 0, 'e008', 'edoc') // Druid of the Claw
	call SaveInteger(udg_SpawnTable, 0, 'edoc', 'e008')
	call SaveInteger(udg_SpawnTable, 0, 'e009', 'emtg') // Mountain Giant
	call SaveInteger(udg_SpawnTable, 0, 'emtg', 'e009')
	call SaveInteger(udg_SpawnTable, 0, 'e00A', 'efdr') // Faerie Dragon
	call SaveInteger(udg_SpawnTable, 0, 'efdr', 'e00A')

	call SaveInteger(udg_SpawnTable, 0, 'E00H', 'Ekee') // Keeper of the Grove
	call SaveInteger(udg_SpawnTable, 0, 'Ekee', 'E00H')
	call SaveInteger(udg_SpawnTable, 0, 'E00I', 'Emoo') // Priestess of the Moon
	call SaveInteger(udg_SpawnTable, 0, 'Emoo', 'E00I')
	call SaveInteger(udg_SpawnTable, 0, 'E00J', 'Edem') // Demon Hunter
	call SaveInteger(udg_SpawnTable, 0, 'Edem', 'E00J')
	call SaveInteger(udg_SpawnTable, 0, 'E00K', 'Ewar') // Warden
	call SaveInteger(udg_SpawnTable, 0, 'Ewar', 'E00K')


	// Tavern Heroes
	call SaveInteger(udg_SpawnTable, 0, 'N012', 'Nalc') // Alchemist
	call SaveInteger(udg_SpawnTable, 0, 'Nalc', 'N012')
	call SaveInteger(udg_SpawnTable, 0, 'N013', 'Nngs') // Sea Witch
	call SaveInteger(udg_SpawnTable, 0, 'Nngs', 'N013')
	call SaveInteger(udg_SpawnTable, 0, 'N014', 'Ntin') // Tinker
	call SaveInteger(udg_SpawnTable, 0, 'Ntin', 'N014')
	call SaveInteger(udg_SpawnTable, 0, 'N015', 'Nbst') // Beastmaster
	call SaveInteger(udg_SpawnTable, 0, 'Nbst', 'N015')
	call SaveInteger(udg_SpawnTable, 0, 'N016', 'Npbm') // Brewmaster
	call SaveInteger(udg_SpawnTable, 0, 'Npbm', 'N016')
	call SaveInteger(udg_SpawnTable, 0, 'N017', 'Nbrn') // Dark Ranger
	call SaveInteger(udg_SpawnTable, 0, 'Nbrn', 'N017')
	call SaveInteger(udg_SpawnTable, 0, 'N018', 'Nfir') // Firelord
	call SaveInteger(udg_SpawnTable, 0, 'Nfir', 'N018')
	call SaveInteger(udg_SpawnTable, 0, 'N019', 'Nplh') // Pit Lord
	call SaveInteger(udg_SpawnTable, 0, 'Nplh', 'N019')


	// Dalaran
	call SaveInteger(udg_SpawnTable, 0, 'h028', 'h012') // Battlemage
	call SaveInteger(udg_SpawnTable, 0, 'h012', 'h028')
	call SaveInteger(udg_SpawnTable, 0, 'h029', 'h013') // Charmer
	call SaveInteger(udg_SpawnTable, 0, 'h013', 'h029')
	call SaveInteger(udg_SpawnTable, 0, 'h02A', 'h021') // Arcanist
	call SaveInteger(udg_SpawnTable, 0, 'h021', 'h02A')
	call SaveInteger(udg_SpawnTable, 0, 'h02B', 'h020') // Apprentice
	call SaveInteger(udg_SpawnTable, 0, 'h020', 'h02B')
	call SaveInteger(udg_SpawnTable, 0, 'h02C', 'e00X') // Construct
	call SaveInteger(udg_SpawnTable, 0, 'e00X', 'h02C')
	call SaveInteger(udg_SpawnTable, 0, 'h02D', 'h023') // Geomancer
	call SaveInteger(udg_SpawnTable, 0, 'h023', 'h02D')
	call SaveInteger(udg_SpawnTable, 0, 'h02E', 'h022') // Pyromancer
	call SaveInteger(udg_SpawnTable, 0, 'h022', 'h02E')
	call SaveInteger(udg_SpawnTable, 0, 'h02F', 'n01A') // Aether Elemental
	call SaveInteger(udg_SpawnTable, 0, 'n01A', 'h02F')
	call SaveInteger(udg_SpawnTable, 0, 'h02G', 'h026') // Aqua Elemental
	call SaveInteger(udg_SpawnTable, 0, 'h026', 'h02G')
	call SaveInteger(udg_SpawnTable, 0, 'h02H', 'n01E') // Wind Elemental
	call SaveInteger(udg_SpawnTable, 0, 'n01E', 'h02H')
	call SaveInteger(udg_SpawnTable, 0, 'h02I', 'n01C') // Earth Elemental
	call SaveInteger(udg_SpawnTable, 0, 'n01C', 'h02I')
	call SaveInteger(udg_SpawnTable, 0, 'n02Z', 'n02Y') // Fire Elemental
	call SaveInteger(udg_SpawnTable, 0, 'n02Y', 'n02Z')
	call SaveInteger(udg_SpawnTable, 0, 'h02J', 'h024') // Magician
	call SaveInteger(udg_SpawnTable, 0, 'h024', 'h02J')
	call SaveInteger(udg_SpawnTable, 0, 'h02K', 'h025') // Kirin Tor Operative
	call SaveInteger(udg_SpawnTable, 0, 'h025', 'h02K')
	call SaveInteger(udg_SpawnTable, 0, 'h017', 'h016') // Kirin Tor Curator
	call SaveInteger(udg_SpawnTable, 0, 'h016', 'h017')
	call SaveInteger(udg_SpawnTable, 0, 'h03Y', 'h03X') // Kirin Tor Guardian
	call SaveInteger(udg_SpawnTable, 0, 'h03X', 'h03Y')
	call SaveInteger(udg_SpawnTable, 0, 'n035', 'n036') // Rock Golem
	call SaveInteger(udg_SpawnTable, 0, 'n036', 'n035')

	call SaveInteger(udg_SpawnTable, 0, 'H01A', 'H01D') // Mage
	call SaveInteger(udg_SpawnTable, 0, 'H01D', 'H01A')
	//call SaveInteger(udg_SpawnTable, 0, 'H030', 'H02Z') // Arcane Curator
	//call SaveInteger(udg_SpawnTable, 0, 'H02Z', 'H030')
	call SaveInteger(udg_SpawnTable, 0, 'H031', 'H02X') // High Wizard
	call SaveInteger(udg_SpawnTable, 0, 'H02X', 'H031')
	//call SaveInteger(udg_SpawnTable, 0, 'H032', 'H02V') // Spell Officer
	//call SaveInteger(udg_SpawnTable, 0, 'H02V', 'H032')
	call SaveInteger(udg_SpawnTable, 0, 'H01M', 'H041') // Elementalist
	call SaveInteger(udg_SpawnTable, 0, 'H041', 'H01M')
	call SaveInteger(udg_SpawnTable, 0, 'H033', 'H02Y') // Thaumaturge
	call SaveInteger(udg_SpawnTable, 0, 'H02Y', 'H033')


	// Blood Elf
	call SaveInteger(udg_SpawnTable, 0, 'o00N', 'o00I') // Sentinel
	call SaveInteger(udg_SpawnTable, 0, 'o00I', 'o00N')
	call SaveInteger(udg_SpawnTable, 0, 'o00O', 'o00J') // Blood Archer
	call SaveInteger(udg_SpawnTable, 0, 'o00J', 'o00O')
	call SaveInteger(udg_SpawnTable, 0, 'h03K', 'h034') // Darkcaster
	call SaveInteger(udg_SpawnTable, 0, 'h034', 'h03K')
	call SaveInteger(udg_SpawnTable, 0, 'u00D', 'u00C') // Silvermoon Guard
	call SaveInteger(udg_SpawnTable, 0, 'u00C', 'u00D')
	call SaveInteger(udg_SpawnTable, 0, 'h03L', 'h035') // Magus
	call SaveInteger(udg_SpawnTable, 0, 'h035', 'h03L')
	call SaveInteger(udg_SpawnTable, 0, 'h03M', 'h036') // Magister
	call SaveInteger(udg_SpawnTable, 0, 'h036', 'h03M')
	//call SaveInteger(udg_SpawnTable, 0, 'h03N', 'h037') // Air Charger
	//call SaveInteger(udg_SpawnTable, 0, 'h037', 'h03N')
	//call SaveInteger(udg_SpawnTable, 0, 'h03O', 'h038') // Monitor
	//call SaveInteger(udg_SpawnTable, 0, 'h038', 'h03O')
	call SaveInteger(udg_SpawnTable, 0, 'h040', 'h03Z') // Dragonhawk Rider
	call SaveInteger(udg_SpawnTable, 0, 'h03Z', 'h040')
	call SaveInteger(udg_SpawnTable, 0, 'h03P', 'h039') // Arcane Guardian
	call SaveInteger(udg_SpawnTable, 0, 'h039', 'h03P')
	call SaveInteger(udg_SpawnTable, 0, 'h03Q', 'h03A') // Phoenix Rider
	call SaveInteger(udg_SpawnTable, 0, 'h03A', 'h03Q')
	call SaveInteger(udg_SpawnTable, 0, 'o00P', 'o00K') // Decimator
	call SaveInteger(udg_SpawnTable, 0, 'o00K', 'o00P')

	call SaveInteger(udg_SpawnTable, 0, 'h042', 'h019') // Phoenix
	call SaveInteger(udg_SpawnTable, 0, 'h019', 'h042')
		
	call SaveInteger(udg_SpawnTable, 0, 'O00Q', 'O00L') // Phoenix Assassin
	call SaveInteger(udg_SpawnTable, 0, 'O00L', 'O00Q')
	call SaveInteger(udg_SpawnTable, 0, 'H03R', 'H03B') // Sentinel Commander
	call SaveInteger(udg_SpawnTable, 0, 'H03B', 'H03R')
	call SaveInteger(udg_SpawnTable, 0, 'H03S', 'H03I') // Blood Knight
	call SaveInteger(udg_SpawnTable, 0, 'H03I', 'H03S')
	call SaveInteger(udg_SpawnTable, 0, 'H03T', 'H03C') // Sunreaver
	call SaveInteger(udg_SpawnTable, 0, 'H03C', 'H03T')


	// Forsaken
	call SaveInteger(udg_SpawnTable, 0, 'u013', 'u00G') // Dark Rogue
	call SaveInteger(udg_SpawnTable, 0, 'u00G', 'u013')
	call SaveInteger(udg_SpawnTable, 0, 'u017', 'u00K') // Empusa
	call SaveInteger(udg_SpawnTable, 0, 'u00K', 'u017')
	call SaveInteger(udg_SpawnTable, 0, 'u01D', 'u00Q') // Apothecary
	call SaveInteger(udg_SpawnTable, 0, 'u00Q', 'u01D')
	call SaveInteger(udg_SpawnTable, 0, 'u01E', 'u00R') // Deathguard
	call SaveInteger(udg_SpawnTable, 0, 'u00R', 'u01E')
	call SaveInteger(udg_SpawnTable, 0, 'u01A', 'u00N') // Spectre
	call SaveInteger(udg_SpawnTable, 0, 'u00N', 'u01A')
	call SaveInteger(udg_SpawnTable, 0, 'u016', 'u00J') // Onager
	call SaveInteger(udg_SpawnTable, 0, 'u00J', 'u016')
	call SaveInteger(udg_SpawnTable, 0, 'u019', 'u00M') // Blightwing
	call SaveInteger(udg_SpawnTable, 0, 'u00M', 'u019')
	call SaveInteger(udg_SpawnTable, 0, 'u014', 'u00H') // Wraithblade
	call SaveInteger(udg_SpawnTable, 0, 'u00H', 'u014')
	call SaveInteger(udg_SpawnTable, 0, 'u01U', 'u01V') // Abomination (Forsaken)
	call SaveInteger(udg_SpawnTable, 0, 'u01V', 'u01U')
	call SaveInteger(udg_SpawnTable, 0, 'u00Y', 'u00S') // Val'kyr
	call SaveInteger(udg_SpawnTable, 0, 'u00S', 'u00Y')
	call SaveInteger(udg_SpawnTable, 0, 'u01B', 'u00O') // Apparition
	call SaveInteger(udg_SpawnTable, 0, 'u00O', 'u01B')

	call SaveInteger(udg_SpawnTable, 0, 'U01M', 'U00Z') // Scourge
	call SaveInteger(udg_SpawnTable, 0, 'U00Z', 'U01M')
	call SaveInteger(udg_SpawnTable, 0, 'U01N', 'U010') // Black Hunter
	call SaveInteger(udg_SpawnTable, 0, 'U010', 'U01N')
	call SaveInteger(udg_SpawnTable, 0, 'U01O', 'U011') // Deathstalker
	call SaveInteger(udg_SpawnTable, 0, 'U011', 'U01O')
	call SaveInteger(udg_SpawnTable, 0, 'U01P', 'U012') // Exterminator
	call SaveInteger(udg_SpawnTable, 0, 'U012', 'U01P')


	// Naga
	call SaveInteger(udg_SpawnTable, 0, 'n031', 'n032') // Murloc Warrior
	call SaveInteger(udg_SpawnTable, 0, 'n032', 'n031')
	call SaveInteger(udg_SpawnTable, 0, 'n027', 'n009') // Toxic Murloc Warrior
	call SaveInteger(udg_SpawnTable, 0, 'n009', 'n027')
	call SaveInteger(udg_SpawnTable, 0, 'e018', 'e015') // Naga Siren
	call SaveInteger(udg_SpawnTable, 0, 'e015', 'e018')
	call SaveInteger(udg_SpawnTable, 0, 'e019', 'e01A') // Evolved Naga Siren
	call SaveInteger(udg_SpawnTable, 0, 'e01A', 'e019')
	call SaveInteger(udg_SpawnTable, 0, 'n02M', 'n01X') // Snap Dragon
	call SaveInteger(udg_SpawnTable, 0, 'n01X', 'n02M')
	call SaveInteger(udg_SpawnTable, 0, 'n02N', 'n01Y') // Summoner
	call SaveInteger(udg_SpawnTable, 0, 'n01Y', 'n02N')
	call SaveInteger(udg_SpawnTable, 0, 'n02Q', 'n021') // Dragon Turtle
	call SaveInteger(udg_SpawnTable, 0, 'n021', 'n02Q')
	call SaveInteger(udg_SpawnTable, 0, 'n033', 'n034') // Evolved Dragon Turtle
	call SaveInteger(udg_SpawnTable, 0, 'n034', 'n033')
	call SaveInteger(udg_SpawnTable, 0, 'n02P', 'n020') // Sweller
	call SaveInteger(udg_SpawnTable, 0, 'n020', 'n02P')
	call SaveInteger(udg_SpawnTable, 0, 'n02S', 'n023') // Couatl
	call SaveInteger(udg_SpawnTable, 0, 'n023', 'n02S')
	call SaveInteger(udg_SpawnTable, 0, 'n03F', 'n03E') // Evolved Couatl
	call SaveInteger(udg_SpawnTable, 0, 'n03E', 'n03F')
	call SaveInteger(udg_SpawnTable, 0, 'n02R', 'n022') // Water Dragon
	call SaveInteger(udg_SpawnTable, 0, 'n022', 'n02R')
	call SaveInteger(udg_SpawnTable, 0, 'n02T', 'n024') // Naga Myrmidon
	call SaveInteger(udg_SpawnTable, 0, 'n024', 'n02T')
	call SaveInteger(udg_SpawnTable, 0, 'n01Z', 'n02O') // Evolved Naga Myrmidon
	call SaveInteger(udg_SpawnTable, 0, 'n02O', 'n01Z')
	call SaveInteger(udg_SpawnTable, 0, 'n02U', 'n025') // Ancient Hydra
	call SaveInteger(udg_SpawnTable, 0, 'n025', 'n02U')
	call SaveInteger(udg_SpawnTable, 0, 'n005', 'n004') // Evolved Ancient Hydra
	call SaveInteger(udg_SpawnTable, 0, 'n004', 'n005')
	call SaveInteger(udg_SpawnTable, 0, 'n02W', 'n02V') // Toxic Mur'gul Reaver
	call SaveInteger(udg_SpawnTable, 0, 'n02V', 'n02W')

	call SaveInteger(udg_SpawnTable, 0, 'O00V', 'O00U') // Royal Commander
	call SaveInteger(udg_SpawnTable, 0, 'O00U', 'O00V')
	call SaveInteger(udg_SpawnTable, 0, 'O00W', 'O00T') // Tide Hunter
	call SaveInteger(udg_SpawnTable, 0, 'O00T', 'O00W')
	call SaveInteger(udg_SpawnTable, 0, 'N002', 'N02F') // Sunken Empress
	call SaveInteger(udg_SpawnTable, 0, 'N02F', 'N002')
	call SaveInteger(udg_SpawnTable, 0, 'N001', 'N02G') // Myrmidon Commander
	call SaveInteger(udg_SpawnTable, 0, 'N02G', 'N001')











	// ---------- SKINS ---------- //

	call SaveInteger(udg_SpawnTable, 0, 'h004', 'hcth') // Footman (Captain)
	call SaveInteger(udg_SpawnTable, 0, 'hcth', 'h004')
	call SaveInteger(udg_SpawnTable, 0, 'h005', 'hhes') // Footman (Swordsman)
	call SaveInteger(udg_SpawnTable, 0, 'hhes', 'h005')
	call SaveInteger(udg_SpawnTable, 0, 'n00H', 'nbel') // Footman (Blood Elf Lieutenant)
	call SaveInteger(udg_SpawnTable, 0, 'nbel', 'n00H')
	call SaveInteger(udg_SpawnTable, 0, 'n00I', 'njks') // Footman (Jailor Kassan)
	call SaveInteger(udg_SpawnTable, 0, 'njks', 'n00I')
	call SaveInteger(udg_SpawnTable, 0, 'n00J', 'nemi') // Priest (Emissary)
	call SaveInteger(udg_SpawnTable, 0, 'nemi', 'n00J')
	call SaveInteger(udg_SpawnTable, 0, 'n00K', 'nchp') // Priest (Chaplain)
	call SaveInteger(udg_SpawnTable, 0, 'nchp', 'n00K')
	call SaveInteger(udg_SpawnTable, 0, 'n00L', 'nwiz') // Priest (Apprentice Wizard)
	call SaveInteger(udg_SpawnTable, 0, 'nwiz', 'n00L')
	call SaveInteger(udg_SpawnTable, 0, 'n00M', 'nws1') // Dragonhawk Rider (Dragon Hawk)
	call SaveInteger(udg_SpawnTable, 0, 'nws1', 'n00M')
	call SaveInteger(udg_SpawnTable, 0, 'H01R', 'Hart') // Paladin (Arthas)
	call SaveInteger(udg_SpawnTable, 0, 'Hart', 'H01R')
	call SaveInteger(udg_SpawnTable, 0, 'H01S', 'Huth') // Paladin (Uther)
	call SaveInteger(udg_SpawnTable, 0, 'Huth', 'H01S')
	call SaveInteger(udg_SpawnTable, 0, 'H01T', 'Haah') // Archmage (Kelen the Seeker)
	call SaveInteger(udg_SpawnTable, 0, 'Haah', 'H01T')
	call SaveInteger(udg_SpawnTable, 0, 'H01V', 'H01U') // Archmage (Dark Wizard)
	call SaveInteger(udg_SpawnTable, 0, 'H01U', 'H01V')
	call SaveInteger(udg_SpawnTable, 0, 'H01W', 'Hgam') // Archmage (Antonidas)
	call SaveInteger(udg_SpawnTable, 0, 'Hgam', 'H01W')
	call SaveInteger(udg_SpawnTable, 0, 'H01X', 'Hmbr') // Mountain King (Muradin Bronzebeard)
	call SaveInteger(udg_SpawnTable, 0, 'Hmbr', 'H01X')
	call SaveInteger(udg_SpawnTable, 0, 'H01Y', 'Hkal') // Blood Mage (Kael)
	call SaveInteger(udg_SpawnTable, 0, 'Hkal', 'H01Y')
	call SaveInteger(udg_SpawnTable, 0, 'H01Z', 'Hjai') // Blood Mage (Jaina)
	call SaveInteger(udg_SpawnTable, 0, 'Hjai', 'H01Z')

	call SaveInteger(udg_SpawnTable, 0, 'n00N', 'nchg') // Grunt (Fel Orc Grunt)
	call SaveInteger(udg_SpawnTable, 0, 'nchg', 'n00N')
	call SaveInteger(udg_SpawnTable, 0, 'n00O', 'nsoc') // Grunt (Skeletal Orc Champion)
	call SaveInteger(udg_SpawnTable, 0, 'nsoc', 'n00O')
	call SaveInteger(udg_SpawnTable, 0, 'n00Q', 'nitr') // Headhunter (Ice Troll)
	call SaveInteger(udg_SpawnTable, 0, 'nitr', 'n00Q')
	call SaveInteger(udg_SpawnTable, 0, 'n00R', 'ndtr') // Headhunter (Dark Troll)
	call SaveInteger(udg_SpawnTable, 0, 'ndtr', 'n00R')
	call SaveInteger(udg_SpawnTable, 0, 'n00P', 'nftr') // Headhunter (Forest Troll)
	call SaveInteger(udg_SpawnTable, 0, 'nftr', 'n00P')
	call SaveInteger(udg_SpawnTable, 0, 'n00S', 'nith') // Witch Doctor (Ice Troll High Priest)
	call SaveInteger(udg_SpawnTable, 0, 'nith', 'n00S')
	call SaveInteger(udg_SpawnTable, 0, 'n00T', 'ndth') // Witch Doctor (Dark Troll High Priest)
	call SaveInteger(udg_SpawnTable, 0, 'ndth', 'n00T')
	call SaveInteger(udg_SpawnTable, 0, 'n00U', 'nfsh') // Witch Doctor (Forest Troll High Priest)
	call SaveInteger(udg_SpawnTable, 0, 'nfsh', 'n00U')
	call SaveInteger(udg_SpawnTable, 0, 'n00V', 'nchr') // Raider (Fel Orc Raider)
	call SaveInteger(udg_SpawnTable, 0, 'nchr', 'n00V')
	call SaveInteger(udg_SpawnTable, 0, 'n00W', 'nckb') // Kodo Beast (Fel Orc Kodo Beast)
	call SaveInteger(udg_SpawnTable, 0, 'nckb', 'n00W')
	call SaveInteger(udg_SpawnTable, 0, 'O00B', 'Ogrh') // Blademaster (Grom Hellscream)
	call SaveInteger(udg_SpawnTable, 0, 'Ogrh', 'O00B')
	call SaveInteger(udg_SpawnTable, 0, 'N00X', 'Nbbc') // Blademaster (Blademaster of the Blackrock Clan)
	call SaveInteger(udg_SpawnTable, 0, 'Nbbc', 'N00X')
	call SaveInteger(udg_SpawnTable, 0, 'O00C', 'Opgh') // Blademaster (Grom Hellscream Possessed)
	call SaveInteger(udg_SpawnTable, 0, 'Opgh', 'O00C')
	call SaveInteger(udg_SpawnTable, 0, 'O00E', 'O00D') // Blademaster (Garrosh Hellscream)
	call SaveInteger(udg_SpawnTable, 0, 'O00D', 'O00E')
	call SaveInteger(udg_SpawnTable, 0, 'O007', 'Odrt') // Far Seer (Drek'Thar)
	call SaveInteger(udg_SpawnTable, 0, 'Odrt', 'O007')
	call SaveInteger(udg_SpawnTable, 0, 'O008', 'Othr') // Far Seer (Thrall)
	call SaveInteger(udg_SpawnTable, 0, 'Othr', 'O008')
	call SaveInteger(udg_SpawnTable, 0, 'O009', 'Ocbh') // Tauren Chieftain (Cairne Bloodhoof)
	call SaveInteger(udg_SpawnTable, 0, 'Ocbh', 'O009')
	call SaveInteger(udg_SpawnTable, 0, 'O00A', 'Orkn') // Shadow Hunter (Rokhan)
	call SaveInteger(udg_SpawnTable, 0, 'Orkn', 'O00A')

	call SaveInteger(udg_SpawnTable, 0, 'n00Y', 'nzom') // Ghoul (Zombie)
	call SaveInteger(udg_SpawnTable, 0, 'nzom', 'n00Y')
	call SaveInteger(udg_SpawnTable, 0, 'n00B', 'ndmu') // Ghoul (Dalaran Mutant)
	call SaveInteger(udg_SpawnTable, 0, 'ndmu', 'n00B')
	call SaveInteger(udg_SpawnTable, 0, 'n00C', 'nnwa') // Crypt Fiend (Nerubian Warrior)
	call SaveInteger(udg_SpawnTable, 0, 'nnwa', 'n00C')
	call SaveInteger(udg_SpawnTable, 0, 'n00D', 'nnwq') // Crypt Fiend (Nerubian Warrior)
	call SaveInteger(udg_SpawnTable, 0, 'nnwq', 'n00D')
	call SaveInteger(udg_SpawnTable, 0, 'u001', 'uktn') // Necromancer (Kel'Thuzad)
	call SaveInteger(udg_SpawnTable, 0, 'uktn', 'u001')
	call SaveInteger(udg_SpawnTable, 0, 'u002', 'uktg') // Necromancer (Kel'Thuzad Ghost)
	call SaveInteger(udg_SpawnTable, 0, 'uktg', 'u002')
	call SaveInteger(udg_SpawnTable, 0, 'n00E', 'ngh2') // Banshee (Wraith)
	call SaveInteger(udg_SpawnTable, 0, 'ngh2', 'n00E')
	call SaveInteger(udg_SpawnTable, 0, 'n00F', 'nadr') // Frost Wyrm (Blue Dragon)
	call SaveInteger(udg_SpawnTable, 0, 'nadr', 'n00F')
	call SaveInteger(udg_SpawnTable, 0, 'H00Y', 'Harf') // Death Knight (Arthas wielding Frostmourne)
	call SaveInteger(udg_SpawnTable, 0, 'Harf', 'H00Y')
	call SaveInteger(udg_SpawnTable, 0, 'H010', 'H00Z') // Death Knight (The Lich King)
	call SaveInteger(udg_SpawnTable, 0, 'H00Z', 'H010')
	call SaveInteger(udg_SpawnTable, 0, 'U003', 'Uktl') // Lich (Kel'Thuzad)
	call SaveInteger(udg_SpawnTable, 0, 'Uktl', 'U003')
	call SaveInteger(udg_SpawnTable, 0, 'U009', 'Utic') // Dreadlord (Tichondrius)
	call SaveInteger(udg_SpawnTable, 0, 'Utic', 'U009')
	call SaveInteger(udg_SpawnTable, 0, 'U00A', 'Udth') // Dreadlord (Detheroc)
	call SaveInteger(udg_SpawnTable, 0, 'Udth', 'U00A')
	call SaveInteger(udg_SpawnTable, 0, 'U00B', 'Uanb') // Crypt Lord (Anub'Arak)
	call SaveInteger(udg_SpawnTable, 0, 'Uanb', 'U00B')

	call SaveInteger(udg_SpawnTable, 0, 'e00B', 'eshd') // Archer (Shandris)
	call SaveInteger(udg_SpawnTable, 0, 'eshd', 'e00B')
	call SaveInteger(udg_SpawnTable, 0, 'n00G', 'nhea') // Archer (High Elf Archer)
	call SaveInteger(udg_SpawnTable, 0, 'nhea', 'n00G')
	call SaveInteger(udg_SpawnTable, 0, 'e00C', 'ensh') // Huntress (Naisha)
	call SaveInteger(udg_SpawnTable, 0, 'ensh', 'e00C')
	call SaveInteger(udg_SpawnTable, 0, 'e00D', 'eilw') // Glaive Thrower (Prison Wagon)
	call SaveInteger(udg_SpawnTable, 0, 'eilw', 'e00D')
	call SaveInteger(udg_SpawnTable, 0, 'n00Z', 'nggg') // Mountain Giant (Guardian Golem)
	call SaveInteger(udg_SpawnTable, 0, 'nggg', 'n00Z')
	call SaveInteger(udg_SpawnTable, 0, 'n010', 'nggr') // Mountain Giant (Granite Golem)
	call SaveInteger(udg_SpawnTable, 0, 'nggr', 'n010')
	call SaveInteger(udg_SpawnTable, 0, 'n011', 'nsgg') // Mountain Giant (Siege Golem)
	call SaveInteger(udg_SpawnTable, 0, 'nsgg', 'n011')
	call SaveInteger(udg_SpawnTable, 0, 'E00M', 'Emns') // Keeper of the Grove (Malfurion)
	call SaveInteger(udg_SpawnTable, 0, 'Emns', 'E00M')
	call SaveInteger(udg_SpawnTable, 0, 'E00N', 'Ecen') // Keeper of the Grove (Cenarius)
	call SaveInteger(udg_SpawnTable, 0, 'Ecen', 'E00N')
	call SaveInteger(udg_SpawnTable, 0, 'E00O', 'Ekgg') // Keeper of the Grove (Cenarius Ghost)
	call SaveInteger(udg_SpawnTable, 0, 'Ekgg', 'E00O')
	call SaveInteger(udg_SpawnTable, 0, 'E00P', 'Etyr') // Priestess of the Moon (Tyrande)
	call SaveInteger(udg_SpawnTable, 0, 'Etyr', 'E00P')
	call SaveInteger(udg_SpawnTable, 0, 'E00Q', 'Eevi') // Demon Hunter (Illidan)
	call SaveInteger(udg_SpawnTable, 0, 'Eevi', 'E00Q')
	call SaveInteger(udg_SpawnTable, 0, 'E00S', 'E00R') // Warden (Primordial Warden)
	call SaveInteger(udg_SpawnTable, 0, 'E00R', 'E00S')
	call SaveInteger(udg_SpawnTable, 0, 'E00T', 'Ewrd') // Warden (Maiev)
	call SaveInteger(udg_SpawnTable, 0, 'Ewrd', 'E00T')



endfunction
function InitAIGroups takes nothing returns nothing

	// Setup Unit Group Table

	// Human
	call SaveGroupHandle(udg_UnitTypeTable, 'hmpr', 0, udg_Priests)
	call SaveGroupHandle(udg_UnitTypeTable, 'nemi', 0, udg_Priests)
	call SaveGroupHandle(udg_UnitTypeTable, 'nwiz', 0, udg_Priests)
	call SaveGroupHandle(udg_UnitTypeTable, 'nchp', 0, udg_Priests)
	call SaveGroupHandle(udg_UnitTypeTable, 'hsor', 0, udg_Sorceress)
	call SaveGroupHandle(udg_UnitTypeTable, 'hspt', 0, udg_Spellbreaker)
	call SaveGroupHandle(udg_UnitTypeTable, 'hdhw', 0, udg_DragonhawkRiders)
	call SaveGroupHandle(udg_UnitTypeTable, 'nws1', 0, udg_DragonhawkRiders)
	call SaveGroupHandle(udg_UnitTypeTable, 'hmtm', 0, udg_MortarTeams)
	
	call SaveGroupHandle(udg_UnitTypeTable, 'Hpal', 0, udg_Paladins)
	call SaveGroupHandle(udg_UnitTypeTable, 'Hart', 0, udg_Paladins)
	call SaveGroupHandle(udg_UnitTypeTable, 'Huth', 0, udg_Paladins)
	call SaveGroupHandle(udg_UnitTypeTable, 'Hamg', 0, udg_Archmages)
	call SaveGroupHandle(udg_UnitTypeTable, 'Haah', 0, udg_Archmages)
	call SaveGroupHandle(udg_UnitTypeTable, 'Hgam', 0, udg_Archmages)
	call SaveGroupHandle(udg_UnitTypeTable, 'H01U', 0, udg_Archmages)
	call SaveGroupHandle(udg_UnitTypeTable, 'Hmkg', 0, udg_MountainKings)
	call SaveGroupHandle(udg_UnitTypeTable, 'Hmbr', 0, udg_MountainKings)
	call SaveGroupHandle(udg_UnitTypeTable, 'Hblm', 0, udg_BloodMages)
	call SaveGroupHandle(udg_UnitTypeTable, 'Hjai', 0, udg_BloodMages)
	call SaveGroupHandle(udg_UnitTypeTable, 'Hkal', 0, udg_BloodMages)
	

	// Orc
	call SaveGroupHandle(udg_UnitTypeTable, 'otbr', 0, udg_Batriders)
	call SaveGroupHandle(udg_UnitTypeTable, 'oshm', 0, udg_Shamans)
	call SaveGroupHandle(udg_UnitTypeTable, 'orai', 0, udg_Raiders)
	call SaveGroupHandle(udg_UnitTypeTable, 'nchr', 0, udg_Raiders)
	call SaveGroupHandle(udg_UnitTypeTable, 'ospw', 0, udg_SpiritWalkers)
	
	call SaveGroupHandle(udg_UnitTypeTable, 'Obla', 0, udg_Blademasters)
	call SaveGroupHandle(udg_UnitTypeTable, 'Nbbc', 0, udg_Blademasters)
	call SaveGroupHandle(udg_UnitTypeTable, 'Osam', 0, udg_Blademasters)
	call SaveGroupHandle(udg_UnitTypeTable, 'Ogrh', 0, udg_Blademasters)
	call SaveGroupHandle(udg_UnitTypeTable, 'Opgh', 0, udg_Blademasters)
	call SaveGroupHandle(udg_UnitTypeTable, 'O00D', 0, udg_Blademasters)
	call SaveGroupHandle(udg_UnitTypeTable, 'Ofar', 0, udg_FarSeers)
	call SaveGroupHandle(udg_UnitTypeTable, 'Odrt', 0, udg_FarSeers)
	call SaveGroupHandle(udg_UnitTypeTable, 'Othr', 0, udg_FarSeers)
	call SaveGroupHandle(udg_UnitTypeTable, 'Otch', 0, udg_TaurenChieftains)
	call SaveGroupHandle(udg_UnitTypeTable, 'Ocbh', 0, udg_TaurenChieftains)
	call SaveGroupHandle(udg_UnitTypeTable, 'Oshd', 0, udg_ShadowHunters)
	call SaveGroupHandle(udg_UnitTypeTable, 'Orkn', 0, udg_ShadowHunters)
	

	// Undead
	call SaveGroupHandle(udg_UnitTypeTable, 'ucry', 0, udg_CryptFiends)
	call SaveGroupHandle(udg_UnitTypeTable, 'nnwa', 0, udg_CryptFiends)
	call SaveGroupHandle(udg_UnitTypeTable, 'nnwq', 0, udg_CryptFiends)
	call SaveGroupHandle(udg_UnitTypeTable, 'unec', 0, udg_Necromancers)
	call SaveGroupHandle(udg_UnitTypeTable, 'uktg', 0, udg_Necromancers)
	call SaveGroupHandle(udg_UnitTypeTable, 'uktn', 0, udg_Necromancers)
	call SaveGroupHandle(udg_UnitTypeTable, 'uban', 0, udg_Banshees)
	call SaveGroupHandle(udg_UnitTypeTable, 'ngh2', 0, udg_Banshees)
	call SaveGroupHandle(udg_UnitTypeTable, 'uobs', 0, udg_ObsidianStatues)
	call SaveGroupHandle(udg_UnitTypeTable, 'ubsp', 0, udg_Destroyers)
	
	call SaveGroupHandle(udg_UnitTypeTable, 'Udea', 0, udg_DeathKnights)
	call SaveGroupHandle(udg_UnitTypeTable, 'Harf', 0, udg_DeathKnights)
	call SaveGroupHandle(udg_UnitTypeTable, 'H00Z', 0, udg_DeathKnights)
	call SaveGroupHandle(udg_UnitTypeTable, 'Ulic', 0, udg_Liches)
	call SaveGroupHandle(udg_UnitTypeTable, 'Uktl', 0, udg_Liches)
	call SaveGroupHandle(udg_UnitTypeTable, 'Udre', 0, udg_Dreadlords)
	call SaveGroupHandle(udg_UnitTypeTable, 'Udth', 0, udg_Dreadlords)
	call SaveGroupHandle(udg_UnitTypeTable, 'Utic', 0, udg_Dreadlords)
	call SaveGroupHandle(udg_UnitTypeTable, 'Ucrl', 0, udg_CryptLords)
	call SaveGroupHandle(udg_UnitTypeTable, 'Uanb', 0, udg_CryptLords)
	
		
	// Night Elf
	call SaveGroupHandle(udg_UnitTypeTable, 'edry', 0, udg_Dryads)
	call SaveGroupHandle(udg_UnitTypeTable, 'edot', 0, udg_DruidOfTheTalons)
	call SaveGroupHandle(udg_UnitTypeTable, 'edoc', 0, udg_DruidOfTheClaws)
	call SaveGroupHandle(udg_UnitTypeTable, 'efdr', 0, udg_FaerieDragons)
	
	call SaveGroupHandle(udg_UnitTypeTable, 'Ekee', 0, udg_KeeperOfTheGroves)
	call SaveGroupHandle(udg_UnitTypeTable, 'Ecen', 0, udg_KeeperOfTheGroves)
	call SaveGroupHandle(udg_UnitTypeTable, 'Ekgg', 0, udg_KeeperOfTheGroves)
	call SaveGroupHandle(udg_UnitTypeTable, 'Emns', 0, udg_KeeperOfTheGroves)
	call SaveGroupHandle(udg_UnitTypeTable, 'Emoo', 0, udg_PriestessOfTheMoons)
	call SaveGroupHandle(udg_UnitTypeTable, 'Etyr', 0, udg_PriestessOfTheMoons)
	call SaveGroupHandle(udg_UnitTypeTable, 'Edem', 0, udg_DemonHunters)
	call SaveGroupHandle(udg_UnitTypeTable, 'Eevi', 0, udg_DemonHunters)
	call SaveGroupHandle(udg_UnitTypeTable, 'Ewar', 0, udg_Wardens)
	call SaveGroupHandle(udg_UnitTypeTable, 'E00R', 0, udg_Wardens)
	call SaveGroupHandle(udg_UnitTypeTable, 'Ewrd', 0, udg_Wardens)
	
		
	// Tavern
	call SaveGroupHandle(udg_UnitTypeTable, 'Nalc', 0, udg_Alchemists)
	call SaveGroupHandle(udg_UnitTypeTable, 'Nngs', 0, udg_SeaWitches)
	call SaveGroupHandle(udg_UnitTypeTable, 'Ntin', 0, udg_Tinkers)
	call SaveGroupHandle(udg_UnitTypeTable, 'Nbst', 0, udg_Beastmasters)
	call SaveGroupHandle(udg_UnitTypeTable, 'Npbm', 0, udg_Brewmasters)
	call SaveGroupHandle(udg_UnitTypeTable, 'Nbrn', 0, udg_DarkRangers)
	call SaveGroupHandle(udg_UnitTypeTable, 'Nfir', 0, udg_Firelords)
	call SaveGroupHandle(udg_UnitTypeTable, 'Nplh', 0, udg_PitLords)
	
		
	// Dalaran
	call SaveGroupHandle(udg_UnitTypeTable, 'h013', 0, udg_Charmers)
	call SaveGroupHandle(udg_UnitTypeTable, 'h020', 0, udg_Apprentices)
	call SaveGroupHandle(udg_UnitTypeTable, 'e00X', 0, udg_Constructs)
	call SaveGroupHandle(udg_UnitTypeTable, 'h021', 0, udg_Arcanists)
	call SaveGroupHandle(udg_UnitTypeTable, 'h022', 0, udg_Pyromancers)
	call SaveGroupHandle(udg_UnitTypeTable, 'h023', 0, udg_Geomancers)
	call SaveGroupHandle(udg_UnitTypeTable, 'h024', 0, udg_Magicians)
	call SaveGroupHandle(udg_UnitTypeTable, 'h025', 0, udg_KirinTorOperatives)
	call SaveGroupHandle(udg_UnitTypeTable, 'h016', 0, udg_KirinTorCurators)
	
	call SaveGroupHandle(udg_UnitTypeTable, 'H01A', 0, udg_Mages)
	//call SaveGroupHandle(udg_UnitTypeTable, 'H02Z', 0, udg_ArcaneCurators)
	call SaveGroupHandle(udg_UnitTypeTable, 'H02X', 0, udg_HighWizards)
	call SaveGroupHandle(udg_UnitTypeTable, 'H01M', 0, udg_Elementalists)
	call SaveGroupHandle(udg_UnitTypeTable, 'H02V', 0, udg_SpellOfficers)
	call SaveGroupHandle(udg_UnitTypeTable, 'H02Y', 0, udg_Thaumaturges)
	
	
	// Blood Elves
	call SaveGroupHandle(udg_UnitTypeTable, 'o00J', 0, udg_BloodArchers)
	call SaveGroupHandle(udg_UnitTypeTable, 'h034', 0, udg_Darkcasters)
	call SaveGroupHandle(udg_UnitTypeTable, 'h035', 0, udg_Maguses)
	call SaveGroupHandle(udg_UnitTypeTable, 'h03Z', 0, udg_DragonhawkRidersBE)
	call SaveGroupHandle(udg_UnitTypeTable, 'h036', 0, udg_Magisters)
	call SaveGroupHandle(udg_UnitTypeTable, 'o00K', 0, udg_Decimators)
	
	call SaveGroupHandle(udg_UnitTypeTable, 'h042', 0, udg_Phoenixes)
	
	call SaveGroupHandle(udg_UnitTypeTable, 'O00L', 0, udg_PhoenixAssassins)
	call SaveGroupHandle(udg_UnitTypeTable, 'H03B', 0, udg_SentinelCommanders)
	call SaveGroupHandle(udg_UnitTypeTable, 'H03I', 0, udg_BloodKnights)
	call SaveGroupHandle(udg_UnitTypeTable, 'H03C', 0, udg_Sunreavers)
	
	
	// Forsaken
	call SaveGroupHandle(udg_UnitTypeTable, 'u00G', 0, udg_DarkRogues)
	call SaveGroupHandle(udg_UnitTypeTable, 'u00K', 0, udg_Empusas)
	call SaveGroupHandle(udg_UnitTypeTable, 'u00Q', 0, udg_Apothecarys)
	call SaveGroupHandle(udg_UnitTypeTable, 'u00R', 0, udg_Deathguards)
	call SaveGroupHandle(udg_UnitTypeTable, 'u00N', 0, udg_Spectres)
	call SaveGroupHandle(udg_UnitTypeTable, 'u00L', 0, udg_Gorgons)
	call SaveGroupHandle(udg_UnitTypeTable, 'u01U', 0, udg_AbominationsForsaken)
	call SaveGroupHandle(udg_UnitTypeTable, 'u00H', 0, udg_Wraithblades)
	call SaveGroupHandle(udg_UnitTypeTable, 'u00S', 0, udg_Valkyrs)
	
	call SaveGroupHandle(udg_UnitTypeTable, 'U00Z', 0, udg_Reapers)
	call SaveGroupHandle(udg_UnitTypeTable, 'U010', 0, udg_BansheeMaidens)
	call SaveGroupHandle(udg_UnitTypeTable, 'U011', 0, udg_Deathstalkers)
	call SaveGroupHandle(udg_UnitTypeTable, 'U012', 0, udg_Exterminators)
	
	
	// Naga
	call SaveGroupHandle(udg_UnitTypeTable, 'n01Y', 0, udg_Summoners)
	call SaveGroupHandle(udg_UnitTypeTable, 'n020', 0, udg_Swellers)
	call SaveGroupHandle(udg_UnitTypeTable, 'n021', 0, udg_DragonTurtles)
	call SaveGroupHandle(udg_UnitTypeTable, 'n033', 0, udg_DragonTurtles)
	call SaveGroupHandle(udg_UnitTypeTable, 'n024', 0, udg_NagaMyrmidons)
	call SaveGroupHandle(udg_UnitTypeTable, 'n01Z', 0, udg_NagaMyrmidons)
	
	call SaveGroupHandle(udg_UnitTypeTable, 'O00U', 0, udg_RoyalCommanders)
	call SaveGroupHandle(udg_UnitTypeTable, 'O00T', 0, udg_TideHunters)
	call SaveGroupHandle(udg_UnitTypeTable, 'N02F', 0, udg_SunkenEmpresses)
	call SaveGroupHandle(udg_UnitTypeTable, 'N02G', 0, udg_MyrmidonCommanders)
endfunction
function InitMMDNames takes nothing returns nothing

	//
	// ----------------------- Setup MMD Hero Names ----------------------- //
	//

	call SaveStr(udg_MMD_HeroNamesTable, 'H01F', 0, "Paladin")
	call SaveStr(udg_MMD_HeroNamesTable, 'H01R', 0, "Paladin") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'H01S', 0, "Paladin") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'H01I', 0, "Archmage")
	call SaveStr(udg_MMD_HeroNamesTable, 'H01V', 0, "Archmage") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'H01T', 0, "Archmage") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'H01W', 0, "Archmage") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'H01J', 0, "Mountain King")
	call SaveStr(udg_MMD_HeroNamesTable, 'H01X', 0, "Mountain King") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'H01L', 0, "Blood Mage")
	call SaveStr(udg_MMD_HeroNamesTable, 'H01Y', 0, "Blood Mage") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'H01Z', 0, "Blood Mage") // Skin

	call SaveStr(udg_MMD_HeroNamesTable, 'O002', 0, "Blademaster")
	call SaveStr(udg_MMD_HeroNamesTable, 'N00X', 0, "Blademaster") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'N00E', 0, "Blademaster") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'N00B', 0, "Blademaster") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'N00C', 0, "Blademaster") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'O003', 0, "Far Seer")
	call SaveStr(udg_MMD_HeroNamesTable, 'O007', 0, "Far Seer") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'O008', 0, "Far Seer") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'O004', 0, "Tauren Chieftain")
	call SaveStr(udg_MMD_HeroNamesTable, 'O009', 0, "Tauren Chieftain") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'O005', 0, "Shadow Hunter")
	call SaveStr(udg_MMD_HeroNamesTable, 'O00A', 0, "Shadow Hunter") // Skin

	call SaveStr(udg_MMD_HeroNamesTable, 'U005', 0, "Death Knight")
	call SaveStr(udg_MMD_HeroNamesTable, 'H00Y', 0, "Death Knight") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'H010', 0, "Death Knight") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'U006', 0, "Lich")
	call SaveStr(udg_MMD_HeroNamesTable, 'U003', 0, "Lich") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'U007', 0, "Dreadlord")
	call SaveStr(udg_MMD_HeroNamesTable, 'U00A', 0, "Dreadlord") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'U009', 0, "Dreadlord") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'U008', 0, "Crypt Lord")
	call SaveStr(udg_MMD_HeroNamesTable, 'U00B', 0, "Crypt Lord") // Skin

	call SaveStr(udg_MMD_HeroNamesTable, 'E00H', 0, "Keeper of the Grove")
	call SaveStr(udg_MMD_HeroNamesTable, 'E00M', 0, "Keeper of the Grove") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'E00N', 0, "Keeper of the Grove") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'E00O', 0, "Keeper of the Grove") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'E00I', 0, "Priestess of the Moon")
	call SaveStr(udg_MMD_HeroNamesTable, 'E00P', 0, "Priestess of the Moon") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'E00J', 0, "Demon Hunter")
	call SaveStr(udg_MMD_HeroNamesTable, 'E00Q', 0, "Demon Hunter") //Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'E00K', 0, "Warden")
	call SaveStr(udg_MMD_HeroNamesTable, 'E00S', 0, "Warden") // Skin
	call SaveStr(udg_MMD_HeroNamesTable, 'E00T', 0, "Warden") // Skin

	call SaveStr(udg_MMD_HeroNamesTable, 'N012', 0, "Alchemist")
	call SaveStr(udg_MMD_HeroNamesTable, 'N013', 0, "Sea Witch")
	call SaveStr(udg_MMD_HeroNamesTable, 'N014', 0, "Tinker")
	call SaveStr(udg_MMD_HeroNamesTable, 'N015', 0, "Beastmaster")
	call SaveStr(udg_MMD_HeroNamesTable, 'N016', 0, "Brewmaster")
	call SaveStr(udg_MMD_HeroNamesTable, 'N017', 0, "Dark Ranger")
	call SaveStr(udg_MMD_HeroNamesTable, 'N018', 0, "Firelord")
	call SaveStr(udg_MMD_HeroNamesTable, 'N019', 0, "Pit Lord")


	// --- CUSTOM RACES --- //

	call SaveStr(udg_MMD_HeroNamesTable, 'H01D', 0, "Mage")
	call SaveStr(udg_MMD_HeroNamesTable, 'H031', 0, "High Wizard")
	call SaveStr(udg_MMD_HeroNamesTable, 'H041', 0, "Elementalist")
	call SaveStr(udg_MMD_HeroNamesTable, 'H033', 0, "Thaumaturge")

	call SaveStr(udg_MMD_HeroNamesTable, 'O00Q', 0, "Phoenix Assassin")
	call SaveStr(udg_MMD_HeroNamesTable, 'H03R', 0, "Sentinel Commander")
	call SaveStr(udg_MMD_HeroNamesTable, 'H03S', 0, "Blood Knight")
	call SaveStr(udg_MMD_HeroNamesTable, 'H03T', 0, "Sunreaver")
	
	call SaveStr(udg_MMD_HeroNamesTable, 'U01M', 0, "Reaper")
	call SaveStr(udg_MMD_HeroNamesTable, 'U01O', 0, "Deathstalker")
	call SaveStr(udg_MMD_HeroNamesTable, 'U01N', 0, "Banshee Maiden")
	call SaveStr(udg_MMD_HeroNamesTable, 'U01P', 0, "Exterminator")
	
	call SaveStr(udg_MMD_HeroNamesTable, 'U00V', 0, "Royal Commander")
	call SaveStr(udg_MMD_HeroNamesTable, 'U00W', 0, "Tide Hunter")
	call SaveStr(udg_MMD_HeroNamesTable, 'N002', 0, "Sunken Empress")
	call SaveStr(udg_MMD_HeroNamesTable, 'N001', 0, "Myrmidon Commander")
		

endfunction

function MenuProgression takes nothing returns nothing
    local integer p= GetConvertedPlayerId(GetTriggerPlayer())
    local integer r= s__udg_PlayerRace[p]
    local integer i
    local integer endIndex

    set isVisibleAbilityMenu[p]=false
    set isVisibleNeutralAbilityMenu[p]=false

    set i=1
    set endIndex=9
    loop
        exitwhen i > endIndex
        if ( s__frameBtnUnit[(r)*(9)+i] != null ) then
            if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                call BlzFrameSetVisible(s__frameBtnUnit[(r)*(9)+i], true)
            endif
        endif
        set i=i + 1
    endloop

    if ( s__isVisibleProgressionMenu[p] == false ) then
        if ( GetLocalPlayer() == GetTriggerPlayer() ) then
            call BlzFrameSetVisible(progressionMenu, true)
            call BlzFrameSetVisible(abilityMenu[r], false)
            call BlzFrameSetVisible(neutralAbilityMenu, false)
        endif
        set s__isVisibleProgressionMenu[p]= true
    else
        if ( GetLocalPlayer() == GetTriggerPlayer() ) then
            call BlzFrameSetVisible(progressionMenu, false)
            call BlzFrameSetVisible(progressionMenuDialog, false)
        endif
        set s__isVisibleProgressionMenu[p]= false
    endif

    if ( GetLocalPlayer() == GetTriggerPlayer() ) then
        call BlzFrameSetEnable(BlzGetTriggerFrame(), false)
        call BlzFrameSetEnable(BlzGetTriggerFrame(), true)
    endif
endfunction

function CloseSkinDialog takes nothing returns nothing
    if ( GetLocalPlayer() == GetTriggerPlayer() ) then
        call BlzFrameSetVisible(progressionMenuDialog, false)
        call BlzFrameSetVisible(frameTextSkin, false)
    endif
endfunction

function EquipSkinAction takes nothing returns nothing
    local integer p= GetConvertedPlayerId(GetTriggerPlayer())
    local unit u= GetEnumUnit()
    local location loc= GetUnitLoc(u)

    local effect eff= AddSpecialEffectLocBJ(loc, "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdl")
    call DestroyEffectBJ(eff)
    call BlzSetUnitSkin(GetEnumUnit(), s__udg_TableUnitTypes[selectedSkin[p]])
endfunction

function EquipSkinCondition takes nothing returns boolean
    local integer p= GetConvertedPlayerId(GetTriggerPlayer())

    return ( GetUnitUserData(GetFilterUnit()) == selectedCustomValue[p] and GetUnitUserData(GetFilterUnit()) != 0 )
endfunction

function EquipSkin takes nothing returns nothing
    local integer p= GetConvertedPlayerId(GetTriggerPlayer())
    local integer r= s__udg_PlayerRace[p]
    local integer i
    local integer endIndex
    local real xpos
    local group unitGroup

    call StartTimerBJ(s__udg_SkinEquipTimer[p], false, 10) // start skin equip cooldown

    // actual saved value to the savecode
    if ( r == 1 ) then
        set s__equippedSkinHum[(p)*(5)+selectedUnitType[p]]= selectedSkinBtn[p]
    elseif ( r == 2 ) then
        set s__equippedSkinOrc[(p)*(5)+selectedUnitType[p]]= selectedSkinBtn[p]
    elseif ( r == 3 ) then
        set s__equippedSkinUnd[(p)*(5)+selectedUnitType[p]]= selectedSkinBtn[p]
    elseif ( r == 4 ) then
        set s__equippedSkinNig[(p)*(5)+selectedUnitType[p]]= selectedSkinBtn[p]
    endif

    if ( GetLocalPlayer() == GetTriggerPlayer() ) then
        call BlzFrameSetEnable(btnEquipSkin, false)
        call BlzFrameSetVisible(frameSkinTimer, true)
    endif

    // change skin highlight location
    set xpos=0.37 + ( 0.04 * selectedSkinBtn[p] ) - 0.04
    if ( GetLocalPlayer() == GetTriggerPlayer() ) then
        call BlzFrameSetAbsPoint(s__frameSkinHighlight[(r)*(9)+selectedUnitType[p]], FRAMEPOINT_CENTER, xpos, 0.36)
    endif

    set unitGroup=GetUnitsInRectMatching(s__udg_BuildRegion[p], Condition(function EquipSkinCondition))
    call ForGroupBJ(unitGroup, function EquipSkinAction)
    call DestroyGroup(unitGroup)
endfunction

function OpenSkinSelection takes nothing returns nothing
    local integer p= GetConvertedPlayerId(GetTriggerPlayer())
    local integer r= s__udg_PlayerRace[p]
    local integer i
    local integer endIndex
    local integer z
    local integer endIndex1

    if ( GetLocalPlayer() == GetTriggerPlayer() ) then
        call BlzFrameSetVisible(progressionMenuDialog, true)
        call BlzFrameSetEnable(btnEquipSkin, false)
        call BlzFrameSetVisible(frameTextSkin, false)
    endif

    // show appropriate skins

    set i=1
    set endIndex=9
    loop
        exitwhen i > endIndex
        if ( BlzGetTriggerFrame() == s__frameBtnUnit[(r)*(9)+i] ) then
            set selectedUnitType[p]=i
            if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                call BlzFrameSetVisible(s__frameSkinHighlight[(r)*(9)+i], true)
            endif

            set z=1
            set endIndex1=6
            loop
                exitwhen z > endIndex1
                if ( r == 1 and s__frameBtnSkinHum[(i)*(5)+z] != null ) then
                    if ( s__playerLevels[(p)*(4)+r] >= s__MultidimensionalArray__Type__get_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((skinLevelRequirement) )),( (r))))) )),( (i)))),z)) and GetLocalPlayer() == GetTriggerPlayer() ) then // INLINED!!
                        call BlzFrameSetVisible(s__frameBtnSkinHum[(i)*(5)+z], true) // available skin
                    else
                        if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                            call BlzFrameSetVisible(s__MultidimensionalArray__Type__get_framehandle(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameSkinDisabled) )),( (r))))) )),( (i)))),z)), true) // locked skin // INLINED!!
                        endif
                    endif
                endif
                if ( r == 2 and s__frameBtnSkinOrc[(i)*(5)+z] != null ) then
                    if ( s__playerLevels[(p)*(4)+r] >= s__MultidimensionalArray__Type__get_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((skinLevelRequirement) )),( (r))))) )),( (i)))),z)) and GetLocalPlayer() == GetTriggerPlayer() ) then // INLINED!!
                        call BlzFrameSetVisible(s__frameBtnSkinOrc[(i)*(5)+z], true) // available skin
                    else
                        if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                            call BlzFrameSetVisible(s__MultidimensionalArray__Type__get_framehandle(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameSkinDisabled) )),( (r))))) )),( (i)))),z)), true) // locked skin // INLINED!!
                        endif
                    endif
                endif
                if ( r == 3 and s__frameBtnSkinUnd[(i)*(5)+z] != null ) then
                    if ( s__playerLevels[(p)*(4)+r] >= s__MultidimensionalArray__Type__get_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((skinLevelRequirement) )),( (r))))) )),( (i)))),z)) and GetLocalPlayer() == GetTriggerPlayer() ) then // INLINED!!
                        call BlzFrameSetVisible(s__frameBtnSkinUnd[(i)*(5)+z], true) // available skin
                    else
                        if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                            call BlzFrameSetVisible(s__MultidimensionalArray__Type__get_framehandle(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameSkinDisabled) )),( (r))))) )),( (i)))),z)), true) // locked skin // INLINED!!
                        endif
                    endif
                endif
                if ( r == 4 and s__frameBtnSkinNig[(i)*(5)+z] != null ) then
                    if ( s__playerLevels[(p)*(4)+r] >= s__MultidimensionalArray__Type__get_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((skinLevelRequirement) )),( (r))))) )),( (i)))),z)) and GetLocalPlayer() == GetTriggerPlayer() ) then // INLINED!!
                        call BlzFrameSetVisible(s__frameBtnSkinNig[(i)*(5)+z], true) // available skin
                    else
                        if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                            call BlzFrameSetVisible(s__MultidimensionalArray__Type__get_framehandle(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameSkinDisabled) )),( (r))))) )),( (i)))),z)), true) // locked skin // INLINED!!
                        endif
                    endif
                endif
                
                set z=z + 1
            endloop
        else
            if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                call BlzFrameSetVisible(s__frameSkinHighlight[(r)*(9)+i], false)
            endif
            set z=1
            set endIndex1=6
            loop
                exitwhen z > endIndex1
                if ( r == 1 and s__frameBtnSkinHum[(i)*(5)+z] != null and GetLocalPlayer() == GetTriggerPlayer() ) then
                    call BlzFrameSetVisible(s__frameBtnSkinHum[(i)*(5)+z], false)
                    call BlzFrameSetVisible(s__MultidimensionalArray__Type__get_framehandle(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameSkinDisabled) )),( (r))))) )),( (i)))),z)), false) // INLINED!!
                endif
                if ( r == 2 and s__frameBtnSkinOrc[(i)*(5)+z] != null and GetLocalPlayer() == GetTriggerPlayer() ) then
                    call BlzFrameSetVisible(s__frameBtnSkinOrc[(i)*(5)+z], false)
                    call BlzFrameSetVisible(s__MultidimensionalArray__Type__get_framehandle(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameSkinDisabled) )),( (r))))) )),( (i)))),z)), false) // INLINED!!
                endif
                if ( r == 3 and s__frameBtnSkinUnd[(i)*(5)+z] != null and GetLocalPlayer() == GetTriggerPlayer() ) then
                    call BlzFrameSetVisible(s__frameBtnSkinUnd[(i)*(5)+z], false)
                    call BlzFrameSetVisible(s__MultidimensionalArray__Type__get_framehandle(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameSkinDisabled) )),( (r))))) )),( (i)))),z)), false) // INLINED!!
                endif
                if ( r == 4 and s__frameBtnSkinNig[(i)*(5)+z] != null and GetLocalPlayer() == GetTriggerPlayer() ) then
                    call BlzFrameSetVisible(s__frameBtnSkinNig[(i)*(5)+z], false)
                    call BlzFrameSetVisible(s__MultidimensionalArray__Type__get_framehandle(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameSkinDisabled) )),( (r))))) )),( (i)))),z)), false) // INLINED!!
                endif
                
                set z=z + 1
            endloop
        endif

        set i=i + 1
    endloop

endfunction

function SelectSkin takes nothing returns nothing
    local integer p= GetConvertedPlayerId(GetTriggerPlayer())
    local integer r= s__udg_PlayerRace[p]
    local integer i
    local integer endIndex
    local integer z
    local integer endIndex1
    local string text

    set i=1
    set endIndex=9
    loop
        exitwhen i > endIndex
        
        set z=1
        set endIndex1=6
        loop
            exitwhen z > endIndex1
            if ( r == 1 and BlzGetTriggerFrame() == s__frameBtnSkinHum[(i)*(5)+z] ) then
                set selectedSkin[p]=s__MultidimensionalArray__Type__get_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (r))))) )),( (i)))),z)) // INLINED!!
                set selectedSkinBtn[p]=z
                set selectedCustomValue[p]=i

                if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                    call BlzFrameSetVisible(frameTextSkin, true)
                    call BlzFrameSetText(frameTextSkin, s__MultidimensionalArray__Type__get_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (r))))) )),( (i)))),z))) // INLINED!!
                endif

                if ( TimerGetRemaining(s__udg_SkinEquipTimer[p]) <= 0 ) then
                    if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                        call BlzFrameSetEnable(btnEquipSkin, true)
                    endif
                endif
            endif
            if ( r == 2 and BlzGetTriggerFrame() == s__frameBtnSkinOrc[(i)*(5)+z] ) then
                set selectedSkin[p]=s__MultidimensionalArray__Type__get_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (r))))) )),( (i)))),z)) // INLINED!!
                set selectedSkinBtn[p]=z
                set selectedCustomValue[p]=i

                if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                    call BlzFrameSetVisible(frameTextSkin, true)
                    call BlzFrameSetText(frameTextSkin, s__MultidimensionalArray__Type__get_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (r))))) )),( (i)))),z))) // INLINED!!
                endif

                if ( TimerGetRemaining(s__udg_SkinEquipTimer[p]) <= 0 ) then
                    if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                        call BlzFrameSetEnable(btnEquipSkin, true)
                    endif
                endif
            endif
            if ( r == 3 and BlzGetTriggerFrame() == s__frameBtnSkinUnd[(i)*(5)+z] ) then
                set selectedSkin[p]=s__MultidimensionalArray__Type__get_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (r))))) )),( (i)))),z)) // INLINED!!
                set selectedSkinBtn[p]=z
                set selectedCustomValue[p]=i

                if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                    call BlzFrameSetVisible(frameTextSkin, true)
                    call BlzFrameSetText(frameTextSkin, s__MultidimensionalArray__Type__get_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (r))))) )),( (i)))),z))) // INLINED!!
                endif

                if ( TimerGetRemaining(s__udg_SkinEquipTimer[p]) <= 0 ) then
                    if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                        call BlzFrameSetEnable(btnEquipSkin, true)
                    endif
                endif
            endif
            if ( r == 4 and BlzGetTriggerFrame() == s__frameBtnSkinNig[(i)*(5)+z] ) then
                set selectedSkin[p]=s__MultidimensionalArray__Type__get_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (r))))) )),( (i)))),z)) // INLINED!!
                set selectedSkinBtn[p]=z
                set selectedCustomValue[p]=i

                if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                    call BlzFrameSetVisible(frameTextSkin, true)
                    call BlzFrameSetText(frameTextSkin, s__MultidimensionalArray__Type__get_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (r))))) )),( (i)))),z))) // INLINED!!
                endif

                if ( TimerGetRemaining(s__udg_SkinEquipTimer[p]) <= 0 ) then
                    if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                        call BlzFrameSetEnable(btnEquipSkin, true)
                    endif
                endif
            endif

            set z=z + 1
        endloop

        set i=i + 1
    endloop

endfunction

function HoverDisabledSkin takes nothing returns nothing
    local integer p= GetConvertedPlayerId(GetTriggerPlayer())
    local integer r= s__udg_PlayerRace[p]
    local integer i
    local integer endIndex
    local integer z
    local integer endIndex1
    local string text

    set i=1
    set endIndex=9
    loop
        exitwhen i > endIndex
        
        set z=1
        set endIndex1=6
        loop
            exitwhen z > endIndex1
            if ( BlzGetTriggerFrame() == s__MultidimensionalArray__Type__get_framehandle(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameSkinDisabled) )),( (r))))) )),( (i)))),z)) ) then // INLINED!!
                set text="Requires " + s__raceName[r] + " level " + I2S(s__MultidimensionalArray__Type__get_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((skinLevelRequirement) )),( (r))))) )),( (i)))),z))) // INLINED!!
                if ( GetLocalPlayer() == GetTriggerPlayer() ) then
                    call BlzFrameSetVisible(frameTextSkin, true)
                    call BlzFrameSetText(frameTextSkin, text)
                endif
            endif

            set z=z + 1
        endloop

        set i=i + 1
    endloop
endfunction

function UpdateSkinTimer takes nothing returns nothing
    local integer p
    local integer endIndex
    local integer time

    set p=1
    set endIndex=6
    loop
        exitwhen p > endIndex
        if ( TimerGetRemaining(s__udg_SkinEquipTimer[p]) > 0 ) then
            set time=R2I(TimerGetRemaining(s__udg_SkinEquipTimer[p]))
            if ( GetLocalPlayer() == Player(p - 1) ) then
                call BlzFrameSetText(frameSkinTimer, "Cooldown: " + I2S(time))
            endif
        endif
        set p=p + 1
    endloop

endfunction

function SkinTimerExpire takes nothing returns nothing
    local integer p
    local integer endIndex

    set p=1
    set endIndex=6
    loop
        exitwhen p > endIndex
        if ( GetExpiredTimer() == s__udg_SkinEquipTimer[p] ) then
            if ( GetLocalPlayer() == Player(p - 1) ) then
                call BlzFrameSetVisible(frameSkinTimer, false)
            endif
        endif
        set p=p + 1
    endloop
endfunction 

function LevelUpBlob takes nothing returns nothing
    local integer p= 1
    local integer endIndex= 6
    loop
        exitwhen p > endIndex
        if ( GetExpiredTimer() == s__udg_LevelUpTimerBlob[p] ) then
            if ( GetLocalPlayer() == Player(p - 1) ) then
                call BlzFrameSetAlpha(frameLevelUpBlob, 255 - ( s__udg_LevelUpTimerBlobCounter[p] * 5 ))
            endif

            if ( s__udg_LevelUpTimerBlobCounter[p] >= 51 ) then
                set s__udg_LevelUpTimerBlobCounter[p]= 0
                if ( GetLocalPlayer() == Player(p - 1) ) then
                    call BlzFrameSetVisible(frameLevelUpBlob, false)
                endif
            else
                set s__udg_LevelUpTimerBlobCounter[p]= s__udg_LevelUpTimerBlobCounter[p] + 1
                call StartTimerBJ(s__udg_LevelUpTimerBlob[p], false, 0.05)
            endif
        endif

        set p=p + 1
    endloop
endfunction

function LevelUptext takes nothing returns nothing
    local integer p= 1
    local integer endIndex= 6
    loop
        exitwhen p > endIndex
        if ( GetExpiredTimer() == s__udg_LevelUpTimerText[p] ) then
            if ( GetLocalPlayer() == Player(p - 1) ) then
                call BlzFrameSetAlpha(frameLevelUpText, 255 - ( s__udg_LevelUpTimerTextCounter[p] ))
            //BlzFrameSetSize(frameLevelUpText, 0.22, 0.057)
            endif

            if ( s__udg_LevelUpTimerTextCounter[p] >= 255 ) then
                set s__udg_LevelUpTimerTextCounter[p]= 0
                if ( GetLocalPlayer() == Player(p - 1) ) then
                    call BlzFrameSetVisible(frameLevelUpText, false)
                //BlzFrameSetSize(frameLevelUpText, 0.22, 0.057)
                endif
            else
                set s__udg_LevelUpTimerTextCounter[p]= s__udg_LevelUpTimerTextCounter[p] + 2
                call StartTimerBJ(s__udg_LevelUpTimerText[p], false, 0.05)
            endif
        endif
        set p=p + 1
    endloop
endfunction

function ProgressionSetup takes nothing returns nothing
    local string array raceName
    local integer i
    local integer endIndex
    local integer p
    local integer endIndex1
    local integer r
    local integer endIndex2
    local integer u
    local string array tempTex
    local trigger trig
    local string array textMatchStats
    local real yPos
    local trigger trigCloseDialog
    local framehandle l__frameSkinsText
    local trigger trigEquip
    local integer tmpLevelReq
    local integer s
    local real frameXPOS
    local real frameYPOS
    local real frameXPOS2
    local real frameXPOSMod
    local integer incr
    local framehandle imgFrame
    local integer z
    local trigger trig2
    local trigger trig3
    local trigger l__trigTimer
    local trigger trigExpireTimer
    local framehandle tmpFrame
    local framehandle tmpFrame2



    // ---------- SETUP SKINS ---------- //
    

    // Human 
	set s__udg_TableBuildingTypes[1]= 'h000'
	set s__udg_TableUnitTypes[1]= 'hfoo' // Footman
	call SaveInteger(s__udg_SkinTable[1], 1, 1, 'h000')
	call SaveInteger(udg_CustomValueSkinTable, 'h000', 1, 1)
	set s__udg_TableBuildingTypes[4]= 'h001'
	set s__udg_TableUnitTypes[4]= 'hrif' // Rifleman
	set s__udg_TableBuildingTypes[2]= 'h002'
	set s__udg_TableUnitTypes[2]= 'hkni' // Knight
	set s__udg_TableBuildingTypes[9]= 'h003'
	set s__udg_TableUnitTypes[9]= 'hmtm' // Mortar Team
	set s__udg_TableBuildingTypes[5]= 'h01Q'
	set s__udg_TableUnitTypes[5]= 'hsor' // Sorceress
	set s__udg_TableBuildingTypes[6]= 'h01P'
	set s__udg_TableUnitTypes[6]= 'hmpr' // Priest
	call SaveInteger(s__udg_SkinTable[1], 2, 1, 'h01P')
	call SaveInteger(udg_CustomValueSkinTable, 'h01P', 1, 2)
	set s__udg_TableBuildingTypes[7]= 'h006'
	set s__udg_TableUnitTypes[7]= 'hspt' // Spellbreaker
	set s__udg_TableBuildingTypes[8]= 'h007'
	set s__udg_TableUnitTypes[8]= 'hgyr' // Flying Machine
	set s__udg_TableBuildingTypes[3]= 'h008'
	set s__udg_TableUnitTypes[3]= 'hmtt' // Siege Engine
	set s__udg_TableBuildingTypes[10]= 'h009'
	set s__udg_TableUnitTypes[10]= 'hgry' // Gryphon Rider
	set s__udg_TableBuildingTypes[11]= 'h00A'
	set s__udg_TableUnitTypes[11]= 'hdhw' // Dragonhawk Rider
	call SaveInteger(s__udg_SkinTable[1], 3, 1, 'h00A')
	call SaveInteger(udg_CustomValueSkinTable, 'h00A', 1, 3)

	// Orc 
	set s__udg_TableBuildingTypes[12]= 'h00B'
	set s__udg_TableUnitTypes[12]= 'ogru' // Grunt
	call SaveInteger(s__udg_SkinTable[2], 1, 1, 'h00B')
	call SaveInteger(udg_CustomValueSkinTable, 'h00B', 2, 1)
	set s__udg_TableBuildingTypes[13]= 'h00D'
	set s__udg_TableUnitTypes[13]= 'ohun' // Headhunter
	call SaveInteger(s__udg_SkinTable[2], 2, 1, 'h00D')
	call SaveInteger(udg_CustomValueSkinTable, 'h00D', 2, 2)
	set s__udg_TableBuildingTypes[14]= 'h00E'
	set s__udg_TableUnitTypes[14]= 'orai' // Raider
	call SaveInteger(s__udg_SkinTable[2], 4, 1, 'h00E')
	call SaveInteger(udg_CustomValueSkinTable, 'h00E', 2, 4)
	set s__udg_TableBuildingTypes[15]= 'h00F'
	set s__udg_TableUnitTypes[15]= 'otau' // Tauren
	set s__udg_TableBuildingTypes[22]= 'h00G'
	set s__udg_TableUnitTypes[22]= 'ocat' // Demolisher
	set s__udg_TableBuildingTypes[21]= 'h00H'
	set s__udg_TableUnitTypes[21]= 'okod' // Kodo Rider
	call SaveInteger(s__udg_SkinTable[2], 5, 1, 'h00H')
	call SaveInteger(udg_CustomValueSkinTable, 'h00H', 2, 5)
	set s__udg_TableBuildingTypes[18]= 'h00I'
	set s__udg_TableUnitTypes[18]= 'owyv' // Wyvern
	set s__udg_TableBuildingTypes[19]= 'h00J'
	set s__udg_TableUnitTypes[19]= 'otbr' // Batrider
	set s__udg_TableBuildingTypes[20]= 'h00K'
	set s__udg_TableUnitTypes[20]= 'odoc' // Witch Doctor
	call SaveInteger(s__udg_SkinTable[2], 3, 1, 'h00K')
	call SaveInteger(udg_CustomValueSkinTable, 'h00K', 2, 3)
	set s__udg_TableBuildingTypes[17]= 'h00L'
	set s__udg_TableUnitTypes[17]= 'oshm' // Shaman
	set s__udg_TableBuildingTypes[16]= 'h00M'
	set s__udg_TableUnitTypes[16]= 'ospw' // Spirit Walker

	// Undead //
	set s__udg_TableBuildingTypes[23]= 'h00N'
	set s__udg_TableUnitTypes[23]= 'ugho' // Ghoul
	call SaveInteger(s__udg_SkinTable[3], 1, 1, 'h00N')
	call SaveInteger(udg_CustomValueSkinTable, 'h00N', 3, 1)
	set s__udg_TableBuildingTypes[24]= 'h00O'
	set s__udg_TableUnitTypes[24]= 'ucry' // Crypt Fiend
	call SaveInteger(s__udg_SkinTable[3], 2, 1, 'h00O')
	call SaveInteger(udg_CustomValueSkinTable, 'h00O', 3, 2)
	set s__udg_TableBuildingTypes[25]= 'h00P'
	set s__udg_TableUnitTypes[25]= 'uabo' // Abomination
	set s__udg_TableBuildingTypes[26]= 'h00Q'
	set s__udg_TableUnitTypes[26]= 'umtw' // Meat Wagon
	set s__udg_TableBuildingTypes[27]= 'h00R'
	set s__udg_TableUnitTypes[27]= 'ugar' // Gargoyle
	set s__udg_TableBuildingTypes[28]= 'h00S'
	set s__udg_TableUnitTypes[28]= 'uban' // Banshee
	call SaveInteger(s__udg_SkinTable[3], 4, 1, 'h00S')
	call SaveInteger(udg_CustomValueSkinTable, 'h00S', 3, 4)
	set s__udg_TableBuildingTypes[29]= 'h00T'
	set s__udg_TableUnitTypes[29]= 'unec' // Necromancer
	call SaveInteger(s__udg_SkinTable[3], 3, 1, 'h00T')
	call SaveInteger(udg_CustomValueSkinTable, 'h00T', 3, 3)
	set s__udg_TableBuildingTypes[30]= 'h00U'
	set s__udg_TableUnitTypes[30]= 'uobs' // Obsidian Statue
	set s__udg_TableBuildingTypes[31]= 'h00V'
	set s__udg_TableUnitTypes[31]= 'ufro' // Frost Wyrm
	call SaveInteger(s__udg_SkinTable[3], 5, 1, 'h00V')
	call SaveInteger(udg_CustomValueSkinTable, 'h00V', 3, 5)
	set s__udg_TableBuildingTypes[43]= 'h00X'
	set s__udg_TableUnitTypes[43]= 'ubsp' // Destroyer
	set s__udg_TableBuildingTypes[44]= 'h00W'
	set s__udg_TableUnitTypes[44]= 'ushd' // Shade

	// Night Elf //
	set s__udg_TableBuildingTypes[35]= 'e000'
	set s__udg_TableUnitTypes[35]= 'earc' // Archer
	call SaveInteger(s__udg_SkinTable[4], 1, 1, 'e000')
	call SaveInteger(udg_CustomValueSkinTable, 'e000', 4, 1)
	set s__udg_TableBuildingTypes[33]= 'e001'
	set s__udg_TableUnitTypes[33]= 'esen' // Huntress
	call SaveInteger(s__udg_SkinTable[4], 2, 1, 'e001')
	call SaveInteger(udg_CustomValueSkinTable, 'e001', 4, 2)
	set s__udg_TableBuildingTypes[34]= 'e002'
	set s__udg_TableUnitTypes[34]= 'edry' // Dryad
	set s__udg_TableBuildingTypes[41]= 'e003'
	set s__udg_TableUnitTypes[41]= 'ebal' // Glaive Thrower
	call SaveInteger(s__udg_SkinTable[4], 3, 1, 'e003')
	call SaveInteger(udg_CustomValueSkinTable, 'e003', 4, 3)
	set s__udg_TableBuildingTypes[36]= 'e004'
	set s__udg_TableUnitTypes[36]= 'ehip' // Hippogryph
	set s__udg_TableBuildingTypes[37]= 'e005'
	set s__udg_TableUnitTypes[37]= 'ehpr' // Hippogryph Rider
	set s__udg_TableBuildingTypes[38]= 'e006'
	set s__udg_TableUnitTypes[38]= 'echm' // Chimaera
	set s__udg_TableBuildingTypes[39]= 'e007'
	set s__udg_TableUnitTypes[39]= 'edot' // Druid of the Talon
	set s__udg_TableBuildingTypes[40]= 'e008'
	set s__udg_TableUnitTypes[40]= 'edoc' // Druid of the Claw
	set s__udg_TableBuildingTypes[32]= 'e009'
	set s__udg_TableUnitTypes[32]= 'emtg' // Mountain Giant
	call SaveInteger(s__udg_SkinTable[4], 4, 1, 'e009')
	call SaveInteger(udg_CustomValueSkinTable, 'e009', 4, 4)
	set s__udg_TableBuildingTypes[42]= 'e00A'
	set s__udg_TableUnitTypes[42]= 'efdr' // Faerie Dragon

	// Heroes
	// Human
	set s__udg_TableBuildingTypes[45]= 'H01F'
	set s__udg_TableUnitTypes[45]= 'Hpal' // Paladin
	call SaveInteger(s__udg_SkinTable[1], 4, 1, 'H01F')
	call SaveInteger(udg_CustomValueSkinTable, 'H01F', 1, 4)
	set s__udg_TableBuildingTypes[46]= 'H01I'
	set s__udg_TableUnitTypes[46]= 'Hamg' // Archmage
	call SaveInteger(s__udg_SkinTable[1], 5, 1, 'H01I')
	call SaveInteger(udg_CustomValueSkinTable, 'H01I', 1, 5)
	set s__udg_TableBuildingTypes[47]= 'H01J'
	set s__udg_TableUnitTypes[47]= 'Hmkg' // Mountain King
	call SaveInteger(s__udg_SkinTable[1], 6, 1, 'H01J')
	call SaveInteger(udg_CustomValueSkinTable, 'H01J', 1, 6)
	set s__udg_TableBuildingTypes[48]= 'H01L'
	set s__udg_TableUnitTypes[48]= 'Hblm' // Blood Mage
	call SaveInteger(s__udg_SkinTable[1], 7, 1, 'H01L')
	call SaveInteger(udg_CustomValueSkinTable, 'H01L', 1, 7)

	// Orc
	set s__udg_TableBuildingTypes[49]= 'O002'
	set s__udg_TableUnitTypes[49]= 'Obla' // Blademaster
	call SaveInteger(s__udg_SkinTable[2], 6, 1, 'O002')
	call SaveInteger(udg_CustomValueSkinTable, 'O002', 2, 6)
	set s__udg_TableBuildingTypes[50]= 'O003'
	set s__udg_TableUnitTypes[50]= 'Ofar' // Far Seer
	call SaveInteger(s__udg_SkinTable[2], 7, 1, 'O003')
	call SaveInteger(udg_CustomValueSkinTable, 'O003', 2, 7)
	set s__udg_TableBuildingTypes[51]= 'O004'
	set s__udg_TableUnitTypes[51]= 'Otch' // Tauren Chieftain
	call SaveInteger(s__udg_SkinTable[2], 8, 1, 'O004')
	call SaveInteger(udg_CustomValueSkinTable, 'O004', 2, 8)
	set s__udg_TableBuildingTypes[52]= 'O005'
	set s__udg_TableUnitTypes[52]= 'Oshd' // Shadow Hunter
	call SaveInteger(s__udg_SkinTable[2], 9, 1, 'O005')
	call SaveInteger(udg_CustomValueSkinTable, 'O005', 2, 9)

	// Undead
	set s__udg_TableBuildingTypes[53]= 'U005'
	set s__udg_TableUnitTypes[53]= 'Udea' // Death Knight
	call SaveInteger(s__udg_SkinTable[3], 6, 1, 'U005')
	call SaveInteger(udg_CustomValueSkinTable, 'U005', 3, 6)
	set s__udg_TableBuildingTypes[54]= 'U006'
	set s__udg_TableUnitTypes[54]= 'Ulic' // Lich
	call SaveInteger(s__udg_SkinTable[3], 7, 1, 'U006')
	call SaveInteger(udg_CustomValueSkinTable, 'U006', 3, 7)
	set s__udg_TableBuildingTypes[55]= 'U007'
	set s__udg_TableUnitTypes[55]= 'Udre' // Dreadlord
	call SaveInteger(s__udg_SkinTable[3], 8, 1, 'U007')
	call SaveInteger(udg_CustomValueSkinTable, 'U007', 3, 8)
	set s__udg_TableBuildingTypes[56]= 'U008'
	set s__udg_TableUnitTypes[56]= 'Ucrl' // Crypt Lord
	call SaveInteger(s__udg_SkinTable[3], 9, 1, 'U008')
	call SaveInteger(udg_CustomValueSkinTable, 'U008', 3, 9)

	// Night Elf
	set s__udg_TableBuildingTypes[57]= 'E00H'
	set s__udg_TableUnitTypes[57]= 'Ekee' // Keeper of the Grove
	call SaveInteger(s__udg_SkinTable[4], 5, 1, 'E00H')
	call SaveInteger(udg_CustomValueSkinTable, 'E00H', 4, 5)
	set s__udg_TableBuildingTypes[58]= 'E00I'
	set s__udg_TableUnitTypes[58]= 'Emoo' // Priestess of the Moon
	call SaveInteger(s__udg_SkinTable[4], 6, 1, 'E00I')
	call SaveInteger(udg_CustomValueSkinTable, 'E00I', 4, 6)
	set s__udg_TableBuildingTypes[59]= 'E00J'
	set s__udg_TableUnitTypes[59]= 'Edem' // Demon Hunter
	call SaveInteger(s__udg_SkinTable[4], 7, 1, 'E00J')
	call SaveInteger(udg_CustomValueSkinTable, 'E00J', 4, 7)
	set s__udg_TableBuildingTypes[60]= 'E00K'
	set s__udg_TableUnitTypes[60]= 'Ewar' // Warden
	call SaveInteger(s__udg_SkinTable[4], 8, 1, 'E00K')
	call SaveInteger(udg_CustomValueSkinTable, 'E00K', 4, 8)

	// Tavern Heroes
	set s__udg_TableBuildingTypes[123]= 'N012'
	set s__udg_TableUnitTypes[123]= 'Nalc' // Alchemist
	set s__udg_TableBuildingTypes[124]= 'N013'
	set s__udg_TableUnitTypes[124]= 'Nngs' // Sea Witch
	set s__udg_TableBuildingTypes[125]= 'N014'
	set s__udg_TableUnitTypes[125]= 'Ntin' // Tinker
	set s__udg_TableBuildingTypes[126]= 'N015'
	set s__udg_TableUnitTypes[126]= 'Nbst' // Beastmaster
	set s__udg_TableBuildingTypes[127]= 'N016'
	set s__udg_TableUnitTypes[127]= 'Npbm' // Brewmaster
	set s__udg_TableBuildingTypes[128]= 'N017'
	set s__udg_TableUnitTypes[128]= 'Nbrn' // Dark Ranger
	set s__udg_TableBuildingTypes[129]= 'N018'
	set s__udg_TableUnitTypes[129]= 'Nfir' // Firelord
	set s__udg_TableBuildingTypes[130]= 'N019'
	set s__udg_TableUnitTypes[130]= 'Nplh' // Pit Lord

    

	// Skins
	// Human
	set s__udg_TableBuildingTypes[61]= 'h004'
	set s__udg_TableUnitTypes[61]= 'hcth' // Footman (Captain)
	call SaveInteger(s__udg_SkinTable[1], 1, 2, 'h004')
	call SaveInteger(udg_CustomValueSkinTable, 'h004', 1, 1)

	set s__udg_TableBuildingTypes[62]= 'h005'
	set s__udg_TableUnitTypes[62]= 'hhes' // Footman (Swordsman)
	call SaveInteger(s__udg_SkinTable[1], 1, 3, 'h005')
	call SaveInteger(udg_CustomValueSkinTable, 'h005', 1, 1)

	set s__udg_TableBuildingTypes[63]= 'n00H'
	set s__udg_TableUnitTypes[63]= 'nbel' // Footman (Blood Elf Lieutenant)
	call SaveInteger(s__udg_SkinTable[1], 1, 4, 'n00H')
	call SaveInteger(udg_CustomValueSkinTable, 'n00H', 1, 1)

	set s__udg_TableBuildingTypes[64]= 'n00I'
	set s__udg_TableUnitTypes[64]= 'njks' // Footman (Jailor Kassan)
	call SaveInteger(s__udg_SkinTable[1], 1, 5, 'n00I')
	call SaveInteger(udg_CustomValueSkinTable, 'n00I', 1, 1)

	set s__udg_TableBuildingTypes[65]= 'n00J'
	set s__udg_TableUnitTypes[65]= 'nemi' // Priest (Emissary)
	call SaveInteger(s__udg_SkinTable[1], 2, 2, 'n00J')
	call SaveInteger(udg_CustomValueSkinTable, 'n00J', 1, 2)

	set s__udg_TableBuildingTypes[66]= 'n00K'
	set s__udg_TableUnitTypes[66]= 'nchp' // Priest (Chaplain)
	call SaveInteger(s__udg_SkinTable[1], 2, 3, 'n00K')
	call SaveInteger(udg_CustomValueSkinTable, 'n00K', 1, 2)

	set s__udg_TableBuildingTypes[67]= 'n00L'
	set s__udg_TableUnitTypes[67]= 'nwiz' // Priest (Apprentice Wizard)
	call SaveInteger(s__udg_SkinTable[1], 2, 4, 'n00L')
	call SaveInteger(udg_CustomValueSkinTable, 'n00L', 1, 2)

	set s__udg_TableBuildingTypes[68]= 'n00M'
	set s__udg_TableUnitTypes[68]= 'nws1' // Dragonhawk Rider (Dragon Hawk)
	call SaveInteger(s__udg_SkinTable[1], 3, 2, 'n00M')
	call SaveInteger(udg_CustomValueSkinTable, 'n00M', 1, 3)

	set s__udg_TableBuildingTypes[69]= 'H01R'
	set s__udg_TableUnitTypes[69]= 'Hart' // Paladin (Arthas)
	call SaveInteger(s__udg_SkinTable[1], 4, 2, 'H01R')
	call SaveInteger(udg_CustomValueSkinTable, 'H01R', 1, 4)

	set s__udg_TableBuildingTypes[70]= 'H01S'
	set s__udg_TableUnitTypes[70]= 'Huth' // Paladin (Uther)
	call SaveInteger(s__udg_SkinTable[1], 4, 3, 'H01S')
	call SaveInteger(udg_CustomValueSkinTable, 'H01S', 1, 4)

	set s__udg_TableBuildingTypes[71]= 'H01T'
	set s__udg_TableUnitTypes[71]= 'Haah' // Archmage (Kelen the Seeker)
	call SaveInteger(s__udg_SkinTable[1], 5, 2, 'H01T')
	call SaveInteger(udg_CustomValueSkinTable, 'H01T', 1, 5)

	set s__udg_TableBuildingTypes[72]= 'H01V'
	set s__udg_TableUnitTypes[72]= 'H01U' // Archmage (Dark Wizard)
	call SaveInteger(s__udg_SkinTable[1], 5, 3, 'H01V')
	call SaveInteger(udg_CustomValueSkinTable, 'H01V', 1, 5)

	set s__udg_TableBuildingTypes[73]= 'H01W'
	set s__udg_TableUnitTypes[73]= 'Hgam' // Archmage (Dark Wizard)
	call SaveInteger(s__udg_SkinTable[1], 5, 4, 'H01W')
	call SaveInteger(udg_CustomValueSkinTable, 'H01W', 1, 5)

	set s__udg_TableBuildingTypes[74]= 'H01X'
	set s__udg_TableUnitTypes[74]= 'Hmbr' // Mountain King (Muradin Bronzebeard)
	call SaveInteger(s__udg_SkinTable[1], 6, 2, 'H01X')
	call SaveInteger(udg_CustomValueSkinTable, 'H01X', 1, 6)

	set s__udg_TableBuildingTypes[75]= 'H01Y'
	set s__udg_TableUnitTypes[75]= 'Hkal' // Blood Mage (Kael)
	call SaveInteger(s__udg_SkinTable[1], 7, 2, 'H01Y')
	call SaveInteger(udg_CustomValueSkinTable, 'H01Y', 1, 7)

	set s__udg_TableBuildingTypes[76]= 'H01Z'
	set s__udg_TableUnitTypes[76]= 'Hjai' // Blood Mage (Jaina)
	call SaveInteger(s__udg_SkinTable[1], 7, 3, 'H01Z')
	call SaveInteger(udg_CustomValueSkinTable, 'H01Z', 1, 7)

	// Orc
	set s__udg_TableBuildingTypes[77]= 'n00N'
	set s__udg_TableUnitTypes[77]= 'nchg' // Grunt (Fel Orc Grunt)
	call SaveInteger(s__udg_SkinTable[2], 1, 2, 'n00N')
	call SaveInteger(udg_CustomValueSkinTable, 'n00N', 2, 1)

	set s__udg_TableBuildingTypes[78]= 'n00O'
	set s__udg_TableUnitTypes[78]= 'nsoc' // Grunt (Skeletal Orc Champion)
	call SaveInteger(s__udg_SkinTable[2], 1, 3, 'n00O')
	call SaveInteger(udg_CustomValueSkinTable, 'n00O', 2, 1)

	set s__udg_TableBuildingTypes[79]= 'n00Q'
	set s__udg_TableUnitTypes[79]= 'nitr' // Headhunter (Ice Troll)
	call SaveInteger(s__udg_SkinTable[2], 2, 2, 'n00Q')
	call SaveInteger(udg_CustomValueSkinTable, 'n00Q', 2, 2)

	set s__udg_TableBuildingTypes[80]= 'n00R'
	set s__udg_TableUnitTypes[80]= 'ndtr' // Headhunter (Dark Troll)
	call SaveInteger(s__udg_SkinTable[2], 2, 3, 'n00R')
	call SaveInteger(udg_CustomValueSkinTable, 'n00R', 2, 2)

	set s__udg_TableBuildingTypes[81]= 'n00P'
	set s__udg_TableUnitTypes[81]= 'nftr' // Headhunter (Forest Troll)
	call SaveInteger(s__udg_SkinTable[2], 2, 4, 'n00P')
	call SaveInteger(udg_CustomValueSkinTable, 'n00P', 2, 2)

	set s__udg_TableBuildingTypes[82]= 'n00S'
	set s__udg_TableUnitTypes[82]= 'nith' // Witch Doctor (Ice Troll High Priest)
	call SaveInteger(s__udg_SkinTable[2], 3, 2, 'n00S')
	call SaveInteger(udg_CustomValueSkinTable, 'n00S', 2, 3)

	set s__udg_TableBuildingTypes[83]= 'n00T'
	set s__udg_TableUnitTypes[83]= 'ndth' // Witch Doctor (Dark Troll High Priest)
	call SaveInteger(s__udg_SkinTable[2], 3, 3, 'n00T')
	call SaveInteger(udg_CustomValueSkinTable, 'n00T', 2, 3)

	set s__udg_TableBuildingTypes[84]= 'n00U'
	set s__udg_TableUnitTypes[84]= 'nfsh' // Witch Doctor (Forest Troll High Priest)
	call SaveInteger(s__udg_SkinTable[2], 3, 4, 'n00U')
	call SaveInteger(udg_CustomValueSkinTable, 'n00U', 2, 3)

	set s__udg_TableBuildingTypes[85]= 'n00V'
	set s__udg_TableUnitTypes[85]= 'nchr' // Raider (Fel Orc Raider)
	call SaveInteger(s__udg_SkinTable[2], 4, 2, 'n00V')
	call SaveInteger(udg_CustomValueSkinTable, 'n00V', 2, 4)

	set s__udg_TableBuildingTypes[86]= 'n00W'
	set s__udg_TableUnitTypes[86]= 'nckb' // Raider (Fel Orc Kodo Beast)
	call SaveInteger(s__udg_SkinTable[2], 5, 2, 'n00W')
	call SaveInteger(udg_CustomValueSkinTable, 'n00W', 2, 5)

	set s__udg_TableBuildingTypes[87]= 'O00B'
	set s__udg_TableUnitTypes[87]= 'Ogrh' // Blademaster (Grom Hellscream)
	call SaveInteger(s__udg_SkinTable[2], 6, 2, 'O00B')
	call SaveInteger(udg_CustomValueSkinTable, 'O00B', 2, 6)

	set s__udg_TableBuildingTypes[88]= 'N00X'
	set s__udg_TableUnitTypes[88]= 'Nbbc' // Blademaster (Blademaster of the Blackrock Clan)
	call SaveInteger(s__udg_SkinTable[2], 6, 3, 'N00X')
	call SaveInteger(udg_CustomValueSkinTable, 'N00X', 2, 6)

	set s__udg_TableBuildingTypes[121]= 'O00C'
	set s__udg_TableUnitTypes[121]= 'Opgh' // Blademaster (Grom Hellscream Possessed)
	call SaveInteger(s__udg_SkinTable[2], 6, 4, 'O00C')
	call SaveInteger(udg_CustomValueSkinTable, 'O00C', 2, 6)

	set s__udg_TableBuildingTypes[122]= 'O00E'
	set s__udg_TableUnitTypes[122]= 'O00D' // Blademaster (Garrosh Hellscream)
	call SaveInteger(s__udg_SkinTable[2], 6, 5, 'O00E')
	call SaveInteger(udg_CustomValueSkinTable, 'O00E', 2, 6)

	set s__udg_TableBuildingTypes[89]= 'O007'
	set s__udg_TableUnitTypes[89]= 'Odrt' // Far Seer (Drek'Thar)
	call SaveInteger(s__udg_SkinTable[2], 7, 2, 'O007')
	call SaveInteger(udg_CustomValueSkinTable, 'O007', 2, 7)

	set s__udg_TableBuildingTypes[90]= 'O008'
	set s__udg_TableUnitTypes[90]= 'Othr' // Far Seer (Thrall)
	call SaveInteger(s__udg_SkinTable[2], 7, 3, 'O008')
	call SaveInteger(udg_CustomValueSkinTable, 'O008', 2, 7)

	set s__udg_TableBuildingTypes[91]= 'O009'
	set s__udg_TableUnitTypes[91]= 'Ocbh' // Tauren Chieftain (Cairne Bloodhoof)
	call SaveInteger(s__udg_SkinTable[2], 8, 2, 'O009')
	call SaveInteger(udg_CustomValueSkinTable, 'O009', 2, 8)

	set s__udg_TableBuildingTypes[92]= 'O00A'
	set s__udg_TableUnitTypes[92]= 'Orkn' // Shadow Hunter (Rokhan)
	call SaveInteger(s__udg_SkinTable[2], 9, 2, 'O00A')
	call SaveInteger(udg_CustomValueSkinTable, 'O00A', 2, 9)

	// Undead
	set s__udg_TableBuildingTypes[93]= 'n00Y'
	set s__udg_TableUnitTypes[93]= 'nzom' // Ghoul (Zombie)
	call SaveInteger(s__udg_SkinTable[3], 1, 2, 'n00Y')
	call SaveInteger(udg_CustomValueSkinTable, 'n00Y', 3, 1)

	set s__udg_TableBuildingTypes[94]= 'n00B'
	set s__udg_TableUnitTypes[94]= 'ndmu' // Ghoul (Dalaran Mutant)
	call SaveInteger(s__udg_SkinTable[3], 1, 3, 'n00B')
	call SaveInteger(udg_CustomValueSkinTable, 'n00B', 3, 1)

	set s__udg_TableBuildingTypes[95]= 'n00C'
	set s__udg_TableUnitTypes[95]= 'nnwa' // Crypt Fiend (Nerubian Warrior)
	call SaveInteger(s__udg_SkinTable[3], 2, 2, 'n00C')
	call SaveInteger(udg_CustomValueSkinTable, 'n00C', 3, 2)

	set s__udg_TableBuildingTypes[96]= 'n00D'
	set s__udg_TableUnitTypes[96]= 'nnwq' // Crypt Fiend (Nerubian Warrior)
	call SaveInteger(s__udg_SkinTable[3], 2, 3, 'n00D')
	call SaveInteger(udg_CustomValueSkinTable, 'n00D', 3, 2)

	set s__udg_TableBuildingTypes[97]= 'u001'
	set s__udg_TableUnitTypes[97]= 'uktn' // Necromancer (Kel'Thuzad)
	call SaveInteger(s__udg_SkinTable[3], 3, 2, 'u001')
	call SaveInteger(udg_CustomValueSkinTable, 'u001', 3, 3)

	set s__udg_TableBuildingTypes[98]= 'u002'
	set s__udg_TableUnitTypes[98]= 'uktg' // Necromancer (Kel'Thuzad Ghost)
	call SaveInteger(s__udg_SkinTable[3], 3, 3, 'u002')
	call SaveInteger(udg_CustomValueSkinTable, 'u002', 3, 3)

	set s__udg_TableBuildingTypes[99]= 'n00E'
	set s__udg_TableUnitTypes[99]= 'ngh2' // Banshee (Wraith)
	call SaveInteger(s__udg_SkinTable[3], 4, 2, 'n00E')
	call SaveInteger(udg_CustomValueSkinTable, 'n00E', 3, 4)

	set s__udg_TableBuildingTypes[100]= 'n00F'
	set s__udg_TableUnitTypes[100]= 'nadr' // Frost Wyrm (Blue Dragon)
	call SaveInteger(s__udg_SkinTable[3], 5, 2, 'n00F')
	call SaveInteger(udg_CustomValueSkinTable, 'n00F', 3, 5)

	set s__udg_TableBuildingTypes[101]= 'H00Y'
	set s__udg_TableUnitTypes[101]= 'Harf' // Death Knight (Arthas wielding Frostmourne)
	call SaveInteger(s__udg_SkinTable[3], 6, 2, 'H00Y')
	call SaveInteger(udg_CustomValueSkinTable, 'H00Y', 3, 6)

	set s__udg_TableBuildingTypes[120]= 'H010'
	set s__udg_TableUnitTypes[120]= 'H00Z' // Death Knight (The Lich King)
	call SaveInteger(s__udg_SkinTable[3], 6, 3, 'H010')
	call SaveInteger(udg_CustomValueSkinTable, 'H010', 3, 6)

	set s__udg_TableBuildingTypes[102]= 'U003'
	set s__udg_TableUnitTypes[102]= 'Uktl' // Lich (Kel'Thuzad)
	call SaveInteger(s__udg_SkinTable[3], 7, 2, 'U003')
	call SaveInteger(udg_CustomValueSkinTable, 'U003', 3, 7)

	set s__udg_TableBuildingTypes[103]= 'U009'
	set s__udg_TableUnitTypes[103]= 'Utic' // Dreadlord (Tichondrius)
	call SaveInteger(s__udg_SkinTable[3], 8, 2, 'U009')
	call SaveInteger(udg_CustomValueSkinTable, 'U009', 3, 8)

	set s__udg_TableBuildingTypes[104]= 'U00A'
	set s__udg_TableUnitTypes[104]= 'Udth' // Dreadlord (Detheroc)
	call SaveInteger(s__udg_SkinTable[3], 8, 3, 'U00A')
	call SaveInteger(udg_CustomValueSkinTable, 'U00A', 3, 8)

	set s__udg_TableBuildingTypes[105]= 'U00B'
	set s__udg_TableUnitTypes[105]= 'Uanb' // Crypt Lord (Anub'Arak)
	call SaveInteger(s__udg_SkinTable[3], 9, 2, 'U00B')
	call SaveInteger(udg_CustomValueSkinTable, 'U00B', 3, 9)

	// Night Elf
	set s__udg_TableBuildingTypes[106]= 'e00B'
	set s__udg_TableUnitTypes[106]= 'eshd' // Archer (Shandris)
	call SaveInteger(s__udg_SkinTable[4], 1, 2, 'e00B')
	call SaveInteger(udg_CustomValueSkinTable, 'e00B', 4, 1)

	set s__udg_TableBuildingTypes[107]= 'n00G'
	set s__udg_TableUnitTypes[107]= 'nhea' // Archer (High Elf Archer)
	call SaveInteger(s__udg_SkinTable[4], 1, 3, 'n00G')
	call SaveInteger(udg_CustomValueSkinTable, 'n00G', 4, 1)

	set s__udg_TableBuildingTypes[108]= 'e00C'
	set s__udg_TableUnitTypes[108]= 'ensh' // Huntress (Naisha)
	call SaveInteger(s__udg_SkinTable[4], 2, 2, 'e00C')
	call SaveInteger(udg_CustomValueSkinTable, 'e00C', 4, 2)

	set s__udg_TableBuildingTypes[109]= 'e00D'
	set s__udg_TableUnitTypes[109]= 'eilw' // Glaive Thrower (Prison Wagon)
	call SaveInteger(s__udg_SkinTable[4], 3, 2, 'e00D')
	call SaveInteger(udg_CustomValueSkinTable, 'e00D', 4, 3)

	set s__udg_TableBuildingTypes[110]= 'n00Z'
	set s__udg_TableUnitTypes[110]= 'nggg' // Mountain Giant (Guardian Golem)
	call SaveInteger(s__udg_SkinTable[4], 4, 2, 'n00Z')
	call SaveInteger(udg_CustomValueSkinTable, 'n00Z', 4, 4)

	set s__udg_TableBuildingTypes[111]= 'n010'
	set s__udg_TableUnitTypes[111]= 'nggr' // Mountain Giant (Granite Golem)
	call SaveInteger(s__udg_SkinTable[4], 4, 3, 'n010')
	call SaveInteger(udg_CustomValueSkinTable, 'n010', 4, 4)

	set s__udg_TableBuildingTypes[112]= 'n011'
	set s__udg_TableUnitTypes[112]= 'nsgg' // Mountain Giant (Siege Golem)
	call SaveInteger(s__udg_SkinTable[4], 4, 4, 'n011')
	call SaveInteger(udg_CustomValueSkinTable, 'n011', 4, 4)

	set s__udg_TableBuildingTypes[113]= 'E00M'
	set s__udg_TableUnitTypes[113]= 'Emns' // Keeper of the Grove (Malfurion)
	call SaveInteger(s__udg_SkinTable[4], 5, 2, 'E00M')
	call SaveInteger(udg_CustomValueSkinTable, 'E00M', 4, 5)

	set s__udg_TableBuildingTypes[114]= 'E00N'
	set s__udg_TableUnitTypes[114]= 'Ecen' // Keeper of the Grove (Cenarius)
	call SaveInteger(s__udg_SkinTable[4], 5, 3, 'E00N')
	call SaveInteger(udg_CustomValueSkinTable, 'E00N', 4, 5)

	set s__udg_TableBuildingTypes[115]= 'E00O'
	set s__udg_TableUnitTypes[115]= 'Ekgg' // Keeper of the Grove (Cenarius Ghost)
	call SaveInteger(s__udg_SkinTable[4], 5, 4, 'E00O')
	call SaveInteger(udg_CustomValueSkinTable, 'E00O', 4, 5)

	set s__udg_TableBuildingTypes[116]= 'E00P'
	set s__udg_TableUnitTypes[116]= 'Etyr' // Priestess of the Moon (Tyrande)
	call SaveInteger(s__udg_SkinTable[4], 6, 2, 'E00P')
	call SaveInteger(udg_CustomValueSkinTable, 'E00P', 4, 6)

	set s__udg_TableBuildingTypes[117]= 'E00Q'
	set s__udg_TableUnitTypes[117]= 'Eevi' // Demon Hunter (Illidan)
	call SaveInteger(s__udg_SkinTable[4], 7, 2, 'E00Q')
	call SaveInteger(udg_CustomValueSkinTable, 'E00Q', 4, 7)

	set s__udg_TableBuildingTypes[118]= 'E00S'
	set s__udg_TableUnitTypes[118]= 'E00R' // Warden (Primordial Warden)
	call SaveInteger(s__udg_SkinTable[4], 8, 2, 'E00S')
	call SaveInteger(udg_CustomValueSkinTable, 'E00S', 4, 8)

	set s__udg_TableBuildingTypes[119]= 'E00T'
	set s__udg_TableUnitTypes[119]= 'Ewrd' // Warden (Maiev)
	call SaveInteger(s__udg_SkinTable[4], 8, 3, 'E00T')
	call SaveInteger(udg_CustomValueSkinTable, 'E00T', 4, 8)












    set s__raceName[1]= "Human"
    set s__raceName[2]= "Orc"
    set s__raceName[3]= "Undead"
    set s__raceName[4]= "Night Elf"

    set s__levels[0]= 0
    set s__levels[1]= 50
    set s__levels[2]= 180
    set s__levels[3]= 400

    set i=4
    set endIndex=ds_MAX_LEVEL
    loop
        exitwhen i > endIndex
        set s__levels[i]= s__levels[i - 1] + 35 * ( i + 10 )
        set i=i + 1
    endloop

    set p=1
    set endIndex=6
    loop
        exitwhen p > endIndex
        set r=1
        set endIndex1=4
        loop
            exitwhen r > endIndex1
            set s__playerLevels[(p)*(4)+r]= 1
            set s__experience[(p)*(4)+r]= 0
            set u=1
            set endIndex2=9
            loop
                exitwhen u > endIndex2
                set s__equippedSkinHum[(p)*(5)+u]= 1
                set s__equippedSkinOrc[(p)*(5)+u]= 1
                set s__equippedSkinUnd[(p)*(5)+u]= 1
                set s__equippedSkinNig[(p)*(5)+u]= 1
                set u=u + 1
            endloop
            set r=r + 1
        endloop
        set s__isVisibleProgressionMenu[p]= false
        set p=p + 1
    endloop

    

    set tempTex[1]="war3mapImported\\Bar Human.tga"
    set tempTex[2]="war3mapImported\\Bar Orc.tga"
    set tempTex[3]="war3mapImported\\Bar Undead.tga"
    set tempTex[4]="war3mapImported\\Bar Night Elf.tga"

    set i=1
    set endIndex=4
    loop
        exitwhen i > endIndex
        set s__XPBarMainUI[i]= BlzCreateFrameByType("BACKDROP", "", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), "", 0)
        call BlzFrameSetSize(s__XPBarMainUI[i], 0.2, 0.016)
        call BlzFrameSetAbsPoint(s__XPBarMainUI[i], FRAMEPOINT_LEFT, 0.01, 0.56)
        call BlzFrameSetTexture(s__XPBarMainUI[i], "war3mapImported\\bar.tga", 0, true)
        call BlzFrameSetLevel(s__XPBarMainUI[i], 1)
        call BlzFrameSetVisible(s__XPBarMainUI[i], false)

        set s__XPBarFillMainUI[i]= BlzCreateFrameByType("BACKDROP", "", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), "", 0)
        call BlzFrameSetSize(s__XPBarFillMainUI[i], 0.001, 0.014)
        call BlzFrameSetAbsPoint(s__XPBarFillMainUI[i], FRAMEPOINT_LEFT, 0.01, 0.56)
        call BlzFrameSetTexture(s__XPBarFillMainUI[i], tempTex[i], 0, true)
        call BlzFrameSetVisible(s__XPBarFillMainUI[i], false)

        set s__frameXPBarTextMainUI[i]= BlzCreateFrame("TasButtonTextTemplate", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), 0, 0)
        call BlzFrameSetAbsPoint(s__frameXPBarTextMainUI[i], FRAMEPOINT_CENTER, 0.11, 0.56)
        call BlzFrameSetText(s__frameXPBarTextMainUI[i], "")
        call BlzFrameSetVisible(s__frameXPBarTextMainUI[i], false)

        set i=i + 1
    endloop

    set frameLevelUpBlob=BlzCreateFrameByType("BACKDROP", "", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), "", 0)
    call BlzFrameSetSize(frameLevelUpBlob, 0.22, 0.057)
    call BlzFrameSetAbsPoint(frameLevelUpBlob, FRAMEPOINT_CENTER, 0.1, 0.56)
    call BlzFrameSetTexture(frameLevelUpBlob, "war3mapImported\\Level Up Graphic.tga", 0, true)
    call BlzFrameSetVisible(frameLevelUpBlob, false)
    call BlzFrameSetLevel(frameLevelUpBlob, 1)

    set frameLevelUpText=BlzCreateFrameByType("BACKDROP", "", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), "", 0)
    call BlzFrameSetSize(frameLevelUpText, 0.22, 0.057)
    call BlzFrameSetAbsPoint(frameLevelUpText, FRAMEPOINT_CENTER, 0.105, 0.56)
    call BlzFrameSetTexture(frameLevelUpText, "war3mapImported\\Level Up Text.tga", 0, true)
    call BlzFrameSetVisible(frameLevelUpText, false)
    call BlzFrameSetLevel(frameLevelUpText, 1)

    set btnProgressionMenu=BlzCreateFrame("ScriptDialogButton", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), 0, 0)
    call BlzFrameSetSize(btnProgressionMenu, 0.085, 0.03)
    call BlzFrameSetAbsPoint(btnProgressionMenu, FRAMEPOINT_CENTER, 0.082, 0.165)
    call BlzFrameSetText(btnProgressionMenu, "Progression")
    call BlzFrameSetVisible(btnProgressionMenu, false)

    // Button trigger
    set trig=CreateTrigger()
    call BlzTriggerRegisterFrameEvent(trig, btnProgressionMenu, FRAMEEVENT_CONTROL_CLICK)
    call TriggerAddAction(trig, function MenuProgression)

    set progressionMenu=BlzCreateFrame("EscMenuBackdrop", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), 0, 0)
    call BlzFrameSetSize(progressionMenu, 0.26, 0.28)
    call BlzFrameSetAbsPoint(progressionMenu, FRAMEPOINT_CENTER, 0.2, 0.33)
    call BlzFrameSetVisible(progressionMenu, false)

    set l__frameSkinsText=BlzCreateFrameByType("BACKDROP", "", progressionMenu, "", 0)
    call BlzFrameSetSize(l__frameSkinsText, 0.166, 0.057)
    call BlzFrameSetAbsPoint(l__frameSkinsText, FRAMEPOINT_CENTER, 0.2, 0.43)
    call BlzFrameSetTexture(l__frameSkinsText, "war3mapImported\\Progression.tga", 0, true)

    // XP BARS

    set s__XPBarRaceText[1]= "Human - Level "
    set s__XPBarRaceText[2]= "Orc - Level "
    set s__XPBarRaceText[3]= "Undead - Level "
    set s__XPBarRaceText[4]= "Night Elf - Level "

    set textMatchStats[1]="Won: 0 - Total: 0"
    set textMatchStats[2]="Won: 0 - Total: 0"
    set textMatchStats[3]="Won: 0 - Total: 0"
    set textMatchStats[4]="Won: 0 - Total: 0"

    set yPos=0
    set i=1
    set endIndex=4
    loop
        exitwhen i > endIndex
        set s__XPBarRaces[i]= BlzCreateFrameByType("BACKDROP", "", progressionMenu, "", 0)
        call BlzFrameSetSize(s__XPBarRaces[i], 0.1, 0.015)
        call BlzFrameSetAbsPoint(s__XPBarRaces[i], FRAMEPOINT_LEFT, 0.1, 0.41 - yPos)
        call BlzFrameSetTexture(s__XPBarRaces[i], "war3mapImported\\bar.tga", 0, true)
        call BlzFrameSetLevel(s__XPBarRaces[i], 1)

        set s__XPBarFill[i]= BlzCreateFrameByType("BACKDROP", "", progressionMenu, "", 0)
        call BlzFrameSetSize(s__XPBarFill[i], 0.001, 0.013)
        call BlzFrameSetAbsPoint(s__XPBarFill[i], FRAMEPOINT_LEFT, 0.1, 0.41 - yPos)
        call BlzFrameSetTexture(s__XPBarFill[i], tempTex[i], 0, true)

        set s__frameXPBarRaceText[i]= BlzCreateFrame("TasButtonTextTemplate", progressionMenu, 0, 0)
        call BlzFrameSetAbsPoint(s__frameXPBarRaceText[i], FRAMEPOINT_CENTER, 0.15, 0.41 - yPos)
        call BlzFrameSetText(s__frameXPBarRaceText[i], s__XPBarRaceText[i] + "1")

        set s__frameMatchStats[i]= BlzCreateFrame("TasButtonTextTemplate", progressionMenu, 0, 0)
        call BlzFrameSetAbsPoint(s__frameMatchStats[i], FRAMEPOINT_LEFT, 0.202, 0.41 - yPos)
        call BlzFrameSetText(s__frameMatchStats[i], textMatchStats[i])

        set yPos=yPos + 0.018

        set i=i + 1
    endloop

    set textUnits=BlzCreateFrame("TasButtonTextTemplate", progressionMenu, 0, 0)
    call BlzFrameSetAbsPoint(textUnits, FRAMEPOINT_CENTER, 0.15, 0.33)
    call BlzFrameSetText(textUnits, "Units")

    set textHeroes=BlzCreateFrame("TasButtonTextTemplate", progressionMenu, 0, 0)
    call BlzFrameSetAbsPoint(textHeroes, FRAMEPOINT_CENTER, 0.25, 0.33)
    call BlzFrameSetText(textHeroes, "Heroes")

    set progressionMenuDialog=BlzCreateFrame("EscMenuBackdrop", progressionMenu, 0, 0)
    call BlzFrameSetSize(progressionMenuDialog, 0.26, 0.18)
    call BlzFrameSetAbsPoint(progressionMenuDialog, FRAMEPOINT_CENTER, 0.45, 0.36)
    call BlzFrameSetVisible(progressionMenuDialog, false)

    set btnCloseSkinDialog=BlzCreateFrame("ScriptDialogButton", progressionMenuDialog, 0, 0)
    call BlzFrameSetSize(btnCloseSkinDialog, 0.03, 0.03)
    call BlzFrameSetAbsPoint(btnCloseSkinDialog, FRAMEPOINT_CENTER, 0.55, 0.42)
    call BlzFrameSetText(btnCloseSkinDialog, "X")

    // Event Click
    set trigCloseDialog=CreateTrigger()
    call BlzTriggerRegisterFrameEvent(trigCloseDialog, btnCloseSkinDialog, FRAMEEVENT_CONTROL_CLICK)
    call TriggerAddAction(trigCloseDialog, function CloseSkinDialog)

    set l__frameSkinsText=BlzCreateFrameByType("BACKDROP", "", progressionMenuDialog, "", 0)
    call BlzFrameSetSize(l__frameSkinsText, 0.111, 0.057)
    call BlzFrameSetAbsPoint(l__frameSkinsText, FRAMEPOINT_CENTER, 0.45, 0.415)
    call BlzFrameSetTexture(l__frameSkinsText, "war3mapImported\\Skins.tga", 0, true)

    set frameTextSkin=BlzCreateFrame("TasButtonTextTemplate", progressionMenuDialog, 0, 0)
    call BlzFrameSetAbsPoint(frameTextSkin, FRAMEPOINT_LEFT, 0.355, 0.39)
    call BlzFrameSetText(frameTextSkin, "")
    call BlzFrameSetVisible(frameTextSkin, false)

    set btnEquipSkin=BlzCreateFrame("ScriptDialogButton", progressionMenuDialog, 0, 0)
    call BlzFrameSetSize(btnEquipSkin, 0.08, 0.03)
    call BlzFrameSetAbsPoint(btnEquipSkin, FRAMEPOINT_CENTER, 0.39, 0.32)
    call BlzFrameSetText(btnEquipSkin, "Equip")
    call BlzFrameSetEnable(btnEquipSkin, false)

    // Event Click
    set trigEquip=CreateTrigger()
    call BlzTriggerRegisterFrameEvent(trigEquip, btnEquipSkin, FRAMEEVENT_CONTROL_CLICK)
    call TriggerAddAction(trigEquip, function EquipSkin)

    
    set frameImgSkin=(s__Table_create()) // INLINED!!
    set textSkin=(s__Table_create()) // INLINED!!
    set unitSkin=(s__Table_create()) // INLINED!!
    set abilityLookup=(s__Table_create()) // INLINED!!

    set frameSkinDisabled=(s__Table_create()) // INLINED!!
    set skinLevelRequirement=(s__Table_create()) // INLINED!!
    


    //frameSkinDisabled = newInteger3DArray(4, 9, 5)
    set frameImgSkinDisabled="ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSelectHeroOn.blp"

    //skinLevelRequirement = newInteger3DArray(4, 9, 5)

    //
    // Human Skins
    //

    set s__frameImgUnit[(1)*(9)+1]= "ReplaceableTextures\\CommandButtons\\BTNFootman.blp"
    set s__frameImgUnit[(1)*(9)+2]= "ReplaceableTextures\\CommandButtons\\BTNPriest.blp"
    set s__frameImgUnit[(1)*(9)+3]= "ReplaceableTextures\\CommandButtons\\BTNDragonHawk.blp"

    set s__frameImgUnit[(1)*(9)+4]= "ReplaceableTextures\\CommandButtons\\BTNHeroPaladin.blp"
    set s__frameImgUnit[(1)*(9)+5]= "ReplaceableTextures\\CommandButtons\\BTNHeroArchMage.blp"
    set s__frameImgUnit[(1)*(9)+6]= "ReplaceableTextures\\CommandButtons\\BTNHeroMountainKing.blp"
    set s__frameImgUnit[(1)*(9)+7]= "ReplaceableTextures\\CommandButtons\\BTNHeroBloodElfPrince.blp"

    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (1))))) )),( (4)))),1),'AHhb') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (1))))) )),( (4)))),2),'AHds') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (1))))) )),( (4)))),3),'AHad') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (1))))) )),( (4)))),4),'AHre') // INLINED!!

    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (1))))) )),( (5)))),1),'AHbz') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (1))))) )),( (5)))),2),'AHwe') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (1))))) )),( (5)))),3),'AHab') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (1))))) )),( (5)))),4),'ANto') // INLINED!!

    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (1))))) )),( (6)))),1),'AHtb') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (1))))) )),( (6)))),2),'AHtc') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (1))))) )),( (6)))),3),'AHbh') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (1))))) )),( (6)))),4),'ANav') // INLINED!!

    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (1))))) )),( (7)))),1),'AHfs') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (1))))) )),( (7)))),2),'AHbn') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (1))))) )),( (7)))),3),'AHdr') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (1))))) )),( (7)))),4),'ANpx') // INLINED!!

    //

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (1)))),1),"ReplaceableTextures\\CommandButtons\\BTNFootman.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (1)))),1),"Footman") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (1)))),1),1) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (1)))),2),"ReplaceableTextures\\CommandButtons\\BTNTheCaptain.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (1)))),2),"Footman (Captain)") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (1)))),2),61) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (1)))),3),"ReplaceableTextures\\CommandButtons\\BTNBloodElfPeasant.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (1)))),3),"Footman (Swordsman)") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (1)))),3),62) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (1)))),4),"ReplaceableTextures\\CommandButtons\\BTNSpellBreakerMagicUnDefend.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (1)))),4),"Footman (Blood Elf Lieutenant)") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (1)))),4),63) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (1)))),5),"war3mapImported\\BTNFootman_Kul_Tiras.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (1)))),5),"Footman (Kul Tiras Footman)") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (1)))),5),64) // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (2)))),1),"ReplaceableTextures\\CommandButtons\\BTNPriest.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (2)))),1),6) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (2)))),1),"Priest") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (2)))),2),"ReplaceableTextures\\CommandButtons\\BTNElfVillager.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (2)))),2),65) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (2)))),2),"Priest (Emissary)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (2)))),3),"_hd.w3mod:ReplaceableTextures\\CommandButtons\\BTNChaplain.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (2)))),3),66) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (2)))),3),"Priest (Chaplain)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (2)))),4),"_hd.w3mod:ReplaceableTextures\\CommandButtons\\BTNApprenticeWizard.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (2)))),4),67) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (2)))),4),"Priest (Apprentice Wizard)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (3)))),1),"ReplaceableTextures\\CommandButtons\\BTNDragonHawk.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (3)))),1),11) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (3)))),1),"Dragonhawk Rider") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (3)))),2),"_hd.w3mod:ReplaceableTextures\\CommandButtons\\BTNDragonHawkRider.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (3)))),2),68) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (3)))),2),"Dragonhawk Rider (Blue)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (4)))),1),"ReplaceableTextures\\CommandButtons\\BTNHeroPaladin.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (4)))),1),45) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (4)))),1),"Paladin") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (4)))),2),"ReplaceableTextures\\CommandButtons\\BTNArthas.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (4)))),2),69) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (4)))),2),"Paladin (Arthas)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (4)))),3),"_hd.w3mod:ReplaceableTextures\\CommandButtons\\BTNUther.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (4)))),3),70) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (4)))),3),"Paladin (Uther)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (5)))),1),"ReplaceableTextures\\CommandButtons\\BTNHeroArchMage.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (5)))),1),46) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (5)))),1),"Archmage") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (5)))),2),"_hd.w3mod:ReplaceableTextures\\CommandButtons\\BTNHighElfArchMage.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (5)))),2),71) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (5)))),2),"Archmage (Kelen the Seeker)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (5)))),3),"ReplaceableTextures\\CommandButtons\\BTNBanditMage.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (5)))),3),72) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (5)))),3),"Archmage (Dark Wizard)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (5)))),4),"ReplaceableTextures\\CommandButtons\\BTNGhostMage.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (5)))),4),73) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (5)))),4),"Archmage (Ghost Antonidas)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (6)))),1),"ReplaceableTextures\\CommandButtons\\BTNHeroMountainKing.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (6)))),1),47) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (6)))),1),"Mountain King") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (6)))),2),"_hd.w3mod:ReplaceableTextures\\CommandButtons\\BTNMuradinBronzebeard.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (6)))),2),74) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (6)))),2),"Mountain King (Muradin Bronzebeard)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (7)))),1),"ReplaceableTextures\\CommandButtons\\BTNHeroBloodElfPrince.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (7)))),1),48) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (7)))),1),"Blood Mage") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (7)))),2),"ReplaceableTextures\\CommandButtons\\BTNBloodMage2.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (7)))),2),75) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (7)))),2),"Blood Mage (Kael)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (1))))) )),( (7)))),3),"ReplaceableTextures\\CommandButtons\\BTNJaina.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (1))))) )),( (7)))),3),76) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (1))))) )),( (7)))),3),"Blood Mage (Jaina)") // INLINED!!

    //
    // Orc Skins
    //

    set s__frameImgUnit[(2)*(9)+1]= "ReplaceableTextures\\CommandButtons\\BTNGrunt.blp"
    set s__frameImgUnit[(2)*(9)+2]= "ReplaceableTextures\\CommandButtons\\BTNHeadhunter.blp"
    set s__frameImgUnit[(2)*(9)+3]= "ReplaceableTextures\\CommandButtons\\BTNWitchDoctor.blp"
    set s__frameImgUnit[(2)*(9)+4]= "ReplaceableTextures\\CommandButtons\\BTNRaider.blp"
    set s__frameImgUnit[(2)*(9)+5]= "ReplaceableTextures\\CommandButtons\\BTNKotoBeast.blp"

    set s__frameImgUnit[(2)*(9)+6]= "ReplaceableTextures\\CommandButtons\\BTNHeroBlademaster.blp"
    set s__frameImgUnit[(2)*(9)+7]= "ReplaceableTextures\\CommandButtons\\BTNHeroFarseer.blp"
    set s__frameImgUnit[(2)*(9)+8]= "ReplaceableTextures\\CommandButtons\\BTNHeroTaurenChieftain.blp"
    set s__frameImgUnit[(2)*(9)+9]= "ReplaceableTextures\\CommandButtons\\BTNShadowHunter.blp"

    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (2))))) )),( (6)))),1),'AOwk') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (2))))) )),( (6)))),2),'AOcr') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (2))))) )),( (6)))),3),'AOmi') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (2))))) )),( (6)))),4),'AOww') // INLINED!!

    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (2))))) )),( (7)))),1),'ANfb') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (2))))) )),( (7)))),2),'AOsf') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (2))))) )),( (7)))),3),'AOcl') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (2))))) )),( (7)))),4),'AOeq') // INLINED!!

    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (2))))) )),( (8)))),1),'AOsh') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (2))))) )),( (8)))),2),'AOae') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (2))))) )),( (8)))),3),'AOre') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (2))))) )),( (8)))),4),'AOws') // INLINED!!

    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (2))))) )),( (9)))),1),'AOhw') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (2))))) )),( (9)))),2),'AOhx') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (2))))) )),( (9)))),3),'AOsw') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (2))))) )),( (9)))),4),'AOvd') // INLINED!!

    //

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (1)))),1),"ReplaceableTextures\\CommandButtons\\BTNGrunt.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (1)))),1),12) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (1)))),1),"Grunt") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (1)))),2),"ReplaceableTextures\\CommandButtons\\BTNChaosGrunt.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (1)))),2),77) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (1)))),2),"Grunt (Chaos Grunt)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (1)))),3),"ReplaceableTextures\\CommandButtons\\BTNSkeletalOrcChampion.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (1)))),3),78) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (1)))),3),"Grunt (Skeletal Grunt)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (2)))),1),"ReplaceableTextures\\CommandButtons\\BTNHeadhunter.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (2)))),1),13) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (2)))),1),"Headhunter") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (2)))),2),"ReplaceableTextures\\CommandButtons\\BTNIceTroll.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (2)))),2),79) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (2)))),2),"Headhunter (Ice Troll)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (2)))),3),"ReplaceableTextures\\CommandButtons\\BTNDarkTroll.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (2)))),3),80) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (2)))),3),"Headhunter (Dark Troll)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (2)))),4),"ReplaceableTextures\\CommandButtons\\BTNForestTroll.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (2)))),4),81) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (2)))),4),"Headhunter (Forest Troll)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (3)))),1),"ReplaceableTextures\\CommandButtons\\BTNWitchDoctor.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (3)))),1),20) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (3)))),1),"Witch Doctor") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (3)))),2),"ReplaceableTextures\\CommandButtons\\BTNIceTrollShaman.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (3)))),2),82) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (3)))),2),"Witch Doctor (Ice Troll High Priest)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (3)))),3),"_hd.w3mod:ReplaceableTextures\\CommandButtons\\BTNDarkTrollHighPriest.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (3)))),3),83) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (3)))),3),"Witch Doctor (Dark Troll High Priest)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (3)))),4),"_hd.w3mod:ReplaceableTextures\\CommandButtons\\BTNForestTrollHighPriest.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (3)))),4),84) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (3)))),4),"Witch Doctor (Forest Troll High Priest)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (4)))),1),"ReplaceableTextures\\CommandButtons\\BTNRaider.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (4)))),1),14) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (4)))),1),"Raider") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (4)))),2),"ReplaceableTextures\\CommandButtons\\BTNChaosWolfRider.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (4)))),2),85) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (4)))),2),"Raider (Chaos Raider)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (5)))),1),"ReplaceableTextures\\CommandButtons\\BTNKotoBeast.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (5)))),1),21) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (5)))),1),"Kodo Beast") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (5)))),2),"ReplaceableTextures\\CommandButtons\\BTNChaosKotoBeast.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (5)))),2),86) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (5)))),2),"Kodo Beast (Chaos Kodo Beast)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (6)))),1),"ReplaceableTextures\\CommandButtons\\BTNHeroBlademaster.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (6)))),1),49) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (6)))),1),"Blademaster") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (6)))),2),"ReplaceableTextures\\CommandButtons\\BTNHellScream.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (6)))),2),87) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (6)))),2),"Blademaster (Grom Hellscream)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (6)))),3),"ReplaceableTextures\\CommandButtons\\BTNChaosBlademaster.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (6)))),3),88) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (6)))),3),"Blademaster (Chaos Blademaster)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (6)))),4),"ReplaceableTextures\\CommandButtons\\BTNChaosGrom.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (6)))),4),121) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (6)))),4),"Blademaster (Grom Hellscream Possessed)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (6)))),5),"war3mapImported\\btngarrosh.dds") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (6)))),5),122) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (6)))),5),"Blademaster (Garrosh Hellscream)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (7)))),1),"ReplaceableTextures\\CommandButtons\\BTNHeroFarseer.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (7)))),1),50) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (7)))),1),"Far Seer") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (7)))),2),"_hd.w3mod:ReplaceableTextures\\CommandButtons\\BTNDrekThar.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (7)))),2),89) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (7)))),2),"Far Seer (Drek'Thar)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (7)))),3),"ReplaceableTextures\\CommandButtons\\BTNThrall.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (7)))),3),90) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (7)))),3),"Far Seer (Thrall)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (8)))),1),"ReplaceableTextures\\CommandButtons\\BTNHeroTaurenChieftain.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (8)))),1),51) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (8)))),1),"Tauren Chieftain") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (8)))),2),"_hd.w3mod:ReplaceableTextures\\CommandButtons\\BTNCairneBloodhoof.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (8)))),2),91) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (8)))),2),"Tauren Chieftain (Cairne Bloodhoof)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (9)))),1),"ReplaceableTextures\\CommandButtons\\BTNShadowHunter.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (9)))),1),52) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (9)))),1),"Shadow Hunter") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (2))))) )),( (9)))),2),"_hd.w3mod:ReplaceableTextures\\CommandButtons\\BTNRokhan.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (2))))) )),( (9)))),2),92) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (2))))) )),( (9)))),2),"Shadow Hunter (Rokhan)") // INLINED!!

    //
    // Undead Skins
    //

    set s__frameImgUnit[(3)*(9)+1]= "ReplaceableTextures\\CommandButtons\\BTNGhoul.blp"
    set s__frameImgUnit[(3)*(9)+2]= "ReplaceableTextures\\CommandButtons\\BTNCryptFiend.blp"
    set s__frameImgUnit[(3)*(9)+3]= "ReplaceableTextures\\CommandButtons\\BTNNecromancer.blp"
    set s__frameImgUnit[(3)*(9)+4]= "ReplaceableTextures\\CommandButtons\\BTNBanshee.blp"
    set s__frameImgUnit[(3)*(9)+5]= "ReplaceableTextures\\CommandButtons\\BTNFrostWyrm.blp"
    
    set s__frameImgUnit[(3)*(9)+6]= "ReplaceableTextures\\CommandButtons\\BTNHeroDeathKnight.blp"
    set s__frameImgUnit[(3)*(9)+7]= "ReplaceableTextures\\CommandButtons\\BTNHeroLich.blp"
    set s__frameImgUnit[(3)*(9)+8]= "ReplaceableTextures\\CommandButtons\\BTNHeroDreadLord.blp"
    set s__frameImgUnit[(3)*(9)+9]= "ReplaceableTextures\\CommandButtons\\BTNHeroCryptLord.blp"

    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (3))))) )),( (6)))),1),'AUdc') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (3))))) )),( (6)))),2),'AUdp') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (3))))) )),( (6)))),3),'AUau') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (3))))) )),( (6)))),4),'AUan') // INLINED!!

    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (3))))) )),( (7)))),1),'AUfn') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (3))))) )),( (7)))),2),'AUfu') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (3))))) )),( (7)))),3),'AUdr') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (3))))) )),( (7)))),4),'AUdd') // INLINED!!

    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (3))))) )),( (8)))),1),'AUav') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (3))))) )),( (8)))),2),'AUsl') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (3))))) )),( (8)))),3),'AUcs') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (3))))) )),( (8)))),4),'AUin') // INLINED!!

    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (3))))) )),( (9)))),1),'AUim') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (3))))) )),( (9)))),2),'AUts') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (3))))) )),( (9)))),3),'AUcb') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (3))))) )),( (9)))),4),'AUls') // INLINED!!

    //

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (1)))),1),"ReplaceableTextures\\CommandButtons\\BTNGhoul.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (1)))),1),23) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (1)))),1),"Ghoul") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (1)))),2),"ReplaceableTextures\\CommandButtons\\BTNZombie.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (1)))),2),93) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (1)))),2),"Ghoul (Zombie)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (1)))),3),"ReplaceableTextures\\CommandButtons\\BTNDalaranMutant.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (1)))),3),94) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (1)))),3),"Ghoul (Dalaran Mutant)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (2)))),1),"ReplaceableTextures\\CommandButtons\\BTNCryptFiend.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (2)))),1),24) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (2)))),1),"Crypt Fiend") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (2)))),2),"_hd.w3mod:ReplaceableTextures\\CommandButtons\\BTNNerubianWarrior.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (2)))),2),95) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (2)))),2),"Crypt Fiend (Nerubian Warrior)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (2)))),3),"ReplaceableTextures\\CommandButtons\\BTNNerubianQueen.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (2)))),3),96) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (2)))),3),"Crypt Fiend (Nerubian Queen)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (3)))),1),"ReplaceableTextures\\CommandButtons\\BTNNecromancer.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (3)))),1),29) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (3)))),1),"Necromancer") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (3)))),2),"ReplaceableTextures\\CommandButtons\\BTNKelThuzad.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (3)))),2),97) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (3)))),2),"Necromancer (Kel'Thuzad)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (3)))),3),"ReplaceableTextures\\CommandButtons\\BTNGhostOfKelThuzad.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (3)))),3),98) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (3)))),3),"Necromancer (Ghost Kel'Thuzad)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (4)))),1),"ReplaceableTextures\\CommandButtons\\BTNBanshee.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (4)))),1),28) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (4)))),1),"Banshee") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (4)))),2),"ReplaceableTextures\\CommandButtons\\BTNGhost.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (4)))),2),99) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (4)))),2),"Banshee (Wraith)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (5)))),1),"ReplaceableTextures\\CommandButtons\\BTNFrostWyrm.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (5)))),1),31) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (5)))),1),"Frost Wyrm") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (5)))),2),"ReplaceableTextures\\CommandButtons\\BTNAzureDragon.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (5)))),2),100) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (5)))),2),"Frost Wyrm (Blue Dragon)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (6)))),1),"ReplaceableTextures\\CommandButtons\\BTNHeroDeathKnight.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (6)))),1),53) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (6)))),1),"Death Knight") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (6)))),2),"_hd.w3mod:ReplaceableTextures\\CommandButtons\\BTNArthasFrost.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (6)))),2),101) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (6)))),2),"Death Knight (Arthas with Frostmourne)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (6)))),3),"BTNLichKing.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (6)))),3),120) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (6)))),3),"Death Knight (The Lich King)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (7)))),1),"ReplaceableTextures\\CommandButtons\\BTNHeroLich.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (7)))),1),54) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (7)))),1),"Lich") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (7)))),2),"ReplaceableTextures\\CommandButtons\\BTNLichVersion2.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (7)))),2),102) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (7)))),2),"Lich (Kel'Thuzad)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (8)))),1),"ReplaceableTextures\\CommandButtons\\BTNHeroDreadLord.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (8)))),1),55) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (8)))),1),"Dreadlord") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (8)))),2),"ReplaceableTextures\\CommandButtons\\BTNTichondrius.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (8)))),2),103) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (8)))),2),"Dreadlord (Tichondrius)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (8)))),3),"_hd.w3mod:ReplaceableTextures\\CommandButtons\\BTNDetheroc.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (8)))),3),104) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (8)))),3),"Dreadlord (Detheroc)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (9)))),1),"ReplaceableTextures\\CommandButtons\\BTNHeroCryptLord.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (9)))),1),56) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (9)))),1),"Crypt Lord") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (3))))) )),( (9)))),2),"_hd.w3mod:ReplaceableTextures\\CommandButtons\\BTNAnubarak.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (3))))) )),( (9)))),2),105) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (3))))) )),( (9)))),2),"Crypt Lord (Anub'Arak)") // INLINED!!

    //
    // Night Elf Skins
    //

    set s__frameImgUnit[(4)*(9)+1]= "ReplaceableTextures\\CommandButtons\\BTNArcher.blp"
    set s__frameImgUnit[(4)*(9)+2]= "ReplaceableTextures\\CommandButtons\\BTNHuntress.blp"
    set s__frameImgUnit[(4)*(9)+3]= "ReplaceableTextures\\CommandButtons\\BTNGlaiveThrower.blp"
    set s__frameImgUnit[(4)*(9)+4]= "ReplaceableTextures\\CommandButtons\\BTNMountainGiant.blp"

    set s__frameImgUnit[(4)*(9)+5]= "ReplaceableTextures\\CommandButtons\\BTNKeeperOfTheGrove.blp"
    set s__frameImgUnit[(4)*(9)+6]= "ReplaceableTextures\\CommandButtons\\BTNPriestessOfTheMoon.blp"
    set s__frameImgUnit[(4)*(9)+7]= "ReplaceableTextures\\CommandButtons\\BTNHeroDemonHunter.blp"
    set s__frameImgUnit[(4)*(9)+8]= "ReplaceableTextures\\CommandButtons\\BTNHeroWarden.blp"

    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (4))))) )),( (5)))),1),'AEer') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (4))))) )),( (5)))),2),'A012') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (4))))) )),( (5)))),3),'AEah') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (4))))) )),( (5)))),4),'AEtq') // INLINED!!

    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (4))))) )),( (6)))),1),'AHfa') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (4))))) )),( (6)))),2),'ANsi') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (4))))) )),( (6)))),3),'AEar') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (4))))) )),( (6)))),4),'AEsf') // INLINED!!

    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (4))))) )),( (7)))),1),'AEmb') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (4))))) )),( (7)))),2),'AEim') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (4))))) )),( (7)))),3),'AEev') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (4))))) )),( (7)))),4),'AEme') // INLINED!!

    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (4))))) )),( (8)))),1),'AEbl') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (4))))) )),( (8)))),2),'AEfk') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (4))))) )),( (8)))),3),'AEsh') // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((abilityLookup) )),( (4))))) )),( (8)))),4),'AEsv') // INLINED!!

    //

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (1)))),1),"ReplaceableTextures\\CommandButtons\\BTNArcher.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (1)))),1),35) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (1)))),1),"Archer") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (1)))),2),"ReplaceableTextures\\CommandButtons\\BTNShandris.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (1)))),2),106) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (1)))),2),"Archer (Shandris)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (1)))),3),"ReplaceableTextures\\CommandButtons\\BTNHighElvenArcher.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (1)))),3),107) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (1)))),3),"Archer (High Elven Archer)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (2)))),1),"ReplaceableTextures\\CommandButtons\\BTNHuntress.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (2)))),1),33) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (2)))),1),"Huntress") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (2)))),2),"_hd.w3mod:ReplaceableTextures\\CommandButtons\\BTNNaisha.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (2)))),2),108) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (2)))),2),"Huntress (Naisha)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (3)))),1),"ReplaceableTextures\\CommandButtons\\BTNGlaiveThrower.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (3)))),1),41) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (3)))),1),"Glaive Thrower") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (3)))),2),"ReplaceableTextures\\CommandButtons\\BTNCagedIllidan.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (3)))),2),109) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (3)))),2),"Glaive Thrower (Prison Wagon)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (4)))),1),"ReplaceableTextures\\CommandButtons\\BTNMountainGiant.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (4)))),1),32) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (4)))),1),"Mountain Giant") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (4)))),2),"_hd.w3mod:ReplaceableTextures\\CommandButtons\\BTNGuardianGolem.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (4)))),2),110) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (4)))),2),"Mountain Giant (Guardian Golem)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (4)))),3),"_hd.w3mod:ReplaceableTextures\\CommandButtons\\BTNGraniteGolem.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (4)))),3),111) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (4)))),3),"Mountain Giant (Granite Golem)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (4)))),4),"_hd.w3mod:ReplaceableTextures\\CommandButtons\\BTNSiegeGolem.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (4)))),4),112) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (4)))),4),"Mountain Giant (Siege Golem)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (5)))),1),"ReplaceableTextures\\CommandButtons\\BTNKeeperOfTheGrove.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (5)))),1),57) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (5)))),1),"Keeper of the Grove") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (5)))),2),"ReplaceableTextures\\CommandButtons\\BTNFurion.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (5)))),2),113) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (5)))),2),"Keeper of the Grove (Malfurion)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (5)))),3),"_hd.w3mod:ReplaceableTextures\\CommandButtons\\BTNCenarius.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (5)))),3),114) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (5)))),3),"Keeper of the Grove (Cenarius)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (5)))),4),"ReplaceableTextures\\CommandButtons\\BTNKeeperGhostBlue.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (5)))),4),115) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (5)))),4),"Keeper of the Grove (Ghost Cenarius)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (6)))),1),"ReplaceableTextures\\CommandButtons\\BTNPriestessOfTheMoon.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (6)))),1),58) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (6)))),1),"Priestess of the Moon") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (6)))),2),"_hd.w3mod:ReplaceableTextures\\CommandButtons\\BTNTyrande.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (6)))),2),116) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (6)))),2),"Priestess of the Moon (Tyrande)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (7)))),1),"ReplaceableTextures\\CommandButtons\\BTNHeroDemonHunter.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (7)))),1),59) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (7)))),1),"Demon Hunter") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (7)))),2),"ReplaceableTextures\\CommandButtons\\BTNEvilIllidan.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (7)))),2),117) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (7)))),2),"Demon Hunter (Illidan)") // INLINED!!

    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (8)))),1),"ReplaceableTextures\\CommandButtons\\BTNHeroWarden.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (8)))),1),60) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (8)))),1),"Warden") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (8)))),2),"ReplaceableTextures\\CommandButtons\\BTNAssassin.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (8)))),2),118) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (8)))),2),"Warden (Primordial Warden)") // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (4))))) )),( (8)))),3),"ReplaceableTextures\\CommandButtons\\BTNWarden2.blp") // INLINED!!
    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((unitSkin) )),( (4))))) )),( (8)))),3),119) // INLINED!!
    call s__MultidimensionalArray__Type__set_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((textSkin) )),( (4))))) )),( (8)))),3),"Warden (Maiev)") // INLINED!!



    // Skin Level Requirements

    set tmpLevelReq=1
    set r=1
    set endIndex=4
    loop
        exitwhen r > endIndex
        set tmpLevelReq=1
        set s=1
        set endIndex1=5
        loop
            exitwhen s > endIndex1
            set u=1
            set endIndex2=9
            loop
                exitwhen u > endIndex2
                if ( s__MultidimensionalArray__Type__get_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (r))))) )),( (u)))),s)) != null ) then // INLINED!!
                    if ( s != 1 ) then
                        set tmpLevelReq=tmpLevelReq + 3
                    endif
                    call s__MultidimensionalArray__Type__set_integer(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((skinLevelRequirement) )),( (r))))) )),( (u)))),s),tmpLevelReq) // INLINED!!
                endif
                set u=u + 1
            endloop
            set s=s + 1
        endloop
        set r=r + 1
    endloop


    set frameXPOS=0
    set frameYPOS=0
    set frameXPOS2=0
    set frameXPOSMod=0
    set incr=0

    set r=1
    set endIndex=4
    loop
        exitwhen r > endIndex
        set incr=0
        set frameXPOSMod=0

        set i=1
        set endIndex1=9
        loop
            exitwhen i > endIndex1
            if ( s__frameImgUnit[(r)*(9)+i] != null ) then
                if ( r == 1 and i == 4 ) then
                    set frameXPOS=0.10 // shifts the hero buttons to the right
                    set frameYPOS=0 // reset
                    set incr=0 // reset
                endif
                if ( r == 2 and i == 6 ) then
                    set frameXPOS=0.10 // shifts the hero buttons to the right
                    set frameYPOS=0 // reset
                    set incr=0 // reset
                endif
                if ( r == 3 and i == 6 ) then
                    set frameXPOS=0.10 // shifts the hero buttons to the right
                    set frameYPOS=0 // reset
                    set incr=0 // reset
                endif
                if ( r == 4 and i == 5 ) then
                    set frameXPOS=0.10 // shifts the hero buttons to the right
                    set frameYPOS=0 // reset
                    set incr=0 // reset
                    set frameXPOSMod=0 // reset
                endif

                set incr=incr + 1

                if ( ModuloInteger(incr, 2) == 0 ) then
                    set frameXPOSMod=0.035
                else
                    if ( incr != 1 ) then
                        set frameXPOSMod=0
                        set frameYPOS=frameYPOS + 0.035
                    endif
                endif

                set s__frameBtnUnit[(r)*(9)+i]= BlzCreateFrame("ScoreScreenBottomButtonTemplate", progressionMenu, 0, 0)
                call BlzFrameSetSize(s__frameBtnUnit[(r)*(9)+i], 0.04, 0.04)
                call BlzFrameSetAbsPoint(s__frameBtnUnit[(r)*(9)+i], FRAMEPOINT_CENTER, 0.13 + frameXPOSMod + frameXPOS, 0.3 - frameYPOS)
                call BlzFrameSetVisible(s__frameBtnUnit[(r)*(9)+i], false)
                //BlzFrameSetLevel(frameBtnUnit[r][i], 9 - i)
                set imgFrame=BlzGetFrameByName("ScoreScreenButtonBackdrop", 0)
                call BlzFrameSetTexture(imgFrame, s__frameImgUnit[(r)*(9)+i], 0, true)

                // Event Click
                set trig=CreateTrigger()
                call BlzTriggerRegisterFrameEvent(trig, s__frameBtnUnit[(r)*(9)+i], FRAMEEVENT_CONTROL_CLICK)
                call TriggerAddAction(trig, function OpenSkinSelection)

                set s__frameSkinHighlight[(r)*(9)+i]= BlzCreateFrameByType("BACKDROP", "", progressionMenuDialog, "", 0)
                call BlzFrameSetSize(s__frameSkinHighlight[(r)*(9)+i], 0.048, 0.048)
                call BlzFrameSetAbsPoint(s__frameSkinHighlight[(r)*(9)+i], FRAMEPOINT_CENTER, 0.37, 0.36)
                call BlzFrameSetTexture(s__frameSkinHighlight[(r)*(9)+i], "war3mapImported\\IconHighlight.tga", 0, true)
                call BlzFrameSetVisible(s__frameSkinHighlight[(r)*(9)+i], false)

                set z=1
                set endIndex2=5
                loop
                    exitwhen z > endIndex2
                
                    if ( s__MultidimensionalArray__Type__get_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (r))))) )),( (i)))),z)) != null ) then // INLINED!!
                        if ( r == 1 ) then
                            set s__frameBtnSkinHum[(i)*(5)+z]= BlzCreateFrame("ScoreScreenBottomButtonTemplate", progressionMenuDialog, 0, 0)
                            set tmpFrame=s__frameBtnSkinHum[(i)*(5)+z]
                        elseif ( r == 2 ) then
                            set s__frameBtnSkinOrc[(i)*(5)+z]= BlzCreateFrame("ScoreScreenBottomButtonTemplate", progressionMenuDialog, 0, 0)
                            set tmpFrame=s__frameBtnSkinOrc[(i)*(5)+z]
                        elseif ( r == 3 ) then
                            set s__frameBtnSkinUnd[(i)*(5)+z]= BlzCreateFrame("ScoreScreenBottomButtonTemplate", progressionMenuDialog, 0, 0)
                            set tmpFrame=s__frameBtnSkinUnd[(i)*(5)+z]
                        elseif ( r == 4 ) then
                            set s__frameBtnSkinNig[(i)*(5)+z]= BlzCreateFrame("ScoreScreenBottomButtonTemplate", progressionMenuDialog, 0, 0)
                            set tmpFrame=s__frameBtnSkinNig[(i)*(5)+z]
                        endif


                        call BlzFrameSetSize(tmpFrame, 0.04, 0.04)
                        call BlzFrameSetAbsPoint(tmpFrame, FRAMEPOINT_CENTER, 0.37 + frameXPOS2, 0.36)
                        call BlzFrameSetVisible(tmpFrame, false)
                        call BlzFrameSetLevel(tmpFrame, 1)
                        set imgFrame=BlzGetFrameByName("ScoreScreenButtonBackdrop", 0)
                        call BlzFrameSetTexture(imgFrame, s__MultidimensionalArray__Type__get_string(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameImgSkin) )),( (r))))) )),( (i)))),z)), 0, true) // INLINED!!

                        // Event Click
                        set trig2=CreateTrigger()
                        call BlzTriggerRegisterFrameEvent(trig2, tmpFrame, FRAMEEVENT_CONTROL_CLICK)
                        call TriggerAddAction(trig2, function SelectSkin)

                        call s__MultidimensionalArray__Type__set_framehandle(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameSkinDisabled) )),( (r))))) )),( (i)))),z),BlzCreateFrame("ScoreScreenBottomButtonTemplate", progressionMenuDialog, 0, 0)) // INLINED!!
                        call BlzFrameSetSize(s__MultidimensionalArray__Type__get_framehandle(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameSkinDisabled) )),( (r))))) )),( (i)))),z)), 0.04, 0.04) // INLINED!!
                        call BlzFrameSetAbsPoint(s__MultidimensionalArray__Type__get_framehandle(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameSkinDisabled) )),( (r))))) )),( (i)))),z)), FRAMEPOINT_CENTER, 0.37 + frameXPOS2, 0.36) // INLINED!!
                        call BlzFrameSetVisible(s__MultidimensionalArray__Type__get_framehandle(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameSkinDisabled) )),( (r))))) )),( (i)))),z)), false) // INLINED!!
                        call BlzFrameSetEnable(s__MultidimensionalArray__Type__get_framehandle(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameSkinDisabled) )),( (r))))) )),( (i)))),z)), false) // INLINED!!
                        call BlzFrameSetLevel(s__MultidimensionalArray__Type__get_framehandle(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameSkinDisabled) )),( (r))))) )),( (i)))),z)), 1) // INLINED!!
                        set imgFrame=BlzGetFrameByName("ScoreScreenButtonBackdrop", 0)
                        call BlzFrameSetTexture(imgFrame, frameImgSkinDisabled, 0, true)

                        // Event Hover
                        set trig3=CreateTrigger()
                        call BlzTriggerRegisterFrameEvent(trig3, s__MultidimensionalArray__Type__get_framehandle(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameSkinDisabled) )),( (r))))) )),( (i)))),z)), FRAMEEVENT_MOUSE_ENTER) // INLINED!!
                        call TriggerAddAction(trig3, function HoverDisabledSkin)

                        set frameXPOS2=frameXPOS2 + 0.04
                    endif

                    set z=z + 1
                endloop

                set frameXPOS2=0 // reset
            endif

            set i=i + 1
        endloop

        set frameYPOS=0 // reset
        set frameXPOS=0 // reset

        set r=r + 1
    endloop

    set frameSkinTimer=BlzCreateFrame("TasButtonTextTemplate", progressionMenuDialog, 0, 0)
    call BlzFrameSetAbsPoint(frameSkinTimer, FRAMEPOINT_LEFT, 0.45, 0.32)
    call BlzFrameSetText(frameSkinTimer, "Cooldown: ")
    call BlzFrameSetVisible(frameSkinTimer, false)

    // Skin equip timer trigger
    set l__trigTimer=CreateTrigger()
    call TriggerRegisterTimerEventPeriodic(l__trigTimer, 1)
    call TriggerAddAction(l__trigTimer, function UpdateSkinTimer)

    set trigExpireTimer=CreateTrigger()
    call TriggerRegisterTimerExpireEvent(trigExpireTimer, s__udg_SkinEquipTimer[1])
    call TriggerRegisterTimerExpireEvent(trigExpireTimer, s__udg_SkinEquipTimer[2])
    call TriggerRegisterTimerExpireEvent(trigExpireTimer, s__udg_SkinEquipTimer[3])
    call TriggerRegisterTimerExpireEvent(trigExpireTimer, s__udg_SkinEquipTimer[4])
    call TriggerRegisterTimerExpireEvent(trigExpireTimer, s__udg_SkinEquipTimer[5])
    call TriggerRegisterTimerExpireEvent(trigExpireTimer, s__udg_SkinEquipTimer[6])
    call TriggerAddAction(trigExpireTimer, function SkinTimerExpire)


    // Level Up visual timers
    set p=1
    set endIndex=6
    loop
        exitwhen p > endIndex
        set trig=CreateTrigger()
        call TriggerRegisterTimerExpireEvent(trig, s__udg_LevelUpTimerBlob[p])
        call TriggerAddAction(trig, function LevelUpBlob)

        set p=p + 1
    endloop

    set p=1
    set endIndex=6
    loop
        exitwhen p > endIndex
        set trig=CreateTrigger()
        call TriggerRegisterTimerExpireEvent(trig, s__udg_LevelUpTimerText[p])
        call TriggerAddAction(trig, function LevelUptext)

        set p=p + 1
    endloop
endfunction

function ExperienceGain takes nothing returns nothing
    local integer p= GetConvertedPlayerId(GetOwningPlayer(GetKillingUnit())) - 6
    local integer r= s__udg_PlayerRace[p]
    local integer uLvl= 0
    local boolean isNewLevel= false
    local real xpBarPercent

    if ( r > 4 ) then
        return
    endif

    if ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) == false ) then
        set uLvl=GetUnitLevel(GetTriggerUnit()) / 2
    else
        set uLvl=GetHeroLevel(GetTriggerUnit()) / 2
    endif

    if ( s__playerLevels[(p)*(4)+r] <= ds_MAX_LEVEL ) then
        if ( IsPlayerInForce(GetOwningPlayer(GetKillingUnit()), s__udg_Teams[1]) == true ) then
            set s__experience[(p)*(4)+r]= s__experience[(p)*(4)+r] + uLvl * ( CountPlayersInForceBJ(s__udg_Teams[1]) - 3 )
        else
            set s__experience[(p)*(4)+r]= s__experience[(p)*(4)+r] + uLvl * ( CountPlayersInForceBJ(s__udg_Teams[2]) - 3 )
        endif

        // Level Up
        if ( s__experience[(p)*(4)+r] >= s__levels[s__playerLevels[(p)*(4)+r]] ) then
            set s__playerLevels[(p)*(4)+r]= s__playerLevels[(p)*(4)+r] + 1
            set isNewLevel=true
            if ( GetLocalPlayer() == Player(p - 1) ) then
                call PlaySoundBJ(gg_snd_Shinobi_Execution)
                call BlzFrameSetVisible(frameLevelUpBlob, true)
                call BlzFrameSetVisible(frameLevelUpText, true)
                call BlzFrameSetText(s__frameXPBarRaceText[r], s__XPBarRaceText[r] + I2S(s__playerLevels[(p)*(4)+r]))
            endif
            call StartTimerBJ(s__udg_LevelUpTimerBlob[p], false, 0.05) // Blob on XP bar
            call StartTimerBJ(s__udg_LevelUpTimerText[p], false, 0.05) // Text on XP bar
        endif

        // XP bar update
        set xpBarPercent=I2R(s__experience[(p)*(4)+r] - s__levels[s__playerLevels[(p)*(4)+r] - 1]) / I2R(s__levels[s__playerLevels[(p)*(4)+r]] - s__levels[s__playerLevels[(p)*(4)+r] - 1]) * 100

        if ( GetLocalPlayer() == Player(p - 1) ) then
            call BlzFrameSetSize(s__XPBarFillMainUI[r], 0.002 * xpBarPercent, 0.014)
            call BlzFrameSetText(s__frameXPBarTextMainUI[r], "Experience: " + I2S(s__experience[(p)*(4)+r]) + "/" + I2S(s__levels[s__playerLevels[(p)*(4)+r]]) + " - Level " + I2S(s__playerLevels[(p)*(4)+r]))
            call BlzFrameSetSize(s__XPBarFill[r], 0.001 * xpBarPercent, 0.013)
        endif

        // Visual update fix for XP bar
        if ( isNewLevel == true ) then
            if ( GetLocalPlayer() == Player(p - 1) ) then
                call BlzFrameSetSize(s__XPBarFillMainUI[r], 0.002, 0.014)
                call BlzFrameSetSize(s__XPBarFill[r], 0.002, 0.013)
            endif
        endif

        if ( s__playerLevels[(p)*(4)+r] == ds_MAX_LEVEL ) then
            if ( GetLocalPlayer() == Player(p - 1) ) then
                call BlzFrameSetSize(s__XPBarFill[r], 0.1, 0.013)
            endif
        endif
    endif
endfunction


function ScoreboardRace takes nothing returns nothing
 local integer p= GetConvertedPlayerId(GetEnumPlayer())
	if ( s__udg_PlayerRace[p] == 1 ) then
		if ( GetLocalPlayer() == GetEnumPlayer() ) then
			call BlzFrameSetVisible(frameIconHuman, true)
		endif
	endif
	if ( s__udg_PlayerRace[p] == 2 ) then
		if ( GetLocalPlayer() == GetEnumPlayer() ) then
			call BlzFrameSetVisible(frameIconOrc, true)
		endif
	endif
	if ( s__udg_PlayerRace[p] == 3 ) then
		if ( GetLocalPlayer() == GetEnumPlayer() ) then
			call BlzFrameSetVisible(frameIconUndead, true)
		endif
	endif
	if ( s__udg_PlayerRace[p] == 4 ) then
		if ( GetLocalPlayer() == GetEnumPlayer() ) then
			call BlzFrameSetVisible(frameIconNightElves, true)
		endif
	endif
endfunction


function ShowScoreboard takes nothing returns nothing
 local integer i
 local integer endIndex
    
	call ForForce(GetPlayersAll(), function ScoreboardRace) // sets the correct icon
	call BlzFrameSetVisible(scoreboard, true)

	set i=1
	set endIndex=6
	loop
		exitwhen i > endIndex
		call BlzFrameSetText(s__pScore[i], I2S(s__udg_TotalScore[i]))
		call BlzFrameSetText(s__pKills[i], I2S(s__udg_TotalKills[i]))
		call BlzFrameSetText(s__pDamage[i], I2S(R2I(s__udg_TotalDamage[i])))
		//call BlzFrameSetText(pUnitsSpawned[i], I2S((udg_TotalUnitsSpawned[i])))
		call BlzFrameSetText(s__pGoldEarned[i], I2S(s__udg_TotalGoldEarned[i]))
		if ( s__udg_Victory[i] == true ) then
			if ( GetLocalPlayer() == Player(i - 1) ) then
				call BlzFrameSetVisible(victory, true)
				call BlzFrameSetVisible(defeat, false)
			endif
		endif
		set i=i + 1
	endloop

	// Total

	set s__totalScore[1]= s__udg_TotalScore[1] + s__udg_TotalScore[3] + s__udg_TotalScore[5]
	set s__totalKills[1]= s__udg_TotalKills[1] + s__udg_TotalKills[3] + s__udg_TotalKills[5]
	set s__totalDamage[1]= R2I(s__udg_TotalDamage[1]) + R2I(s__udg_TotalDamage[3]) + R2I(s__udg_TotalDamage[5])
	set s__totalUnits[1]= s__udg_TotalUnitsSpawned[1] + s__udg_TotalUnitsSpawned[3] + s__udg_TotalUnitsSpawned[5]
	set s__totalGold[1]= s__udg_TotalGoldEarned[1] + s__udg_TotalGoldEarned[3] + s__udg_TotalGoldEarned[5]
	set s__totalScore[2]= s__udg_TotalScore[2] + s__udg_TotalScore[4] + s__udg_TotalScore[6]
	set s__totalKills[2]= s__udg_TotalKills[2] + s__udg_TotalKills[4] + s__udg_TotalKills[6]
	set s__totalDamage[2]= R2I(s__udg_TotalDamage[2]) + R2I(s__udg_TotalDamage[4]) + R2I(s__udg_TotalDamage[6])
	set s__totalUnits[2]= s__udg_TotalUnitsSpawned[2] + s__udg_TotalUnitsSpawned[4] + s__udg_TotalUnitsSpawned[6]
	set s__totalGold[2]= s__udg_TotalGoldEarned[2] + s__udg_TotalGoldEarned[4] + s__udg_TotalGoldEarned[6]

	call BlzFrameSetText(scoreTeam1, totalColor + I2S(s__totalScore[1]) + "|r")
	call BlzFrameSetText(killsTeam1, totalColor + I2S(s__totalKills[1]) + "|r")
	call BlzFrameSetText(damageTeam1, totalColor + I2S(R2I(s__totalDamage[1])) + "|r")
	//call BlzFrameSetText(unitsTeam1, totalColor + I2S(totalUnits[1]) + "|r")
	call BlzFrameSetText(goldTeam1, totalColor + I2S(s__totalGold[1]) + "|r")

	call BlzFrameSetText(scoreTeam2, totalColor + I2S(s__totalScore[2]) + "|r")
	call BlzFrameSetText(killsTeam2, totalColor + I2S(s__totalKills[2]) + "|r")
	call BlzFrameSetText(damageTeam2, totalColor + I2S(R2I(s__totalDamage[2])) + "|r")
	//call BlzFrameSetText(unitsTeam2, totalColor + I2S(totalUnits[2]) + "|r")
	call BlzFrameSetText(goldTeam2, totalColor + I2S(s__totalGold[2]) + "|r")

	// Initialize Vote

	set noPlayersOnRoundEnd=GetActivePlayers()
	call BlzFrameSetText(xrVotesText, "Votes: " + "0" + "/" + I2S(noPlayersOnRoundEnd))
    
endfunction


function StopAndResetUnitSpawn takes nothing returns nothing
 local integer p
 local integer endIndex
 local integer i
 local integer endIndex1

	call PauseTimer(s__udg_SpawnDelayTimer[1])
	call PauseTimer(s__udg_SpawnDelayTimer[2])

	set p=1
	set endIndex=6
	loop
		exitwhen p > endIndex
        
		set i=1
		set endIndex1=65
		loop
			exitwhen i > endIndex1
			set s__unitSpawns[(p)*(65)+i]= 0
			set i=i + 1
		endloop

		set s__udg_TotalUnits[p]= 0
		set p=p + 1
	endloop
endfunction

function OnClickXR takes nothing returns nothing
 local integer p= GetConvertedPlayerId(GetTriggerPlayer())
 local integer i
 local integer endIndex

	call BlzFrameSetVisible(s__pVote[p], false)
	call BlzFrameSetVisible(s__pVoteYes[p], true)
    
	if ( s__udg_XRVoteClickCheck[p] == false ) then
		set s__udg_XRVoteClickCheck[p]= true
		set s__xrVotes[p]= 1

		set totalVotes=0

		set i=1
		set endIndex=6
		loop
			exitwhen i > endIndex
			set totalVotes=totalVotes + s__xrVotes[i]
			set i=i + 1
		endloop

		if ( totalVotes >= noPlayersOnRoundEnd ) then
			set totalVotes=0
			call BlzFrameSetVisible(frameIconHuman, false)
			call BlzFrameSetVisible(frameIconOrc, false)
			call BlzFrameSetVisible(frameIconUndead, false)
			call BlzFrameSetVisible(frameIconNightElves, false)
			call BlzFrameSetVisible(victory, false)
			call BlzFrameSetVisible(defeat, true)
			call StopAndResetUnitSpawn()
			call InitiateGameModeSelection()
			call TriggerExecuteBJ(gg_trg_Reset_Game, true)
			set i=1
			set endIndex=6
			loop
				exitwhen i > endIndex
				set racialTowerIsDead[i]=false
				set racialTowerType[i]=0
				set selectedSkin[i]=1
				set s__xrVotes[i]= 0
				call BlzFrameSetVisible(s__pVoteYes[i], false)
				call BlzFrameSetVisible(s__pVote[i], true)

				set i=i + 1
			endloop
		endif
        
		call BlzFrameSetText(xrVotesText, "Votes: " + I2S(totalVotes) + "/" + I2S(noPlayersOnRoundEnd))
	endif
endfunction

function OnClickContinue takes nothing returns nothing
 local integer p= GetConvertedPlayerId(GetTriggerPlayer())
	if ( GetLocalPlayer() == GetTriggerPlayer() ) then
		call BlzFrameSetVisible(scoreboard, false)
	endif
    
	//if(udg_MMD_Wins[p] >= udg_MMD_Losses[p]) then 
	//    call CustomVictoryBJ(Player(p - 1), false, true)
	//else
	//    call CustomDefeatBJ(Player(p - 1), "Defeat")
	//endif

	call CustomVictoryBJ(Player(p - 1), false, true)

endfunction

function CreateScoreboard takes nothing returns nothing
 local framehandle team1
 local framehandle unitsKilled
 local framehandle damageDealt
 local framehandle score
 local framehandle goldEarned
 local framehandle frameVote
 local framehandle team2
 local framehandle unitsKilled2
 local framehandle damageDealt2
 local framehandle score2
 local framehandle goldEarned2
 local framehandle frameVote2
 local string pColorEnd
 local real yPos
 local integer p
 local integer i
 local integer endIndex
 local framehandle total1
 local framehandle total2
 local trigger trig
 local trigger trig2

	set scoreboard=BlzCreateFrame("EscMenuBackdrop", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), 0, 0)
	call BlzFrameSetSize(scoreboard, 0.6, 0.35)
	call BlzFrameSetAbsPoint(scoreboard, FRAMEPOINT_CENTER, 0.4, 0.35)
	call BlzFrameSetVisible(scoreboard, false)

	set frameIconHuman=BlzCreateFrameByType("BACKDROP", "", scoreboard, "", 0)
	call BlzFrameSetSize(frameIconHuman, 0.15, 0.15)
	call BlzFrameSetAbsPoint(frameIconHuman, FRAMEPOINT_CENTER, 0.6, 0.45)
	call BlzFrameSetTexture(frameIconHuman, "war3mapImported\\HumanBanner.dds", 0, true)
	call BlzFrameSetVisible(frameIconHuman, false)

	set frameIconOrc=BlzCreateFrameByType("BACKDROP", "", scoreboard, "", 0)
	call BlzFrameSetSize(frameIconOrc, 0.15, 0.15)
	call BlzFrameSetAbsPoint(frameIconOrc, FRAMEPOINT_CENTER, 0.6, 0.45)
	call BlzFrameSetTexture(frameIconOrc, "war3mapImported\\OrcBanner.dds", 0, true)
	call BlzFrameSetVisible(frameIconOrc, false)

	set frameIconUndead=BlzCreateFrameByType("BACKDROP", "", scoreboard, "", 0)
	call BlzFrameSetSize(frameIconUndead, 0.15, 0.15)
	call BlzFrameSetAbsPoint(frameIconUndead, FRAMEPOINT_CENTER, 0.6, 0.45)
	call BlzFrameSetTexture(frameIconUndead, "war3mapImported\\UndeadBanner.dds", 0, true)
	call BlzFrameSetVisible(frameIconUndead, false)

	set frameIconNightElves=BlzCreateFrameByType("BACKDROP", "", scoreboard, "", 0)
	call BlzFrameSetSize(frameIconNightElves, 0.15, 0.15)
	call BlzFrameSetAbsPoint(frameIconNightElves, FRAMEPOINT_CENTER, 0.6, 0.45)
	call BlzFrameSetTexture(frameIconNightElves, "war3mapImported\\NightElfBanner.dds", 0, true)
	call BlzFrameSetVisible(frameIconNightElves, false)

	set victory=BlzCreateFrameByType("BACKDROP", "", scoreboard, "", 0)
	call BlzFrameSetSize(victory, 0.2, 0.065)
	call BlzFrameSetAbsPoint(victory, FRAMEPOINT_LEFT, 0.135, 0.24)
	call BlzFrameSetTexture(victory, "war3mapImported\\Victory.tga", 0, true)
	call BlzFrameSetVisible(victory, false)

	set defeat=BlzCreateFrameByType("BACKDROP", "", scoreboard, "", 0)
	call BlzFrameSetSize(defeat, 0.2, 0.065)
	call BlzFrameSetAbsPoint(defeat, FRAMEPOINT_LEFT, 0.135, 0.24)
	call BlzFrameSetTexture(defeat, "war3mapImported\\Defeat.tga", 0, true)
	call BlzFrameSetVisible(defeat, true)

	set continue=BlzCreateFrame("ScriptDialogButton", scoreboard, 0, 0)
	call BlzFrameSetSize(continue, 0.08, 0.04)
	call BlzFrameSetAbsPoint(continue, FRAMEPOINT_CENTER, 0.635, 0.23)
	call BlzFrameSetText(continue, "Quit")

	set extraRound=BlzCreateFrame("ScriptDialogButton", scoreboard, 0, 0)
	call BlzFrameSetSize(extraRound, 0.12, 0.04)
	call BlzFrameSetAbsPoint(extraRound, FRAMEPOINT_CENTER, 0.52, 0.23)
	call BlzFrameSetText(extraRound, "Extra Round")

	set xrVotesText=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(xrVotesText, FRAMEPOINT_CENTER, 0.52, 0.26)
	call BlzFrameSetText(xrVotesText, "Votes: 0/6")

	set team1=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(team1, FRAMEPOINT_LEFT, 0.135, 0.49)
	call BlzFrameSetText(team1, "Team 1")

	set score=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(score, FRAMEPOINT_LEFT, 0.235, 0.49)
	call BlzFrameSetText(score, "Score")

	set unitsKilled=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(unitsKilled, FRAMEPOINT_LEFT, 0.285, 0.49)
	call BlzFrameSetText(unitsKilled, "Kills")

	set damageDealt=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(damageDealt, FRAMEPOINT_LEFT, 0.345, 0.49)
	call BlzFrameSetText(damageDealt, "Damage Done")

	set goldEarned=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(goldEarned, FRAMEPOINT_LEFT, 0.425, 0.49)
	call BlzFrameSetText(goldEarned, "Gold Earned")

	set frameVote=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(frameVote, FRAMEPOINT_LEFT, 0.495, 0.49)
	call BlzFrameSetText(frameVote, "Vote")

	set team2=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(team2, FRAMEPOINT_LEFT, 0.135, 0.38)
	call BlzFrameSetText(team2, "Team 2")

	set score2=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(score2, FRAMEPOINT_LEFT, 0.235, 0.38)
	call BlzFrameSetText(score2, "Score")

	set unitsKilled2=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(unitsKilled2, FRAMEPOINT_LEFT, 0.285, 0.38)
	call BlzFrameSetText(unitsKilled2, "Kills")

	set damageDealt2=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(damageDealt2, FRAMEPOINT_LEFT, 0.345, 0.38)
	call BlzFrameSetText(damageDealt2, "Damage Done")

	set goldEarned2=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(goldEarned2, FRAMEPOINT_LEFT, 0.425, 0.38)
	call BlzFrameSetText(goldEarned2, "Gold Earned")

	set frameVote2=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(frameVote2, FRAMEPOINT_LEFT, 0.495, 0.38)
	call BlzFrameSetText(frameVote2, "Vote")



	set pColorEnd="|r"
	

	// Team 1
	set yPos=0.05
	set p=0

	set i=1
	set endIndex=3
	loop
		exitwhen i > endIndex
		if ( s__udg_ActivePlayers[i + p] == true ) then
			set s__pBar[i + p]= BlzCreateFrameByType("BACKDROP", "", scoreboard, "", 0)
			call BlzFrameSetSize(s__pBar[i + p], 0.385, 0.018)
			call BlzFrameSetAbsPoint(s__pBar[i + p], FRAMEPOINT_LEFT, 0.135, 0.52 - yPos)
			call BlzFrameSetTexture(s__pBar[i + p], "war3mapImported\\BarPlayer" + I2S(i + p) + ".tga", 0, true)
			call BlzFrameSetAlpha(s__pBar[i + p], 100)

			set s__pName[i + p]= BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
			call BlzFrameSetAbsPoint(s__pName[i + p], FRAMEPOINT_LEFT, 0.135, 0.52 - yPos)
			//call BlzFrameSetText(pName[i + p], pColor[i + p] + GetShortPlayerName(Player(i - 1 + p)) + pColorEnd)
			call BlzFrameSetText(s__pName[i + p], GetShortPlayerName(Player(i - 1 + p)))

			set s__pScore[i + p]= BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
			call BlzFrameSetAbsPoint(s__pScore[i + p], FRAMEPOINT_LEFT, 0.235, 0.52 - yPos)
			call BlzFrameSetText(s__pScore[i + p], "0")

			set s__pKills[i + p]= BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
			call BlzFrameSetAbsPoint(s__pKills[i + p], FRAMEPOINT_LEFT, 0.285, 0.52 - yPos)
			call BlzFrameSetText(s__pKills[i + p], "0")

			set s__pDamage[i + p]= BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
			call BlzFrameSetAbsPoint(s__pDamage[i + p], FRAMEPOINT_LEFT, 0.345, 0.52 - yPos)
			call BlzFrameSetText(s__pDamage[i + p], "0")

			set s__pGoldEarned[i + p]= BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
			call BlzFrameSetAbsPoint(s__pGoldEarned[i + p], FRAMEPOINT_LEFT, 0.425, 0.52 - yPos)
			call BlzFrameSetText(s__pGoldEarned[i + p], "0")

			set s__pVote[i + p]= BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
			call BlzFrameSetAbsPoint(s__pVote[i + p], FRAMEPOINT_LEFT, 0.495, 0.52 - yPos)
			call BlzFrameSetText(s__pVote[i + p], "-")

			set s__pVoteYes[i + p]= BlzCreateFrameByType("BACKDROP", "", scoreboard, "", 0)
			call BlzFrameSetAbsPoint(s__pVoteYes[i + p], FRAMEPOINT_LEFT, 0.495, 0.52 - yPos)
			call BlzFrameSetSize(s__pVoteYes[i + p], 0.02, 0.02)
			call BlzFrameSetTexture(s__pVoteYes[i + p], "war3mapImported\\green-check.dds", 0, true)
			call BlzFrameSetVisible(s__pVoteYes[i + p], false)

		endif
		set yPos=yPos + 0.02
		set p=p + 1
		set i=i + 1
	endloop

	// Total Team 1
	set total1=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(total1, FRAMEPOINT_LEFT, 0.135, 0.41)
	call BlzFrameSetText(total1, "Total")

	set scoreTeam1=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(scoreTeam1, FRAMEPOINT_LEFT, 0.235, 0.41)
	call BlzFrameSetText(scoreTeam1, totalColor + "0|r")

	set killsTeam1=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(killsTeam1, FRAMEPOINT_LEFT, 0.285, 0.41)
	call BlzFrameSetText(killsTeam1, totalColor + "0|r")

	set damageTeam1=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(damageTeam1, FRAMEPOINT_LEFT, 0.345, 0.41)
	call BlzFrameSetText(damageTeam1, totalColor + "0|r")

	set goldTeam1=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(goldTeam1, FRAMEPOINT_LEFT, 0.425, 0.41)
	call BlzFrameSetText(goldTeam1, totalColor + "0|r")

	// Team 2
	set yPos=0.05
	set p=1
	set i=1
	loop
		exitwhen i > endIndex
		if ( s__udg_ActivePlayers[i + p] == true ) then
			set s__pBar[i + p]= BlzCreateFrameByType("BACKDROP", "", scoreboard, "", 0)
			call BlzFrameSetSize(s__pBar[i + p], 0.385, 0.018)
			call BlzFrameSetAbsPoint(s__pBar[i + p], FRAMEPOINT_LEFT, 0.135, 0.41 - yPos)
			call BlzFrameSetTexture(s__pBar[i + p], "war3mapImported\\BarPlayer" + I2S(i + p) + ".tga", 0, true)
			call BlzFrameSetAlpha(s__pBar[i + p], 100)

			set s__pName[i + p]= BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
			call BlzFrameSetAbsPoint(s__pName[i + p], FRAMEPOINT_LEFT, 0.135, 0.41 - yPos)
			//call BlzFrameSetText(pName[i + p], pColor[i + p] + GetShortPlayerName(Player(i - 1 + p)) + pColorEnd)
			call BlzFrameSetText(s__pName[i + p], GetShortPlayerName(Player(i - 1 + p)))

			set s__pScore[i + p]= BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
			call BlzFrameSetAbsPoint(s__pScore[i + p], FRAMEPOINT_LEFT, 0.235, 0.41 - yPos)
			call BlzFrameSetText(s__pScore[i + p], "0")

			set s__pKills[i + p]= BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
			call BlzFrameSetAbsPoint(s__pKills[i + p], FRAMEPOINT_LEFT, 0.285, 0.41 - yPos)
			call BlzFrameSetText(s__pKills[i + p], "0")

			set s__pDamage[i + p]= BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
			call BlzFrameSetAbsPoint(s__pDamage[i + p], FRAMEPOINT_LEFT, 0.345, 0.41 - yPos)
			call BlzFrameSetText(s__pDamage[i + p], "0")

			set s__pGoldEarned[i + p]= BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
			call BlzFrameSetAbsPoint(s__pGoldEarned[i + p], FRAMEPOINT_LEFT, 0.425, 0.41 - yPos)
			call BlzFrameSetText(s__pGoldEarned[i + p], "0")

			set s__pVote[i + p]= BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
			call BlzFrameSetAbsPoint(s__pVote[i + p], FRAMEPOINT_LEFT, 0.495, 0.41 - yPos)
			call BlzFrameSetText(s__pVote[i + p], "-")

			set s__pVoteYes[i + p]= BlzCreateFrameByType("BACKDROP", "", scoreboard, "", 0)
			call BlzFrameSetAbsPoint(s__pVoteYes[i + p], FRAMEPOINT_LEFT, 0.495, 0.41 - yPos)
			call BlzFrameSetSize(s__pVoteYes[i + p], 0.02, 0.02)
			call BlzFrameSetTexture(s__pVoteYes[i + p], "war3mapImported\\green-check.dds", 0, true)
			call BlzFrameSetVisible(s__pVoteYes[i + p], false)
		endif
		set yPos=yPos + 0.02
		set p=p + 1
		set i=i + 1
	endloop

	// Total Team 2
	set total2=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(total2, FRAMEPOINT_LEFT, 0.135, 0.3)
	call BlzFrameSetText(total2, "Total")

	set scoreTeam2=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(scoreTeam2, FRAMEPOINT_LEFT, 0.235, 0.3)
	call BlzFrameSetText(scoreTeam2, totalColor + "0" + pColorEnd)

	set killsTeam2=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(killsTeam2, FRAMEPOINT_LEFT, 0.285, 0.3)
	call BlzFrameSetText(killsTeam2, totalColor + "0" + pColorEnd)

	set damageTeam2=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(damageTeam2, FRAMEPOINT_LEFT, 0.345, 0.3)
	call BlzFrameSetText(damageTeam2, totalColor + "0" + pColorEnd)

	set goldTeam2=BlzCreateFrame("TasButtonTextTemplate", scoreboard, 0, 0)
	call BlzFrameSetAbsPoint(goldTeam2, FRAMEPOINT_LEFT, 0.425, 0.3)
	call BlzFrameSetText(goldTeam2, totalColor + "0" + pColorEnd)

	// BUTTON CALLBACKS //
	set trig=CreateTrigger()
	call BlzTriggerRegisterFrameEvent(trig, continue, FRAMEEVENT_CONTROL_CLICK)
	call TriggerAddAction(trig, function OnClickContinue)

	set trig2=CreateTrigger()
	call BlzTriggerRegisterFrameEvent(trig2, extraRound, FRAMEEVENT_CONTROL_CLICK)
	call TriggerAddAction(trig2, function OnClickXR)

	// This holds the votes for the players
	set timeRemainingRound=30
	set noPlayersOnRoundEnd=GetActivePlayers()
	set i=1
	set endIndex=6
	loop
		exitwhen i > endIndex
		set s__xrVotes[i]= 0
		set i=i + 1
	endloop
endfunction
function UnitDeactivateAbility takes integer playerNum,unit u returns nothing
 local integer unitType= LoadInteger(udg_SpawnTable, 0, GetUnitTypeId(GetEnumUnit()))

	if ( s__udg_activeSlow[playerNum] == false ) then
		call IssueImmediateOrderBJ(u, "slowoff")
	endif
	if ( s__udg_activeHeal[playerNum] == false ) then
		call IssueImmediateOrderBJ(u, "healoff")
	endif
	if ( s__udg_activeBloodlust[playerNum] == false ) then
		call IssueImmediateOrderBJ(u, "bloodlustoff")
	endif
	if ( s__udg_activeEnsnare[playerNum] == false ) then
		call IssueImmediateOrderBJ(u, "weboff")
	endif
	if ( s__udg_activeWeb[playerNum] == false ) then
		call IssueImmediateOrderBJ(u, "weboff")
	endif
	if ( s__udg_activeCurse[playerNum] == false ) then
		call IssueImmediateOrderBJ(u, "curseoff")
	endif
	if ( s__udg_activeEssenceOfBlight[playerNum] == false ) then
		call IssueImmediateOrderBJ(u, "replenishlifeoff")
	endif
	if ( s__udg_activeRaiseDead[playerNum] == false ) then
		call IssueImmediateOrderBJ(u, "raisedeadoff")
	endif
	if ( s__udg_activeOrbOfAnnihilation[playerNum] == false ) then
		call IssueImmediateOrderBJ(u, "unflamingattack")
	endif
	if ( s__udg_activeAbolishMagic[playerNum] == false ) then
		call IssueImmediateOrderBJ(u, "autodispeloff")
	endif
	if ( s__udg_activeFaerieFire[playerNum] == false ) then
		call IssueImmediateOrderBJ(u, "faeriefireoff")
	endif
	if ( s__udg_activePhaseShift[playerNum] == false ) then
		call IssueImmediateOrderBJ(u, "phaseshiftoff")
	endif
endfunction

function BuildingGroupSpawn1 takes nothing returns nothing
 local integer unitType= LoadInteger(udg_SpawnTable, 0, GetUnitTypeId(GetEnumUnit()))
 local location point= GetRectCenter(gg_rct_Team_1_Spawn)
 local location point2= GetRectCenter(s__udg_BuildRegion[s__udg_SpawnPlayers[1]])
 local location point3= GetUnitLoc(GetEnumUnit())
 local location point4= PolarProjectionBJ(point, DistanceBetweenPoints(point2, point3), AngleBetweenPoints(point2, point3))
 local integer p= GetConvertedPlayerId(Player(s__udg_SpawnPlayers[1] - 1))
 local integer r= s__udg_PlayerRace[p]
 local unit u= null
 local group unitGroup
 local integer i
 local integer itemID
 local item it

 local integer skinBuildingId= 0
 local integer skinId= 0
 local integer unitCustomValue= 0
    
	set unitCustomValue=LoadInteger(udg_CustomValueSkinTable, GetUnitTypeId(GetEnumUnit()), s__udg_PlayerRace[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))])
	call SetUnitUserData(GetEnumUnit(), unitCustomValue)
    
	if ( r == 1 ) then
		set skinBuildingId=LoadInteger(s__udg_SkinTable[r], unitCustomValue, s__equippedSkinHum[(p)*(5)+unitCustomValue])
		set skinId=LoadInteger(udg_SpawnTable, 0, skinBuildingId)
	elseif ( r == 2 ) then
		set skinBuildingId=LoadInteger(s__udg_SkinTable[r], unitCustomValue, s__equippedSkinOrc[(p)*(5)+unitCustomValue])
		set skinId=LoadInteger(udg_SpawnTable, 0, skinBuildingId)
	elseif ( r == 3 ) then
		set skinBuildingId=LoadInteger(s__udg_SkinTable[r], unitCustomValue, s__equippedSkinUnd[(p)*(5)+unitCustomValue])
		set skinId=LoadInteger(udg_SpawnTable, 0, skinBuildingId)
	elseif ( r == 4 ) then
		set skinBuildingId=LoadInteger(s__udg_SkinTable[r], unitCustomValue, s__equippedSkinNig[(p)*(5)+unitCustomValue])
		set skinId=LoadInteger(udg_SpawnTable, 0, skinBuildingId)
	endif

	if ( skinId == 0 ) then
		set skinId=unitType
	endif

	// Units
	if ( IsUnitType(GetEnumUnit(), UNIT_TYPE_HERO) == false ) then
		if ( GetUnitTypeId(GetEnumUnit()) != 'h019' ) then // Phoenix shouldn't be sellable
			call UnitRemoveAbility(GetEnumUnit(), 'A000') // Sell 100
			call UnitAddAbility(GetEnumUnit(), 'A0BK') // Sell 75
		endif
		set u=BlzCreateUnitWithSkin(Player(s__udg_SpawnPlayers[1] + 5), unitType, GetLocationX(point4), GetLocationY(point4), 180, skinId)
		set unitGroup=LoadGroupHandle(udg_UnitTypeTable, unitType, 0)
		call GroupAddUnit(unitGroup, u) // AI unit group
		call UnitDeactivateAbility(s__udg_SpawnPlayers[1] + 6 , u)
	else // Heroes
		if ( IsUnitDeadBJ(LoadUnitHandle(udg_HeroTable, 0, GetHandleId(GetEnumUnit()))) == true or IsUnitInGroup(LoadUnitHandle(udg_HeroTable, 0, GetHandleId(GetEnumUnit())), udg_DeadHeroes) == true ) then
			set u=LoadUnitHandle(udg_HeroTable, 0, GetHandleId(GetEnumUnit()))
			call ReviveHeroLoc(u, point4, true)
			call BlzSetUnitSkin(u, skinId)
			call GroupRemoveUnit(udg_DeadHeroes, u)
			// activate autocast hero abilites (bug fix)
            
			if ( s__udg_activeSearingArrows[s__udg_SpawnPlayers[1]] == true ) then
				call IssueImmediateOrderBJ(u, "flamingarrows")
			else
				call IssueImmediateOrderBJ(u, "unflamingarrows")
			endif
			if ( s__udg_activeFrostShield[s__udg_SpawnPlayers[1]] == true ) then
				call IssueImmediateOrderBJ(u, "frostarmoron")
			else
				call IssueImmediateOrderBJ(u, "frostarmoroff")
			endif
			if ( s__udg_activeCarrionBeetles[s__udg_SpawnPlayers[1]] == true ) then
				call IssueImmediateOrderBJ(u, "carrionscarabson")
			else
				call IssueImmediateOrderBJ(u, "carrionscarabsoff")
			endif
			if ( s__udg_activeFrostArrows[s__udg_SpawnPlayers[1]] == true ) then
				call IssueImmediateOrderBJ(u, "coldarrows")
			else
				call IssueImmediateOrderBJ(u, "uncoldarrows")
			endif
			if ( s__udg_activeBlackArrow[s__udg_SpawnPlayers[1]] == true ) then
				call IssueImmediateOrderBJ(u, "blackarrowon")
			else
				call IssueImmediateOrderBJ(u, "blackarrowoff")
			endif
			if ( s__udg_activeEnchantedQuiver[s__udg_SpawnPlayers[1]] == true ) then
				call IssueImmediateOrderBJ(u, "flamingattack")
			else
				call IssueImmediateOrderBJ(u, "unflamingattack")
			endif
			if ( s__udg_activeVirus[s__udg_SpawnPlayers[1]] == true ) then
				call IssueImmediateOrderBJ(u, "parasiteon")
			else
				call IssueImmediateOrderBJ(u, "parasiteoff")
			endif
            

			// Items
			set i=0
			loop
			exitwhen i > 5
				set it=UnitItemInSlot(GetEnumUnit(), i)
				set itemID=GetItemTypeId(it)
                
				set it=UnitItemInSlot(u, i)
				call RemoveItem(it)
				call UnitAddItemToSlotById(u, itemID, i)

				set i=i + 1
			endloop
		endif
	endif

	call UnitMoveLoc(u)
	call RemoveLocation(point)
	call RemoveLocation(point2)
	call RemoveLocation(point3)
	call RemoveLocation(point4)
endfunction

function BuildingGroupSpawn2 takes nothing returns nothing
 local integer unitType= LoadInteger(udg_SpawnTable, 0, GetUnitTypeId(GetEnumUnit()))
 local location point= GetRectCenter(gg_rct_Team_2_Spawn)
 local location point2= GetRectCenter(s__udg_BuildRegion[s__udg_SpawnPlayers[2]])
 local location point3= GetUnitLoc(GetEnumUnit())
 local location point4= PolarProjectionBJ(point, DistanceBetweenPoints(point2, point3), AngleBetweenPoints(point2, point3))
 local integer p= GetConvertedPlayerId(Player(s__udg_SpawnPlayers[2] - 1))
 local integer r= s__udg_PlayerRace[p]
 local unit u= null
 local group unitGroup
 local integer i
 local integer itemID
 local item it

 local integer skinBuildingId= 0
 local integer skinId= 0
 local integer unitCustomValue= 0
    
	set unitCustomValue=LoadInteger(udg_CustomValueSkinTable, GetUnitTypeId(GetEnumUnit()), s__udg_PlayerRace[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))])
	call SetUnitUserData(GetEnumUnit(), unitCustomValue)
    
	if ( r == 1 ) then
		set skinBuildingId=LoadInteger(s__udg_SkinTable[r], unitCustomValue, s__equippedSkinHum[(p)*(5)+unitCustomValue])
		set skinId=LoadInteger(udg_SpawnTable, 0, skinBuildingId)
	elseif ( r == 2 ) then
		set skinBuildingId=LoadInteger(s__udg_SkinTable[r], unitCustomValue, s__equippedSkinOrc[(p)*(5)+unitCustomValue])
		set skinId=LoadInteger(udg_SpawnTable, 0, skinBuildingId)
	elseif ( r == 3 ) then
		set skinBuildingId=LoadInteger(s__udg_SkinTable[r], unitCustomValue, s__equippedSkinUnd[(p)*(5)+unitCustomValue])
		set skinId=LoadInteger(udg_SpawnTable, 0, skinBuildingId)
	elseif ( r == 4 ) then
		set skinBuildingId=LoadInteger(s__udg_SkinTable[r], unitCustomValue, s__equippedSkinNig[(p)*(5)+unitCustomValue])
		set skinId=LoadInteger(udg_SpawnTable, 0, skinBuildingId)
	endif

	if ( skinId == 0 ) then
		set skinId=unitType
	endif

	if ( IsUnitType(GetEnumUnit(), UNIT_TYPE_HERO) == false ) then
		if ( GetUnitTypeId(GetEnumUnit()) != 'h019' ) then // Phoenix shouldn't be sellable
			call UnitRemoveAbility(GetEnumUnit(), 'A000') // Sell 100
			call UnitAddAbility(GetEnumUnit(), 'A0BK') // Sell 75
		endif
		set u=BlzCreateUnitWithSkin(Player(s__udg_SpawnPlayers[2] + 5), unitType, GetLocationX(point4), GetLocationY(point4), 0, skinId)
		set unitGroup=LoadGroupHandle(udg_UnitTypeTable, unitType, 0)
		call GroupAddUnit(unitGroup, u)
		call UnitDeactivateAbility(s__udg_SpawnPlayers[2] + 6 , u)
	else
		if ( IsUnitDeadBJ(LoadUnitHandle(udg_HeroTable, 0, GetHandleId(GetEnumUnit()))) == true or IsUnitInGroup(LoadUnitHandle(udg_HeroTable, 0, GetHandleId(GetEnumUnit())), udg_DeadHeroes) == true ) then
			set u=LoadUnitHandle(udg_HeroTable, 0, GetHandleId(GetEnumUnit()))
			call ReviveHeroLoc(u, point4, true)
			call BlzSetUnitSkin(u, skinId)
			call GroupRemoveUnit(udg_DeadHeroes, u)
			// activate autocast hero abilites (bug fix)
            
			if ( s__udg_activeSearingArrows[s__udg_SpawnPlayers[2]] == true ) then
				call IssueImmediateOrderBJ(u, "flamingarrows")
			else
				call IssueImmediateOrderBJ(u, "unflamingarrows")
			endif
			if ( s__udg_activeFrostShield[s__udg_SpawnPlayers[2]] == true ) then
				call IssueImmediateOrderBJ(u, "frostarmoron")
			else
				call IssueImmediateOrderBJ(u, "frostarmoroff")
			endif
			if ( s__udg_activeCarrionBeetles[s__udg_SpawnPlayers[2]] == true ) then
				call IssueImmediateOrderBJ(u, "carrionscarabson")
			else
				call IssueImmediateOrderBJ(u, "carrionscarabsoff")
			endif
			if ( s__udg_activeFrostArrows[s__udg_SpawnPlayers[2]] == true ) then
				call IssueImmediateOrderBJ(u, "coldarrows")
			else
				call IssueImmediateOrderBJ(u, "uncoldarrows")
			endif
			if ( s__udg_activeBlackArrow[s__udg_SpawnPlayers[2]] == true ) then
				call IssueImmediateOrderBJ(u, "blackarrowon")
			else
				call IssueImmediateOrderBJ(u, "blackarrowoff")
			endif
			if ( s__udg_activeEnchantedQuiver[s__udg_SpawnPlayers[2]] == true ) then
				call IssueImmediateOrderBJ(u, "flamingattack")
			else
				call IssueImmediateOrderBJ(u, "unflamingattack")
			endif
			if ( s__udg_activeVirus[s__udg_SpawnPlayers[2]] == true ) then
				call IssueImmediateOrderBJ(u, "parasiteon")
			else
				call IssueImmediateOrderBJ(u, "parasiteoff")
			endif
            

			// Items
			set i=0
			loop
			exitwhen i > 5
				set it=UnitItemInSlot(GetEnumUnit(), i)
				set itemID=GetItemTypeId(it)
                
				set it=UnitItemInSlot(u, i)
				call RemoveItem(it)
				call UnitAddItemToSlotById(u, itemID, i)

				set i=i + 1
			endloop
		endif
	endif

	call UnitMoveLoc(u)
	call RemoveLocation(point)
	call RemoveLocation(point2)
	call RemoveLocation(point3)
	call RemoveLocation(point4)
endfunction

function SpawnUnits takes nothing returns nothing
	call ForGroup(s__udg_UnitGroupBuildings[1], function BuildingGroupSpawn1)
	call ForGroup(s__udg_UnitGroupBuildings[2], function BuildingGroupSpawn2)

	call ReviveRacialTowers()
endfunction

function ZoomOut takes nothing returns nothing
 local integer p= GetConvertedPlayerId(GetTriggerPlayer())
	set s__udg_CameraZoom[p]= s__udg_CameraZoom[p] + 500.00
	if ( s__udg_CameraZoom[p] >= 4000.00 ) then
		set s__udg_CameraZoom[p]= 4000.00
	endif
	call SetCameraFieldForPlayer(GetTriggerPlayer(), CAMERA_FIELD_TARGET_DISTANCE, s__udg_CameraZoom[p], 1)
	call BlzFrameSetEnable(BlzGetTriggerFrame(), false)
	call BlzFrameSetEnable(BlzGetTriggerFrame(), true)
endfunction

function ZoomIn takes nothing returns nothing
 local integer p= GetConvertedPlayerId(GetTriggerPlayer())
	set s__udg_CameraZoom[p]= s__udg_CameraZoom[p] - 500.00
	if ( s__udg_CameraZoom[p] <= 500.00 ) then
		set s__udg_CameraZoom[p]= 500.00
	endif
	call SetCameraFieldForPlayer(GetTriggerPlayer(), CAMERA_FIELD_TARGET_DISTANCE, s__udg_CameraZoom[p], 1)
	call BlzFrameSetEnable(BlzGetTriggerFrame(), false)
	call BlzFrameSetEnable(BlzGetTriggerFrame(), true)
endfunction

function ResetCamera takes nothing returns nothing
 local integer p= GetConvertedPlayerId(GetTriggerPlayer())
	set s__udg_CameraZoom[p]= 1650
	call CameraSetupApplyForPlayerSmooth(true, s__udg_PlayerCameras[p], Player(p - 1), 1.00, 1.00, 1.00, 1.00)
	call BlzFrameSetEnable(BlzGetTriggerFrame(), false)
	call BlzFrameSetEnable(BlzGetTriggerFrame(), true)
endfunction

function InitUICamera takes nothing returns nothing
 local trigger trig
 local trigger trig2
 local trigger trig3

	set zoomIn=BlzCreateFrame("ScriptDialogButton", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), 0, 0)
	call BlzFrameSetSize(zoomIn, 0.05, 0.035)
	call BlzFrameSetAbsPoint(zoomIn, FRAMEPOINT_CENTER, 0.525, 0.55)
	call BlzFrameSetText(zoomIn, " + ")
	call BlzFrameSetVisible(zoomIn, false)

	set zoomOut=BlzCreateFrame("ScriptDialogButton", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), 0, 0)
	call BlzFrameSetSize(zoomOut, 0.05, 0.035)
	call BlzFrameSetAbsPoint(zoomOut, FRAMEPOINT_CENTER, 0.475, 0.55)
	call BlzFrameSetText(zoomOut, " - ")
	call BlzFrameSetVisible(zoomOut, false)

	set resetCamera=BlzCreateFrame("ScriptDialogButton", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), 0, 0)
	call BlzFrameSetSize(resetCamera, 0.095, 0.035)
	call BlzFrameSetAbsPoint(resetCamera, FRAMEPOINT_CENTER, 0.6, 0.55)
	call BlzFrameSetText(resetCamera, "Reset Camera")
	call BlzFrameSetVisible(resetCamera, false)

	// CALLBACK //
	set trig=CreateTrigger()
	call BlzTriggerRegisterFrameEvent(trig, zoomIn, FRAMEEVENT_CONTROL_CLICK)
	call TriggerAddAction(trig, function ZoomIn)

	set trig2=CreateTrigger()
	call BlzTriggerRegisterFrameEvent(trig2, zoomOut, FRAMEEVENT_CONTROL_CLICK)
	call TriggerAddAction(trig2, function ZoomOut)

	set trig3=CreateTrigger()
	call BlzTriggerRegisterFrameEvent(trig3, resetCamera, FRAMEEVENT_CONTROL_CLICK)
	call TriggerAddAction(trig3, function ResetCamera)
endfunction
function TowerBarRefresh takes nothing returns nothing
 local real health1= GetUnitLifePercent(s__udg_WatchTower[1]) * 0.0006
 local real health2= GetUnitLifePercent(s__udg_WatchTower[2]) * 0.0006
	call BlzFrameSetSize(s__frameTowerFill[1], health1, 0.008)
	call BlzFrameSetSize(s__frameTowerFill[2], health2, 0.008)
endfunction

function DamageDetectTowersCOND takes nothing returns boolean
 local boolean isTower= false

	if ( BlzGetEventDamageTarget() == s__udg_WatchTower[1] or BlzGetEventDamageTarget() == s__udg_WatchTower[2] ) then
		set isTower=true
	endif

	return isTower
endfunction

function DamageDetectTowers takes nothing returns nothing
 local real health= GetUnitLifePercent(BlzGetEventDamageTarget()) * 0.0006

	if ( BlzGetEventDamageTarget() == s__udg_WatchTower[1] ) then
		call BlzFrameSetSize(s__frameTowerFill[1], health, 0.008)
	elseif ( BlzGetEventDamageTarget() == s__udg_WatchTower[2] ) then
		call BlzFrameSetSize(s__frameTowerFill[2], health, 0.008)
	endif
endfunction

function DamageDetectFortressCOND takes nothing returns boolean
 local boolean isFortress= false

	if ( BlzGetEventDamageTarget() == s__udg_Fortress[1] or BlzGetEventDamageTarget() == s__udg_Fortress[2] ) then
		set isFortress=true
	endif

	return isFortress
endfunction

function DamageDetectFortress takes nothing returns nothing
 local real health= GetUnitLifePercent(BlzGetEventDamageTarget()) * 0.0006

	if ( BlzGetEventDamageTarget() == s__udg_Fortress[1] ) then
		call BlzFrameSetSize(s__frameFortressFill[1], health, 0.008)
	elseif ( BlzGetEventDamageTarget() == s__udg_Fortress[2] ) then
		call BlzFrameSetSize(s__frameFortressFill[2], health, 0.008)
	endif
endfunction

function TowerDiesTeam1 takes nothing returns nothing
	call BlzFrameSetVisible(s__frameWatchTower[1], false)
	call BlzFrameSetVisible(s__frameTowerHealth[1], false)
	call BlzFrameSetVisible(s__frameTowerFill[1], false)

	call BlzFrameSetVisible(s__frameFortressHealth[1], true)
	call BlzFrameSetVisible(s__frameFortressFill[1], true)

	call StartTimerBJ(s__udg_FrameFortressTimer[1], false, 0.02)
endfunction

function TowerDiesTeam2 takes nothing returns nothing
	call BlzFrameSetVisible(s__frameWatchTower[2], false)
	call BlzFrameSetVisible(s__frameTowerHealth[2], false)
	call BlzFrameSetVisible(s__frameTowerFill[2], false)

	call BlzFrameSetVisible(s__frameFortress[2], true)
	call BlzFrameSetVisible(s__frameFortressHealth[2], true)
	call BlzFrameSetVisible(s__frameFortressFill[2], true)

	call StartTimerBJ(s__udg_FrameFortressTimer[2], false, 0.02)
endfunction

function FrameFortressAnim1 takes nothing returns nothing
	call BlzFrameSetVisible(s__frameFortress[1], true)
	if ( s__frameFortressCounter[1] < 255 ) then
		// increase counter so the trigger runs until alpha equal 255
		set s__frameFortressCounter[1]= s__frameFortressCounter[1] + 10

		// edit dimensions and placement
		set s__frameFortDim[1]= s__frameFortDim[1] - 0.005
		set s__frameFortAncorX[1]= s__frameFortAncorX[1] + 0.005
		set s__frameFortAncorY[1]= s__frameFortAncorY[1] - 0.005

		// set values
		call BlzFrameSetSize(s__frameFortress[1], s__frameFortDim[1], s__frameFortDim[1])
		call BlzFrameSetAbsPoint(s__frameFortress[1], FRAMEPOINT_CENTER, s__frameFortAncorX[1], s__frameFortAncorY[1])
		call BlzFrameSetAlpha(s__frameFortress[1], s__frameFortressCounter[1])

		call StartTimerBJ(s__udg_FrameFortressTimer[1], false, 0.02)
	endif
	if ( s__frameFortressCounter[1] >= 255 ) then
		call BlzFrameSetAlpha(s__frameFortress[1], 255)
	else
		call StartTimerBJ(s__udg_FrameFortressTimer[1], false, 0.02)
	endif
endfunction

function FrameFortressAnim2 takes nothing returns nothing
	call BlzFrameSetVisible(s__frameFortress[2], true)
	if ( s__frameFortressCounter[2] < 255 ) then
		// increase counter so the trigger runs until alpha equal 255
		set s__frameFortressCounter[2]= s__frameFortressCounter[2] + 10

		// edit dimensions and placement
		set s__frameFortDim[2]= s__frameFortDim[2] - 0.005
		set s__frameFortAncorX[2]= s__frameFortAncorX[2] + 0.005
		set s__frameFortAncorY[2]= s__frameFortAncorY[2] - 0.005

		// set values
		call BlzFrameSetSize(s__frameFortress[2], s__frameFortDim[2], s__frameFortDim[2])
		call BlzFrameSetAbsPoint(s__frameFortress[2], FRAMEPOINT_CENTER, s__frameFortAncorX[2], s__frameFortAncorY[2])
		call BlzFrameSetAlpha(s__frameFortress[2], s__frameFortressCounter[2])

		call StartTimerBJ(s__udg_FrameFortressTimer[2], false, 0.02)
	endif
	if ( s__frameFortressCounter[2] >= 255 ) then
		call BlzFrameSetAlpha(s__frameFortress[2], 255)
	else
		call StartTimerBJ(s__udg_FrameFortressTimer[2], false, 0.02)
	endif
endfunction

function InitUIFrameHealthIndicators takes nothing returns nothing
 local trigger trig
 local trigger trig2
 local trigger trig3
 local trigger towerHPTrig
 local trigger dmgTrig
 local trigger dmgTrig2
 local trigger fortressTrig1
 local trigger fortressTrig2

	// Fortress and Watch Tower display
	// Team 1

	set s__frameWatchTower[1]= BlzCreateFrameByType("BACKDROP", "", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), "", 0)
	call BlzFrameSetSize(s__frameWatchTower[1], 0.055, 0.083)
	call BlzFrameSetAbsPoint(s__frameWatchTower[1], FRAMEPOINT_CENTER, 0.75, 0.2)
	call BlzFrameSetTexture(s__frameWatchTower[1], "war3mapImported\\WatchTower Red.tga", 0, true)
	call BlzFrameSetVisible(s__frameWatchTower[1], false)
	call BlzFrameSetLevel(s__frameWatchTower[1], - 2)

	set s__frameTowerHealth[1]= BlzCreateFrameByType("BACKDROP", "", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), "", 0)
	call BlzFrameSetSize(s__frameTowerHealth[1], 0.06, 0.01)
	call BlzFrameSetAbsPoint(s__frameTowerHealth[1], FRAMEPOINT_LEFT, 0.72, 0.175)
	call BlzFrameSetTexture(s__frameTowerHealth[1], "war3mapImported\\bar.tga", 0, true)
	call BlzFrameSetVisible(s__frameTowerHealth[1], false)
	call BlzFrameSetLevel(s__frameTowerHealth[1], - 1)

	set s__frameTowerFill[1]= BlzCreateFrameByType("BACKDROP", "", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), "", 0)
	call BlzFrameSetSize(s__frameTowerFill[1], 0.06, 0.008)
	call BlzFrameSetAbsPoint(s__frameTowerFill[1], FRAMEPOINT_LEFT, 0.72, 0.175)
	call BlzFrameSetTexture(s__frameTowerFill[1], "war3mapImported\\Bar Health.tga", 0, true)
	call BlzFrameSetVisible(s__frameTowerFill[1], false)
	call BlzFrameSetLevel(s__frameTowerFill[1], - 2)

	//

	set s__frameFortress[1]= BlzCreateFrameByType("BACKDROP", "", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), "", 0)
	call BlzFrameSetSize(s__frameFortress[1], 0.083, 0.083)
	call BlzFrameSetAbsPoint(s__frameFortress[1], FRAMEPOINT_CENTER, 0.75, 0.2)
	call BlzFrameSetTexture(s__frameFortress[1], "war3mapImported\\Fortress RED.tga", 0, true)
	call BlzFrameSetVisible(s__frameFortress[1], false)
	call BlzFrameSetAlpha(s__frameFortress[1], 1)
	call BlzFrameSetLevel(s__frameFortress[1], - 2)

	set s__frameFortressHealth[1]= BlzCreateFrameByType("BACKDROP", "", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), "", 0)
	call BlzFrameSetSize(s__frameFortressHealth[1], 0.06, 0.01)
	call BlzFrameSetAbsPoint(s__frameFortressHealth[1], FRAMEPOINT_LEFT, 0.72, 0.175)
	call BlzFrameSetTexture(s__frameFortressHealth[1], "war3mapImported\\bar.tga", 0, true)
	call BlzFrameSetVisible(s__frameFortressHealth[1], false)
	call BlzFrameSetLevel(s__frameFortressHealth[1], - 1)

	set s__frameFortressFill[1]= BlzCreateFrameByType("BACKDROP", "", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), "", 0)
	call BlzFrameSetSize(s__frameFortressFill[1], 0.06, 0.008)
	call BlzFrameSetAbsPoint(s__frameFortressFill[1], FRAMEPOINT_LEFT, 0.72, 0.175)
	call BlzFrameSetTexture(s__frameFortressFill[1], "war3mapImported\\Bar Health.tga", 0, true)
	call BlzFrameSetVisible(s__frameFortressFill[1], false)
	call BlzFrameSetLevel(s__frameFortressFill[1], - 2)

	// Team 2

	set s__frameWatchTower[2]= BlzCreateFrameByType("BACKDROP", "", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), "", 0)
	call BlzFrameSetSize(s__frameWatchTower[2], 0.055, 0.083)
	call BlzFrameSetAbsPoint(s__frameWatchTower[2], FRAMEPOINT_CENTER, 0.67, 0.2)
	call BlzFrameSetTexture(s__frameWatchTower[2], "war3mapImported\\WatchTower Blue.tga", 0, true)
	call BlzFrameSetVisible(s__frameWatchTower[2], false)
	call BlzFrameSetLevel(s__frameWatchTower[2], - 2)

	set s__frameTowerHealth[2]= BlzCreateFrameByType("BACKDROP", "", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), "", 0)
	call BlzFrameSetSize(s__frameTowerHealth[2], 0.06, 0.01)
	call BlzFrameSetAbsPoint(s__frameTowerHealth[2], FRAMEPOINT_LEFT, 0.64, 0.175)
	call BlzFrameSetTexture(s__frameTowerHealth[2], "war3mapImported\\bar.tga", 0, true)
	call BlzFrameSetVisible(s__frameTowerHealth[2], false)
	call BlzFrameSetLevel(s__frameTowerHealth[2], - 1)

	set s__frameTowerFill[2]= BlzCreateFrameByType("BACKDROP", "", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), "", 0)
	call BlzFrameSetSize(s__frameTowerFill[2], 0.06, 0.008)
	call BlzFrameSetAbsPoint(s__frameTowerFill[2], FRAMEPOINT_LEFT, 0.64, 0.175)
	call BlzFrameSetTexture(s__frameTowerFill[2], "war3mapImported\\Bar Health.tga", 0, true)
	call BlzFrameSetVisible(s__frameTowerFill[2], false)
	call BlzFrameSetLevel(s__frameTowerFill[2], - 2)

	//

	set s__frameFortress[2]= BlzCreateFrameByType("BACKDROP", "", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), "", 0)
	call BlzFrameSetSize(s__frameFortress[2], 0.083, 0.083)
	call BlzFrameSetAbsPoint(s__frameFortress[2], FRAMEPOINT_CENTER, 0.67, 0.2)
	call BlzFrameSetTexture(s__frameFortress[2], "war3mapImported\\Fortress BLUE.tga", 0, true)
	call BlzFrameSetVisible(s__frameFortress[2], false)
	call BlzFrameSetAlpha(s__frameFortress[2], 1)
	call BlzFrameSetLevel(s__frameFortress[2], - 2)

	set s__frameFortressHealth[2]= BlzCreateFrameByType("BACKDROP", "", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), "", 0)
	call BlzFrameSetSize(s__frameFortressHealth[2], 0.06, 0.01)
	call BlzFrameSetAbsPoint(s__frameFortressHealth[2], FRAMEPOINT_LEFT, 0.64, 0.175)
	call BlzFrameSetTexture(s__frameFortressHealth[2], "war3mapImported\\bar.tga", 0, true)
	call BlzFrameSetVisible(s__frameFortressHealth[2], false)
	call BlzFrameSetLevel(s__frameFortressHealth[2], - 1)

	set s__frameFortressFill[2]= BlzCreateFrameByType("BACKDROP", "", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), "", 0)
	call BlzFrameSetSize(s__frameFortressFill[2], 0.06, 0.008)
	call BlzFrameSetAbsPoint(s__frameFortressFill[2], FRAMEPOINT_LEFT, 0.64, 0.175)
	call BlzFrameSetTexture(s__frameFortressFill[2], "war3mapImported\\Bar Health.tga", 0, true)
	call BlzFrameSetVisible(s__frameFortressFill[2], false)
	call BlzFrameSetLevel(s__frameFortressFill[2], - 2)

	// Tower Bar Refresh
	set towerHPTrig=CreateTrigger()
	call TriggerRegisterTimerEventPeriodic(towerHPTrig, 2)
	call TriggerAddAction(towerHPTrig, function TowerBarRefresh)
    
	// Damage Detect Tower
	set dmgTrig=CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(dmgTrig, EVENT_PLAYER_UNIT_DAMAGED)
	call TriggerAddCondition(dmgTrig, Condition(function DamageDetectTowersCOND))
	call TriggerAddAction(dmgTrig, function DamageDetectTowers)

	// Damage Detect Fortress
	set dmgTrig2=CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(dmgTrig2, EVENT_PLAYER_UNIT_DAMAGED)
	call TriggerAddCondition(dmgTrig2, Condition(function DamageDetectFortressCOND))
	call TriggerAddAction(dmgTrig2, function DamageDetectFortress)

	// Frame Fortress Timer
	set fortressTrig1=CreateTrigger()
	call TriggerRegisterTimerExpireEvent(fortressTrig1, s__udg_FrameFortressTimer[1])
	call TriggerAddAction(fortressTrig1, function FrameFortressAnim1)

	set fortressTrig2=CreateTrigger()
	call TriggerRegisterTimerExpireEvent(fortressTrig2, s__udg_FrameFortressTimer[2])
	call TriggerAddAction(fortressTrig2, function FrameFortressAnim2)

	set s__frameFortressCounter[1]= 0
	set s__frameFortressCounter[2]= 0

	set s__frameFortDim[1]= 0.210
	set s__frameFortDim[2]= 0.210

	set s__frameFortAncorX[1]= 0.623
	set s__frameFortAncorX[2]= 0.543

	set s__frameFortAncorY[1]= 0.327
	set s__frameFortAncorY[2]= 0.327

endfunction
function UpdateTimerText takes nothing returns nothing
 local integer i= 1
 local integer endIndex= 6
 local integer val
	loop
	exitwhen i > endIndex
		if ( s__udg_ActivePlayers[i] == false ) then
			call BlzFrameSetText(s__timerText[i], "--")
		else
			set val=R2I(TimerGetRemaining(udg_Timer)) + ( s__udg_PlayerQueue[i] * R2I(udg_WaveTime) )
			call BlzFrameSetText(s__timerText[i], I2S(val))
		endif
		set i=i + 1
	endloop
endfunction

function InitUIMapIndicators takes nothing returns nothing
 local integer p
 local integer i
 local integer endIndex
 local real Ypos= 0.00

	// Team 1
	set p=0
	set i=1
	set endIndex=3
	loop
		exitwhen i > endIndex
		set s__timerText[i + p]= BlzCreateFrame("TasButtonTextTemplate", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), 0, 0)
		call BlzFrameSetAbsPoint(s__timerText[i + p], FRAMEPOINT_LEFT, 0.136, 0.09 - Ypos)
		call BlzFrameSetText(s__timerText[i + p], "--")
		set Ypos=Ypos + 0.015
		set p=p + 1
		set i=i + 1
	endloop

	// Team 2
	set Ypos=0.00
	set p=1
	set i=1
	loop
		exitwhen i > endIndex
		set s__timerText[i + p]= BlzCreateFrame("TasButtonTextTemplate", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), 0, 0)
		call BlzFrameSetAbsPoint(s__timerText[i + p], FRAMEPOINT_LEFT, 0.013, 0.09 - Ypos)
		call BlzFrameSetText(s__timerText[i + p], "--")
		set Ypos=Ypos + 0.015
		set p=p + 1
		set i=i + 1
	endloop

endfunction

function UpdateStatDisplay takes player v_player returns nothing
 local integer p= GetConvertedPlayerId(v_player)
	
	if ( GetLocalPlayer() == v_player ) then
		call BlzFrameSetText(s__frameMatchStats[1], "Won: " + I2S(s__udg_winsHuman[p]) + " - Total: " + I2S(s__udg_totalHuman[p]))
		call BlzFrameSetText(s__frameMatchStats[2], "Won: " + I2S(s__udg_winsOrc[p]) + " - Total: " + I2S(s__udg_totalOrc[p]))
		call BlzFrameSetText(s__frameMatchStats[3], "Won: " + I2S(s__udg_winsUndead[p]) + " - Total: " + I2S(s__udg_totalUndead[p]))
		call BlzFrameSetText(s__frameMatchStats[4], "Won: " + I2S(s__udg_winsNightElf[p]) + " - Total: " + I2S(s__udg_totalNightElf[p]))
	endif
endfunction

function LoadLevels takes nothing returns nothing
 local integer p= GetConvertedPlayerId(GetTriggerPlayer())
 local integer r
 local integer endIndex
 local integer l
 local integer endIndex1
 local real xpBarPercent
	
	set r=1
	set endIndex=4
	loop
	exitwhen r > endIndex
		set l=1
		set endIndex1=ds_MAX_LEVEL
		loop
		exitwhen l > endIndex1
			if ( s__experience[(p)*(4)+r] >= s__levels[l] ) then
				set s__playerLevels[(p)*(4)+r]= s__playerLevels[(p)*(4)+r] + 1
			endif
			set l=l + 1
		endloop
		
		// XP bar update
		set xpBarPercent=I2R(s__experience[(p)*(4)+r] - s__levels[s__playerLevels[(p)*(4)+r] - 1]) / I2R(s__levels[s__playerLevels[(p)*(4)+r]] - s__levels[s__playerLevels[(p)*(4)+r] - 1]) * 100
        if ( GetLocalPlayer() == Player(p - 1) ) then
            call BlzFrameSetSize(s__XPBarFillMainUI[r], 0.002 * xpBarPercent, 0.013)
			call BlzFrameSetSize(s__XPBarFill[r], 0.001 * xpBarPercent, 0.013)
			call BlzFrameSetText(s__frameXPBarRaceText[r], s__XPBarRaceText[r] + I2S(s__playerLevels[(p)*(4)+r]))
		endif
		
		if ( s__playerLevels[(p)*(4)+r] == ds_MAX_LEVEL ) then
            if ( GetLocalPlayer() == Player(p - 1) ) then
                call BlzFrameSetSize(s__XPBarFillMainUI[r], 0.2, 0.013)
				call BlzFrameSetSize(s__XPBarFill[r], 0.1, 0.013)
			endif
		endif
		
		set r=r + 1
	endloop
endfunction

function EquipSavedSkins takes nothing returns nothing
 local integer p= GetConvertedPlayerId(GetTriggerPlayer())
 local integer r
 local integer endIndex
 local integer u
 local integer endIndex1
 local real xpos
	
	set r=1
	set endIndex=4
	loop
	exitwhen r > endIndex
		set u=1
		set endIndex1=9
		loop
		exitwhen u > endIndex1
			if ( s__frameImgUnit[(r)*(9)+u] != null ) then
                if ( r == 1 ) then
                    // set correct skin highlight position
				    set xpos=0.37 + ( 0.04 * s__equippedSkinHum[(p)*(5)+u] ) - 0.04
                elseif ( r == 2 ) then
                    set xpos=0.37 + ( 0.04 * s__equippedSkinOrc[(p)*(5)+u] ) - 0.04
                elseif ( r == 3 ) then
                    set xpos=0.37 + ( 0.04 * s__equippedSkinUnd[(p)*(5)+u] ) - 0.04
                elseif ( r == 4 ) then
                    set xpos=0.37 + ( 0.04 * s__equippedSkinNig[(p)*(5)+u] ) - 0.04
                endif
				
				if ( GetLocalPlayer() == GetTriggerPlayer() ) then
					call BlzFrameSetAbsPoint(s__frameSkinHighlight[(r)*(9)+u], FRAMEPOINT_CENTER, xpos, 0.36)
				endif
			endif
			
			set u=u + 1
		endloop
		set r=r + 1
	endloop
endfunction

function DecryptCode takes player v_player,string encrypted returns string
 local string savecode= ""
 local integer baseCounter= 1
 local integer baseCounter2= 1
 local integer i
 local integer endIndex
 local integer s
 local integer endIndex1
 local string char
	
 local string byte= ""
	
	set i=1
	set endIndex=StringLength(encrypted)
	loop
	exitwhen i > endIndex
		
		set char=SubStringBJ(encrypted, i, i)
		set s=1
		set endIndex1=StringLength(NormalBase)
		loop
		exitwhen s > endIndex1
			if ( char == SubStringBJ(RandomBase[baseCounter2], s, s) ) then
				set savecode=savecode + SubStringBJ(NormalBase, s, s)
				set baseCounter2=baseCounter2 + 1
				if ( baseCounter2 > 10 ) then
					set baseCounter2=1
				endif
				set s=endIndex1
			endif
			set s=s + 1
		endloop
		set i=i + 1
	endloop
	
    // call BJDebugMsg("Decrypted: " + savecode)
	
	return savecode
endfunction

// Data sync read
function SyncData takes nothing returns nothing
 local integer p= GetConvertedPlayerId(GetTriggerPlayer())
 local string prefix= BlzGetTriggerSyncPrefix()
 local string data= BlzGetTriggerSyncData()
 local string savecode= DecryptCode(GetTriggerPlayer() , data)
	
 local string chunk
 local integer counter
 local integer r
 local integer u
 local integer i
 local integer endIndex
	
 local integer sum
 local boolean cheat
    local integer checksum= 0
    
    local integer tmpInt
	
	// call BJDebugMsg("savecode: " + savecode)
	
	// Checks if saveLoad is disabled and if the savecode is not the original tooltip. Proceeds to load nothing if any is false.
	if ( udg_SaveLoadDisabled != true and data != "Aerial Shackles" ) then
		// Reads the decrypted code
		set chunk=""
		set counter=1
		
		set r=1
		set u=1
		
		set cheat=false
		
		set i=1
		set endIndex=StringLength(savecode)
		loop
		exitwhen i > endIndex
			if ( SubStringBJ(savecode, i, i) != "-" ) then
				if ( counter < 15 ) then
					set chunk=chunk + SubStringBJ(savecode, i, i)
				else
					// set skins
                

                    // backup solution
                    set tmpInt=S2I(SubStringBJ(savecode, i, i))
                    if ( r == 1 ) then
                        set s__equippedSkinHum[(p)*(5)+u]= tmpInt
                        //call BJDebugMsg(SubStringBJ(savecode, i, i) + I2S(equippedSkinHum[p][u]) + I2S(tmpInt))
                    elseif ( r == 2 ) then
                        set s__equippedSkinOrc[(p)*(5)+u]= tmpInt
                        //call BJDebugMsg(SubStringBJ(savecode, i, i) + I2S(equippedSkinOrc[p][u]) + I2S(tmpInt))
                    elseif ( r == 3 ) then
                        set s__equippedSkinUnd[(p)*(5)+u]= tmpInt
                        //call BJDebugMsg(SubStringBJ(savecode, i, i) + I2S(equippedSkinUnd[p][u]) + I2S(tmpInt))
                    elseif ( r == 4 ) then
                        set s__equippedSkinNig[(p)*(5)+u]= tmpInt
                        //call BJDebugMsg(SubStringBJ(savecode, i, i) + I2S(equippedSkinNig[p][u]) + I2S(tmpInt))
                    endif
                    
					
					set u=u + 1
					
					// change if more skins gets added
					if ( r == 1 and u > 7 ) then
						set u=1
						set r=2
					elseif ( r == 2 and u > 9 ) then
						set u=1
						set r=3
					elseif ( r == 3 and u > 9 ) then
						set u=1
						set r=4
					elseif ( r == 4 and u > 8 ) then
						set u=1
					endif
				endif
			else
				// player name check
				if ( counter == 1 ) then
					if ( chunk != GetShortPlayerName(GetTriggerPlayer()) ) then
						set cheat=true
						return
					endif
					set chunk=""
				endif
				
				// stats
				if ( counter == 2 ) then
					set s__udg_totalHuman[p]= S2I(chunk)
					set chunk=""
				endif
				if ( counter == 3 ) then
					set s__udg_winsHuman[p]= S2I(chunk)
					set chunk=""
				endif
				if ( counter == 4 ) then
					set s__udg_totalOrc[p]= S2I(chunk)
					set chunk=""
				endif
				if ( counter == 5 ) then
					set s__udg_winsOrc[p]= S2I(chunk)
					set chunk=""
				endif
				if ( counter == 6 ) then
					set s__udg_totalUndead[p]= S2I(chunk)
					set chunk=""
				endif
				if ( counter == 7 ) then
					set s__udg_winsUndead[p]= S2I(chunk)
					set chunk=""
				endif
				if ( counter == 8 ) then
					set s__udg_totalNightElf[p]= S2I(chunk)
					set chunk=""
				endif
				if ( counter == 9 ) then
					set s__udg_winsNightElf[p]= S2I(chunk)
					set chunk=""
				endif
				if ( counter == 10 ) then
					set s__experience[(p)*(4)+1]= S2I(chunk)
					set chunk=""
				endif
				if ( counter == 11 ) then
					set s__experience[(p)*(4)+2]= S2I(chunk)
					set chunk=""
				endif
				if ( counter == 12 ) then
					set s__experience[(p)*(4)+3]= S2I(chunk)
					set chunk=""
				endif
				if ( counter == 13 ) then
					set s__experience[(p)*(4)+4]= S2I(chunk)
					set chunk=""
				endif
				if ( counter == 14 ) then
					set checksum=S2I(chunk)
					set chunk=""
				endif
				
				set counter=counter + 1
			endif
			
			set i=i + 1
		endloop
		
		
	endif
	
	// sum of all games and wins
	set sum=0
	set sum=s__udg_totalHuman[p] + s__udg_winsHuman[p] + s__udg_totalOrc[p] + s__udg_winsOrc[p] + s__udg_totalUndead[p] + s__udg_winsUndead[p] + s__udg_totalNightElf[p] + s__udg_winsNightElf[p] + s__experience[(p)*(4)+1] + s__experience[(p)*(4)+2] + s__experience[(p)*(4)+3] + s__experience[(p)*(4)+4]
	
	
	if ( sum != checksum ) then
		set cheat=true
	endif
	
	// Resets stats if the savecode is manipulated.
	if ( cheat == true ) then
		call DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "|cffff3503The game has detected an external manipulation of the saved code. All stats have been reset.|r")
		set s__udg_totalHuman[p]= 0
		set s__udg_winsHuman[p]= 0
		set s__udg_totalOrc[p]= 0
		set s__udg_winsOrc[p]= 0
		set s__udg_totalUndead[p]= 0
		set s__udg_winsUndead[p]= 0
		set s__udg_totalNightElf[p]= 0
		set s__udg_winsNightElf[p]= 0
		
		set s__experience[(p)*(4)+1]= 0
		set s__experience[(p)*(4)+2]= 0
		set s__experience[(p)*(4)+3]= 0
		set s__experience[(p)*(4)+4]= 0
	endif
	
	call UpdateStatDisplay(GetTriggerPlayer())
	call LoadLevels()
	call EquipSavedSkins()
endfunction

function LoadStrings takes nothing returns nothing
 local integer p= GetConvertedPlayerId(GetEnumPlayer())
 local string data
	
	if ( p < 7 ) then
		set data=""
		call Preloader("\\Direct Strike Reforged\\" + GetPlayerName(GetEnumPlayer()) + "\\Save.txt")
		set data=BlzGetAbilityTooltip(1097690227, 0)
		call BlzSetAbilityTooltip(1097690227, originalTooltip, 0) // Reset tooltip
		if ( GetLocalPlayer() == GetEnumPlayer() ) then
			call BlzSendSyncData("LoadData", data)
		endif
	endif
endfunction



function initSaveLoad takes nothing returns nothing
 local trigger trig
 local integer i
 local integer endIndex
	
	set originalTooltip=BlzGetAbilityTooltip(1097690227, 0)
	set NormalBase="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-"
	set RandomBase[1]="Q0aZSHbJdFVxRzpDY35Pvg7I8BE6wLWUTt4qnKGmuMXkecj1fAlhNsyr2C-o9Oi"
	set RandomBase[2]="y7TGwfOlbL3rsXDVPiI0K8cR4WvaAthp-uoZd2xYeJjCF1kHN9B5Mq6UmQgSEnz"
	set RandomBase[3]="ckqL1XF9O0eBAsMNml5fhoS-46ZaKpvJUbIiY7RHVWn28zPyQjxCwrud3gGTtDE"
	set RandomBase[4]="q7UQOC2jhsXBZS0yerNRkld8EMi5-fHzKAxcIV1aDTPwt3GJLgoFYpumWb46vn9"
	set RandomBase[5]="bvCiFsLHBm3P1zn9qIRUy72Tc4Jj-uKrGdOQxSwpgV0kAftYlZaXDheoW8MNE65"
	set RandomBase[6]="h8-UPqvZaVrKbix23syFznpB4tYDEL57GHJe9NSduCgkcwO60XRTIWjMloQ1mfA"
	set RandomBase[7]="ecf8nNk6zl0SuVtiwdpUy2qb41hXABa5RHmsPYQvMjLT7D3IFZxg-CE9OKJoWrG"
	set RandomBase[8]="Dd5k39sSWHjlefwYhA4JxyoVPzF1EOTQUK7XvN2pqga86trMCRmI0ZiG-ncbuBL"
	set RandomBase[9]="AVGvtK7LkcIDPSHajxdER24uFqpTsirfM8-gCbZ9e3NWhnyU0QB1mOwYXol65zJ"
	set RandomBase[10]="hrSBGpYxFe1s8HgbTLWDIqMfiCA5km6ZR2EtvNwzoXy3jca4KlO7JnUV9-P0duQ"
	
	// Data sync trigger
	set trig=CreateTrigger()
	call TriggerAddAction(trig, function SyncData)
	
	set i=0
	set endIndex=bj_MAX_PLAYER_SLOTS
	loop
	exitwhen i > endIndex
		call BlzTriggerRegisterPlayerSyncEvent(trig, Player(i), "LoadData", false)
		set i=i + 1
	endloop
	
	if ( udg_SaveLoadDisabled == false ) then
		call ForForce(GetPlayersAll(), function LoadStrings)
	endif
endfunction







function GetSaveCode takes player v_player returns string
 local integer p= GetConvertedPlayerId(v_player)
 local string encryptedSave
 local integer len
 local integer baseCounter
 local integer baseCounter2
 local integer i
 local integer s
 local integer r
 local integer endIndex
 local integer u
 local integer endIndex1
 local string char
 local integer tmpInt
 local integer checksum= s__udg_totalHuman[p] + s__udg_winsHuman[p] + s__udg_totalOrc[p] + s__udg_winsOrc[p] + s__udg_totalUndead[p] + s__udg_winsUndead[p] + s__udg_totalNightElf[p] + s__udg_winsNightElf[p] + s__experience[(p)*(4)+1] + s__experience[(p)*(4)+2] + s__experience[(p)*(4)+3] + s__experience[(p)*(4)+4]
	
 local string savecode= GetShortPlayerName(v_player) + "-" + I2S(s__udg_totalHuman[p]) + "-" + I2S(s__udg_winsHuman[p]) + "-" + I2S(s__udg_totalOrc[p]) + "-" + I2S(s__udg_winsOrc[p]) + "-" + I2S(s__udg_totalUndead[p]) + "-" + I2S(s__udg_winsUndead[p]) + "-" + I2S(s__udg_totalNightElf[p]) + "-" + I2S(s__udg_winsNightElf[p]) + "-" + I2S(s__experience[(p)*(4)+1]) + "-" + I2S(s__experience[(p)*(4)+2]) + "-" + I2S(s__experience[(p)*(4)+3]) + "-" + I2S(s__experience[(p)*(4)+4]) + "-" + I2S(checksum) + "-"
	// checks possible skins
	
	set r=1
	set endIndex=4
	loop
	exitwhen r > endIndex
		set u=1
		set endIndex1=9
		loop
		exitwhen u > endIndex1
			if ( s__frameImgUnit[(r)*(9)+u] != null ) then
				if ( r == 1 ) then
					set tmpInt=s__equippedSkinHum[(p)*(5)+u]
					set savecode=savecode + I2S(tmpInt)
					//call BJDebugMsg(I2S(equippedSkinHum[p][u]) + I2S(tmpInt))
				elseif ( r == 2 ) then
					set tmpInt=s__equippedSkinOrc[(p)*(5)+u]
					set savecode=savecode + I2S(tmpInt)
					//call BJDebugMsg(I2S(equippedSkinOrc[p][u]) + I2S(tmpInt))
				elseif ( r == 3 ) then
					set tmpInt=s__equippedSkinUnd[(p)*(5)+u]
					set savecode=savecode + I2S(tmpInt)
					//call BJDebugMsg(I2S(equippedSkinUnd[p][u]) + I2S(tmpInt))
				elseif ( r == 4 ) then
					set tmpInt=s__equippedSkinNig[(p)*(5)+u]
					set savecode=savecode + I2S(tmpInt)
					//call BJDebugMsg(I2S(equippedSkinNig[p][u]) + I2S(tmpInt))
                endif
			endif
			set u=u + 1
		endloop
		set r=r + 1
	endloop
	
	// Encryption
	
	set encryptedSave=""
	set len=StringLength(savecode)
	set baseCounter=1
	set baseCounter2=1
	
	set i=1
	loop
	exitwhen i > len
		set char=SubStringBJ(savecode, i, i)
		set s=1
		loop
		exitwhen s > StringLength(NormalBase)
			if ( char == SubStringBJ(NormalBase, s, s) ) then
				set encryptedSave=encryptedSave + SubStringBJ(RandomBase[baseCounter2], s, s)
				set baseCounter2=baseCounter2 + 1
				if ( baseCounter2 > 10 ) then
					set baseCounter2=1
				endif
				set s=StringLength(NormalBase)
			endif
			set s=s + 1
		endloop
		set i=i + 1
	endloop
	
	// call BJDebugMsg(savecode)
	
	return encryptedSave
endfunction

function Save takes player v_player returns nothing
 local string savecode
 local string file
	
	if ( udg_SaveLoadDisabled == false ) then
		set savecode=GetSaveCode(v_player)
		set file="\\Direct Strike Reforged\\" + GetPlayerName(v_player) + "\\Save.txt"
		if ( GetLocalPlayer() == v_player ) then
			call PreloadGenClear()
			call PreloadGenStart()
			call Preload("\" )\ncall BlzSetAbilityTooltip(1097690227, \"" + savecode + "\", 0)//")
			call Preload("\" )\nendfunction\nfunction a takes nothing returns nothing\n //")
			call PreloadGenEnd(file)
		endif
	endif
endfunction

function Setup takes nothing returns nothing
 local framehandle tinyBlackBox

	set s__pColor[1]= "|cffff0303"
	set s__pColor[2]= "|cff0042ff"
	set s__pColor[3]= "|cff1ce6b9"
	set s__pColor[4]= "|cff540081"
	set s__pColor[5]= "|cfffffc01"
	set s__pColor[6]= "|cfffe8a0e"
	
	set totalColor="|cffff7c7c"
	set raceNameWithColor[0]="Random"
	set raceNameWithColor[1]="|cff1b6ef5Human|r"
	set raceNameWithColor[2]="|cfff5381bOrc|r"
	set raceNameWithColor[3]="|cffa66df7Undead|r"
	set raceNameWithColor[4]="|cff28ad3eNight Elf|r"
	set raceNameWithColor[5]="|cffa346ffDalaran|r"
	set raceNameWithColor[6]="|cffff3232Blood Elf|r"
	set raceNameWithColor[7]="|cff936d96Forsaken|r"
	set raceNameWithColor[8]="|cff0bd9c1Naga|r"

	set s__spawnPlayer[1]= 0
	set s__spawnPlayer[2]= 0

	set totalVotes=0

	call BlzFrameSetVisible(BlzGetFrameByName("ConsoleUIBackdrop", 0), false) // Hide bottom black box
	set tinyBlackBox=BlzCreateFrameByType("BACKDROP", "", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), "", 0)
	call BlzFrameSetSize(tinyBlackBox, 0.1, 0.15)
	call BlzFrameSetAbsPoint(tinyBlackBox, FRAMEPOINT_CENTER, 0.25, 0.05)
	call BlzFrameSetTexture(tinyBlackBox, "war3mapImported\\Black Box.tga", 0, true)
	call BlzFrameSetLevel(tinyBlackBox, - 1)

    call InitSpawns()
	call InitAIGroups()
	call InitMMDNames()
	call CreateScoreboard()
	call InitUIMapIndicators()
	call InitUIFrameHealthIndicators()
	call InitUICamera()
	call SetupGrid()
	//call DamageEngineSetup()
	call SetupAbilityControl()
	call SetupCustomSpells()
	call SetupClassicSelection()
	call SetupCustomSelection()
	call SetupGameModeSelection()
	call ProgressionSetup()

endfunction


function MultiboardSetup takes nothing returns nothing
 local integer i= 1
 local integer endIndex= 6
	loop
	exitwhen i > endIndex
		if ( GetLocalPlayer() == Player(i - 1) ) then
			call MultiboardDisplayBJ(true, s__udg_Multiboard[i])
		endif
		set i=i + 1
	endloop
endfunction


function IncrementTotalGames takes player v_player returns nothing
 local integer p= GetConvertedPlayerId(v_player)
	
	if ( s__udg_PlayerRace[p] == 1 ) then
		set s__udg_totalHuman[p]= s__udg_totalHuman[p] + 1
	endif
	if ( s__udg_PlayerRace[p] == 2 ) then
		set s__udg_totalOrc[p]= s__udg_totalOrc[p] + 1
	endif
	if ( s__udg_PlayerRace[p] == 3 ) then
		set s__udg_totalUndead[p]= s__udg_totalUndead[p] + 1
	endif
	if ( s__udg_PlayerRace[p] == 4 ) then
		set s__udg_totalNightElf[p]= s__udg_totalNightElf[p] + 1
	endif
	if ( s__udg_PlayerRace[p] == 5 ) then
		set s__udg_totalNaga[p]= s__udg_totalNaga[p] + 1
	endif
	if ( s__udg_PlayerRace[p] == 6 ) then
		set s__udg_totalDemon[p]= s__udg_totalDemon[p] + 1
	endif
endfunction

function IncrementTotalWins takes player v_player returns nothing
 local integer p= GetConvertedPlayerId(v_player)
	
	if ( s__udg_PlayerRace[p] == 1 ) then
		set s__udg_winsHuman[p]= s__udg_winsHuman[p] + 1
	endif
	if ( s__udg_PlayerRace[p] == 2 ) then
		set s__udg_winsOrc[p]= s__udg_winsOrc[p] + 1
	endif
	if ( s__udg_PlayerRace[p] == 3 ) then
		set s__udg_winsUndead[p]= s__udg_winsUndead[p] + 1
	endif
	if ( s__udg_PlayerRace[p] == 4 ) then
		set s__udg_winsNightElf[p]= s__udg_winsNightElf[p] + 1
	endif
	if ( s__udg_PlayerRace[p] == 5 ) then
		set s__udg_winsNaga[p]= s__udg_winsNaga[p] + 1
	endif
	if ( s__udg_PlayerRace[p] == 6 ) then
		set s__udg_winsDemon[p]= s__udg_winsDemon[p] + 1
	endif
endfunction


function GameOverMusic takes nothing returns nothing
 local integer p= GetConvertedPlayerId(GetEnumPlayer())
	if ( s__udg_Victory[p] == true ) then
		call IncrementTotalWins(GetEnumPlayer())
		if ( GetLocalPlayer() == GetEnumPlayer() ) then
			call PlayThematicMusicBJ("NightElfVictory")
		endif
	else
		if ( GetLocalPlayer() == GetEnumPlayer() ) then
			call PlayThematicMusicBJ("OrcDefeat")
		endif
	endif

	call IncrementTotalGames(GetEnumPlayer())
	call UpdateStatDisplay(GetEnumPlayer())
	call Save(GetEnumPlayer())
endfunction

function ShowMainUI takes nothing returns nothing
 local integer p= GetConvertedPlayerId(GetEnumPlayer())
 local integer r= s__udg_PlayerRace[p]
 local integer xpBarPercent

	// XP Bar

 local integer i= 1
 local integer endIndex= 4
	loop
	exitwhen i > endIndex
		if ( GetLocalPlayer() == Player(p - 1) ) then
			call BlzFrameSetVisible(s__XPBarMainUI[i], false)
			call BlzFrameSetVisible(s__XPBarFillMainUI[i], false)
			call BlzFrameSetVisible(s__frameXPBarTextMainUI[i], false)
		endif
		set i=i + 1
	endloop

	if ( GetLocalPlayer() == Player(p - 1) ) then
		
		// Camera Buttons
		call BlzFrameSetVisible(zoomIn, true)
		call BlzFrameSetVisible(zoomOut, true)
		call BlzFrameSetVisible(resetCamera, true)
		
        
		// Menu Buttons
		call BlzFrameSetVisible(btnProgressionMenu, true)
		call BlzFrameSetVisible(btnAbilityControl, true)
        
		// Grid Button
		call BlzFrameSetVisible(btnGrid, true)

		call BlzFrameSetVisible(s__frameWatchTower[1], true)
		call BlzFrameSetVisible(s__frameTowerHealth[1], true)
		call BlzFrameSetVisible(s__frameTowerFill[1], true)

		call BlzFrameSetVisible(s__frameWatchTower[2], true)
		call BlzFrameSetVisible(s__frameTowerHealth[2], true)
		call BlzFrameSetVisible(s__frameTowerFill[2], true)
	endif
	
	if ( r < 5 ) then
		set xpBarPercent=( s__experience[(p)*(4)+r] - s__levels[s__playerLevels[(p)*(4)+r] - 1] ) / ( s__levels[s__playerLevels[(p)*(4)+r]] - s__levels[s__playerLevels[(p)*(4)+r] - 1] ) * 100
		if ( GetLocalPlayer() == Player(p - 1) ) then
			// Main XP bar
			call BlzFrameSetVisible(s__XPBarMainUI[r], true)
			call BlzFrameSetVisible(s__XPBarFillMainUI[r], true)
			call BlzFrameSetVisible(s__frameXPBarTextMainUI[r], true)
			call BlzFrameSetSize(s__XPBarFillMainUI[r], 0.002 * xpBarPercent, 0.014)
			call BlzFrameSetText(s__frameXPBarTextMainUI[r], "Experience: " + I2S(s__experience[(p)*(4)+r]) + "/" + I2S(s__levels[s__playerLevels[(p)*(4)+r]]) + " - Level " + I2S(s__playerLevels[(p)*(4)+r]))
		endif
	endif
endfunction

function HideMainUI takes nothing returns nothing
 local integer p= GetConvertedPlayerId(GetEnumPlayer())
 local integer r= s__udg_PlayerRace[p]
 local integer i
 local integer endIndex
 local integer u
 local integer endIndex1
 local integer s
 local integer endIndex2

	if ( GetLocalPlayer() == Player(p - 1) ) then
        
		call BlzFrameSetVisible(s__XPBarMainUI[r], false)
		call BlzFrameSetVisible(s__XPBarFillMainUI[r], false)
		call BlzFrameSetVisible(s__frameXPBarTextMainUI[r], false)
        

		// Camera Buttons
		call BlzFrameSetVisible(zoomIn, false)
		call BlzFrameSetVisible(zoomOut, false)
		call BlzFrameSetVisible(resetCamera, false)

		// Menus
        
		call BlzFrameSetVisible(btnProgressionMenu, false)
		call BlzFrameSetVisible(btnAbilityControl, false)

		call BlzFrameSetVisible(progressionMenu, false)
		call BlzFrameSetVisible(progressionMenu, false)

		// Grid Button
		call BlzFrameSetVisible(btnGrid, false)

		// Tower and Fortress
		call BlzFrameSetVisible(s__frameWatchTower[1], false)
		call BlzFrameSetVisible(s__frameTowerHealth[1], false)
		call BlzFrameSetVisible(s__frameTowerFill[1], false)

		call BlzFrameSetVisible(s__frameWatchTower[2], false)
		call BlzFrameSetVisible(s__frameTowerHealth[2], false)
		call BlzFrameSetVisible(s__frameTowerFill[2], false)

		call BlzFrameSetVisible(s__frameFortress[1], false)
		call BlzFrameSetVisible(s__frameFortressHealth[1], false)
		call BlzFrameSetVisible(s__frameFortressFill[1], false)
		call BlzFrameSetSize(s__frameFortressFill[1], 0.06, 0.008)

		call BlzFrameSetVisible(s__frameFortress[2], false)
		call BlzFrameSetVisible(s__frameFortressHealth[2], false)
		call BlzFrameSetVisible(s__frameFortressFill[2], false)
		call BlzFrameSetSize(s__frameFortressFill[2], 0.06, 0.008)

		set r=1
		set endIndex=4
		// Skin buttons

        
		loop
		exitwhen r > endIndex
            
			set u=1
			set endIndex1=9
			loop
			exitwhen u > endIndex1
				if ( s__frameBtnUnit[(r)*(9)+u] != null ) then
					call BlzFrameSetVisible(s__frameBtnUnit[(r)*(9)+u], false)
					call BlzFrameSetVisible(s__frameSkinHighlight[(r)*(9)+u], false)
				endif
				set s=1
				set endIndex2=9
				loop
				exitwhen s > endIndex2
					if ( r == 1 and s__frameBtnSkinHum[(u)*(5)+s] != null ) then
						call BlzFrameSetVisible(s__frameBtnSkinHum[(u)*(5)+s], false)
						call BlzFrameSetVisible(s__MultidimensionalArray__Type__get_framehandle(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameSkinDisabled) )),( (r))))) )),( (u)))),s)), false) // INLINED!!
					endif
					if ( r == 2 and s__frameBtnSkinOrc[(u)*(5)+s] != null ) then
						call BlzFrameSetVisible(s__frameBtnSkinOrc[(u)*(5)+s], false)
						call BlzFrameSetVisible(s__MultidimensionalArray__Type__get_framehandle(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameSkinDisabled) )),( (r))))) )),( (u)))),s)), false) // INLINED!!
					endif
					if ( r == 3 and s__frameBtnSkinUnd[(u)*(5)+s] != null ) then
						call BlzFrameSetVisible(s__frameBtnSkinUnd[(u)*(5)+s], false)
						call BlzFrameSetVisible(s__MultidimensionalArray__Type__get_framehandle(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameSkinDisabled) )),( (r))))) )),( (u)))),s)), false) // INLINED!!
					endif
					if ( r == 4 and s__frameBtnSkinNig[(u)*(5)+s] != null ) then
						call BlzFrameSetVisible(s__frameBtnSkinNig[(u)*(5)+s], false)
						call BlzFrameSetVisible(s__MultidimensionalArray__Type__get_framehandle(s__Array1D__getindex((s__HashTable__getindex(((((s__HashTable__getindex((((frameSkinDisabled) )),( (r))))) )),( (u)))),s)), false) // INLINED!!
					endif
					set s=s + 1
				endloop
				set u=u + 1
			endloop
			set r=r + 1
		endloop
	endif
endfunction

function PlayerLeaves takes nothing returns nothing
 local integer p= GetConvertedPlayerId(udg_Player)
	
	call DisplayTimedTextToForce(GetPlayersAll(), 12, s__pColor[p] + GetShortPlayerName(udg_Player) + "|r has left the game")
	
	call RaceSelectSetNameEmpty()
	
	set s__udg_ActivePlayers[p]= false
	set noPlayersOnRoundEnd=GetActivePlayers()
	set s__xrVotes[p]= 0
	call BlzFrameSetText(xrVotesText, "Votes: " + I2S(totalVotes) + "/" + I2S(noPlayersOnRoundEnd))
endfunction






//****************************************************************************
//* 
//*   Triggers
//* 
//****************************************************************************
//*  Trigger Delayed_Destroy_Effect
//****************************************************************************
function Trig_Delayed_Destroy_Effect_Actions takes nothing returns nothing
 local effect sfx= GetLastCreatedEffectBJ()
	call TriggerSleepAction(udg_DDE_Delay)
	call DestroyEffect(sfx)
	set sfx=null
endfunction


//****************************************************************************
function InitTrig_Delayed_Destroy_Effect takes nothing returns nothing
	set gg_trg_Delayed_Destroy_Effect=CreateTrigger()
	call TriggerAddAction(gg_trg_Delayed_Destroy_Effect, function Trig_Delayed_Destroy_Effect_Actions)
endfunction

//*  Trigger Init_MMD_Values
//****************************************************************************
function Trig_Init_MMD_Values_Conditions takes nothing returns boolean
	if ( not ( udg_isMMDEnabled == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Init_MMD_Values_Actions takes nothing returns nothing
	set s__udg_MMD_RaceName[1]= "Human"
	set s__udg_MMD_RaceName[2]= "Orc"
	set s__udg_MMD_RaceName[3]= "Undead"
	set s__udg_MMD_RaceName[4]= "Night Elf"
	set s__udg_MMD_RaceName[5]= "Dalaran"
	set s__udg_MMD_RaceName[6]= "Blood Elf"
	set s__udg_MMD_RaceName[7]= "Forsaken"
	set s__udg_MMD_RaceName[8]= "Naga"
	call MMD_DefineValue("score" , MMD_TYPE_INT , MMD_GOAL_NONE , MMD_SUGGEST_LEADERBOARD)
	call MMD_DefineValue("team" , MMD_TYPE_STRING , MMD_GOAL_NONE , MMD_SUGGEST_NONE)
endfunction


//****************************************************************************
function InitTrig_Init_MMD_Values takes nothing returns nothing
	set gg_trg_Init_MMD_Values=CreateTrigger()
call TriggerRegisterTimerEventSingle(gg_trg_Init_MMD_Values, 7.00)
	call TriggerAddCondition(gg_trg_Init_MMD_Values, Condition(function Trig_Init_MMD_Values_Conditions))
	call TriggerAddAction(gg_trg_Init_MMD_Values, function Trig_Init_MMD_Values_Actions)
endfunction

//*  Trigger New_Round_MMD_Values
//****************************************************************************
function Trig_New_Round_MMD_Values_Conditions takes nothing returns boolean
	if ( not ( udg_isMMDEnabled == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_New_Round_MMD_Values_Actions takes nothing returns nothing
	if ( udg_isGameModeClassic == true ) then
	call MMD_DefineValue("Race Round " + I2S(udg_TotalRounds) , MMD_TYPE_STRING , MMD_GOAL_NONE , MMD_SUGGEST_LEADERBOARD)
	call MMD_DefineValue("Round " + I2S(udg_TotalRounds) + " Hero 1" , MMD_TYPE_STRING , MMD_GOAL_NONE , MMD_SUGGEST_LEADERBOARD)
	call MMD_DefineValue("Round " + I2S(udg_TotalRounds) + " Hero 2" , MMD_TYPE_STRING , MMD_GOAL_NONE , MMD_SUGGEST_LEADERBOARD)
	call MMD_DefineValue("Round " + I2S(udg_TotalRounds) + " Hero 3" , MMD_TYPE_STRING , MMD_GOAL_NONE , MMD_SUGGEST_LEADERBOARD)
	
//*  Set Player Race Name (workaround for lost data)
	call MMD_UpdateValueString("Race Round " + I2S(udg_TotalRounds) , Player(0) , s__udg_MMD_RaceName[s__udg_PlayerRace[1]])
	call TriggerSleepAction(1.00)
	call MMD_UpdateValueString("Race Round " + I2S(udg_TotalRounds) , Player(1) , s__udg_MMD_RaceName[s__udg_PlayerRace[2]])
	call TriggerSleepAction(1.00)
	call MMD_UpdateValueString("Race Round " + I2S(udg_TotalRounds) , Player(2) , s__udg_MMD_RaceName[s__udg_PlayerRace[3]])
	call TriggerSleepAction(1.00)
	call MMD_UpdateValueString("Race Round " + I2S(udg_TotalRounds) , Player(3) , s__udg_MMD_RaceName[s__udg_PlayerRace[4]])
	call TriggerSleepAction(1.00)
	call MMD_UpdateValueString("Race Round " + I2S(udg_TotalRounds) , Player(4) , s__udg_MMD_RaceName[s__udg_PlayerRace[5]])
	call TriggerSleepAction(1.00)
	call MMD_UpdateValueString("Race Round " + I2S(udg_TotalRounds) , Player(5) , s__udg_MMD_RaceName[s__udg_PlayerRace[6]])
	else
	call MMD_DefineValue("Custom Race Round " + I2S(udg_TotalRounds) , MMD_TYPE_STRING , MMD_GOAL_NONE , MMD_SUGGEST_LEADERBOARD)
	call MMD_DefineValue("Custom Round " + I2S(udg_TotalRounds) + " Hero 1" , MMD_TYPE_STRING , MMD_GOAL_NONE , MMD_SUGGEST_LEADERBOARD)
	call MMD_DefineValue("Custom Round " + I2S(udg_TotalRounds) + " Hero 2" , MMD_TYPE_STRING , MMD_GOAL_NONE , MMD_SUGGEST_LEADERBOARD)
	call MMD_DefineValue("Custom Round " + I2S(udg_TotalRounds) + " Hero 3" , MMD_TYPE_STRING , MMD_GOAL_NONE , MMD_SUGGEST_LEADERBOARD)
	
//*  Set Player Race Name (workaround for lost data)
	call MMD_UpdateValueString("Custom Race Round " + I2S(udg_TotalRounds) , Player(0) , s__udg_MMD_RaceName[s__udg_PlayerRace[1]])
	call TriggerSleepAction(1.00)
	call MMD_UpdateValueString("Custom Race Round " + I2S(udg_TotalRounds) , Player(1) , s__udg_MMD_RaceName[s__udg_PlayerRace[2]])
	call TriggerSleepAction(1.00)
	call MMD_UpdateValueString("Custom Race Round " + I2S(udg_TotalRounds) , Player(2) , s__udg_MMD_RaceName[s__udg_PlayerRace[3]])
	call TriggerSleepAction(1.00)
	call MMD_UpdateValueString("Custom Race Round " + I2S(udg_TotalRounds) , Player(3) , s__udg_MMD_RaceName[s__udg_PlayerRace[4]])
	call TriggerSleepAction(1.00)
	call MMD_UpdateValueString("Custom Race Round " + I2S(udg_TotalRounds) , Player(4) , s__udg_MMD_RaceName[s__udg_PlayerRace[5]])
	call TriggerSleepAction(1.00)
	call MMD_UpdateValueString("Custom Race Round " + I2S(udg_TotalRounds) , Player(5) , s__udg_MMD_RaceName[s__udg_PlayerRace[6]])
	endif

endfunction


//****************************************************************************
function InitTrig_New_Round_MMD_Values takes nothing returns nothing
	set gg_trg_New_Round_MMD_Values=CreateTrigger()
	call TriggerAddCondition(gg_trg_New_Round_MMD_Values, Condition(function Trig_New_Round_MMD_Values_Conditions))
	call TriggerAddAction(gg_trg_New_Round_MMD_Values, function Trig_New_Round_MMD_Values_Actions)
endfunction

//*  Trigger Update_MMD_Values
//****************************************************************************
function Trig_Update_MMD_Values_0 takes nothing returns nothing
	
//*  UPDATE MMD VALUES
	set s__udg_MMD_Score[GetConvertedPlayerId(GetEnumPlayer())]= ( s__udg_MMD_Score[GetConvertedPlayerId(GetEnumPlayer())] + s__udg_TotalScore[GetConvertedPlayerId(GetEnumPlayer())] )
	set udg_Integer=( udg_Integer + s__udg_MMD_Score[GetConvertedPlayerId(GetEnumPlayer())] )
	if ( s__udg_Victory[GetConvertedPlayerId(GetEnumPlayer())] == true ) then
	
//*  Decrement losses because it is incremented at game start - this is to eliminate cheesing
	set s__udg_MMD_Losses[GetConvertedPlayerId(GetEnumPlayer())]= ( s__udg_MMD_Losses[GetConvertedPlayerId(GetEnumPlayer())] - 1 )
	set s__udg_MMD_Wins[GetConvertedPlayerId(GetEnumPlayer())]= ( s__udg_MMD_Wins[GetConvertedPlayerId(GetEnumPlayer())] + 1 )
	else
	endif


endfunction

function Trig_Update_MMD_Values_1 takes nothing returns nothing
	if ( s__udg_MMD_Wins[GetConvertedPlayerId(GetEnumPlayer())] > s__udg_MMD_Losses[GetConvertedPlayerId(GetEnumPlayer())] ) then
	if ( IsPlayerInForce(GetEnumPlayer(), s__udg_Teams[1]) == true ) then
	set s__udg_MMD_Score_Final[GetConvertedPlayerId(GetEnumPlayer())]= R2I(( I2R(s__udg_MMD_Score[GetConvertedPlayerId(GetEnumPlayer())]) / udg_Real ))
	else
	if ( IsPlayerInForce(GetEnumPlayer(), s__udg_Teams[2]) == true ) then
	set s__udg_MMD_Score_Final[GetConvertedPlayerId(GetEnumPlayer())]= R2I(( I2R(s__udg_MMD_Score[GetConvertedPlayerId(GetEnumPlayer())]) / udg_Real2 ))
	else
	endif

	endif

	else
	if ( s__udg_MMD_Wins[GetConvertedPlayerId(GetEnumPlayer())] < s__udg_MMD_Losses[GetConvertedPlayerId(GetEnumPlayer())] ) then
	set s__udg_MMD_Score_Final[GetConvertedPlayerId(GetEnumPlayer())]= s__udg_MMD_Score[GetConvertedPlayerId(GetEnumPlayer())]
	else
	if ( s__udg_MMD_Wins[GetConvertedPlayerId(GetEnumPlayer())] == s__udg_MMD_Losses[GetConvertedPlayerId(GetEnumPlayer())] ) then
	set s__udg_MMD_Score_Final[GetConvertedPlayerId(GetEnumPlayer())]= 0
	else
	endif

	endif

	endif

	
	call MMD__update_value(("score" ) , ( GetEnumPlayer() ) , MMD__ops[( MMD_OP_SET )] , I2S(( s__udg_MMD_Score_Final[GetConvertedPlayerId(GetEnumPlayer())])) , MMD_TYPE_INT) // INLINED!!

endfunction

function Trig_Update_MMD_Values_Conditions takes nothing returns boolean
	if ( not ( udg_isMMDEnabled == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Update_MMD_Values_Actions takes nothing returns nothing
	set udg_Integer=0
	call ForForce(GetPlayersAll(), function Trig_Update_MMD_Values_0)

	
//*  set score ratio for both teams
	set udg_Real=( ( I2R(s__udg_MMD_Score[1]) + ( I2R(s__udg_MMD_Score[3]) + I2R(s__udg_MMD_Score[5]) ) ) / I2R(udg_Integer) )
	set udg_Real2=( ( I2R(s__udg_MMD_Score[2]) + ( I2R(s__udg_MMD_Score[4]) + I2R(s__udg_MMD_Score[6]) ) ) / I2R(udg_Integer) )
	call ForForce(GetPlayersAll(), function Trig_Update_MMD_Values_1)

endfunction


//****************************************************************************
function InitTrig_Update_MMD_Values takes nothing returns nothing
	set gg_trg_Update_MMD_Values=CreateTrigger()
	call TriggerAddCondition(gg_trg_Update_MMD_Values, Condition(function Trig_Update_MMD_Values_Conditions))
	call TriggerAddAction(gg_trg_Update_MMD_Values, function Trig_Update_MMD_Values_Actions)
endfunction

//*  Trigger ItemshopGUI_Init_Shop
//****************************************************************************
function Trig_ItemshopGUI_Init_Shop_Actions takes nothing returns nothing
	set udg_TasItemShop_Unit='ngme'
	
//*  general cost Factor, 1.0 = 100%. 1,2 = 120% costs
	set udg_TasItemShop_Gold=1.00
	set udg_TasItemShop_Lumber=1.00
	
//*  false  = disallow mentioned items
	
//*  true = allow only the mentioned items
	set udg_TasItemShop_WhiteList=false
	
//*  Mat[0] is not supported
	set s__udg_TasItemShop_Mats[1]= 'desc'
	set s__udg_TasItemShop_Mats[2]= 'ckng'
	call TriggerExecute(udg_TasItemShopCreateShop)
endfunction


//****************************************************************************
function InitTrig_ItemshopGUI_Init_Shop takes nothing returns nothing
	set gg_trg_ItemshopGUI_Init_Shop=CreateTrigger()
	call TriggerAddAction(gg_trg_ItemshopGUI_Init_Shop, function Trig_ItemshopGUI_Init_Shop_Actions)
endfunction

//*  Trigger ItemshopGUI_Init
//****************************************************************************
function Trig_ItemshopGUI_Init_Actions takes nothing returns nothing
	
	
	call TriggerExecute(gg_trg_ItemshopGUI_Init_Shop)
	
	
endfunction


//****************************************************************************
function InitTrig_ItemshopGUI_Init takes nothing returns nothing
	set gg_trg_ItemshopGUI_Init=CreateTrigger()
	call TriggerAddAction(gg_trg_ItemshopGUI_Init, function Trig_ItemshopGUI_Init_Actions)
endfunction

//*  Trigger Cinematic_Sequence_01
//****************************************************************************
function Trig_Cinematic_Sequence_01_Actions takes nothing returns nothing
	call PlayThematicMusicBJ("war3mapImported\\Intro3.mp3")
	call ClearTextMessagesBJ(GetPlayersAll())
	call SetCameraField(CAMERA_FIELD_FARZ, 7000, 0)
	call CameraSetupApplyForPlayerSmooth(true, gg_cam_Cinematic_02_Team_1, Player(0), 9.50, 6.00, 1.00, 1.00)
	call CameraSetupApplyForPlayerSmooth(true, gg_cam_Cinematic_02_Team_1, Player(2), 9.50, 6.00, 1.00, 1.00)
	call CameraSetupApplyForPlayerSmooth(true, gg_cam_Cinematic_02_Team_1, Player(4), 9.50, 6.00, 1.00, 1.00)
	call CameraSetupApplyForPlayerSmooth(true, gg_cam_Cinematic_02_Team_2, Player(1), 9.50, 6.00, 1.00, 1.00)
	call CameraSetupApplyForPlayerSmooth(true, gg_cam_Cinematic_02_Team_2, Player(3), 9.50, 6.00, 1.00, 1.00)
	call CameraSetupApplyForPlayerSmooth(true, gg_cam_Cinematic_02_Team_2, Player(5), 9.50, 6.00, 1.00, 1.00)
endfunction


//****************************************************************************
function InitTrig_Cinematic_Sequence_01 takes nothing returns nothing
	set gg_trg_Cinematic_Sequence_01=CreateTrigger()
call TriggerRegisterTimerEventSingle(gg_trg_Cinematic_Sequence_01, 2.00)
	call TriggerAddAction(gg_trg_Cinematic_Sequence_01, function Trig_Cinematic_Sequence_01_Actions)
endfunction

//*  Trigger Cinematic_Sequence_02_init_scripts
//****************************************************************************
function Trig_Cinematic_Sequence_02_init_scripts_Actions takes nothing returns nothing
	call initSaveLoad()
	call InitiateGameModeSelection()
	call PlaySoundBJ(gg_snd_QuestActivateWhat1)
endfunction


//****************************************************************************
function InitTrig_Cinematic_Sequence_02_init_scripts takes nothing returns nothing
	set gg_trg_Cinematic_Sequence_02_init_scripts=CreateTrigger()
call TriggerRegisterTimerEventSingle(gg_trg_Cinematic_Sequence_02_init_scripts, 12.00)
	call TriggerAddAction(gg_trg_Cinematic_Sequence_02_init_scripts, function Trig_Cinematic_Sequence_02_init_scripts_Actions)
endfunction

//*  Trigger SetupGUISpellTables
//****************************************************************************
function Trig_SetupGUISpellTables_Actions takes nothing returns nothing
	call InitHashtableBJ()
	set udg_TablePiercingCharge=GetLastCreatedHashtableBJ()
	call InitHashtableBJ()
	set udg_TableShieldBashCharge=GetLastCreatedHashtableBJ()
	call InitHashtableBJ()
	set udg_TableHolyBolt=GetLastCreatedHashtableBJ()
	call InitHashtableBJ()
	set udg_SpellLockTargets=GetLastCreatedHashtableBJ()
	call InitHashtableBJ()
	set udg_TableSunkenWave=GetLastCreatedHashtableBJ()
	call InitHashtableBJ()
	set udg_PossessionTable=GetLastCreatedHashtableBJ()
	call InitHashtableBJ()
	set udg_PossessionTable2=GetLastCreatedHashtableBJ()
endfunction


//****************************************************************************
function InitTrig_SetupGUISpellTables takes nothing returns nothing
	set gg_trg_SetupGUISpellTables=CreateTrigger()
call TriggerRegisterTimerEventSingle(gg_trg_SetupGUISpellTables, 8.00)
	call TriggerAddAction(gg_trg_SetupGUISpellTables, function Trig_SetupGUISpellTables_Actions)
endfunction

//*  Trigger Move_Unit_On_Cast
//****************************************************************************
function Trig_Move_Unit_On_Cast_Conditions takes nothing returns boolean
	if ( not ( ( GetSpellAbilityId() == 'Ainf' or GetSpellAbilityId() == 'Aspl' or GetSpellAbilityId() == 'Aams' or GetSpellAbilityId() == 'Auhf' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Move_Unit_On_Cast_Actions takes nothing returns nothing
	call UnitMoveLoc(GetTriggerUnit())
endfunction


//****************************************************************************
function InitTrig_Move_Unit_On_Cast takes nothing returns nothing
	set gg_trg_Move_Unit_On_Cast=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Move_Unit_On_Cast, EVENT_PLAYER_UNIT_SPELL_FINISH)
	call TriggerAddCondition(gg_trg_Move_Unit_On_Cast, Condition(function Trig_Move_Unit_On_Cast_Conditions))
	call TriggerAddAction(gg_trg_Move_Unit_On_Cast, function Trig_Move_Unit_On_Cast_Actions)
endfunction

//*  Trigger Mana_Flare_Cast
//****************************************************************************
function BoolExpr_3 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'efdr' and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Mana_Flare_Cast_3 takes nothing returns nothing
	if ( s__udg_activeManaFlare[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == true ) then
	call IssueImmediateOrderBJ(GetEnumUnit(), "manaflareon")
	else
	endif


endfunction

function Trig_Mana_Flare_Cast_Conditions takes nothing returns boolean
	if ( not ( ( BlzGetAbilityManaCost(GetSpellAbilityId(), 0) > 0 or BlzGetAbilityManaCost(GetSpellAbilityId(), 1) > 0 or BlzGetAbilityManaCost(GetSpellAbilityId(), 2) > 0 ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Mana_Flare_Cast_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(udg_ManaFlareRange, udg_Point, Condition(function BoolExpr_3))
	call ForGroup(udg_UnitGroup, function Trig_Mana_Flare_Cast_3)

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Mana_Flare_Cast takes nothing returns nothing
	set gg_trg_Mana_Flare_Cast=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Mana_Flare_Cast, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Mana_Flare_Cast, Condition(function Trig_Mana_Flare_Cast_Conditions))
	call TriggerAddAction(gg_trg_Mana_Flare_Cast, function Trig_Mana_Flare_Cast_Actions)
endfunction

//*  Trigger Unit_Casts_Invisibility
//****************************************************************************
function BoolExpr_5 takes nothing returns boolean
	if ( ( ( GetUnitTypeId(GetFilterUnit()) == 'ndth' or ( GetUnitTypeId(GetFilterUnit()) == 'nfsh' or ( GetUnitTypeId(GetFilterUnit()) == 'nith' or GetUnitTypeId(GetFilterUnit()) == 'odoc' ) ) ) and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_6 takes nothing returns boolean
	if ( ( ( GetUnitTypeId(GetFilterUnit()) == 'esen' or GetUnitTypeId(GetFilterUnit()) == 'ensh' ) and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Unit_Casts_Invisibility_Conditions takes nothing returns boolean
	if ( not ( ( GetSpellAbilityId() == 'Aivs' or GetSpellAbilityId() == 'A01E' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Unit_Casts_Invisibility_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetSpellTargetUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(650.00, udg_Point, Condition(function BoolExpr_5))
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup)
	set udg_Point2=GetUnitLoc(udg_Unit)
	call IssuePointOrderLocBJ(udg_Unit, "evileye", udg_Point)
	call DestroyGroup(udg_UnitGroup)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(400.00, udg_Point, Condition(function BoolExpr_6))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup)
	call IssueImmediateOrderBJ(udg_Unit, "scout")
	else
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point2)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Unit_Casts_Invisibility takes nothing returns nothing
	set gg_trg_Unit_Casts_Invisibility=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Unit_Casts_Invisibility, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Unit_Casts_Invisibility, Condition(function Trig_Unit_Casts_Invisibility_Conditions))
	call TriggerAddAction(gg_trg_Unit_Casts_Invisibility, function Trig_Unit_Casts_Invisibility_Actions)
endfunction

//*  Trigger Unit_Casts_Invisibility_NEW
//****************************************************************************
function Trig_Unit_Casts_Invisibility_NEW_Conditions takes nothing returns boolean
	if ( not ( GetSpellAbilityId() == 'A01E' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Unit_Casts_Invisibility_NEW_Actions takes nothing returns nothing
	call Invisibility()
endfunction


//****************************************************************************
function InitTrig_Unit_Casts_Invisibility_NEW takes nothing returns nothing
	set gg_trg_Unit_Casts_Invisibility_NEW=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Unit_Casts_Invisibility_NEW, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Unit_Casts_Invisibility_NEW, Condition(function Trig_Unit_Casts_Invisibility_NEW_Conditions))
	call TriggerAddAction(gg_trg_Unit_Casts_Invisibility_NEW, function Trig_Unit_Casts_Invisibility_NEW_Actions)
endfunction

//*  Trigger Unit_Casts_Aerial_Shackles
//****************************************************************************
function Trig_Unit_Casts_Aerial_Shackles_Conditions takes nothing returns boolean
	if ( not ( GetSpellAbilityId() == 'Amls' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Unit_Casts_Aerial_Shackles_Actions takes nothing returns nothing
	call GroupAddUnitSimple(GetSpellTargetUnit(), udg_AerialShacklesGroup)
endfunction


//****************************************************************************
function InitTrig_Unit_Casts_Aerial_Shackles takes nothing returns nothing
	set gg_trg_Unit_Casts_Aerial_Shackles=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Unit_Casts_Aerial_Shackles, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Unit_Casts_Aerial_Shackles, Condition(function Trig_Unit_Casts_Aerial_Shackles_Conditions))
	call TriggerAddAction(gg_trg_Unit_Casts_Aerial_Shackles, function Trig_Unit_Casts_Aerial_Shackles_Actions)
endfunction

//*  Trigger Unit_Finishes_Casting_Aerial_Shackles
//****************************************************************************
function Trig_Unit_Finishes_Casting_Aerial_Shackles_Conditions takes nothing returns boolean
	if ( not ( GetSpellAbilityId() == 'Amls' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Unit_Finishes_Casting_Aerial_Shackles_Actions takes nothing returns nothing
	call GroupRemoveUnitSimple(GetSpellTargetUnit(), udg_AerialShacklesGroup)
endfunction


//****************************************************************************
function InitTrig_Unit_Finishes_Casting_Aerial_Shackles takes nothing returns nothing
	set gg_trg_Unit_Finishes_Casting_Aerial_Shackles=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Unit_Finishes_Casting_Aerial_Shackles, EVENT_PLAYER_UNIT_SPELL_FINISH)
call TriggerRegisterAnyUnitEventBJ(gg_trg_Unit_Finishes_Casting_Aerial_Shackles, EVENT_PLAYER_UNIT_SPELL_ENDCAST)
	call TriggerAddCondition(gg_trg_Unit_Finishes_Casting_Aerial_Shackles, Condition(function Trig_Unit_Finishes_Casting_Aerial_Shackles_Conditions))
	call TriggerAddAction(gg_trg_Unit_Finishes_Casting_Aerial_Shackles, function Trig_Unit_Finishes_Casting_Aerial_Shackles_Actions)
endfunction

//*  Trigger Unit_Casts_Ancestral_Spirit
//****************************************************************************
function BoolExpr_7 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'ospw' and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == false ) ) then
		return true
	endif
	return false
endfunction

function Trig_Unit_Casts_Ancestral_Spirit_7 takes nothing returns nothing
	if ( GetEnumUnit() != GetTriggerUnit() ) then
	call SetUnitManaBJ(GetEnumUnit(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetEnumUnit()) - 50.00 ))
	call AddSpecialEffectTargetUnitBJ("overhead", GetEnumUnit(), "Abilities\\Spells\\Other\\Charm\\CharmTarget.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	else
	endif


endfunction

function Trig_Unit_Casts_Ancestral_Spirit_Conditions takes nothing returns boolean
	if ( not ( GetSpellAbilityId() == 'Aast' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Unit_Casts_Ancestral_Spirit_Actions takes nothing returns nothing
	
	
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(300.00, udg_Point, Condition(function BoolExpr_7))
	call ForGroup(udg_UnitGroup, function Trig_Unit_Casts_Ancestral_Spirit_7)

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Unit_Casts_Ancestral_Spirit takes nothing returns nothing
	set gg_trg_Unit_Casts_Ancestral_Spirit=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Unit_Casts_Ancestral_Spirit, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Unit_Casts_Ancestral_Spirit, Condition(function Trig_Unit_Casts_Ancestral_Spirit_Conditions))
	call TriggerAddAction(gg_trg_Unit_Casts_Ancestral_Spirit, function Trig_Unit_Casts_Ancestral_Spirit_Actions)
endfunction

//*  Trigger Unit_Casts_Stasis_Trap
//****************************************************************************
function BoolExpr_9 takes nothing returns boolean
	if ( ( ( GetUnitTypeId(GetFilterUnit()) == 'ndth' or ( GetUnitTypeId(GetFilterUnit()) == 'nfsh' or ( GetUnitTypeId(GetFilterUnit()) == 'nith' or GetUnitTypeId(GetFilterUnit()) == 'odoc' ) ) ) and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Unit_Casts_Stasis_Trap_Conditions takes nothing returns boolean
	if ( not ( GetSpellAbilityId() == 'Asta' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Unit_Casts_Stasis_Trap_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(650.00, udg_Point, Condition(function BoolExpr_9))
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup)
	set udg_Point2=GetSpellTargetLoc()
	call IssuePointOrderLocBJ(udg_Unit, "evileye", udg_Point2)
	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	call RemoveLocation(udg_Point2)
endfunction


//****************************************************************************
function InitTrig_Unit_Casts_Stasis_Trap takes nothing returns nothing
	set gg_trg_Unit_Casts_Stasis_Trap=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Unit_Casts_Stasis_Trap, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Unit_Casts_Stasis_Trap, Condition(function Trig_Unit_Casts_Stasis_Trap_Conditions))
	call TriggerAddAction(gg_trg_Unit_Casts_Stasis_Trap, function Trig_Unit_Casts_Stasis_Trap_Actions)
endfunction

//*  Trigger Unit_Casts_Burrow
//****************************************************************************
function BoolExpr_10 takes nothing returns boolean
	if ( ( ( GetUnitTypeId(GetFilterUnit()) == 'ndth' or ( GetUnitTypeId(GetFilterUnit()) == 'nfsh' or ( GetUnitTypeId(GetFilterUnit()) == 'nith' or GetUnitTypeId(GetFilterUnit()) == 'odoc' ) ) ) and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_11 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'hmtm' and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_12 takes nothing returns boolean
	if ( ( ( GetUnitTypeId(GetFilterUnit()) == 'esen' or GetUnitTypeId(GetFilterUnit()) == 'ensh' ) and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Unit_Casts_Burrow_Conditions takes nothing returns boolean
	if ( not ( GetSpellAbilityId() == 'Abur' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Unit_Casts_Burrow_Actions takes nothing returns nothing
	call GroupAddUnitSimple(GetTriggerUnit(), udg_CryptFiendBurrow)
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(650.00, udg_Point, Condition(function BoolExpr_10))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup)
	call IssuePointOrderLocBJ(udg_Unit, "evileye", udg_Point)
	else
	endif

	call DestroyGroup(udg_UnitGroup)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_11))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup)
	call IssuePointOrderLocBJ(udg_Unit, "flare", udg_Point)
	else
	endif

	call DestroyGroup(udg_UnitGroup)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(400.00, udg_Point, Condition(function BoolExpr_12))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup)
	call IssueImmediateOrderBJ(udg_Unit, "scout")
	else
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Unit_Casts_Burrow takes nothing returns nothing
	set gg_trg_Unit_Casts_Burrow=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Unit_Casts_Burrow, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Unit_Casts_Burrow, Condition(function Trig_Unit_Casts_Burrow_Conditions))
	call TriggerAddAction(gg_trg_Unit_Casts_Burrow, function Trig_Unit_Casts_Burrow_Actions)
endfunction

//*  Trigger Unit_Casts_Devour_Magic
//****************************************************************************
function Trig_Unit_Casts_Devour_Magic_Conditions takes nothing returns boolean
	if ( not ( GetSpellAbilityId() == 'Advm' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Unit_Casts_Devour_Magic_Actions takes nothing returns nothing
	set udg_Point=GetSpellTargetLoc()
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Spells\\Human\\DispelMagic\\DispelMagicTarget.mdl")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 2.00)
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Unit_Casts_Devour_Magic takes nothing returns nothing
	set gg_trg_Unit_Casts_Devour_Magic=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Unit_Casts_Devour_Magic, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Unit_Casts_Devour_Magic, Condition(function Trig_Unit_Casts_Devour_Magic_Conditions))
	call TriggerAddAction(gg_trg_Unit_Casts_Devour_Magic, function Trig_Unit_Casts_Devour_Magic_Actions)
endfunction

//*  Trigger Unit_Hit_by_Possession
//****************************************************************************
function Trig_Unit_Hit_by_Possession_Actions takes nothing returns nothing
	call GroupRemoveUnitSimple(GetTriggerUnit(), s__udg_IdleUnits[1])
	call GroupRemoveUnitSimple(GetTriggerUnit(), s__udg_UnitsOnEnemyHalf[1])
	call GroupRemoveUnitSimple(GetTriggerUnit(), s__udg_UnitsOnTheirHalf[1])
	call GroupRemoveUnitSimple(GetTriggerUnit(), s__udg_IdleUnits[4])
	call GroupRemoveUnitSimple(GetTriggerUnit(), s__udg_UnitsOnEnemyHalf[4])
	call GroupRemoveUnitSimple(GetTriggerUnit(), s__udg_UnitsOnTheirHalf[4])
	call IssueImmediateOrderBJ(GetTriggerUnit(), "stop")
endfunction


//****************************************************************************
function InitTrig_Unit_Hit_by_Possession takes nothing returns nothing
	set gg_trg_Unit_Hit_by_Possession=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Unit_Hit_by_Possession, EVENT_PLAYER_UNIT_CHANGE_OWNER)
	call TriggerAddAction(gg_trg_Unit_Hit_by_Possession, function Trig_Unit_Hit_by_Possession_Actions)
endfunction

//*  Trigger Unit_Casts_Kaboom
//****************************************************************************
function Trig_Unit_Casts_Kaboom_Conditions takes nothing returns boolean
	if ( not ( ( GetSpellAbilityId() == 'Asdg' or GetSpellAbilityId() == 'Asd2' or GetSpellAbilityId() == 'Asd3' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Unit_Casts_Kaboom_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Weapons\\GyroCopter\\GyroCopterMissile.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Unit_Casts_Kaboom takes nothing returns nothing
	set gg_trg_Unit_Casts_Kaboom=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Unit_Casts_Kaboom, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Unit_Casts_Kaboom, Condition(function Trig_Unit_Casts_Kaboom_Conditions))
	call TriggerAddAction(gg_trg_Unit_Casts_Kaboom, function Trig_Unit_Casts_Kaboom_Actions)
endfunction

//*  Trigger Banshee_Possession_NEW
//****************************************************************************
function Trig_Banshee_Possession_NEW_Conditions takes nothing returns boolean
	if ( not ( GetSpellAbilityId() == 'A0DW' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Banshee_Possession_NEW_Actions takes nothing returns nothing
	call SavePlayerHandleBJ(GetOwningPlayer(GetSpellTargetUnit()), GetHandleIdBJ(GetSpellTargetUnit()), 0, udg_PossessionTable)
	call SavePlayerHandleBJ(GetOwningPlayer(GetTriggerUnit()), GetHandleIdBJ(GetSpellTargetUnit()), 0, udg_PossessionTable2)
	call SaveBooleanBJ(false, 0, GetHandleIdBJ(GetSpellTargetUnit()), udg_PossessionTable)
	call GroupAddUnitSimple(GetSpellTargetUnit(), udg_PossessionGroup)
endfunction


//****************************************************************************
function InitTrig_Banshee_Possession_NEW takes nothing returns nothing
	set gg_trg_Banshee_Possession_NEW=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Banshee_Possession_NEW, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Banshee_Possession_NEW, Condition(function Trig_Banshee_Possession_NEW_Conditions))
	call TriggerAddAction(gg_trg_Banshee_Possession_NEW, function Trig_Banshee_Possession_NEW_Actions)
endfunction

//*  Trigger Banshee_Possession_Kill
//****************************************************************************
function Trig_Banshee_Possession_Kill_Conditions takes nothing returns boolean
	if ( not ( GetSpellAbilityId() == 'A0DW' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Banshee_Possession_Kill_Actions takes nothing returns nothing
	call RemoveUnit(GetTriggerUnit())
endfunction


//****************************************************************************
function InitTrig_Banshee_Possession_Kill takes nothing returns nothing
	set gg_trg_Banshee_Possession_Kill=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Banshee_Possession_Kill, EVENT_PLAYER_UNIT_SPELL_FINISH)
	call TriggerAddCondition(gg_trg_Banshee_Possession_Kill, Condition(function Trig_Banshee_Possession_Kill_Conditions))
	call TriggerAddAction(gg_trg_Banshee_Possession_Kill, function Trig_Banshee_Possession_Kill_Actions)
endfunction

//*  Trigger Banshee_Possession_change_back
//****************************************************************************
function Trig_Banshee_Possession_change_back_12 takes nothing returns nothing
	set udg_Bool=LoadBooleanBJ(0, GetHandleIdBJ(GetEnumUnit()), udg_PossessionTable)
	if ( UnitHasBuffBJ(GetEnumUnit(), 'Bpos') == true ) then
	set udg_Bool=true
	call SaveBooleanBJ(udg_Bool, 0, GetHandleIdBJ(GetEnumUnit()), udg_PossessionTable)
	set udg_Player=LoadPlayerHandleBJ(GetHandleIdBJ(GetEnumUnit()), 0, udg_PossessionTable2)
	call SetUnitOwner(GetEnumUnit(), udg_Player, true)
	call UnitDamageTargetBJ(GetEnumUnit(), GetEnumUnit(), 5.00, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_NORMAL)
	else
	endif

	if ( udg_Bool == true and UnitHasBuffBJ(GetEnumUnit(), 'Bpos') == false ) then
	set udg_Player=LoadPlayerHandleBJ(GetHandleIdBJ(GetEnumUnit()), 0, udg_PossessionTable)
	call GroupRemoveUnitSimple(GetEnumUnit(), udg_PossessionGroup)
	else
	endif


endfunction

function Trig_Banshee_Possession_change_back_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_PossessionGroup) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Banshee_Possession_change_back_Actions takes nothing returns nothing
	call ForGroup(udg_PossessionGroup, function Trig_Banshee_Possession_change_back_12)

endfunction


//****************************************************************************
function InitTrig_Banshee_Possession_change_back takes nothing returns nothing
	set gg_trg_Banshee_Possession_change_back=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Banshee_Possession_change_back, 0.20)
	call TriggerAddCondition(gg_trg_Banshee_Possession_change_back, Condition(function Trig_Banshee_Possession_change_back_Conditions))
	call TriggerAddAction(gg_trg_Banshee_Possession_change_back, function Trig_Banshee_Possession_change_back_Actions)
endfunction

//*  Trigger Hero_Casts_Earthquake
//****************************************************************************
function Trig_Hero_Casts_Earthquake_Conditions takes nothing returns boolean
	if ( not ( GetSpellAbilityId() == 'AOeq' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Hero_Casts_Earthquake_Actions takes nothing returns nothing
	set s__udg_EarthquakeActive[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= true
	set s__udg_EarthquakePoint[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= GetSpellTargetLoc()
endfunction


//****************************************************************************
function InitTrig_Hero_Casts_Earthquake takes nothing returns nothing
	set gg_trg_Hero_Casts_Earthquake=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Hero_Casts_Earthquake, EVENT_PLAYER_UNIT_SPELL_CHANNEL)
	call TriggerAddCondition(gg_trg_Hero_Casts_Earthquake, Condition(function Trig_Hero_Casts_Earthquake_Conditions))
	call TriggerAddAction(gg_trg_Hero_Casts_Earthquake, function Trig_Hero_Casts_Earthquake_Actions)
endfunction

//*  Trigger Hero_Stops_Casting_Earthquake
//****************************************************************************
function Trig_Hero_Stops_Casting_Earthquake_Conditions takes nothing returns boolean
	if ( not ( GetSpellAbilityId() == 'AOeq' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Hero_Stops_Casting_Earthquake_Actions takes nothing returns nothing
	set s__udg_EarthquakeActive[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= false
	call RemoveLocation(s__udg_EarthquakePoint[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))])
endfunction


//****************************************************************************
function InitTrig_Hero_Stops_Casting_Earthquake takes nothing returns nothing
	set gg_trg_Hero_Stops_Casting_Earthquake=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Hero_Stops_Casting_Earthquake, EVENT_PLAYER_UNIT_SPELL_ENDCAST)
	call TriggerAddCondition(gg_trg_Hero_Stops_Casting_Earthquake, Condition(function Trig_Hero_Stops_Casting_Earthquake_Conditions))
	call TriggerAddAction(gg_trg_Hero_Stops_Casting_Earthquake, function Trig_Hero_Stops_Casting_Earthquake_Actions)
endfunction

//*  Trigger Hero_Casts_Death_and_Decay
//****************************************************************************
function Trig_Hero_Casts_Death_and_Decay_Conditions takes nothing returns boolean
	if ( not ( GetSpellAbilityId() == 'AUdd' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Hero_Casts_Death_and_Decay_Actions takes nothing returns nothing
	set s__udg_DeathAndDecayPoint[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= GetSpellTargetLoc()
	set s__udg_DeathAndDecayActive[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= true
endfunction


//****************************************************************************
function InitTrig_Hero_Casts_Death_and_Decay takes nothing returns nothing
	set gg_trg_Hero_Casts_Death_and_Decay=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Hero_Casts_Death_and_Decay, EVENT_PLAYER_UNIT_SPELL_CHANNEL)
	call TriggerAddCondition(gg_trg_Hero_Casts_Death_and_Decay, Condition(function Trig_Hero_Casts_Death_and_Decay_Conditions))
	call TriggerAddAction(gg_trg_Hero_Casts_Death_and_Decay, function Trig_Hero_Casts_Death_and_Decay_Actions)
endfunction

//*  Trigger Hero_Stops_Casting_Death_and_Decay
//****************************************************************************
function Trig_Hero_Stops_Casting_Death_and_Decay_Conditions takes nothing returns boolean
	if ( not ( GetSpellAbilityId() == 'AUdd' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Hero_Stops_Casting_Death_and_Decay_Actions takes nothing returns nothing
	set s__udg_DeathAndDecayActive[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= false
	call RemoveLocation(s__udg_DeathAndDecayPoint[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))])
endfunction


//****************************************************************************
function InitTrig_Hero_Stops_Casting_Death_and_Decay takes nothing returns nothing
	set gg_trg_Hero_Stops_Casting_Death_and_Decay=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Hero_Stops_Casting_Death_and_Decay, EVENT_PLAYER_UNIT_SPELL_CHANNEL)
	call TriggerAddCondition(gg_trg_Hero_Stops_Casting_Death_and_Decay, Condition(function Trig_Hero_Stops_Casting_Death_and_Decay_Conditions))
	call TriggerAddAction(gg_trg_Hero_Stops_Casting_Death_and_Decay, function Trig_Hero_Stops_Casting_Death_and_Decay_Actions)
endfunction

//*  Trigger Hero_Casts_Tornado
//****************************************************************************
function Trig_Hero_Casts_Tornado_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetSummonedUnit()) == 'ntor' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Hero_Casts_Tornado_Actions takes nothing returns nothing
	call GroupAddUnitSimple(GetSummonedUnit(), udg_Tornados)
endfunction


//****************************************************************************
function InitTrig_Hero_Casts_Tornado takes nothing returns nothing
	set gg_trg_Hero_Casts_Tornado=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Hero_Casts_Tornado, EVENT_PLAYER_UNIT_SUMMON)
	call TriggerAddCondition(gg_trg_Hero_Casts_Tornado, Condition(function Trig_Hero_Casts_Tornado_Conditions))
	call TriggerAddAction(gg_trg_Hero_Casts_Tornado, function Trig_Hero_Casts_Tornado_Actions)
endfunction

//*  Trigger Tornado_Search
//****************************************************************************
function BoolExpr_15 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetEnumUnit())) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Tornado_Search_13 takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetEnumUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(750.00, udg_Point, Condition(function BoolExpr_15))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup))
	call IssuePointOrderLocBJ(GetEnumUnit(), "move", udg_Point2)
	call RemoveLocation(udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)

endfunction

function Trig_Tornado_Search_Actions takes nothing returns nothing
	call ForGroup(udg_Tornados, function Trig_Tornado_Search_13)

endfunction


//****************************************************************************
function InitTrig_Tornado_Search takes nothing returns nothing
	set gg_trg_Tornado_Search=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Tornado_Search, 2)
	call TriggerAddAction(gg_trg_Tornado_Search, function Trig_Tornado_Search_Actions)
endfunction

//*  Trigger Holy_Light
//****************************************************************************
function BoolExpr_16 takes nothing returns boolean
	if ( ( IsUnitType(GetFilterUnit(), UNIT_TYPE_UNDEAD) == true and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_17 takes nothing returns boolean
	if ( ( GetUnitLifePercent(GetFilterUnit()) <= 75.00 and ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and IsUnitType(GetFilterUnit(), UNIT_TYPE_UNDEAD) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Holy_Light_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Paladins) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Paladins)
	if ( s__udg_activeHolyLight[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AHhb') <= 0.00 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("holybolt") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_16))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "holybolt", GroupPickRandomUnit(udg_UnitGroup3))
	else
	set udg_UnitGroup4=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_17))
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup4)
	call IssueTargetOrderBJ(udg_Unit, "holybolt", udg_Unit2)
	call DestroyGroup(udg_UnitGroup4)
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Holy_Light takes nothing returns nothing
	set gg_trg_Holy_Light=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Holy_Light, 1.00)
	call TriggerAddAction(gg_trg_Holy_Light, function Trig_Holy_Light_Actions)
endfunction

//*  Trigger Divine_Shield
//****************************************************************************
function Trig_Divine_Shield_Conditions takes nothing returns boolean
	if ( not ( ( ( GetUnitTypeId(GetTriggerUnit()) == 'Hpal' or GetUnitTypeId(GetTriggerUnit()) == 'Hart' or GetUnitTypeId(GetTriggerUnit()) == 'Huth' ) and s__udg_activeDivineShield[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true and GetUnitLifePercent(GetTriggerUnit()) <= 20.00 and BlzGetUnitAbilityCooldownRemaining(GetTriggerUnit(), 'AHds') <= 0.00 and GetUnitCurrentOrder(GetTriggerUnit()) != String2OrderIdBJ("divineshield") ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Divine_Shield_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetTriggerUnit(), "divineshield")
endfunction


//****************************************************************************
function InitTrig_Divine_Shield takes nothing returns nothing
	set gg_trg_Divine_Shield=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Divine_Shield, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Divine_Shield, Condition(function Trig_Divine_Shield_Conditions))
	call TriggerAddAction(gg_trg_Divine_Shield, function Trig_Divine_Shield_Actions)
endfunction

//*  Trigger Resurrection
//****************************************************************************
function BoolExpr_18 takes nothing returns boolean
	if ( ( IsUnitDeadBJ(GetFilterUnit()) == true and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false ) ) then
		return true
	endif
	return false
endfunction

function Trig_Resurrection_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Paladins) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Paladins)
	if ( s__udg_activeResurrection[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AHre') <= 0.00 ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_18))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 3 ) then
	call IssueImmediateOrderBJ(udg_Unit, "resurrection")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Resurrection takes nothing returns nothing
	set gg_trg_Resurrection=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Resurrection, 2.75)
	call TriggerAddAction(gg_trg_Resurrection, function Trig_Resurrection_Actions)
endfunction

//*  Trigger Blizzard
//****************************************************************************
function BoolExpr_19 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_20 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Blizzard_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Archmages) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Archmages)
	if ( s__udg_activeBlizzard[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AHbz') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('AHbz', GetUnitAbilityLevelSwapped('AHbz', udg_Unit))) and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("tornado") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_19))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(200.00, udg_Point2, Condition(function BoolExpr_20))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 2 ) then
	call IssuePointOrderLocBJ(udg_Unit, "blizzard", udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Blizzard takes nothing returns nothing
	set gg_trg_Blizzard=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Blizzard, 1.50)
	call TriggerAddAction(gg_trg_Blizzard, function Trig_Blizzard_Actions)
endfunction

//*  Trigger Water_Elemental
//****************************************************************************
function Trig_Water_Elemental_Conditions takes nothing returns boolean
	if ( not ( ( ( GetUnitTypeId(GetAttacker()) == 'Hamg' or GetUnitTypeId(GetAttacker()) == 'Haah' or GetUnitTypeId(GetAttacker()) == 'Hgam' ) and s__udg_activeWaterElemental[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true and BlzGetUnitAbilityCooldownRemaining(GetAttacker(), 'AHwe') <= 0.00 and GetUnitCurrentOrder(GetAttacker()) != String2OrderIdBJ("blizzard") and GetUnitCurrentOrder(GetAttacker()) != String2OrderIdBJ("tornado") ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Water_Elemental_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "waterelemental")
endfunction


//****************************************************************************
function InitTrig_Water_Elemental takes nothing returns nothing
	set gg_trg_Water_Elemental=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Water_Elemental, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Water_Elemental, Condition(function Trig_Water_Elemental_Conditions))
	call TriggerAddAction(gg_trg_Water_Elemental, function Trig_Water_Elemental_Actions)
endfunction

//*  Trigger Tornado
//****************************************************************************
function Trig_Tornado_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetAttacker()) == 'Hamg' or GetUnitTypeId(GetAttacker()) == 'Haah' or GetUnitTypeId(GetAttacker()) == 'Hgam' ) ) ) then
		return false
	endif
	if ( not ( s__udg_activeTornado[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	if ( not ( GetUnitCurrentOrder(GetAttacker()) != String2OrderIdBJ("blizzard") ) ) then
		return false
	endif
	if ( not ( BlzGetUnitAbilityCooldownRemaining(GetAttacker(), 'ANto') <= 0.00 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Tornado_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call IssuePointOrderLocBJ(GetAttacker(), "tornado", udg_Point)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Tornado takes nothing returns nothing
	set gg_trg_Tornado=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Tornado, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Tornado, Condition(function Trig_Tornado_Conditions))
	call TriggerAddAction(gg_trg_Tornado, function Trig_Tornado_Actions)
endfunction

//*  Trigger Storm_Bolt
//****************************************************************************
function BoolExpr_21 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_22 takes nothing returns boolean
	if ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true ) then
		return true
	endif
	return false
endfunction

function Trig_Storm_Bolt_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_MountainKings) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_MountainKings)
	if ( s__udg_activeStormBolt[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AHtb') <= 0.00 ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_21))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "thunderbolt", GroupPickRandomUnit(udg_UnitGroup2))
	else
	set udg_UnitGroup4=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_22))
	if ( GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("holybolt") and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AHtb') <= 0.00 ) then
	call IssueTargetOrderBJ(udg_Unit, "thunderbolt", GroupPickRandomUnit(udg_UnitGroup4))
	else
	endif

	call DestroyGroup(udg_UnitGroup4)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Storm_Bolt takes nothing returns nothing
	set gg_trg_Storm_Bolt=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Storm_Bolt, 2.10)
	call TriggerAddAction(gg_trg_Storm_Bolt, function Trig_Storm_Bolt_Actions)
endfunction

//*  Trigger Avatar_and_Thunder_Clap
//****************************************************************************
function BoolExpr_23 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetAttacker())) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_24 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetAttacker())) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false and IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false ) ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Avatar_and_Thunder_Clap_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetAttacker()) == 'Hmkg' or GetUnitTypeId(GetAttacker()) == 'Hmbr' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Avatar_and_Thunder_Clap_Actions takes nothing returns nothing
	if ( s__udg_activeAvatar[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true and GetUnitAbilityLevelSwapped('AHav', GetAttacker()) > 0 and BlzGetUnitAbilityCooldownRemaining(GetAttacker(), 'AHav') <= 0.00 ) then
	set udg_Point=GetUnitLoc(GetAttacker())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(300.00, udg_Point, Condition(function BoolExpr_23))
	if ( CountUnitsInGroup(udg_UnitGroup) > 2 ) then
	call IssueImmediateOrderBJ(GetAttacker(), "avatar")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	if ( s__udg_activeThunderClap[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true and BlzGetUnitAbilityCooldownRemaining(GetAttacker(), 'AHtc') <= 0.00 ) then
	set udg_Point=GetUnitLoc(GetAttacker())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(300.00, udg_Point, Condition(function BoolExpr_24))
	if ( CountUnitsInGroup(udg_UnitGroup) > 1 ) then
	call IssueImmediateOrderBJ(GetAttacker(), "thunderclap")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

	endif

endfunction


//****************************************************************************
function InitTrig_Avatar_and_Thunder_Clap takes nothing returns nothing
	set gg_trg_Avatar_and_Thunder_Clap=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Avatar_and_Thunder_Clap, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Avatar_and_Thunder_Clap, Condition(function Trig_Avatar_and_Thunder_Clap_Conditions))
	call TriggerAddAction(gg_trg_Avatar_and_Thunder_Clap, function Trig_Avatar_and_Thunder_Clap_Actions)
endfunction

//*  Trigger Avatar
//****************************************************************************
function BoolExpr_25 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Avatar_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'Hmkg' or GetUnitTypeId(GetTriggerUnit()) == 'Hmbr' ) ) ) then
		return false
	endif
	if ( not ( s__udg_activeAvatar[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	if ( not ( GetUnitAbilityLevelSwapped('AHav', GetTriggerUnit()) > 0 ) ) then
		return false
	endif
	if ( not ( BlzGetUnitAbilityCooldownRemaining(GetTriggerUnit(), 'AHav') <= 0.00 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Avatar_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetAttacker())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(300.00, udg_Point, Condition(function BoolExpr_25))
	if ( CountUnitsInGroup(udg_UnitGroup) > 2 ) then
	call IssueImmediateOrderBJ(GetTriggerUnit(), "avatar")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Avatar takes nothing returns nothing
	set gg_trg_Avatar=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Avatar, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Avatar, Condition(function Trig_Avatar_Conditions))
	call TriggerAddAction(gg_trg_Avatar, function Trig_Avatar_Actions)
endfunction

//*  Trigger Blood_Mage_Abilities
//****************************************************************************
function BoolExpr_26 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_27 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_28 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false ) ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_29 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and UnitHasBuffBJ(GetFilterUnit(), 'BHbn') == false ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_30 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true and UnitHasBuffBJ(GetFilterUnit(), 'BHbn') == false ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_31 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and GetUnitStateSwap(UNIT_STATE_MANA, GetFilterUnit()) >= 50.00 ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_32 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Blood_Mage_Abilities_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_BloodMages) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_BloodMages)
	set udg_Point=GetUnitLoc(udg_Unit)
	if ( s__udg_activePhoenix[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitAbilityLevelSwapped('AHpx', udg_Unit) > 0 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("drain") and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AHpx') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('AHpx', GetUnitAbilityLevelSwapped('AHpx', udg_Unit))) ) then
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_26))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 2 ) then
	call IssueImmediateOrderBJ(udg_Unit, "summonphoenix")
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	else
	if ( s__udg_activeFlamestrike[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitAbilityLevelSwapped('AHfs', udg_Unit) > 0 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("drain") and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AHfs') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('AHfs', GetUnitAbilityLevelSwapped('AHfs', udg_Unit))) ) then
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_27))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(200.00, udg_Point2, Condition(function BoolExpr_28))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 2 ) then
	call IssuePointOrderLocBJ(udg_Unit, "flamestrike", udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	else
	if ( s__udg_activeBanish[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitAbilityLevelSwapped('AHbn', udg_Unit) > 0 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("flamestrike") and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("drain") and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AHbn') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('AHbn', GetUnitAbilityLevelSwapped('AHbn', udg_Unit))) ) then
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_29))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(600.00, udg_Point2, Condition(function BoolExpr_30))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 2 ) then
	call IssueTargetOrderBJ(udg_Unit, "banish", GroupPickRandomUnit(udg_UnitGroup3))
	else
	call IssueTargetOrderBJ(udg_Unit, "banish", GroupPickRandomUnit(udg_UnitGroup2))
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	else
	if ( s__udg_activeSiphonMana[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitAbilityLevelSwapped('AHdr', udg_Unit) > 0 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("flamestrike") and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AHdr') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('AHdr', GetUnitAbilityLevelSwapped('AHdr', udg_Unit))) ) then
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_31))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(600.00, udg_Point2, Condition(function BoolExpr_32))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 2 ) then
	call IssueTargetOrderBJ(udg_Unit, "drain", GroupPickRandomUnit(udg_UnitGroup3))
	else
	call IssueTargetOrderBJ(udg_Unit, "drain", GroupPickRandomUnit(udg_UnitGroup2))
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	endif

	endif

	endif

	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Blood_Mage_Abilities takes nothing returns nothing
	set gg_trg_Blood_Mage_Abilities=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Blood_Mage_Abilities, 2.12)
	call TriggerAddAction(gg_trg_Blood_Mage_Abilities, function Trig_Blood_Mage_Abilities_Actions)
endfunction

//*  Trigger Footman_Defend
//****************************************************************************
function Trig_Footman_Defend_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeDefend[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'hfoo' or GetUnitTypeId(GetTriggerUnit()) == 'hhes' or GetUnitTypeId(GetTriggerUnit()) == 'hcth' or GetUnitTypeId(GetTriggerUnit()) == 'nbel' or GetUnitTypeId(GetTriggerUnit()) == 'njks' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Footman_Defend_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetTriggerUnit(), "defend")
endfunction


//****************************************************************************
function InitTrig_Footman_Defend takes nothing returns nothing
	set gg_trg_Footman_Defend=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Footman_Defend, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Footman_Defend, Condition(function Trig_Footman_Defend_Conditions))
	call TriggerAddAction(gg_trg_Footman_Defend, function Trig_Footman_Defend_Actions)
endfunction

//*  Trigger Priest_Dispel_Magic
//****************************************************************************
function BoolExpr_33 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and ( UnitHasBuffBJ(GetFilterUnit(), 'Bply') == true or ( UnitHasBuffBJ(GetFilterUnit(), 'BEer') == true or ( UnitHasBuffBJ(GetFilterUnit(), 'BHbn') == true or ( UnitHasBuffBJ(GetFilterUnit(), 'BOhx') == true or ( UnitHasBuffBJ(GetFilterUnit(), 'BNso') == true or UnitHasBuffBJ(GetFilterUnit(), 'Bcy2') == true ) ) ) ) ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_34 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and UnitCountBuffsExBJ(bj_BUFF_POLARITY_NEGATIVE, bj_BUFF_RESIST_MAGIC, GetFilterUnit(), false, false) < UnitCountBuffsExBJ(bj_BUFF_POLARITY_POSITIVE, bj_BUFF_RESIST_MAGIC, GetFilterUnit(), false, false) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_35 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and UnitCountBuffsExBJ(bj_BUFF_POLARITY_NEGATIVE, bj_BUFF_RESIST_MAGIC, GetFilterUnit(), false, false) > UnitCountBuffsExBJ(bj_BUFF_POLARITY_POSITIVE, bj_BUFF_RESIST_MAGIC, GetFilterUnit(), false, false) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_36 takes nothing returns boolean
	if ( ( IsUnitType(GetFilterUnit(), UNIT_TYPE_SUMMONED) == true and ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Priest_Dispel_Magic_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Priests) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Priests)
	if ( s__udg_activeDispelMagic[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_33))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "dispel", GroupPickRandomUnit(udg_UnitGroup))
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(750.00, udg_Point, Condition(function BoolExpr_34))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	call IssueTargetOrderBJ(udg_Unit, "dispel", udg_Unit2)
	else
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_35))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup3)
	call IssueTargetOrderBJ(udg_Unit, "dispel", udg_Unit2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	endif

	call DestroyGroup(udg_UnitGroup2)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(650.00, udg_Point, Condition(function BoolExpr_36))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	if ( GetUnitTypeId(udg_Unit2) != 'uplg' ) then
	call IssueTargetOrderBJ(udg_Unit, "dispel", udg_Unit2)
	else
	endif

	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Priest_Dispel_Magic takes nothing returns nothing
	set gg_trg_Priest_Dispel_Magic=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Priest_Dispel_Magic, 0.50)
	call TriggerAddAction(gg_trg_Priest_Dispel_Magic, function Trig_Priest_Dispel_Magic_Actions)
endfunction

//*  Trigger Priest_Inner_Fire_2
//****************************************************************************
function BoolExpr_37 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and ( UnitHasBuffBJ(GetFilterUnit(), 'Binf') == false and GetUnitLevel(GetFilterUnit()) > 3 ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_38 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and UnitHasBuffBJ(GetFilterUnit(), 'Binf') == false ) ) then
		return true
	endif
	return false
endfunction

function Trig_Priest_Inner_Fire_2_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Priests) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Priests)
	if ( s__udg_activeInnerFire[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("dispel") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_37))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(udg_Unit, "innerfire", udg_Unit2)
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_38))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	if ( GetUnitTypeId(udg_Unit2) != 'ushd' ) then
	call IssueTargetOrderBJ(udg_Unit, "innerfire", udg_Unit2)
	else
	endif

	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Priest_Inner_Fire_2 takes nothing returns nothing
	set gg_trg_Priest_Inner_Fire_2=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Priest_Inner_Fire_2, 0.55)
	call TriggerAddAction(gg_trg_Priest_Inner_Fire_2, function Trig_Priest_Inner_Fire_2_Actions)
endfunction

//*  Trigger Sorceress_Invisibility
//****************************************************************************
function BoolExpr_39 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'hsor' and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == false ) ) then
		return true
	endif
	return false
endfunction

function Trig_Sorceress_Invisibility_Conditions takes nothing returns boolean
	if ( not ( GetUnitLifePercent(GetTriggerUnit()) < 75.00 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Sorceress_Invisibility_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Sorceress) > 0 ) then
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_39))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup)
	if ( s__udg_activeInvisibility[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	call IssueTargetOrderBJ(udg_Unit, "channel", GetTriggerUnit())
	else
	endif

	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Sorceress_Invisibility takes nothing returns nothing
	set gg_trg_Sorceress_Invisibility=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Sorceress_Invisibility, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Sorceress_Invisibility, Condition(function Trig_Sorceress_Invisibility_Conditions))
	call TriggerAddAction(gg_trg_Sorceress_Invisibility, function Trig_Sorceress_Invisibility_Actions)
endfunction

//*  Trigger Sorceress_Sheep
//****************************************************************************
function Trig_Sorceress_Sheep_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'hsor' ) ) then
		return false
	endif
	if ( not ( s__udg_activePolymorph[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Sorceress_Sheep_Actions takes nothing returns nothing
	call IssueTargetOrderBJ(GetTriggerUnit(), "polymorph", GetAttacker())
endfunction


//****************************************************************************
function InitTrig_Sorceress_Sheep takes nothing returns nothing
	set gg_trg_Sorceress_Sheep=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Sorceress_Sheep, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Sorceress_Sheep, Condition(function Trig_Sorceress_Sheep_Conditions))
	call TriggerAddAction(gg_trg_Sorceress_Sheep, function Trig_Sorceress_Sheep_Actions)
endfunction

//*  Trigger Sorceress_Sheep_2
//****************************************************************************
function BoolExpr_40 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and UnitHasBuffBJ(GetFilterUnit(), 'Bply') == false ) ) then
		return true
	endif
	return false
endfunction

function Trig_Sorceress_Sheep_2_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Sorceress) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Sorceress_Sheep_2_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Sorceress)
	if ( s__udg_activePolymorph[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(650.00, udg_Point, Condition(function BoolExpr_40))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "polymorph", GroupPickRandomUnit(udg_UnitGroup2))
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Sorceress_Sheep_2 takes nothing returns nothing
	set gg_trg_Sorceress_Sheep_2=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Sorceress_Sheep_2, 0.50)
	call TriggerAddCondition(gg_trg_Sorceress_Sheep_2, Condition(function Trig_Sorceress_Sheep_2_Conditions))
	call TriggerAddAction(gg_trg_Sorceress_Sheep_2, function Trig_Sorceress_Sheep_2_Actions)
endfunction

//*  Trigger Spellbreaker_Control_Magic
//****************************************************************************
function BoolExpr_41 takes nothing returns boolean
	if ( ( IsUnitType(GetFilterUnit(), UNIT_TYPE_SUMMONED) == true and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Spellbreaker_Control_Magic_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Spellbreaker) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Spellbreaker)
	if ( s__udg_activeControlMagic[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(700.00, udg_Point, Condition(function BoolExpr_41))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(udg_Unit, "controlmagic", udg_Unit2)
	else
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Spellbreaker_Control_Magic takes nothing returns nothing
	set gg_trg_Spellbreaker_Control_Magic=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Spellbreaker_Control_Magic, 0.40)
	call TriggerAddAction(gg_trg_Spellbreaker_Control_Magic, function Trig_Spellbreaker_Control_Magic_Actions)
endfunction

//*  Trigger Dragonhawk_Rider_Aerial_Shackles
//****************************************************************************
function Trig_Dragonhawk_Rider_Aerial_Shackles_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetAttacker()) == 'hdhw' or GetUnitTypeId(GetAttacker()) == 'nws1' ) ) ) then
		return false
	endif
	if ( not ( s__udg_activeAerialShackles[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	if ( not ( BlzGetUnitAbilityCooldownRemaining(GetAttacker(), 'Amls') == 0.00 ) ) then
		return false
	endif
	if ( not ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_FLYING) == true ) ) then
		return false
	endif
	if ( not ( UnitHasBuffBJ(GetTriggerUnit(), 'Bmlt') == false ) ) then
		return false
	endif
	return true
endfunction

function Trig_Dragonhawk_Rider_Aerial_Shackles_Actions takes nothing returns nothing
	call IssueTargetOrderBJ(GetAttacker(), "magicleash", GetTriggerUnit())
endfunction


//****************************************************************************
function InitTrig_Dragonhawk_Rider_Aerial_Shackles takes nothing returns nothing
	set gg_trg_Dragonhawk_Rider_Aerial_Shackles=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Dragonhawk_Rider_Aerial_Shackles, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Dragonhawk_Rider_Aerial_Shackles, Condition(function Trig_Dragonhawk_Rider_Aerial_Shackles_Conditions))
	call TriggerAddAction(gg_trg_Dragonhawk_Rider_Aerial_Shackles, function Trig_Dragonhawk_Rider_Aerial_Shackles_Actions)
endfunction

//*  Trigger Dragonhawk_Rider_Aerial_Shackles_2
//****************************************************************************
function BoolExpr_42 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_FLYING) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Dragonhawk_Rider_Aerial_Shackles_2_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_DragonhawkRiders) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_DragonhawkRiders)
	if ( s__udg_activeAerialShackles[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'Amls') <= 0.00 ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_42))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	if ( UnitHasBuffBJ(udg_Unit2, 'Bmlt') == false ) then
	call IssueTargetOrderBJ(udg_Unit, "magicleash", udg_Unit2)
	else
	endif

	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Dragonhawk_Rider_Aerial_Shackles_2 takes nothing returns nothing
	set gg_trg_Dragonhawk_Rider_Aerial_Shackles_2=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Dragonhawk_Rider_Aerial_Shackles_2, 0.30)
	call TriggerAddAction(gg_trg_Dragonhawk_Rider_Aerial_Shackles_2, function Trig_Dragonhawk_Rider_Aerial_Shackles_2_Actions)
endfunction

//*  Trigger Mortar_Team_Flare
//****************************************************************************
function BoolExpr_43 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( GetUnitTypeId(GetFilterUnit()) == 'oeye' or ( GetUnitTypeId(GetFilterUnit()) == 'otot' or ( GetUnitTypeId(GetFilterUnit()) == 'ushd' or GetUnitTypeId(GetFilterUnit()) == 'ucrm' ) ) ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Mortar_Team_Flare_43 takes nothing returns nothing
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	call IssuePointOrderLocBJ(udg_Unit, "flare", udg_Point2)
	call RemoveLocation(udg_Point2)
	else
	endif


endfunction

function Trig_Mortar_Team_Flare_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_MortarTeams) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Mortar_Team_Flare_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_MortarTeams)
	if ( s__udg_activeFlare[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(1150.00, udg_Point, Condition(function BoolExpr_43))
	call ForGroup(udg_MortarTeams, function Trig_Mortar_Team_Flare_43)

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Mortar_Team_Flare takes nothing returns nothing
	set gg_trg_Mortar_Team_Flare=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Mortar_Team_Flare, 1.00)
	call TriggerAddCondition(gg_trg_Mortar_Team_Flare, Condition(function Trig_Mortar_Team_Flare_Conditions))
	call TriggerAddAction(gg_trg_Mortar_Team_Flare, function Trig_Mortar_Team_Flare_Actions)
endfunction

//*  Trigger Wind_Walk
//****************************************************************************
function BoolExpr_45 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false and IsUnitType(GetFilterUnit(), UNIT_TYPE_SUMMONED) == false ) ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Wind_Walk_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Blademasters) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Blademasters)
	if ( s__udg_activeWindWalk[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AOwk') <= 0.00 and UnitHasBuffBJ(udg_Unit, 'BOwk') == false ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(1000.00, udg_Point, Condition(function BoolExpr_45))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueImmediateOrderBJ(udg_Unit, "windwalk")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Wind_Walk takes nothing returns nothing
	set gg_trg_Wind_Walk=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Wind_Walk, 1.76)
	call TriggerAddAction(gg_trg_Wind_Walk, function Trig_Wind_Walk_Actions)
endfunction

//*  Trigger Wind_Walk_2
//****************************************************************************
function BoolExpr_46 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true and ( GetUnitTypeId(GetFilterUnit()) != 'ushd' and IsUnitType(GetFilterUnit(), UNIT_TYPE_SUMMONED) == false ) ) ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Wind_Walk_2_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Blademasters) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Blademasters)
	if ( s__udg_WindWalkUnit[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == null and UnitHasBuffBJ(udg_Unit, 'BOwk') == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_46))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set s__udg_WindWalkUnit[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))]= GroupPickRandomUnit(udg_UnitGroup2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	call RemoveLocation(udg_Point)
	else
	endif

	if ( s__udg_WindWalkUnit[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] != null ) then
	call IssueTargetOrderBJ(udg_Unit, "attack", s__udg_WindWalkUnit[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))])
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Wind_Walk_2 takes nothing returns nothing
	set gg_trg_Wind_Walk_2=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Wind_Walk_2, 0.50)
	call TriggerAddAction(gg_trg_Wind_Walk_2, function Trig_Wind_Walk_2_Actions)
endfunction

//*  Trigger Wind_Walk_Unit_Dies
//****************************************************************************
function Trig_Wind_Walk_Unit_Dies_Conditions takes nothing returns boolean
	if ( not ( ( GetTriggerUnit() == s__udg_WindWalkUnit[7] or GetTriggerUnit() == s__udg_WindWalkUnit[8] or GetTriggerUnit() == s__udg_WindWalkUnit[9] or GetTriggerUnit() == s__udg_WindWalkUnit[10] or GetTriggerUnit() == s__udg_WindWalkUnit[11] or GetTriggerUnit() == s__udg_WindWalkUnit[12] ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Wind_Walk_Unit_Dies_Actions takes nothing returns nothing
	set bj_forLoopAIndex=7
set bj_forLoopAIndexEnd=12
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	if ( GetTriggerUnit() == s__udg_WindWalkUnit[GetForLoopIndexA()] ) then
	set s__udg_WindWalkUnit[GetForLoopIndexA()]= null
	else
	endif

	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
endfunction


//****************************************************************************
function InitTrig_Wind_Walk_Unit_Dies takes nothing returns nothing
	set gg_trg_Wind_Walk_Unit_Dies=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Wind_Walk_Unit_Dies, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddCondition(gg_trg_Wind_Walk_Unit_Dies, Condition(function Trig_Wind_Walk_Unit_Dies_Conditions))
	call TriggerAddAction(gg_trg_Wind_Walk_Unit_Dies, function Trig_Wind_Walk_Unit_Dies_Actions)
endfunction

//*  Trigger Blademaster_Dies
//****************************************************************************
function Trig_Blademaster_Dies_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'Obla' or GetUnitTypeId(GetTriggerUnit()) == 'Nbbc' or GetUnitTypeId(GetTriggerUnit()) == 'Ogrh' or GetUnitTypeId(GetTriggerUnit()) == 'Opgh' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Blademaster_Dies_Actions takes nothing returns nothing
	set s__udg_WindWalkUnit[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= null
endfunction


//****************************************************************************
function InitTrig_Blademaster_Dies takes nothing returns nothing
	set gg_trg_Blademaster_Dies=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Blademaster_Dies, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddCondition(gg_trg_Blademaster_Dies, Condition(function Trig_Blademaster_Dies_Conditions))
	call TriggerAddAction(gg_trg_Blademaster_Dies, function Trig_Blademaster_Dies_Actions)
endfunction

//*  Trigger Mirror_Image
//****************************************************************************
function Trig_Mirror_Image_Conditions takes nothing returns boolean
	if ( not ( ( ( GetUnitTypeId(GetTriggerUnit()) == 'Obla' or GetUnitTypeId(GetTriggerUnit()) == 'Nbbc' or GetUnitTypeId(GetTriggerUnit()) == 'Ogrh' or GetUnitTypeId(GetTriggerUnit()) == 'Opgh' ) and s__udg_activeMirrorImage[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true and BlzGetUnitAbilityCooldownRemaining(GetTriggerUnit(), 'AOmi') <= 0.00 and GetUnitCurrentOrder(GetTriggerUnit()) != String2OrderIdBJ("whirlwind") and UnitHasBuffBJ(GetTriggerUnit(), 'BOwk') == false ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Mirror_Image_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetTriggerUnit(), "mirrorimage")
endfunction


//****************************************************************************
function InitTrig_Mirror_Image takes nothing returns nothing
	set gg_trg_Mirror_Image=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Mirror_Image, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Mirror_Image, Condition(function Trig_Mirror_Image_Conditions))
	call TriggerAddAction(gg_trg_Mirror_Image, function Trig_Mirror_Image_Actions)
endfunction

//*  Trigger Bladestorm
//****************************************************************************
function BoolExpr_47 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Bladestorm_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Blademasters) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Blademasters)
	if ( s__udg_activeBladestorm[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AOww') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('AOww', GetUnitAbilityLevelSwapped('AOww', udg_Unit))) and UnitHasBuffBJ(udg_Unit, 'BOwk') == false ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(400.00, udg_Point, Condition(function BoolExpr_47))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 3 ) then
	call IssueImmediateOrderBJ(udg_Unit, "whirlwind")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Bladestorm takes nothing returns nothing
	set gg_trg_Bladestorm=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Bladestorm, 1.90)
	call TriggerAddAction(gg_trg_Bladestorm, function Trig_Bladestorm_Actions)
endfunction

//*  Trigger Chain_Lightning
//****************************************************************************
function BoolExpr_48 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_49 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Chain_Lightning_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_FarSeers) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_FarSeers)
	set udg_Point=GetUnitLoc(udg_Unit)
	if ( s__udg_activeChainLightning[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AOcl') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('AOcl', GetUnitAbilityLevelSwapped('AOcl', udg_Unit))) and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("earthquake") ) then
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(750.00, udg_Point, Condition(function BoolExpr_48))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(400.00, udg_Point2, Condition(function BoolExpr_49))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 1 ) then
	call IssueTargetOrderBJ(udg_Unit, "chainlightning", udg_Unit2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Chain_Lightning takes nothing returns nothing
	set gg_trg_Chain_Lightning=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Chain_Lightning, 1.10)
	call TriggerAddAction(gg_trg_Chain_Lightning, function Trig_Chain_Lightning_Actions)
endfunction

//*  Trigger Spirit_Wolves
//****************************************************************************
function Trig_Spirit_Wolves_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetAttacker()) == 'Ofar' or GetUnitTypeId(GetAttacker()) == 'Odrt' or GetUnitTypeId(GetAttacker()) == 'Othr' ) ) ) then
		return false
	endif
	if ( not ( s__udg_activeSpiritWolves[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	if ( not ( BlzGetUnitAbilityCooldownRemaining(GetAttacker(), 'AOsf') <= 0.00 ) ) then
		return false
	endif
	if ( not ( GetUnitAbilityLevelSwapped('AOsf', GetAttacker()) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Spirit_Wolves_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "spiritwolf")
endfunction


//****************************************************************************
function InitTrig_Spirit_Wolves takes nothing returns nothing
	set gg_trg_Spirit_Wolves=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Spirit_Wolves, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Spirit_Wolves, Condition(function Trig_Spirit_Wolves_Conditions))
	call TriggerAddAction(gg_trg_Spirit_Wolves, function Trig_Spirit_Wolves_Actions)
endfunction

//*  Trigger Firebolt
//****************************************************************************
function BoolExpr_50 takes nothing returns boolean
	if ( ( IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_51 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Firebolt_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_FarSeers) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_FarSeers)
	if ( s__udg_activeFirebolt[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'ANfb') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('ANfb', GetUnitAbilityLevelSwapped('ANfb', udg_Unit))) ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_50))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "firebolt", GroupPickRandomUnit(udg_UnitGroup))
	else
	set udg_UnitGroup4=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_51))
	if ( CountUnitsInGroup(udg_UnitGroup4) > 0 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("earthquake") ) then
	call IssueTargetOrderBJ(udg_Unit, "firebolt", GroupPickRandomUnit(udg_UnitGroup4))
	else
	endif

	call DestroyGroup(udg_UnitGroup4)
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Firebolt takes nothing returns nothing
	set gg_trg_Firebolt=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Firebolt, 0.90)
	call TriggerAddAction(gg_trg_Firebolt, function Trig_Firebolt_Actions)
endfunction

//*  Trigger Earthquake
//****************************************************************************
function BoolExpr_52 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Earthquake_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_FarSeers) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Earthquake_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_FarSeers)
	if ( s__udg_activeEarthquake[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AOeq') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('AOeq', GetUnitAbilityLevelSwapped('AOeq', udg_Unit))) ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(1000.00, udg_Point, Condition(function BoolExpr_52))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	call IssuePointOrderLocBJ(udg_Unit, "earthquake", udg_Point2)
	call RemoveLocation(udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Earthquake takes nothing returns nothing
	set gg_trg_Earthquake=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Earthquake, 1.50)
	call TriggerAddCondition(gg_trg_Earthquake, Condition(function Trig_Earthquake_Conditions))
	call TriggerAddAction(gg_trg_Earthquake, function Trig_Earthquake_Actions)
endfunction

//*  Trigger Earthquake_Point_Check
//****************************************************************************
function BoolExpr_54 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetEnumUnit())) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true or IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == true ) ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Earthquake_Point_Check_52 takes nothing returns nothing
	if ( s__udg_EarthquakeActive[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == true ) then
	set udg_Point=GetUnitLoc(GetEnumUnit())
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(300.00, s__udg_EarthquakePoint[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))], Condition(function BoolExpr_54))
	if ( CountUnitsInGroup(udg_UnitGroup2) == 0 ) then
	call IssueImmediateOrderBJ(GetEnumUnit(), "stop")
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	call RemoveLocation(udg_Point)
	else
	endif


endfunction

function Trig_Earthquake_Point_Check_Actions takes nothing returns nothing
	call ForGroup(udg_FarSeers, function Trig_Earthquake_Point_Check_52)

endfunction


//****************************************************************************
function InitTrig_Earthquake_Point_Check takes nothing returns nothing
	set gg_trg_Earthquake_Point_Check=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Earthquake_Point_Check, 2)
	call TriggerAddAction(gg_trg_Earthquake_Point_Check, function Trig_Earthquake_Point_Check_Actions)
endfunction

//*  Trigger Shockwave
//****************************************************************************
function BoolExpr_55 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_56 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Shockwave_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_TaurenChieftains) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_TaurenChieftains)
	set udg_Point=GetUnitLoc(udg_Unit)
	if ( s__udg_activeShockwave[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AOsh') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('AOsh', GetUnitAbilityLevelSwapped('AOsh', udg_Unit))) ) then
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_55))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(250.00, udg_Point2, Condition(function BoolExpr_56))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 2 ) then
	call IssuePointOrderLocBJ(udg_Unit, "shockwave", udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Shockwave takes nothing returns nothing
	set gg_trg_Shockwave=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Shockwave, 1.70)
	call TriggerAddAction(gg_trg_Shockwave, function Trig_Shockwave_Actions)
endfunction

//*  Trigger War_Stomp
//****************************************************************************
function BoolExpr_57 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetAttacker())) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false and IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false ) ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_War_Stomp_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetAttacker()) == 'Otch' or GetUnitTypeId(GetAttacker()) == 'Ocbh' ) ) ) then
		return false
	endif
	if ( not ( s__udg_activeWarStomp[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	if ( not ( BlzGetUnitAbilityCooldownRemaining(GetAttacker(), 'AOws') <= 0.00 ) ) then
		return false
	endif
	return true
endfunction

function Trig_War_Stomp_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetAttacker())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(300.00, udg_Point, Condition(function BoolExpr_57))
	if ( CountUnitsInGroup(udg_UnitGroup) > 1 ) then
	call IssueImmediateOrderBJ(GetAttacker(), "stomp")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_War_Stomp takes nothing returns nothing
	set gg_trg_War_Stomp=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_War_Stomp, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_War_Stomp, Condition(function Trig_War_Stomp_Conditions))
	call TriggerAddAction(gg_trg_War_Stomp, function Trig_War_Stomp_Actions)
endfunction

//*  Trigger Healing_Wave
//****************************************************************************
function BoolExpr_58 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and GetUnitLifePercent(GetFilterUnit()) <= 60.00 ) ) then
		return true
	endif
	return false
endfunction

function Trig_Healing_Wave_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_ShadowHunters) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_ShadowHunters)
	set udg_Point=GetUnitLoc(udg_Unit)
	if ( s__udg_activeHealingWave[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AOhw') <= 0.00 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("voodoo") and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('AOhw', GetUnitAbilityLevelSwapped('AOhw', udg_Unit))) ) then
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(700.00, udg_Point, Condition(function BoolExpr_58))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "healingwave", GroupPickRandomUnit(udg_UnitGroup2))
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Healing_Wave takes nothing returns nothing
	set gg_trg_Healing_Wave=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Healing_Wave, 1.90)
	call TriggerAddAction(gg_trg_Healing_Wave, function Trig_Healing_Wave_Actions)
endfunction

//*  Trigger Hex
//****************************************************************************
function BoolExpr_59 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( GetUnitLevel(GetFilterUnit()) >= 4 and IsUnitType(GetFilterUnit(), UNIT_TYPE_MECHANICAL) == false ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_60 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( GetUnitLevel(GetFilterUnit()) < 4 and IsUnitType(GetFilterUnit(), UNIT_TYPE_MECHANICAL) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Hex_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_ShadowHunters) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_ShadowHunters)
	set udg_Point=GetUnitLoc(udg_Unit)
	if ( s__udg_activeHex[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AOhx') <= 0.00 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("voodoo") and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('AOhx', GetUnitAbilityLevelSwapped('AOhx', udg_Unit))) ) then
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_59))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "hex", GroupPickRandomUnit(udg_UnitGroup2))
	else
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_60))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "hex", GroupPickRandomUnit(udg_UnitGroup3))
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	endif

	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Hex takes nothing returns nothing
	set gg_trg_Hex=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Hex, 1.85)
	call TriggerAddAction(gg_trg_Hex, function Trig_Hex_Actions)
endfunction

//*  Trigger Serpent_Ward
//****************************************************************************
function Trig_Serpent_Ward_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetAttacker()) == 'Oshd' or GetUnitTypeId(GetAttacker()) == 'Orkn' ) ) ) then
		return false
	endif
	if ( not ( s__udg_activeSerpentWard[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	if ( not ( BlzGetUnitAbilityCooldownRemaining(GetAttacker(), 'AOsw') <= 0.00 ) ) then
		return false
	endif
	if ( not ( GetUnitCurrentOrder(GetAttacker()) != String2OrderIdBJ("voodoo") ) ) then
		return false
	endif
	return true
endfunction

function Trig_Serpent_Ward_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetAttacker())
	call IssuePointOrderLocBJ(GetAttacker(), "ward", udg_Point)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Serpent_Ward takes nothing returns nothing
	set gg_trg_Serpent_Ward=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Serpent_Ward, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Serpent_Ward, Condition(function Trig_Serpent_Ward_Conditions))
	call TriggerAddAction(gg_trg_Serpent_Ward, function Trig_Serpent_Ward_Actions)
endfunction

//*  Trigger Big_Bad_Voodoo
//****************************************************************************
function BoolExpr_61 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_62 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Big_Bad_Voodoo_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_ShadowHunters) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_ShadowHunters)
	set udg_Point=GetUnitLoc(udg_Unit)
	if ( s__udg_activeBigBadVoodoo[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AOvd') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('AOvd', GetUnitAbilityLevelSwapped('AOvd', udg_Unit))) ) then
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_61))
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(1200.00, udg_Point, Condition(function BoolExpr_62))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 10 and CountUnitsInGroup(udg_UnitGroup3) > 10 ) then
	call IssueImmediateOrderBJ(udg_Unit, "voodoo")
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	call DestroyGroup(udg_UnitGroup3)
	else
	endif

	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Big_Bad_Voodoo takes nothing returns nothing
	set gg_trg_Big_Bad_Voodoo=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Big_Bad_Voodoo, 2.00)
	call TriggerAddAction(gg_trg_Big_Bad_Voodoo, function Trig_Big_Bad_Voodoo_Actions)
endfunction

//*  Trigger Big_Bad_Voodoo_Check
//****************************************************************************
function BoolExpr_63 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Big_Bad_Voodoo_Check_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_ShadowHunters) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_ShadowHunters)
	if ( UnitHasBuffBJ(udg_Unit, 'BOvc') == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_63))
	if ( CountUnitsInGroup(udg_UnitGroup2) < 5 ) then
	call IssueImmediateOrderBJ(udg_Unit, "stop")
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	call RemoveLocation(udg_Point)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Big_Bad_Voodoo_Check takes nothing returns nothing
	set gg_trg_Big_Bad_Voodoo_Check=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Big_Bad_Voodoo_Check, 1.00)
	call TriggerAddAction(gg_trg_Big_Bad_Voodoo_Check, function Trig_Big_Bad_Voodoo_Check_Actions)
endfunction

//*  Trigger Big_Bad_Voodoo_is_attacked
//****************************************************************************
function Trig_Big_Bad_Voodoo_is_attacked_Conditions takes nothing returns boolean
	if ( not ( UnitHasBuffBJ(GetTriggerUnit(), 'BOvc') == true ) ) then
		return false
	endif
	if ( not ( GetUnitLifePercent(GetTriggerUnit()) <= 35.00 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Big_Bad_Voodoo_is_attacked_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetTriggerUnit(), "stop")
endfunction


//****************************************************************************
function InitTrig_Big_Bad_Voodoo_is_attacked takes nothing returns nothing
	set gg_trg_Big_Bad_Voodoo_is_attacked=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Big_Bad_Voodoo_is_attacked, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Big_Bad_Voodoo_is_attacked, Condition(function Trig_Big_Bad_Voodoo_is_attacked_Conditions))
	call TriggerAddAction(gg_trg_Big_Bad_Voodoo_is_attacked, function Trig_Big_Bad_Voodoo_is_attacked_Actions)
endfunction

//*  Trigger Berserker_Berserk
//****************************************************************************
function Trig_Berserker_Berserk_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeBerserk[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	if ( not ( ( GetUnitTypeId(GetAttacker()) == 'otbk' or GetUnitTypeId(GetAttacker()) == 'ndtb' or GetUnitTypeId(GetAttacker()) == 'nftb' or GetUnitTypeId(GetAttacker()) == 'nits' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Berserker_Berserk_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "berserk")
endfunction


//****************************************************************************
function InitTrig_Berserker_Berserk takes nothing returns nothing
	set gg_trg_Berserker_Berserk=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Berserker_Berserk, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Berserker_Berserk, Condition(function Trig_Berserker_Berserk_Conditions))
	call TriggerAddAction(gg_trg_Berserker_Berserk, function Trig_Berserker_Berserk_Actions)
endfunction

//*  Trigger Batrider_Unstable_Concoction
//****************************************************************************
function Trig_Batrider_Unstable_Concoction_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'otbr' ) ) then
		return false
	endif
	if ( not ( s__udg_activeUnstableConcoction[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	if ( not ( GetRandomInt(1, 2) == 1 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Batrider_Unstable_Concoction_Actions takes nothing returns nothing
	call IssueTargetOrderBJ(GetTriggerUnit(), "unstableconcoction", GetAttacker())
endfunction


//****************************************************************************
function InitTrig_Batrider_Unstable_Concoction takes nothing returns nothing
	set gg_trg_Batrider_Unstable_Concoction=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Batrider_Unstable_Concoction, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Batrider_Unstable_Concoction, Condition(function Trig_Batrider_Unstable_Concoction_Conditions))
	call TriggerAddAction(gg_trg_Batrider_Unstable_Concoction, function Trig_Batrider_Unstable_Concoction_Actions)
endfunction

//*  Trigger Batrider_Unstable_Concoction_2
//****************************************************************************
function BoolExpr_64 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'otbr' and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetAttacker())) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Batrider_Unstable_Concoction_2_Conditions takes nothing returns boolean
	if ( not ( IsUnitType(GetAttacker(), UNIT_TYPE_FLYING) == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Batrider_Unstable_Concoction_2_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Batriders) > 0 ) then
	set udg_Point=GetUnitLoc(GetAttacker())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_64))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup)
	if ( s__udg_activeUnstableConcoction[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	call IssueTargetOrderBJ(udg_Unit, "unstableconcoction", GetAttacker())
	else
	endif

	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Batrider_Unstable_Concoction_2 takes nothing returns nothing
	set gg_trg_Batrider_Unstable_Concoction_2=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Batrider_Unstable_Concoction_2, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Batrider_Unstable_Concoction_2, Condition(function Trig_Batrider_Unstable_Concoction_2_Conditions))
	call TriggerAddAction(gg_trg_Batrider_Unstable_Concoction_2, function Trig_Batrider_Unstable_Concoction_2_Actions)
endfunction

//*  Trigger Shaman_Purge
//****************************************************************************
function Trig_Shaman_Purge_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetAttacker()) == 'oshm' ) ) then
		return false
	endif
	if ( not ( s__udg_activePurge[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'uske' or GetUnitTypeId(GetTriggerUnit()) == 'uskm' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Shaman_Purge_Actions takes nothing returns nothing
	call IssueTargetOrderBJ(GetAttacker(), "purge", GetTriggerUnit())
endfunction


//****************************************************************************
function InitTrig_Shaman_Purge takes nothing returns nothing
	set gg_trg_Shaman_Purge=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Shaman_Purge, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Shaman_Purge, Condition(function Trig_Shaman_Purge_Conditions))
	call TriggerAddAction(gg_trg_Shaman_Purge, function Trig_Shaman_Purge_Actions)
endfunction

//*  Trigger Shaman_Purge_2
//****************************************************************************
function BoolExpr_65 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and ( UnitHasBuffBJ(GetFilterUnit(), 'Bply') == true or ( UnitHasBuffBJ(GetFilterUnit(), 'BEer') == true or ( UnitHasBuffBJ(GetFilterUnit(), 'BHbn') == true or ( UnitHasBuffBJ(GetFilterUnit(), 'BOhx') == true or ( UnitHasBuffBJ(GetFilterUnit(), 'BNso') == true or UnitHasBuffBJ(GetFilterUnit(), 'Bcyc') == true ) ) ) ) ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_66 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and UnitCountBuffsExBJ(bj_BUFF_POLARITY_NEGATIVE, bj_BUFF_RESIST_MAGIC, GetFilterUnit(), false, false) < UnitCountBuffsExBJ(bj_BUFF_POLARITY_POSITIVE, bj_BUFF_RESIST_MAGIC, GetFilterUnit(), false, false) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_67 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and UnitCountBuffsExBJ(bj_BUFF_POLARITY_NEGATIVE, bj_BUFF_RESIST_MAGIC, GetFilterUnit(), false, false) > UnitCountBuffsExBJ(bj_BUFF_POLARITY_POSITIVE, bj_BUFF_RESIST_MAGIC, GetFilterUnit(), false, false) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_68 takes nothing returns boolean
	if ( ( IsUnitType(GetFilterUnit(), UNIT_TYPE_SUMMONED) == true and ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Shaman_Purge_2_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Shamans) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Shaman_Purge_2_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Shamans)
	if ( s__udg_activePurge[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_65))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(udg_Unit, "purge", udg_Unit2)
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(750.00, udg_Point, Condition(function BoolExpr_66))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	call IssueTargetOrderBJ(udg_Unit, "purge", udg_Unit2)
	else
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_67))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup3)
	call IssueTargetOrderBJ(udg_Unit, "purge", udg_Unit2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	endif

	call DestroyGroup(udg_UnitGroup2)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(650.00, udg_Point, Condition(function BoolExpr_68))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	if ( GetUnitTypeId(udg_Unit2) != 'uplg' ) then
	call IssueTargetOrderBJ(udg_Unit, "purge", udg_Unit2)
	else
	endif

	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Shaman_Purge_2 takes nothing returns nothing
	set gg_trg_Shaman_Purge_2=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Shaman_Purge_2, 0.70)
	call TriggerAddCondition(gg_trg_Shaman_Purge_2, Condition(function Trig_Shaman_Purge_2_Conditions))
	call TriggerAddAction(gg_trg_Shaman_Purge_2, function Trig_Shaman_Purge_2_Actions)
endfunction

//*  Trigger Shaman_Lightning_Shield
//****************************************************************************
function BoolExpr_69 takes nothing returns boolean
	if ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetAttacker())) == true ) then
		return true
	endif
	return false
endfunction

function Trig_Shaman_Lightning_Shield_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetAttacker()) == 'oshm' ) ) then
		return false
	endif
	if ( not ( s__udg_activeLightningShield[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	if ( not ( UnitHasBuffBJ(GetTriggerUnit(), 'Blsh') == false ) ) then
		return false
	endif
	return true
endfunction

function Trig_Shaman_Lightning_Shield_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(175.00, udg_Point, Condition(function BoolExpr_69))
	if ( CountUnitsInGroup(udg_UnitGroup) > 3 ) then
	call IssueTargetOrderBJ(GetAttacker(), "lightningshield", GetTriggerUnit())
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Shaman_Lightning_Shield takes nothing returns nothing
	set gg_trg_Shaman_Lightning_Shield=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Shaman_Lightning_Shield, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Shaman_Lightning_Shield, Condition(function Trig_Shaman_Lightning_Shield_Conditions))
	call TriggerAddAction(gg_trg_Shaman_Lightning_Shield, function Trig_Shaman_Lightning_Shield_Actions)
endfunction

//*  Trigger Spirit_Walker_Spirit_Link
//****************************************************************************
function Trig_Spirit_Walker_Spirit_Link_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'ospw' ) ) then
		return false
	endif
	if ( not ( UnitHasBuffBJ(GetTriggerUnit(), 'Bspl') == false ) ) then
		return false
	endif
	if ( not ( GetUnitCurrentOrder(GetTriggerUnit()) != String2OrderIdBJ("dispel") ) ) then
		return false
	endif
	if ( not ( s__udg_activeSpiritLink[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Spirit_Walker_Spirit_Link_Actions takes nothing returns nothing
	call IssueTargetOrderBJ(GetTriggerUnit(), "spiritlink", GetTriggerUnit())
endfunction


//****************************************************************************
function InitTrig_Spirit_Walker_Spirit_Link takes nothing returns nothing
	set gg_trg_Spirit_Walker_Spirit_Link=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Spirit_Walker_Spirit_Link, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Spirit_Walker_Spirit_Link, Condition(function Trig_Spirit_Walker_Spirit_Link_Conditions))
	call TriggerAddAction(gg_trg_Spirit_Walker_Spirit_Link, function Trig_Spirit_Walker_Spirit_Link_Actions)
endfunction

//*  Trigger Spirit_Walker_Spirit_Link_2
//****************************************************************************
function BoolExpr_70 takes nothing returns boolean
	if ( ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and ( GetUnitLifePercent(GetFilterUnit()) < 100.00 and UnitHasBuffBJ(GetFilterUnit(), 'Bspl') == false ) ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Spirit_Walker_Spirit_Link_2_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_SpiritWalkers) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_SpiritWalkers)
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(750.00, udg_Point, Condition(function BoolExpr_70))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 and s__udg_activeSpiritLink[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	call IssueTargetOrderBJ(udg_Unit, "spiritlink", GroupPickRandomUnit(udg_UnitGroup))
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Spirit_Walker_Spirit_Link_2 takes nothing returns nothing
	set gg_trg_Spirit_Walker_Spirit_Link_2=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Spirit_Walker_Spirit_Link_2, 1.00)
	call TriggerAddAction(gg_trg_Spirit_Walker_Spirit_Link_2, function Trig_Spirit_Walker_Spirit_Link_2_Actions)
endfunction

//*  Trigger Spirit_Walker_Disenchant
//****************************************************************************
function BoolExpr_71 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and ( UnitHasBuffBJ(GetFilterUnit(), 'Bply') == true or ( UnitHasBuffBJ(GetFilterUnit(), 'BEer') == true or ( UnitHasBuffBJ(GetFilterUnit(), 'BHbn') == true or ( UnitHasBuffBJ(GetFilterUnit(), 'BOhx') == true or ( UnitHasBuffBJ(GetFilterUnit(), 'BNso') == true or UnitHasBuffBJ(GetFilterUnit(), 'Bcy2') == true ) ) ) ) ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_72 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and UnitCountBuffsExBJ(bj_BUFF_POLARITY_NEGATIVE, bj_BUFF_RESIST_MAGIC, GetFilterUnit(), false, false) < UnitCountBuffsExBJ(bj_BUFF_POLARITY_POSITIVE, bj_BUFF_RESIST_MAGIC, GetFilterUnit(), false, false) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_73 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and UnitCountBuffsExBJ(bj_BUFF_POLARITY_NEGATIVE, bj_BUFF_RESIST_MAGIC, GetFilterUnit(), false, false) > UnitCountBuffsExBJ(bj_BUFF_POLARITY_POSITIVE, bj_BUFF_RESIST_MAGIC, GetFilterUnit(), false, false) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_74 takes nothing returns boolean
	if ( ( IsUnitType(GetFilterUnit(), UNIT_TYPE_SUMMONED) == true and ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Spirit_Walker_Disenchant_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_SpiritWalkers) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Spirit_Walker_Disenchant_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_SpiritWalkers)
	if ( s__udg_activeDisenchant[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_71))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(udg_Unit, "dispel", udg_Unit2)
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(750.00, udg_Point, Condition(function BoolExpr_72))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	call IssueTargetOrderBJ(udg_Unit, "dispel", udg_Unit2)
	else
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_73))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup3)
	call IssueTargetOrderBJ(udg_Unit, "dispel", udg_Unit2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	endif

	call DestroyGroup(udg_UnitGroup2)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(650.00, udg_Point, Condition(function BoolExpr_74))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	if ( GetUnitTypeId(udg_Unit2) != 'uplg' ) then
	call IssueTargetOrderBJ(udg_Unit, "dispel", udg_Unit2)
	else
	endif

	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Spirit_Walker_Disenchant takes nothing returns nothing
	set gg_trg_Spirit_Walker_Disenchant=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Spirit_Walker_Disenchant, 0.50)
	call TriggerAddCondition(gg_trg_Spirit_Walker_Disenchant, Condition(function Trig_Spirit_Walker_Disenchant_Conditions))
	call TriggerAddAction(gg_trg_Spirit_Walker_Disenchant, function Trig_Spirit_Walker_Disenchant_Actions)
endfunction

//*  Trigger Spirit_Walker_Ancestral_Spirit
//****************************************************************************
function BoolExpr_75 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == false and GetUnitTypeId(GetFilterUnit()) == 'ospw' ) ) then
		return true
	endif
	return false
endfunction

function Trig_Spirit_Walker_Ancestral_Spirit_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'otau' or GetUnitTypeId(GetTriggerUnit()) == 'ospw' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Spirit_Walker_Ancestral_Spirit_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(750.00, udg_Point, Condition(function BoolExpr_75))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup)
	if ( s__udg_activeAncestralSpirit[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	call IssueImmediateOrderBJ(udg_Unit, "ancestralspirit")
	else
	endif

	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Spirit_Walker_Ancestral_Spirit takes nothing returns nothing
	set gg_trg_Spirit_Walker_Ancestral_Spirit=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Spirit_Walker_Ancestral_Spirit, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddCondition(gg_trg_Spirit_Walker_Ancestral_Spirit, Condition(function Trig_Spirit_Walker_Ancestral_Spirit_Conditions))
	call TriggerAddAction(gg_trg_Spirit_Walker_Ancestral_Spirit, function Trig_Spirit_Walker_Ancestral_Spirit_Actions)
endfunction

//*  Trigger Witch_Doctor_Stasis_Trap_Healing_Ward
//****************************************************************************
function BoolExpr_76 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'ohwd' and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false ) ) then
		return true
	endif
	return false
endfunction

function Trig_Witch_Doctor_Stasis_Trap_Healing_Ward_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetAttacker()) == 'odoc' or GetUnitTypeId(GetAttacker()) == 'ndth' or GetUnitTypeId(GetAttacker()) == 'nfsh' or GetUnitTypeId(GetAttacker()) == 'nith' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Witch_Doctor_Stasis_Trap_Healing_Ward_Actions takes nothing returns nothing
	set udg_Unit=GetAttacker()
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_Integer=GetRandomInt(1, 3)
	if ( udg_Integer == 1 and s__udg_activeStasisTrap[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	call IssuePointOrderLocBJ(udg_Unit, "stasistrap", udg_Point)
	else
	if ( udg_Integer == 2 and s__udg_activeHealingWard[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	call IssuePointOrderLocBJ(udg_Unit, "healingward", udg_Point)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(250.00, udg_Point, Condition(function BoolExpr_76))
	if ( CountUnitsInGroup(udg_UnitGroup) == 0 ) then
	call IssuePointOrderLocBJ(udg_Unit, "healingward", udg_Point)
	else
	endif

	call DestroyGroup(udg_UnitGroup)
	else
	endif

	endif

	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Witch_Doctor_Stasis_Trap_Healing_Ward takes nothing returns nothing
	set gg_trg_Witch_Doctor_Stasis_Trap_Healing_Ward=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Witch_Doctor_Stasis_Trap_Healing_Ward, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Witch_Doctor_Stasis_Trap_Healing_Ward, Condition(function Trig_Witch_Doctor_Stasis_Trap_Healing_Ward_Conditions))
	call TriggerAddAction(gg_trg_Witch_Doctor_Stasis_Trap_Healing_Ward, function Trig_Witch_Doctor_Stasis_Trap_Healing_Ward_Actions)
endfunction

//*  Trigger Kodo_Beast_Devour
//****************************************************************************
function Trig_Kodo_Beast_Devour_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'okod' or GetUnitTypeId(GetTriggerUnit()) == 'nckb' ) ) ) then
		return false
	endif
	if ( not ( s__udg_activeDevour[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Kodo_Beast_Devour_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_Point2=GetUnitLoc(GetAttacker())
	if ( DistanceBetweenPoints(udg_Point, udg_Point2) <= 300.00 ) then
	call IssueTargetOrderBJ(GetTriggerUnit(), "devour", GetAttacker())
	else
	endif

	call RemoveLocation(udg_Point)
	call RemoveLocation(udg_Point2)
endfunction


//****************************************************************************
function InitTrig_Kodo_Beast_Devour takes nothing returns nothing
	set gg_trg_Kodo_Beast_Devour=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Kodo_Beast_Devour, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Kodo_Beast_Devour, Condition(function Trig_Kodo_Beast_Devour_Conditions))
	call TriggerAddAction(gg_trg_Kodo_Beast_Devour, function Trig_Kodo_Beast_Devour_Actions)
endfunction

//*  Trigger Death_Coil
//****************************************************************************
function BoolExpr_77 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_UNDEAD) == true and ( GetUnitLevel(GetFilterUnit()) >= 3 and GetUnitLifePercent(GetFilterUnit()) <= 75.00 ) ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_78 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_79 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Death_Coil_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_DeathKnights) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_DeathKnights)
	if ( s__udg_activeDeathCoil[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AUdc') <= 0.00 ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_77))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "deathcoil", GroupPickRandomUnit(udg_UnitGroup2))
	else
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_78))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "deathcoil", GroupPickRandomUnit(udg_UnitGroup3))
	else
	set udg_UnitGroup4=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_79))
	if ( CountUnitsInGroup(udg_UnitGroup4) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "deathcoil", GroupPickRandomUnit(udg_UnitGroup4))
	else
	endif

	call DestroyGroup(udg_UnitGroup4)
	endif

	call DestroyGroup(udg_UnitGroup3)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Death_Coil takes nothing returns nothing
	set gg_trg_Death_Coil=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Death_Coil, 1.20)
	call TriggerAddAction(gg_trg_Death_Coil, function Trig_Death_Coil_Actions)
endfunction

//*  Trigger Death_Pact
//****************************************************************************
function BoolExpr_80 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == false and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_UNDEAD) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( GetUnitLevel(GetFilterUnit()) >= 4 and udg_Real >= GetUnitStateSwap(UNIT_STATE_LIFE, GetFilterUnit()) ) ) ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_81 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == false and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_UNDEAD) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and GetUnitLevel(GetFilterUnit()) < 4 ) ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Death_Pact_Conditions takes nothing returns boolean
	if ( not ( ( ( GetUnitTypeId(GetTriggerUnit()) == 'Udea' or GetUnitTypeId(GetTriggerUnit()) == 'Harf' ) and s__udg_activeDeathPact[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true and GetUnitLifePercent(GetTriggerUnit()) <= 60.00 and BlzGetUnitAbilityCooldownRemaining(GetTriggerUnit(), 'AUdp') <= 0.00 and GetUnitCurrentOrder(GetTriggerUnit()) != String2OrderIdBJ("deathpact") ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Death_Pact_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_Real=( GetUnitStateSwap(UNIT_STATE_MAX_LIFE, GetTriggerUnit()) - GetUnitStateSwap(UNIT_STATE_LIFE, GetTriggerUnit()) )
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_80))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(GetTriggerUnit(), "deathpact", udg_Unit)
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_81))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup2)
	call IssueTargetOrderBJ(GetTriggerUnit(), "deathpact", udg_Unit)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Death_Pact takes nothing returns nothing
	set gg_trg_Death_Pact=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Death_Pact, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Death_Pact, Condition(function Trig_Death_Pact_Conditions))
	call TriggerAddAction(gg_trg_Death_Pact, function Trig_Death_Pact_Actions)
endfunction

//*  Trigger Animate_Dead
//****************************************************************************
function BoolExpr_82 takes nothing returns boolean
	if ( IsUnitDeadBJ(GetFilterUnit()) == true ) then
		return true
	endif
	return false
endfunction

function Trig_Animate_Dead_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_DeathKnights) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_DeathKnights)
	if ( s__udg_activeAnimateDead[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(900.00, udg_Point, Condition(function BoolExpr_82))
	if ( ( CountUnitsInGroup(udg_UnitGroup2) > 4 and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AUan') <= 0.00 ) ) then
	call IssueImmediateOrderBJ(udg_Unit, "animatedead")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Animate_Dead takes nothing returns nothing
	set gg_trg_Animate_Dead=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Animate_Dead, 2.00)
	call TriggerAddAction(gg_trg_Animate_Dead, function Trig_Animate_Dead_Actions)
endfunction

//*  Trigger Frost_Nova
//****************************************************************************
function BoolExpr_83 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_84 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Frost_Nova_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Liches) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Liches)
	set udg_Point=GetUnitLoc(udg_Unit)
	if ( s__udg_activeFrostNova[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AUfn') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('AUfn', GetUnitAbilityLevelSwapped('AUfn', udg_Unit))) and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("deathanddecay") ) then
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(750.00, udg_Point, Condition(function BoolExpr_83))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(250.00, udg_Point2, Condition(function BoolExpr_84))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 2 ) then
	call IssueTargetOrderBJ(udg_Unit, "frostnova", udg_Unit2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Frost_Nova takes nothing returns nothing
	set gg_trg_Frost_Nova=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Frost_Nova, 1.20)
	call TriggerAddAction(gg_trg_Frost_Nova, function Trig_Frost_Nova_Actions)
endfunction

//*  Trigger Autocast_Frost_Armor_ON
//****************************************************************************
function Trig_Autocast_Frost_Armor_ON_Conditions takes nothing returns boolean
	if ( not ( GetIssuedOrderIdBJ() == String2OrderIdBJ("frostarmoron") ) ) then
		return false
	endif
	if ( not ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_STRUCTURE) == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Autocast_Frost_Armor_ON_Actions takes nothing returns nothing
	set udg_Unit=LoadUnitHandleBJ(GetHandleIdBJ(GetTriggerUnit()), 0, udg_HeroTable)
	call IssueImmediateOrderBJ(udg_Unit, "frostarmoron")
endfunction


//****************************************************************************
function InitTrig_Autocast_Frost_Armor_ON takes nothing returns nothing
	set gg_trg_Autocast_Frost_Armor_ON=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Autocast_Frost_Armor_ON, EVENT_PLAYER_UNIT_ISSUED_ORDER)
	call TriggerAddCondition(gg_trg_Autocast_Frost_Armor_ON, Condition(function Trig_Autocast_Frost_Armor_ON_Conditions))
	call TriggerAddAction(gg_trg_Autocast_Frost_Armor_ON, function Trig_Autocast_Frost_Armor_ON_Actions)
endfunction

//*  Trigger Autocast_Frost_Armor_OFF
//****************************************************************************
function Trig_Autocast_Frost_Armor_OFF_Conditions takes nothing returns boolean
	if ( not ( GetIssuedOrderIdBJ() == String2OrderIdBJ("frostarmoroff") ) ) then
		return false
	endif
	if ( not ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_STRUCTURE) == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Autocast_Frost_Armor_OFF_Actions takes nothing returns nothing
	set udg_Unit=LoadUnitHandleBJ(GetHandleIdBJ(GetTriggerUnit()), 0, udg_HeroTable)
	call IssueImmediateOrderBJ(udg_Unit, "frostarmoroff")
endfunction


//****************************************************************************
function InitTrig_Autocast_Frost_Armor_OFF takes nothing returns nothing
	set gg_trg_Autocast_Frost_Armor_OFF=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Autocast_Frost_Armor_OFF, EVENT_PLAYER_UNIT_ISSUED_ORDER)
	call TriggerAddCondition(gg_trg_Autocast_Frost_Armor_OFF, Condition(function Trig_Autocast_Frost_Armor_OFF_Conditions))
	call TriggerAddAction(gg_trg_Autocast_Frost_Armor_OFF, function Trig_Autocast_Frost_Armor_OFF_Actions)
endfunction

//*  Trigger Dark_Ritual
//****************************************************************************
function BoolExpr_85 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_UNDEAD) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Dark_Ritual_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Liches) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Liches)
	if ( s__udg_activeDarkRitual[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitManaPercent(udg_Unit) <= 50.00 ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	if ( BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AUdr') <= 0.00 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("deathanddecay") ) then
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_85))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	call IssueTargetOrderBJ(udg_Unit, "darkritual", udg_Unit2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	call RemoveLocation(udg_Point)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Dark_Ritual takes nothing returns nothing
	set gg_trg_Dark_Ritual=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Dark_Ritual, 2.05)
	call TriggerAddAction(gg_trg_Dark_Ritual, function Trig_Dark_Ritual_Actions)
endfunction

//*  Trigger Death_and_Decay
//****************************************************************************
function BoolExpr_86 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_87 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Death_and_Decay_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Liches) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Liches)
	set udg_Point=GetUnitLoc(udg_Unit)
	if ( s__udg_activeDeathAndDecay[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AUdd') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('AUdd', GetUnitAbilityLevelSwapped('AUdd', udg_Unit))) ) then
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_86))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(300.00, udg_Point2, Condition(function BoolExpr_87))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 2 ) then
	call IssuePointOrderLocBJ(udg_Unit, "deathanddecay", udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Death_and_Decay takes nothing returns nothing
	set gg_trg_Death_and_Decay=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Death_and_Decay, 1.60)
	call TriggerAddAction(gg_trg_Death_and_Decay, function Trig_Death_and_Decay_Actions)
endfunction

//*  Trigger Death_and_Decay_Point_Check
//****************************************************************************
function BoolExpr_89 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetEnumUnit())) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Death_and_Decay_Point_Check_87 takes nothing returns nothing
	if ( s__udg_DeathAndDecayActive[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == true ) then
	set udg_Point=GetUnitLoc(GetEnumUnit())
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(300.00, s__udg_DeathAndDecayPoint[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))], Condition(function BoolExpr_89))
	if ( CountUnitsInGroup(udg_UnitGroup2) == 0 ) then
	call IssueImmediateOrderBJ(GetEnumUnit(), "stop")
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	call RemoveLocation(udg_Point)
	else
	endif


endfunction

function Trig_Death_and_Decay_Point_Check_Actions takes nothing returns nothing
	call ForGroup(udg_Liches, function Trig_Death_and_Decay_Point_Check_87)

endfunction


//****************************************************************************
function InitTrig_Death_and_Decay_Point_Check takes nothing returns nothing
	set gg_trg_Death_and_Decay_Point_Check=CreateTrigger()
call TriggerRegisterTimerEventSingle(gg_trg_Death_and_Decay_Point_Check, 2.00)
	call TriggerAddAction(gg_trg_Death_and_Decay_Point_Check, function Trig_Death_and_Decay_Point_Check_Actions)
endfunction

//*  Trigger Dreadlord_Abilities
//****************************************************************************
function BoolExpr_90 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_91 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_92 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_93 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_94 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( UnitHasBuffBJ(GetFilterUnit(), 'BUsl') == false and IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_95 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and UnitHasBuffBJ(GetFilterUnit(), 'BUsl') == false ) ) then
		return true
	endif
	return false
endfunction

function Trig_Dreadlord_Abilities_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Dreadlords) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Dreadlords)
	set udg_Point=GetUnitLoc(udg_Unit)
	if ( s__udg_activeCarrionSwarm[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AUcs') <= 0.00 and GetUnitAbilityLevelSwapped('AUcs', udg_Unit) > 0 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('AUcs', GetUnitAbilityLevelSwapped('AUcs', udg_Unit))) ) then
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_90))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(200.00, udg_Point2, Condition(function BoolExpr_91))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 2 ) then
	call IssuePointOrderLocBJ(udg_Unit, "carrionswarm", udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	else
	if ( s__udg_activeInferno[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AUin') <= 0.00 and GetUnitAbilityLevelSwapped('AUin', udg_Unit) > 0 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('AUin', GetUnitAbilityLevelSwapped('AUin', udg_Unit))) ) then
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_92))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(250.00, udg_Point2, Condition(function BoolExpr_93))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 2 ) then
	call IssuePointOrderLocBJ(udg_Unit, "dreadlordinferno", udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	else
	if ( s__udg_activeSleep[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point2=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_94))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	if ( UnitHasBuffBJ(udg_Unit2, 'B007') == false ) then
	call IssueTargetOrderBJ(udg_Unit, "thunderbolt", GroupPickRandomUnit(udg_UnitGroup2))
	else
	endif

	else
	set udg_UnitGroup4=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_95))
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup4)
	if ( UnitHasBuffBJ(udg_Unit2, 'B007') == false ) then
	call IssueTargetOrderBJ(udg_Unit, "thunderbolt", udg_Unit2)
	else
	endif

	call DestroyGroup(udg_UnitGroup4)
	endif

	call DestroyGroup(udg_UnitGroup2)
	call RemoveLocation(udg_Point2)
	else
	endif

	endif

	endif

	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Dreadlord_Abilities takes nothing returns nothing
	set gg_trg_Dreadlord_Abilities=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Dreadlord_Abilities, 0.80)
	call TriggerAddAction(gg_trg_Dreadlord_Abilities, function Trig_Dreadlord_Abilities_Actions)
endfunction

//*  Trigger Crypt_Lord_Abilities
//****************************************************************************
function BoolExpr_96 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_97 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_98 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Crypt_Lord_Abilities_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_CryptLords) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_CryptLords)
	set udg_Point=GetUnitLoc(udg_Unit)
	if ( s__udg_activeImpale[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AUim') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('AUim', GetUnitAbilityLevelSwapped('AUim', udg_Unit))) ) then
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_96))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(250.00, udg_Point2, Condition(function BoolExpr_97))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 2 ) then
	call IssueTargetOrderBJ(udg_Unit, "impale", udg_Unit2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	else
	if ( s__udg_activeLocustSwarm[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AUls') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('AUls', GetUnitAbilityLevelSwapped('AUls', udg_Unit))) ) then
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(700.00, udg_Point, Condition(function BoolExpr_98))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 6 ) then
	call IssueImmediateOrderBJ(udg_Unit, "locustswarm")
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	endif

	call RemoveLocation(udg_Point)
	else
	endif

	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Crypt_Lord_Abilities takes nothing returns nothing
	set gg_trg_Crypt_Lord_Abilities=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Crypt_Lord_Abilities, 1.10)
	call TriggerAddAction(gg_trg_Crypt_Lord_Abilities, function Trig_Crypt_Lord_Abilities_Actions)
endfunction

//*  Trigger Autocast_Carrion_Beetles_ON
//****************************************************************************
function Trig_Autocast_Carrion_Beetles_ON_Conditions takes nothing returns boolean
	if ( not ( GetIssuedOrderIdBJ() == String2OrderIdBJ("carrionscarabson") ) ) then
		return false
	endif
	if ( not ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_STRUCTURE) == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Autocast_Carrion_Beetles_ON_Actions takes nothing returns nothing
	set udg_Unit=LoadUnitHandleBJ(GetHandleIdBJ(GetTriggerUnit()), 0, udg_HeroTable)
	call IssueImmediateOrderBJ(udg_Unit, "carrionscarabson")
endfunction


//****************************************************************************
function InitTrig_Autocast_Carrion_Beetles_ON takes nothing returns nothing
	set gg_trg_Autocast_Carrion_Beetles_ON=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Autocast_Carrion_Beetles_ON, EVENT_PLAYER_UNIT_ISSUED_ORDER)
	call TriggerAddCondition(gg_trg_Autocast_Carrion_Beetles_ON, Condition(function Trig_Autocast_Carrion_Beetles_ON_Conditions))
	call TriggerAddAction(gg_trg_Autocast_Carrion_Beetles_ON, function Trig_Autocast_Carrion_Beetles_ON_Actions)
endfunction

//*  Trigger Autocast_Carrion_Beetles_OFF
//****************************************************************************
function Trig_Autocast_Carrion_Beetles_OFF_Conditions takes nothing returns boolean
	if ( not ( GetIssuedOrderIdBJ() == String2OrderIdBJ("carrionscarabsoff") ) ) then
		return false
	endif
	if ( not ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_STRUCTURE) == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Autocast_Carrion_Beetles_OFF_Actions takes nothing returns nothing
	set udg_Unit=LoadUnitHandleBJ(GetHandleIdBJ(GetTriggerUnit()), 0, udg_HeroTable)
	call IssueImmediateOrderBJ(udg_Unit, "carrionscarabsoff")
endfunction


//****************************************************************************
function InitTrig_Autocast_Carrion_Beetles_OFF takes nothing returns nothing
	set gg_trg_Autocast_Carrion_Beetles_OFF=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Autocast_Carrion_Beetles_OFF, EVENT_PLAYER_UNIT_ISSUED_ORDER)
	call TriggerAddCondition(gg_trg_Autocast_Carrion_Beetles_OFF, Condition(function Trig_Autocast_Carrion_Beetles_OFF_Conditions))
	call TriggerAddAction(gg_trg_Autocast_Carrion_Beetles_OFF, function Trig_Autocast_Carrion_Beetles_OFF_Actions)
endfunction

//*  Trigger Crypt_Fiend_Burrow
//****************************************************************************
function Trig_Crypt_Fiend_Burrow_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'ucry' or GetUnitTypeId(GetTriggerUnit()) == 'nnwa' or GetUnitTypeId(GetTriggerUnit()) == 'nnwq' ) ) ) then
		return false
	endif
	if ( not ( s__udg_activeBurrow[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	if ( not ( GetUnitLifePercent(GetTriggerUnit()) <= 75.00 ) ) then
		return false
	endif
	if ( not ( IsUnitInGroup(GetTriggerUnit(), udg_CryptFiendBurrow) == false ) ) then
		return false
	endif
	return true
endfunction

function Trig_Crypt_Fiend_Burrow_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetTriggerUnit(), "burrow")
	call GroupAddUnitSimple(GetTriggerUnit(), udg_CryptFiendBurrow)
endfunction


//****************************************************************************
function InitTrig_Crypt_Fiend_Burrow takes nothing returns nothing
	set gg_trg_Crypt_Fiend_Burrow=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Crypt_Fiend_Burrow, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Crypt_Fiend_Burrow, Condition(function Trig_Crypt_Fiend_Burrow_Conditions))
	call TriggerAddAction(gg_trg_Crypt_Fiend_Burrow, function Trig_Crypt_Fiend_Burrow_Actions)
endfunction

//*  Trigger Crypt_Fiend_Unburrow
//****************************************************************************
function BoolExpr_99 takes nothing returns boolean
	if ( GetUnitTypeId(GetFilterUnit()) == 'ucrm' ) then
		return true
	endif
	return false
endfunction

function Trig_Crypt_Fiend_Unburrow_99 takes nothing returns nothing
	call IssueImmediateOrderBJ(GetEnumUnit(), "unburrow")

endfunction

function Trig_Crypt_Fiend_Unburrow_Actions takes nothing returns nothing
	set udg_UnitGroup=GetUnitsInRectMatching(GetPlayableMapRect(), Condition(function BoolExpr_99))
	call ForGroup(udg_UnitGroup, function Trig_Crypt_Fiend_Unburrow_99)

	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Crypt_Fiend_Unburrow takes nothing returns nothing
	set gg_trg_Crypt_Fiend_Unburrow=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Crypt_Fiend_Unburrow, 3.00)
	call TriggerAddAction(gg_trg_Crypt_Fiend_Unburrow, function Trig_Crypt_Fiend_Unburrow_Actions)
endfunction

//*  Trigger Crypt_Fiend_Unburrow_2
//****************************************************************************
function Trig_Crypt_Fiend_Unburrow_2_Actions takes nothing returns nothing
	call GroupClear(udg_CryptFiendBurrow)
endfunction


//****************************************************************************
function InitTrig_Crypt_Fiend_Unburrow_2 takes nothing returns nothing
	set gg_trg_Crypt_Fiend_Unburrow_2=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Crypt_Fiend_Unburrow_2, 15.00)
	call TriggerAddAction(gg_trg_Crypt_Fiend_Unburrow_2, function Trig_Crypt_Fiend_Unburrow_2_Actions)
endfunction

//*  Trigger Crypt_Fiend_Dies
//****************************************************************************
function Trig_Crypt_Fiend_Dies_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'ucry' or GetUnitTypeId(GetTriggerUnit()) == 'ucrm' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Crypt_Fiend_Dies_Actions takes nothing returns nothing
	call GroupRemoveUnitSimple(GetTriggerUnit(), udg_CryptFiendBurrow)
endfunction


//****************************************************************************
function InitTrig_Crypt_Fiend_Dies takes nothing returns nothing
	set gg_trg_Crypt_Fiend_Dies=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Crypt_Fiend_Dies, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddCondition(gg_trg_Crypt_Fiend_Dies, Condition(function Trig_Crypt_Fiend_Dies_Conditions))
	call TriggerAddAction(gg_trg_Crypt_Fiend_Dies, function Trig_Crypt_Fiend_Dies_Actions)
endfunction

//*  Trigger Gargoyle_Stone_Form
//****************************************************************************
function Trig_Gargoyle_Stone_Form_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'ugar' ) ) then
		return false
	endif
	if ( not ( s__udg_activeStoneForm[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	if ( not ( GetUnitLifePercent(GetTriggerUnit()) <= 75.00 ) ) then
		return false
	endif
	if ( not ( GetPlayerTechCountSimple('Rusf', GetOwningPlayer(GetTriggerUnit())) > 0 ) ) then
		return false
	endif
	if ( not ( IsUnitInGroup(GetTriggerUnit(), udg_GargoyleStoneForm) == false ) ) then
		return false
	endif
	return true
endfunction

function Trig_Gargoyle_Stone_Form_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetTriggerUnit(), "stoneform")
	call GroupAddUnitSimple(GetTriggerUnit(), udg_GargoyleStoneForm)
endfunction


//****************************************************************************
function InitTrig_Gargoyle_Stone_Form takes nothing returns nothing
	set gg_trg_Gargoyle_Stone_Form=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Gargoyle_Stone_Form, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Gargoyle_Stone_Form, Condition(function Trig_Gargoyle_Stone_Form_Conditions))
	call TriggerAddAction(gg_trg_Gargoyle_Stone_Form, function Trig_Gargoyle_Stone_Form_Actions)
endfunction

//*  Trigger Gargoyle_Unstone_Form
//****************************************************************************
function Trig_Gargoyle_Unstone_Form_100 takes nothing returns nothing
	if ( GetUnitTypeId(GetEnumUnit()) == 'ugrm' ) then
	call IssueImmediateOrderBJ(GetEnumUnit(), "unstoneform")
	else
	endif


endfunction

function Trig_Gargoyle_Unstone_Form_Actions takes nothing returns nothing
	call ForGroup(udg_GargoyleStoneForm, function Trig_Gargoyle_Unstone_Form_100)

endfunction


//****************************************************************************
function InitTrig_Gargoyle_Unstone_Form takes nothing returns nothing
	set gg_trg_Gargoyle_Unstone_Form=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Gargoyle_Unstone_Form, 3.00)
	call TriggerAddAction(gg_trg_Gargoyle_Unstone_Form, function Trig_Gargoyle_Unstone_Form_Actions)
endfunction

//*  Trigger Gargoyle_Uses_Unstone_Form
//****************************************************************************
function Trig_Gargoyle_Uses_Unstone_Form_Conditions takes nothing returns boolean
	if ( not ( GetSpellAbilityId() == 'Astn' ) ) then
		return false
	endif
	if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'ugrm' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Gargoyle_Uses_Unstone_Form_Actions takes nothing returns nothing
	call GroupRemoveUnitSimple(GetTriggerUnit(), udg_GargoyleStoneForm)
endfunction


//****************************************************************************
function InitTrig_Gargoyle_Uses_Unstone_Form takes nothing returns nothing
	set gg_trg_Gargoyle_Uses_Unstone_Form=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Gargoyle_Uses_Unstone_Form, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Gargoyle_Uses_Unstone_Form, Condition(function Trig_Gargoyle_Uses_Unstone_Form_Conditions))
	call TriggerAddAction(gg_trg_Gargoyle_Uses_Unstone_Form, function Trig_Gargoyle_Uses_Unstone_Form_Actions)
endfunction

//*  Trigger Necromancer_Raise_Dead
//****************************************************************************
function BoolExpr_102 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'edry' and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetSummonedUnit())) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_103 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'hmpr' and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetSummonedUnit())) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_104 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'ospw' and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetSummonedUnit())) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_105 takes nothing returns boolean
	if ( ( IsUnitType(GetFilterUnit(), UNIT_TYPE_SUMMONED) == true and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetSummonedUnit())) == false ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_106 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'ubsp' and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetSummonedUnit())) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Necromancer_Raise_Dead_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetTriggerUnit()) != 'oeye' ) ) then
		return false
	endif
	if ( not ( GetUnitTypeId(GetTriggerUnit()) != 'ohwd' ) ) then
		return false
	endif
	if ( not ( GetUnitTypeId(GetTriggerUnit()) != 'otot' ) ) then
		return false
	endif
	if ( not ( GetUnitTypeId(GetTriggerUnit()) != 'nowl' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Necromancer_Raise_Dead_Actions takes nothing returns nothing
	
//*  DETECT DISPELLING UNITS
	set udg_Point=GetUnitLoc(GetSummonedUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(512, udg_Point, Condition(function BoolExpr_102))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(udg_Unit, "autodispel", GetSummonedUnit())
	else
	endif

	call DestroyGroup(udg_UnitGroup)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(512, udg_Point, Condition(function BoolExpr_103))
	call GroupAddGroup(udg_UnitGroup, udg_UnitGroup2)
	call DestroyGroup(udg_UnitGroup)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(512, udg_Point, Condition(function BoolExpr_104))
	call GroupAddGroup(udg_UnitGroup, udg_UnitGroup2)
	call DestroyGroup(udg_UnitGroup)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(300.00, udg_Point, Condition(function BoolExpr_105))
	if ( CountUnitsInGroup(udg_UnitGroup) > 1 and CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup2)
	call IssueTargetOrderBJ(udg_Unit, "dispel", GetSummonedUnit())
	else
	endif

	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(512, udg_Point, Condition(function BoolExpr_106))
	if ( CountUnitsInGroup(udg_UnitGroup) > 1 and CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup2)
	call IssuePointOrderLocBJ(udg_Unit, "devourmagic", udg_Point)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	call DestroyGroup(udg_UnitGroup2)
endfunction


//****************************************************************************
function InitTrig_Necromancer_Raise_Dead takes nothing returns nothing
	set gg_trg_Necromancer_Raise_Dead=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Necromancer_Raise_Dead, EVENT_PLAYER_UNIT_SUMMON)
	call TriggerAddCondition(gg_trg_Necromancer_Raise_Dead, Condition(function Trig_Necromancer_Raise_Dead_Conditions))
	call TriggerAddAction(gg_trg_Necromancer_Raise_Dead, function Trig_Necromancer_Raise_Dead_Actions)
endfunction

//*  Trigger Necromancer_Unholy_Frenzy
//****************************************************************************
function BoolExpr_107 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and ( UnitHasBuffBJ(GetFilterUnit(), 'Buhf') == false and GetUnitLevel(GetFilterUnit()) > 3 ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_108 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and UnitHasBuffBJ(GetFilterUnit(), 'Buhf') == false ) ) then
		return true
	endif
	return false
endfunction

function Trig_Necromancer_Unholy_Frenzy_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Necromancers) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Necromancer_Unholy_Frenzy_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Necromancers)
	if ( s__udg_activeUnholyFrenzy[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_107))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("cripple") ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(udg_Unit, "unholyfrenzy", udg_Unit2)
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_108))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	if ( GetUnitTypeId(udg_Unit2) != 'ushd' ) then
	call IssueTargetOrderBJ(udg_Unit, "unholyfrenzy", udg_Unit2)
	else
	endif

	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Necromancer_Unholy_Frenzy takes nothing returns nothing
	set gg_trg_Necromancer_Unholy_Frenzy=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Necromancer_Unholy_Frenzy, 0.55)
	call TriggerAddCondition(gg_trg_Necromancer_Unholy_Frenzy, Condition(function Trig_Necromancer_Unholy_Frenzy_Conditions))
	call TriggerAddAction(gg_trg_Necromancer_Unholy_Frenzy, function Trig_Necromancer_Unholy_Frenzy_Actions)
endfunction

//*  Trigger Necromancer_Cripple
//****************************************************************************
function BoolExpr_109 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( UnitHasBuffBJ(GetFilterUnit(), 'Bcri') == false and GetUnitLevel(GetFilterUnit()) > 3 ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_110 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and UnitHasBuffBJ(GetFilterUnit(), 'Bcri') == false ) ) then
		return true
	endif
	return false
endfunction

function Trig_Necromancer_Cripple_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Necromancers) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Necromancer_Cripple_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Necromancers)
	if ( s__udg_activeCripple[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(750.00, udg_Point, Condition(function BoolExpr_109))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("unholyfrenzy") ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(udg_Unit, "cripple", udg_Unit2)
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(750.00, udg_Point, Condition(function BoolExpr_110))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	if ( GetUnitTypeId(udg_Unit2) != 'ushd' ) then
	call IssueTargetOrderBJ(udg_Unit, "cripple", udg_Unit2)
	else
	endif

	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Necromancer_Cripple takes nothing returns nothing
	set gg_trg_Necromancer_Cripple=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Necromancer_Cripple, 0.70)
	call TriggerAddCondition(gg_trg_Necromancer_Cripple, Condition(function Trig_Necromancer_Cripple_Conditions))
	call TriggerAddAction(gg_trg_Necromancer_Cripple, function Trig_Necromancer_Cripple_Actions)
endfunction

//*  Trigger Banshee_Anti_Magic_Shell
//****************************************************************************
function BoolExpr_111 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and UnitHasBuffBJ(GetFilterUnit(), 'Bams') == false ) ) then
		return true
	endif
	return false
endfunction

function Trig_Banshee_Anti_Magic_Shell_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Banshees) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Banshees)
	if ( s__udg_activeAntiMagicShell[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_111))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	if ( GetUnitTypeId(udg_Unit2) != 'ushd' and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("possession") ) then
	call IssueTargetOrderBJ(udg_Unit, "antimagicshell", udg_Unit2)
	else
	endif

	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Banshee_Anti_Magic_Shell takes nothing returns nothing
	set gg_trg_Banshee_Anti_Magic_Shell=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Banshee_Anti_Magic_Shell, 0.50)
	call TriggerAddAction(gg_trg_Banshee_Anti_Magic_Shell, function Trig_Banshee_Anti_Magic_Shell_Actions)
endfunction

//*  Trigger Banshee_Possession
//****************************************************************************
function Trig_Banshee_Possession_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'uban' or GetUnitTypeId(GetTriggerUnit()) == 'ngh2' ) ) ) then
		return false
	endif
	if ( not ( s__udg_activePossession[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	if ( not ( IsUnitType(GetAttacker(), UNIT_TYPE_GROUND) == true ) ) then
		return false
	endif
	if ( not ( IsUnitType(GetAttacker(), UNIT_TYPE_SUMMONED) == false ) ) then
		return false
	endif
	if ( not ( IsUnitType(GetAttacker(), UNIT_TYPE_MECHANICAL) == false ) ) then
		return false
	endif
	if ( not ( GetUnitCurrentOrder(GetTriggerUnit()) != String2OrderIdBJ("possession") ) ) then
		return false
	endif
	return true
endfunction

function Trig_Banshee_Possession_Actions takes nothing returns nothing
	call IssueTargetOrderBJ(GetTriggerUnit(), "acidbomb", GetAttacker())
endfunction


//****************************************************************************
function InitTrig_Banshee_Possession takes nothing returns nothing
	set gg_trg_Banshee_Possession=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Banshee_Possession, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Banshee_Possession, Condition(function Trig_Banshee_Possession_Conditions))
	call TriggerAddAction(gg_trg_Banshee_Possession, function Trig_Banshee_Possession_Actions)
endfunction

//*  Trigger Banshee_Possession_Random
//****************************************************************************
function BoolExpr_112 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( GetUnitLifePercent(GetFilterUnit()) >= 50.00 and IsUnitInGroup(GetFilterUnit(), udg_PossessionGroup) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Banshee_Possession_Random_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Banshees) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Banshee_Possession_Random_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Banshees)
	if ( s__udg_activePossession[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("possession") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(700.00, udg_Point, Condition(function BoolExpr_112))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	call IssueTargetOrderBJ(udg_Unit, "acidbomb", udg_Unit2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Banshee_Possession_Random takes nothing returns nothing
	set gg_trg_Banshee_Possession_Random=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Banshee_Possession_Random, 0.50)
	call TriggerAddCondition(gg_trg_Banshee_Possession_Random, Condition(function Trig_Banshee_Possession_Random_Conditions))
	call TriggerAddAction(gg_trg_Banshee_Possession_Random, function Trig_Banshee_Possession_Random_Actions)
endfunction

//*  Trigger Obsidian_Staue_Spirit_Touch
//****************************************************************************
function BoolExpr_114 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetEnumUnit())) == false and GetUnitTypeId(GetFilterUnit()) != 'uobs' ) ) then
		return true
	endif
	return false
endfunction

function Trig_Obsidian_Staue_Spirit_Touch_112 takes nothing returns nothing
	if ( s__udg_activeSpiritTouch[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == true ) then
	set udg_Point=GetUnitLoc(GetEnumUnit())
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(200.00, udg_Point, Condition(function BoolExpr_114))
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup2)
	if ( GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) > 0.00 and CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueImmediateOrderBJ(GetEnumUnit(), "replenishmana")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif


endfunction

function Trig_Obsidian_Staue_Spirit_Touch_Actions takes nothing returns nothing
	call ForGroup(udg_ObsidianStatues, function Trig_Obsidian_Staue_Spirit_Touch_112)

endfunction


//****************************************************************************
function InitTrig_Obsidian_Staue_Spirit_Touch takes nothing returns nothing
	set gg_trg_Obsidian_Staue_Spirit_Touch=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Obsidian_Staue_Spirit_Touch, 1.00)
	call TriggerAddAction(gg_trg_Obsidian_Staue_Spirit_Touch, function Trig_Obsidian_Staue_Spirit_Touch_Actions)
endfunction

//*  Trigger Meat_Wagon_Exhume_Corpses
//****************************************************************************
function Trig_Meat_Wagon_Exhume_Corpses_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetTransportUnitBJ()) == 'umtw' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Meat_Wagon_Exhume_Corpses_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetTransportUnitBJ(), "unloadallcorpses")
	set udg_MeatWagonsMoveEvent=1.00
endfunction


//****************************************************************************
function InitTrig_Meat_Wagon_Exhume_Corpses takes nothing returns nothing
	set gg_trg_Meat_Wagon_Exhume_Corpses=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Meat_Wagon_Exhume_Corpses, EVENT_PLAYER_UNIT_LOADED)
	call TriggerAddCondition(gg_trg_Meat_Wagon_Exhume_Corpses, Condition(function Trig_Meat_Wagon_Exhume_Corpses_Conditions))
	call TriggerAddAction(gg_trg_Meat_Wagon_Exhume_Corpses, function Trig_Meat_Wagon_Exhume_Corpses_Actions)
endfunction

//*  Trigger Meat_Wagon_Dies
//****************************************************************************
function Trig_Meat_Wagon_Dies_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'umtw' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Meat_Wagon_Dies_Actions takes nothing returns nothing
	call GroupRemoveUnitSimple(GetTriggerUnit(), udg_MeatWagons)
endfunction


//****************************************************************************
function InitTrig_Meat_Wagon_Dies takes nothing returns nothing
	set gg_trg_Meat_Wagon_Dies=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Meat_Wagon_Dies, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddCondition(gg_trg_Meat_Wagon_Dies, Condition(function Trig_Meat_Wagon_Dies_Conditions))
	call TriggerAddAction(gg_trg_Meat_Wagon_Dies, function Trig_Meat_Wagon_Dies_Actions)
endfunction

//*  Trigger Disease_Cloud_is_summoned
//****************************************************************************
function Trig_Disease_Cloud_is_summoned_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'uplg' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Disease_Cloud_is_summoned_Actions takes nothing returns nothing
	call GroupAddUnitSimple(GetTriggerUnit(), udg_DiseaseClouds)
endfunction


//****************************************************************************
function InitTrig_Disease_Cloud_is_summoned takes nothing returns nothing
	set gg_trg_Disease_Cloud_is_summoned=CreateTrigger()
call TriggerRegisterEnterRectSimple(gg_trg_Disease_Cloud_is_summoned, GetEntireMapRect())
	call TriggerAddCondition(gg_trg_Disease_Cloud_is_summoned, Condition(function Trig_Disease_Cloud_is_summoned_Conditions))
	call TriggerAddAction(gg_trg_Disease_Cloud_is_summoned, function Trig_Disease_Cloud_is_summoned_Actions)
endfunction

//*  Trigger Disease_Cloud_Dies
//****************************************************************************
function Trig_Disease_Cloud_Dies_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'uplg' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Disease_Cloud_Dies_Actions takes nothing returns nothing
	call GroupRemoveUnitSimple(GetTriggerUnit(), udg_DiseaseClouds)
endfunction


//****************************************************************************
function InitTrig_Disease_Cloud_Dies takes nothing returns nothing
	set gg_trg_Disease_Cloud_Dies=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Disease_Cloud_Dies, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddCondition(gg_trg_Disease_Cloud_Dies, Condition(function Trig_Disease_Cloud_Dies_Conditions))
	call TriggerAddAction(gg_trg_Disease_Cloud_Dies, function Trig_Disease_Cloud_Dies_Actions)
endfunction

//*  Trigger Destroyer_Absorb_Mana_2
//****************************************************************************
function BoolExpr_115 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_116 takes nothing returns boolean
	if ( ( GetUnitStateSwap(UNIT_STATE_MANA, GetFilterUnit()) >= 50.00 and ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Destroyer_Absorb_Mana_2_116 takes nothing returns nothing
	set udg_Point2=GetUnitLoc(GetEnumUnit())
	if ( GetEnumUnit() != udg_Unit and DistanceBetweenPoints(udg_Point, udg_Point2) < udg_Real ) then
	set udg_Unit2=GetEnumUnit()
	set udg_Real=DistanceBetweenPoints(udg_Point, udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point2)

endfunction

function Trig_Destroyer_Absorb_Mana_2_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Destroyers) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Destroyer_Absorb_Mana_2_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Destroyers)
	if ( GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) <= 25.00 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("absorb") and s__udg_activeAbsorbMana[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_Real=400.00
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_115))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(udg_Real, udg_Point, Condition(function BoolExpr_116))
	call ForGroup(udg_UnitGroup, function Trig_Destroyer_Absorb_Mana_2_116)

	call IssueTargetOrderBJ(udg_Unit, "absorb", udg_Unit2)
	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Destroyer_Absorb_Mana_2 takes nothing returns nothing
	set gg_trg_Destroyer_Absorb_Mana_2=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Destroyer_Absorb_Mana_2, 0.30)
	call TriggerAddCondition(gg_trg_Destroyer_Absorb_Mana_2, Condition(function Trig_Destroyer_Absorb_Mana_2_Conditions))
	call TriggerAddAction(gg_trg_Destroyer_Absorb_Mana_2, function Trig_Destroyer_Absorb_Mana_2_Actions)
endfunction

//*  Trigger Destroyer_Devour_Magic
//****************************************************************************
function BoolExpr_118 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and ( UnitHasBuffBJ(GetFilterUnit(), 'Bply') == true or ( UnitHasBuffBJ(GetFilterUnit(), 'BEer') == true or ( UnitHasBuffBJ(GetFilterUnit(), 'BHbn') == true or ( UnitHasBuffBJ(GetFilterUnit(), 'BOhx') == true or ( UnitHasBuffBJ(GetFilterUnit(), 'BNso') == true or UnitHasBuffBJ(GetFilterUnit(), 'Bcy2') == true ) ) ) ) ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_119 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and UnitCountBuffsExBJ(bj_BUFF_POLARITY_NEGATIVE, bj_BUFF_RESIST_MAGIC, GetFilterUnit(), false, false) < UnitCountBuffsExBJ(bj_BUFF_POLARITY_POSITIVE, bj_BUFF_RESIST_MAGIC, GetFilterUnit(), false, false) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_120 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and UnitCountBuffsExBJ(bj_BUFF_POLARITY_NEGATIVE, bj_BUFF_RESIST_MAGIC, GetFilterUnit(), false, false) > UnitCountBuffsExBJ(bj_BUFF_POLARITY_POSITIVE, bj_BUFF_RESIST_MAGIC, GetFilterUnit(), false, false) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_121 takes nothing returns boolean
	if ( ( IsUnitType(GetFilterUnit(), UNIT_TYPE_SUMMONED) == true and ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Destroyer_Devour_Magic_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Destroyers) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Destroyer_Devour_Magic_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Destroyers)
	if ( s__udg_activeDevourMagic[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_118))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	call IssuePointOrderLocBJ(udg_Unit, "devourmagic", udg_Point2)
	call RemoveLocation(udg_Point2)
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(750.00, udg_Point, Condition(function BoolExpr_119))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	call IssuePointOrderLocBJ(udg_Unit, "devourmagic", udg_Point2)
	call RemoveLocation(udg_Point2)
	else
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_120))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup3)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	call IssuePointOrderLocBJ(udg_Unit, "devourmagic", udg_Point2)
	call RemoveLocation(udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	endif

	call DestroyGroup(udg_UnitGroup2)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(650.00, udg_Point, Condition(function BoolExpr_121))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	if ( GetUnitTypeId(udg_Unit2) != 'uplg' ) then
	set udg_Point2=GetUnitLoc(udg_Unit2)
	call IssuePointOrderLocBJ(udg_Unit, "devourmagic", udg_Point2)
	call RemoveLocation(udg_Point2)
	else
	endif

	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Destroyer_Devour_Magic takes nothing returns nothing
	set gg_trg_Destroyer_Devour_Magic=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Destroyer_Devour_Magic, 0.50)
	call TriggerAddCondition(gg_trg_Destroyer_Devour_Magic, Condition(function Trig_Destroyer_Devour_Magic_Conditions))
	call TriggerAddAction(gg_trg_Destroyer_Devour_Magic, function Trig_Destroyer_Devour_Magic_Actions)
endfunction

//*  Trigger Entangling_Roots
//****************************************************************************
function BoolExpr_122 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_123 takes nothing returns boolean
	if ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true ) then
		return true
	endif
	return false
endfunction

function Trig_Entangling_Roots_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_KeeperOfTheGroves) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_KeeperOfTheGroves)
	if ( s__udg_activeEntanglingRoots[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AEer') <= 0.00 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("tranquility") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(750.00, udg_Point, Condition(function BoolExpr_122))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "entanglingroots", GroupPickRandomUnit(udg_UnitGroup3))
	else
	set udg_UnitGroup4=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_123))
	if ( CountUnitsInGroup(udg_UnitGroup4) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "entanglingroots", GroupPickRandomUnit(udg_UnitGroup4))
	else
	endif

	call DestroyGroup(udg_UnitGroup4)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup3)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Entangling_Roots takes nothing returns nothing
	set gg_trg_Entangling_Roots=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Entangling_Roots, 1.13)
	call TriggerAddAction(gg_trg_Entangling_Roots, function Trig_Entangling_Roots_Actions)
endfunction

//*  Trigger Force_of_Nature
//****************************************************************************
function Trig_Force_of_Nature_Conditions takes nothing returns boolean
	if ( not ( ( ( GetUnitTypeId(GetAttacker()) == 'Ekee' or GetUnitTypeId(GetAttacker()) == 'Ecen' or GetUnitTypeId(GetAttacker()) == 'Ekgg' or GetUnitTypeId(GetAttacker()) == 'Emns' ) and s__udg_activeForceOfNature[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true and BlzGetUnitAbilityCooldownRemaining(GetAttacker(), 'A012') <= 0.00 and GetUnitCurrentOrder(GetTriggerUnit()) != String2OrderIdBJ("tranquility") ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Force_of_Nature_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "spiritwolf")
endfunction


//****************************************************************************
function InitTrig_Force_of_Nature takes nothing returns nothing
	set gg_trg_Force_of_Nature=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Force_of_Nature, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Force_of_Nature, Condition(function Trig_Force_of_Nature_Conditions))
	call TriggerAddAction(gg_trg_Force_of_Nature, function Trig_Force_of_Nature_Actions)
endfunction

//*  Trigger Tranquility
//****************************************************************************
function BoolExpr_124 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_125 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Tranquility_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_KeeperOfTheGroves) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_KeeperOfTheGroves)
	if ( s__udg_activeTranquility[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AEtq') <= 0.00 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("tranquility") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(700.00, udg_Point, Condition(function BoolExpr_124))
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(900.00, udg_Point, Condition(function BoolExpr_125))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 6 and CountUnitsInGroup(udg_UnitGroup3) > 6 ) then
	call IssueImmediateOrderBJ(udg_Unit, "tranquility")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	call DestroyGroup(udg_UnitGroup3)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Tranquility takes nothing returns nothing
	set gg_trg_Tranquility=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Tranquility, 2.00)
	call TriggerAddAction(gg_trg_Tranquility, function Trig_Tranquility_Actions)
endfunction

//*  Trigger Autocast_Searing_Arrows_ON
//****************************************************************************
function Trig_Autocast_Searing_Arrows_ON_Conditions takes nothing returns boolean
	if ( not ( GetIssuedOrderIdBJ() == String2OrderIdBJ("flamingarrows") ) ) then
		return false
	endif
	if ( not ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_STRUCTURE) == true ) ) then
		return false
	endif
	if ( not ( GetUnitCurrentOrder(GetTriggerUnit()) != String2OrderIdBJ("starfall") ) ) then
		return false
	endif
	return true
endfunction

function Trig_Autocast_Searing_Arrows_ON_Actions takes nothing returns nothing
	set udg_Unit=LoadUnitHandleBJ(GetHandleIdBJ(GetTriggerUnit()), 0, udg_HeroTable)
	call IssueImmediateOrderBJ(udg_Unit, "flamingarrows")
endfunction


//****************************************************************************
function InitTrig_Autocast_Searing_Arrows_ON takes nothing returns nothing
	set gg_trg_Autocast_Searing_Arrows_ON=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Autocast_Searing_Arrows_ON, EVENT_PLAYER_UNIT_ISSUED_ORDER)
	call TriggerAddCondition(gg_trg_Autocast_Searing_Arrows_ON, Condition(function Trig_Autocast_Searing_Arrows_ON_Conditions))
	call TriggerAddAction(gg_trg_Autocast_Searing_Arrows_ON, function Trig_Autocast_Searing_Arrows_ON_Actions)
endfunction

//*  Trigger Autocast_Searing_Arrows_OFF
//****************************************************************************
function Trig_Autocast_Searing_Arrows_OFF_Conditions takes nothing returns boolean
	if ( not ( GetIssuedOrderIdBJ() == String2OrderIdBJ("unflamingarrows") ) ) then
		return false
	endif
	if ( not ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_STRUCTURE) == true ) ) then
		return false
	endif
	if ( not ( GetUnitCurrentOrder(GetTriggerUnit()) != String2OrderIdBJ("starfall") ) ) then
		return false
	endif
	return true
endfunction

function Trig_Autocast_Searing_Arrows_OFF_Actions takes nothing returns nothing
	set udg_Unit=LoadUnitHandleBJ(GetHandleIdBJ(GetTriggerUnit()), 0, udg_HeroTable)
	call IssueImmediateOrderBJ(udg_Unit, "unflamingarrows")
endfunction


//****************************************************************************
function InitTrig_Autocast_Searing_Arrows_OFF takes nothing returns nothing
	set gg_trg_Autocast_Searing_Arrows_OFF=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Autocast_Searing_Arrows_OFF, EVENT_PLAYER_UNIT_ISSUED_ORDER)
	call TriggerAddCondition(gg_trg_Autocast_Searing_Arrows_OFF, Condition(function Trig_Autocast_Searing_Arrows_OFF_Conditions))
	call TriggerAddAction(gg_trg_Autocast_Searing_Arrows_OFF, function Trig_Autocast_Searing_Arrows_OFF_Actions)
endfunction

//*  Trigger Silence
//****************************************************************************
function BoolExpr_126 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and GetUnitStateSwap(UNIT_STATE_MAX_MANA, GetFilterUnit()) >= 50.00 ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Silence_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_PriestessOfTheMoons) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_PriestessOfTheMoons)
	if ( s__udg_activeSilence[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'ANsi') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('ANsi', GetUnitAbilityLevelSwapped('ANsi', udg_Unit))) and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("starfall") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_126))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	call IssuePointOrderLocBJ(udg_Unit, "silence", udg_Point2)
	call RemoveLocation(udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Silence takes nothing returns nothing
	set gg_trg_Silence=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Silence, 2.10)
	call TriggerAddAction(gg_trg_Silence, function Trig_Silence_Actions)
endfunction

//*  Trigger Starfall
//****************************************************************************
function BoolExpr_127 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Starfall_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_PriestessOfTheMoons) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_PriestessOfTheMoons)
	if ( s__udg_activeStarfall[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AEsf') <= 0.00 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("starfall") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(850.00, udg_Point, Condition(function BoolExpr_127))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 8 ) then
	call IssueImmediateOrderBJ(udg_Unit, "starfall")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	call DestroyGroup(udg_UnitGroup3)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Starfall takes nothing returns nothing
	set gg_trg_Starfall=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Starfall, 2.00)
	call TriggerAddAction(gg_trg_Starfall, function Trig_Starfall_Actions)
endfunction

//*  Trigger Starfall_Check
//****************************************************************************
function BoolExpr_128 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Starfall_Check_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_PriestessOfTheMoons) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_PriestessOfTheMoons)
	if ( UnitHasBuffBJ(udg_Unit, 'XEsf') == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(1000.00, udg_Point, Condition(function BoolExpr_128))
	if ( CountUnitsInGroup(udg_UnitGroup2) == 0 ) then
	call IssueImmediateOrderBJ(udg_Unit, "stop")
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	call RemoveLocation(udg_Point)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Starfall_Check takes nothing returns nothing
	set gg_trg_Starfall_Check=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Starfall_Check, 2.00)
	call TriggerAddAction(gg_trg_Starfall_Check, function Trig_Starfall_Check_Actions)
endfunction

//*  Trigger Mana_Burn
//****************************************************************************
function BoolExpr_129 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and GetUnitStateSwap(UNIT_STATE_MANA, GetFilterUnit()) >= 50.00 ) ) then
		return true
	endif
	return false
endfunction

function Trig_Mana_Burn_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_DemonHunters) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_DemonHunters)
	if ( s__udg_activeManaBurn[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AEmb') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('AEmb', GetUnitAbilityLevelSwapped('AEmb', udg_Unit))) ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(400.00, udg_Point, Condition(function BoolExpr_129))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "manaburn", GroupPickRandomUnit(udg_UnitGroup2))
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Mana_Burn takes nothing returns nothing
	set gg_trg_Mana_Burn=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Mana_Burn, 2.05)
	call TriggerAddAction(gg_trg_Mana_Burn, function Trig_Mana_Burn_Actions)
endfunction

//*  Trigger Immolation
//****************************************************************************
function BoolExpr_130 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Immolation_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_DemonHunters) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_DemonHunters)
	if ( s__udg_activeImmolation[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= 50.00 ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(250.00, udg_Point, Condition(function BoolExpr_130))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueImmediateOrderBJ(udg_Unit, "immolation")
	set s__udg_ImmolationCounter[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))]= 0
	else
	set s__udg_ImmolationCounter[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))]= ( s__udg_ImmolationCounter[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] + 1 )
	endif

	if ( s__udg_ImmolationCounter[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] > 3 ) then
	call IssueImmediateOrderBJ(udg_Unit, "unimmolation")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Immolation takes nothing returns nothing
	set gg_trg_Immolation=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Immolation, 1.00)
	call TriggerAddAction(gg_trg_Immolation, function Trig_Immolation_Actions)
endfunction

//*  Trigger Metamorphosis
//****************************************************************************
function BoolExpr_131 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Metamorphosis_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_DemonHunters) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_DemonHunters)
	if ( s__udg_activeMetamorphosis[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitAbilityLevelSwapped('AEme', udg_Unit) > 0 and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AEme') <= 0.00 ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_131))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 2 ) then
	call IssueImmediateOrderBJ(udg_Unit, "metamorphosis")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Metamorphosis takes nothing returns nothing
	set gg_trg_Metamorphosis=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Metamorphosis, 1.60)
	call TriggerAddAction(gg_trg_Metamorphosis, function Trig_Metamorphosis_Actions)
endfunction

//*  Trigger Fan_of_Knives
//****************************************************************************
function BoolExpr_132 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetAttacker())) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Fan_of_Knives_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetAttacker()) == 'Ewar' or GetUnitTypeId(GetAttacker()) == 'E00R' or GetUnitTypeId(GetAttacker()) == 'Ewrd' ) ) ) then
		return false
	endif
	if ( not ( s__udg_activeFanOfKnives[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	if ( not ( BlzGetUnitAbilityCooldownRemaining(GetAttacker(), 'AEfk') <= 0.00 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Fan_of_Knives_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetAttacker())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(400.00, udg_Point, Condition(function BoolExpr_132))
	if ( CountUnitsInGroup(udg_UnitGroup) > 2 ) then
	call IssueImmediateOrderBJ(GetAttacker(), "fanofknives")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Fan_of_Knives takes nothing returns nothing
	set gg_trg_Fan_of_Knives=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Fan_of_Knives, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Fan_of_Knives, Condition(function Trig_Fan_of_Knives_Conditions))
	call TriggerAddAction(gg_trg_Fan_of_Knives, function Trig_Fan_of_Knives_Actions)
endfunction

//*  Trigger Blink
//****************************************************************************
function Trig_Blink_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'Ewar' or GetUnitTypeId(GetTriggerUnit()) == 'E00R' or GetUnitTypeId(GetTriggerUnit()) == 'Ewrd' ) ) ) then
		return false
	endif
	if ( not ( s__udg_activeBlink[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) ) then
		return false
	endif
	if ( not ( BlzGetUnitAbilityCooldownRemaining(GetTriggerUnit(), 'AEbl') <= 0.00 ) ) then
		return false
	endif
	if ( not ( GetUnitLifePercent(GetTriggerUnit()) <= 30.00 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Blink_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	if ( IsPlayerInForce(GetOwningPlayer(GetTriggerUnit()), s__udg_Teams[1]) == true ) then
	set udg_Point2=Location(( GetLocationX(udg_Point) + 1000.00 ), GetLocationY(udg_Point))
	else
	set udg_Point2=Location(( GetLocationX(udg_Point) - 1000.00 ), GetLocationY(udg_Point))
	endif

	call IssuePointOrderLocBJ(GetTriggerUnit(), "blink", udg_Point2)
	call RemoveLocation(udg_Point2)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Blink takes nothing returns nothing
	set gg_trg_Blink=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Blink, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Blink, Condition(function Trig_Blink_Conditions))
	call TriggerAddAction(gg_trg_Blink, function Trig_Blink_Actions)
endfunction

//*  Trigger Shadow_Strike
//****************************************************************************
function BoolExpr_133 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and GetUnitLevel(GetFilterUnit()) >= 5 ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_134 takes nothing returns boolean
	if ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true ) then
		return true
	endif
	return false
endfunction

function Trig_Shadow_Strike_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Wardens) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Wardens)
	if ( s__udg_activeShadowStrike[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AEsh') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('AEsh', GetUnitAbilityLevelSwapped('AEsh', udg_Unit))) ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(300.00, udg_Point, Condition(function BoolExpr_133))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "shadowstrike", GroupPickRandomUnit(udg_UnitGroup2))
	else
	set udg_UnitGroup4=GetUnitsInRangeOfLocMatching(300.00, udg_Point, Condition(function BoolExpr_134))
	if ( CountUnitsInGroup(udg_UnitGroup4) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "shadowstrike", GroupPickRandomUnit(udg_UnitGroup4))
	else
	endif

	call DestroyGroup(udg_UnitGroup4)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Shadow_Strike takes nothing returns nothing
	set gg_trg_Shadow_Strike=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Shadow_Strike, 1.00)
	call TriggerAddAction(gg_trg_Shadow_Strike, function Trig_Shadow_Strike_Actions)
endfunction

//*  Trigger Vengeance
//****************************************************************************
function BoolExpr_135 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetAttacker())) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Vengeance_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetAttacker()) == 'Ewar' or GetUnitTypeId(GetAttacker()) == 'E00R' or GetUnitTypeId(GetAttacker()) == 'Ewrd' ) ) ) then
		return false
	endif
	if ( not ( s__udg_activeVengeance[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	if ( not ( GetUnitAbilityLevelSwapped('AEsv', GetAttacker()) > 0 ) ) then
		return false
	endif
	if ( not ( BlzGetUnitAbilityCooldownRemaining(GetAttacker(), 'AEsv') <= 0.00 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Vengeance_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetAttacker())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(300.00, udg_Point, Condition(function BoolExpr_135))
	if ( CountUnitsInGroup(udg_UnitGroup) > 2 ) then
	call IssueImmediateOrderBJ(GetAttacker(), "spiritofvengeance")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Vengeance takes nothing returns nothing
	set gg_trg_Vengeance=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Vengeance, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Vengeance, Condition(function Trig_Vengeance_Conditions))
	call TriggerAddAction(gg_trg_Vengeance, function Trig_Vengeance_Actions)
endfunction

//*  Trigger Dryad_Abolish_Magic
//****************************************************************************
function BoolExpr_137 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and ( UnitHasBuffBJ(GetFilterUnit(), 'Bply') == true or ( UnitHasBuffBJ(GetFilterUnit(), 'BEer') == true or ( UnitHasBuffBJ(GetFilterUnit(), 'BHbn') == true or ( UnitHasBuffBJ(GetFilterUnit(), 'BOhx') == true or ( UnitHasBuffBJ(GetFilterUnit(), 'BNso') == true or UnitHasBuffBJ(GetFilterUnit(), 'Bcy2') == true ) ) ) ) ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_138 takes nothing returns boolean
	if ( ( IsUnitType(GetFilterUnit(), UNIT_TYPE_SUMMONED) == true and ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetEnumUnit())) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Dryad_Abolish_Magic_135 takes nothing returns nothing
	if ( s__udg_activeAbolishMagic[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == true ) then
	set udg_Point=GetUnitLoc(GetEnumUnit())
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(650.00, udg_Point, Condition(function BoolExpr_137))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 0 and udg_Integer == 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup3)
	call IssueTargetOrderBJ(GetEnumUnit(), "autodispel", udg_Unit)
	set udg_Integer=( udg_Integer + 1 )
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(650.00, udg_Point, Condition(function BoolExpr_138))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup2)
	call IssueTargetOrderBJ(GetEnumUnit(), "autodispel", udg_Unit)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	endif

	call DestroyGroup(udg_UnitGroup3)
	else
	endif


endfunction

function Trig_Dryad_Abolish_Magic_Actions takes nothing returns nothing
	set udg_Integer=0
	call ForGroup(udg_Dryads, function Trig_Dryad_Abolish_Magic_135)

endfunction


//****************************************************************************
function InitTrig_Dryad_Abolish_Magic takes nothing returns nothing
	set gg_trg_Dryad_Abolish_Magic=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Dryad_Abolish_Magic, 1.00)
	call TriggerAddAction(gg_trg_Dryad_Abolish_Magic, function Trig_Dryad_Abolish_Magic_Actions)
endfunction

//*  Trigger Huntress_Sentinel
//****************************************************************************
function Trig_Huntress_Sentinel_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'esen' or GetUnitTypeId(GetTriggerUnit()) == 'ensh' ) ) ) then
		return false
	endif
	if ( not ( GetRandomInt(1, 100) == 1 ) ) then
		return false
	endif
	if ( not ( s__udg_activeSentinel[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Huntress_Sentinel_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetTriggerUnit(), "scout")
endfunction


//****************************************************************************
function InitTrig_Huntress_Sentinel takes nothing returns nothing
	set gg_trg_Huntress_Sentinel=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Huntress_Sentinel, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Huntress_Sentinel, Condition(function Trig_Huntress_Sentinel_Conditions))
	call TriggerAddAction(gg_trg_Huntress_Sentinel, function Trig_Huntress_Sentinel_Actions)
endfunction

//*  Trigger Druid_of_the_Talon_Crow_Form
//****************************************************************************
function BoolExpr_139 takes nothing returns boolean
	if ( ( IsUnitType(GetFilterUnit(), UNIT_TYPE_FLYING) == true and ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( GetUnitTypeId(GetFilterUnit()) != 'nowl' and ( GetUnitTypeId(GetFilterUnit()) != 'ubsp' and IsUnitAliveBJ(GetFilterUnit()) == true ) ) ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Druid_of_the_Talon_Crow_Form_139 takes nothing returns nothing
	if ( GetUnitTypeId(GetEnumUnit()) == 'otbr' ) then
	set udg_Integer=( udg_Integer + 1 )
	else
	endif


endfunction

function BoolExpr_141 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'edot' and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false ) ) then
		return true
	endif
	return false
endfunction

function Trig_Druid_of_the_Talon_Crow_Form_141 takes nothing returns nothing
	if ( s__udg_activeCrowForm[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == true ) then
	call IssueImmediateOrderBJ(GetEnumUnit(), "ravenform")
	else
	endif


endfunction

function BoolExpr_143 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'edtm' and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false ) ) then
		return true
	endif
	return false
endfunction

function Trig_Druid_of_the_Talon_Crow_Form_143 takes nothing returns nothing
	call IssueImmediateOrderBJ(GetEnumUnit(), "unravenform")

endfunction

function Trig_Druid_of_the_Talon_Crow_Form_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_DruidOfTheTalons) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Druid_of_the_Talon_Crow_Form_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_DruidOfTheTalons)
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(700.00, udg_Point, Condition(function BoolExpr_139))
	set udg_Integer=0
	call ForGroup(udg_UnitGroup, function Trig_Druid_of_the_Talon_Crow_Form_139)

	if ( CountUnitsInGroup(udg_UnitGroup) > 0 and udg_Integer == 0 ) then
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(700.00, udg_Point, Condition(function BoolExpr_141))
	call ForGroup(udg_UnitGroup2, function Trig_Druid_of_the_Talon_Crow_Form_141)

	call DestroyGroup(udg_UnitGroup2)
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(700.00, udg_Point, Condition(function BoolExpr_143))
	call ForGroup(udg_UnitGroup2, function Trig_Druid_of_the_Talon_Crow_Form_143)

	call DestroyGroup(udg_UnitGroup2)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Druid_of_the_Talon_Crow_Form takes nothing returns nothing
	set gg_trg_Druid_of_the_Talon_Crow_Form=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Druid_of_the_Talon_Crow_Form, 0.60)
	call TriggerAddCondition(gg_trg_Druid_of_the_Talon_Crow_Form, Condition(function Trig_Druid_of_the_Talon_Crow_Form_Conditions))
	call TriggerAddAction(gg_trg_Druid_of_the_Talon_Crow_Form, function Trig_Druid_of_the_Talon_Crow_Form_Actions)
endfunction

//*  Trigger Druid_of_the_Talon_Cyclone
//****************************************************************************
function Trig_Druid_of_the_Talon_Cyclone_Actions takes nothing returns nothing
	if ( GetUnitTypeId(GetAttacker()) == 'edot' and s__udg_activeCyclone[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) then
	call IssueTargetOrderBJ(GetAttacker(), "cyclone", GetTriggerUnit())
	else
	if ( GetUnitTypeId(GetTriggerUnit()) == 'edot' and s__udg_activeCyclone[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) then
	call IssueTargetOrderBJ(GetTriggerUnit(), "cyclone", GetAttacker())
	else
	endif

	endif

endfunction


//****************************************************************************
function InitTrig_Druid_of_the_Talon_Cyclone takes nothing returns nothing
	set gg_trg_Druid_of_the_Talon_Cyclone=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Druid_of_the_Talon_Cyclone, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddAction(gg_trg_Druid_of_the_Talon_Cyclone, function Trig_Druid_of_the_Talon_Cyclone_Actions)
endfunction

//*  Trigger Druid_of_the_Claw_Roar
//****************************************************************************
function Trig_Druid_of_the_Claw_Roar_Conditions takes nothing returns boolean
	if ( not ( ( ( GetUnitTypeId(GetAttacker()) == 'edoc' or GetUnitTypeId(GetAttacker()) == 'edcm' ) and UnitHasBuffBJ(GetAttacker(), 'Broa') == false and GetUnitCurrentOrder(GetAttacker()) != String2OrderIdBJ("rejuvination") and s__udg_activeRoar[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Druid_of_the_Claw_Roar_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "roar")
endfunction


//****************************************************************************
function InitTrig_Druid_of_the_Claw_Roar takes nothing returns nothing
	set gg_trg_Druid_of_the_Claw_Roar=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Druid_of_the_Claw_Roar, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Druid_of_the_Claw_Roar, Condition(function Trig_Druid_of_the_Claw_Roar_Conditions))
	call TriggerAddAction(gg_trg_Druid_of_the_Claw_Roar, function Trig_Druid_of_the_Claw_Roar_Actions)
endfunction

//*  Trigger Druid_of_the_Claw_Roar_2
//****************************************************************************
function BoolExpr_145 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'edoc' and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetAttacker())) == false ) ) then
		return true
	endif
	return false
endfunction

function Trig_Druid_of_the_Claw_Roar_2_Conditions takes nothing returns boolean
	if ( not ( UnitHasBuffBJ(GetAttacker(), 'Broa') == false ) ) then
		return false
	endif
	return true
endfunction

function Trig_Druid_of_the_Claw_Roar_2_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetAttacker())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(200.00, udg_Point, Condition(function BoolExpr_145))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup)
	if ( s__udg_activeRoar[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("rejuvination") ) then
	call IssueImmediateOrderBJ(udg_Unit, "roar")
	else
	endif

	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Druid_of_the_Claw_Roar_2 takes nothing returns nothing
	set gg_trg_Druid_of_the_Claw_Roar_2=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Druid_of_the_Claw_Roar_2, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Druid_of_the_Claw_Roar_2, Condition(function Trig_Druid_of_the_Claw_Roar_2_Conditions))
	call TriggerAddAction(gg_trg_Druid_of_the_Claw_Roar_2, function Trig_Druid_of_the_Claw_Roar_2_Actions)
endfunction

//*  Trigger Druid_of_the_Claw_Rejuvenation
//****************************************************************************
function BoolExpr_146 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'edoc' and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == false ) ) then
		return true
	endif
	return false
endfunction

function Trig_Druid_of_the_Claw_Rejuvenation_Conditions takes nothing returns boolean
	if ( not ( UnitHasBuffBJ(GetTriggerUnit(), 'Brej') == false ) ) then
		return false
	endif
	if ( not ( GetUnitTypeId(GetTriggerUnit()) != 'hgyr' ) ) then
		return false
	endif
	if ( not ( GetUnitTypeId(GetTriggerUnit()) != 'hmtt' ) ) then
		return false
	endif
	if ( not ( GetUnitTypeId(GetTriggerUnit()) != 'ocat' ) ) then
		return false
	endif
	if ( not ( GetUnitTypeId(GetTriggerUnit()) != 'umtw' ) ) then
		return false
	endif
	if ( not ( GetUnitTypeId(GetTriggerUnit()) != 'uobs' ) ) then
		return false
	endif
	if ( not ( GetUnitTypeId(GetTriggerUnit()) != 'ebal' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Druid_of_the_Claw_Rejuvenation_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_DruidOfTheClaws) > 0 ) then
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(400.00, udg_Point, Condition(function BoolExpr_146))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup)
	if ( GetTriggerUnit() != udg_Unit and s__udg_activeRejuvenation[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	call IssueTargetOrderBJ(udg_Unit, "rejuvination", GetTriggerUnit())
	else
	endif

	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Druid_of_the_Claw_Rejuvenation takes nothing returns nothing
	set gg_trg_Druid_of_the_Claw_Rejuvenation=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Druid_of_the_Claw_Rejuvenation, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Druid_of_the_Claw_Rejuvenation, Condition(function Trig_Druid_of_the_Claw_Rejuvenation_Conditions))
	call TriggerAddAction(gg_trg_Druid_of_the_Claw_Rejuvenation, function Trig_Druid_of_the_Claw_Rejuvenation_Actions)
endfunction

//*  Trigger Druid_of_the_Claw_Bear_Form
//****************************************************************************
function Trig_Druid_of_the_Claw_Bear_Form_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'edoc' ) ) then
		return false
	endif
	if ( not ( s__udg_activeBearForm[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Druid_of_the_Claw_Bear_Form_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetTriggerUnit(), "bearform")
endfunction


//****************************************************************************
function InitTrig_Druid_of_the_Claw_Bear_Form takes nothing returns nothing
	set gg_trg_Druid_of_the_Claw_Bear_Form=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Druid_of_the_Claw_Bear_Form, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Druid_of_the_Claw_Bear_Form, Condition(function Trig_Druid_of_the_Claw_Bear_Form_Conditions))
	call TriggerAddAction(gg_trg_Druid_of_the_Claw_Bear_Form, function Trig_Druid_of_the_Claw_Bear_Form_Actions)
endfunction

//*  Trigger Mountain_Giant_Taunt
//****************************************************************************
function Trig_Mountain_Giant_Taunt_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'emtg' or GetUnitTypeId(GetTriggerUnit()) == 'nggr' or GetUnitTypeId(GetTriggerUnit()) == 'nggg' or GetUnitTypeId(GetTriggerUnit()) == 'nsgg' ) ) ) then
		return false
	endif
	if ( not ( BlzGetUnitAbilityCooldownRemaining(GetTriggerUnit(), 'Atau') == 0.00 ) ) then
		return false
	endif
	if ( not ( s__udg_activeTaunt[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Mountain_Giant_Taunt_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetTriggerUnit(), "taunt")
endfunction


//****************************************************************************
function InitTrig_Mountain_Giant_Taunt takes nothing returns nothing
	set gg_trg_Mountain_Giant_Taunt=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Mountain_Giant_Taunt, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Mountain_Giant_Taunt, Condition(function Trig_Mountain_Giant_Taunt_Conditions))
	call TriggerAddAction(gg_trg_Mountain_Giant_Taunt, function Trig_Mountain_Giant_Taunt_Actions)
endfunction

//*  Trigger Healing_Spray
//****************************************************************************
function BoolExpr_147 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( GetUnitLifePercent(GetFilterUnit()) <= 90.00 and IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false ) ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_148 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and ( IsUnitAliveBJ(GetFilterUnit()) == true and GetUnitLifePercent(GetFilterUnit()) <= 75.00 ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Healing_Spray_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Alchemists) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Healing_Spray_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Alchemists)
	if ( BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'ANhs') <= 0.00 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("healingspray") and s__udg_activeHealingSpray[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_147))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(300.00, udg_Point2, Condition(function BoolExpr_148))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 1 ) then
	call IssuePointOrderLocBJ(udg_Unit, "healingspray", udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point2)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Healing_Spray takes nothing returns nothing
	set gg_trg_Healing_Spray=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Healing_Spray, 1.50)
	call TriggerAddCondition(gg_trg_Healing_Spray, Condition(function Trig_Healing_Spray_Conditions))
	call TriggerAddAction(gg_trg_Healing_Spray, function Trig_Healing_Spray_Actions)
endfunction

//*  Trigger Chemical_Rage
//****************************************************************************
function Trig_Chemical_Rage_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetAttacker()) == 'Nalc' ) ) then
		return false
	endif
	if ( not ( s__udg_activeChemicalRage[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Chemical_Rage_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "chemicalrage")
endfunction


//****************************************************************************
function InitTrig_Chemical_Rage takes nothing returns nothing
	set gg_trg_Chemical_Rage=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Chemical_Rage, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Chemical_Rage, Condition(function Trig_Chemical_Rage_Conditions))
	call TriggerAddAction(gg_trg_Chemical_Rage, function Trig_Chemical_Rage_Actions)
endfunction

//*  Trigger Acid_Bomb
//****************************************************************************
function BoolExpr_149 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_150 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Acid_Bomb_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Alchemists) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Alchemists)
	if ( BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'ANab') <= 0.00 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("healingspray") and s__udg_activeAcidBomb[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_149))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(250.00, udg_Point2, Condition(function BoolExpr_150))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 2 ) then
	call IssueTargetOrderBJ(udg_Unit, "acidbomb", udg_Unit2)
	else
	endif

	call RemoveLocation(udg_Point2)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Acid_Bomb takes nothing returns nothing
	set gg_trg_Acid_Bomb=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Acid_Bomb, 1.75)
	call TriggerAddAction(gg_trg_Acid_Bomb, function Trig_Acid_Bomb_Actions)
endfunction

//*  Trigger Transmute
//****************************************************************************
function BoolExpr_151 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Transmute_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Alchemists) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Alchemists)
	if ( BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'ANtm') <= 0.00 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("healingspray") and s__udg_activeTransmute[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_151))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "transmute", GroupPickRandomUnit(udg_UnitGroup))
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Transmute takes nothing returns nothing
	set gg_trg_Transmute=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Transmute, 2.20)
	call TriggerAddAction(gg_trg_Transmute, function Trig_Transmute_Actions)
endfunction

//*  Trigger Transmute_FIX
//****************************************************************************
function Trig_Transmute_FIX_Conditions takes nothing returns boolean
	if ( not ( GetSpellAbilityId() == 'ANtm' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Transmute_FIX_Actions takes nothing returns nothing
	call AdjustPlayerStateBJ(R2I(GetUnitGoldCost(GetUnitTypeId(GetSpellTargetUnit())) * 0.5), Player(GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit())) - 7), PLAYER_STATE_RESOURCE_GOLD)
	set udg_Integer=R2I(GetUnitGoldCost(GetUnitTypeId(GetSpellTargetUnit())) * 0.5)
	set udg_Point=GetUnitLoc(GetSpellTargetUnit())
	if ( GetLocalPlayer() == GetOwningPlayer(GetTriggerUnit()) ) then
	call CreateTextTagLocBJ(( "+" + I2S(udg_Integer) ), udg_Point, 0, 14.00, 100, 100, 0.00, 0)
	call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
	call SetTextTagLifespanBJ(GetLastCreatedTextTag(), 4.00)
	call SetTextTagVelocityBJ(GetLastCreatedTextTag(), 16.00, 90)
	endif
	call RemoveLocation(udg_Point)
	set s__udg_TotalGoldEarned[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit())) - 6]= s__udg_TotalGoldEarned[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit())) - 6] + R2I(GetUnitGoldCost(GetUnitTypeId(GetSpellTargetUnit())) * 0.5)
endfunction


//****************************************************************************
function InitTrig_Transmute_FIX takes nothing returns nothing
	set gg_trg_Transmute_FIX=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Transmute_FIX, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Transmute_FIX, Condition(function Trig_Transmute_FIX_Conditions))
	call TriggerAddAction(gg_trg_Transmute_FIX, function Trig_Transmute_FIX_Actions)
endfunction

//*  Trigger Forked_Lightning
//****************************************************************************
function BoolExpr_152 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_153 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Forked_Lightning_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_SeaWitches) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_SeaWitches)
	if ( BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'ANfl') <= 0.00 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("tornado") and s__udg_activeForkedLightning[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(700.00, udg_Point, Condition(function BoolExpr_152))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(300.00, udg_Point2, Condition(function BoolExpr_153))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 2 ) then
	call IssueTargetOrderBJ(udg_Unit, "forkedlightning", udg_Unit2)
	else
	endif

	call RemoveLocation(udg_Point2)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Forked_Lightning takes nothing returns nothing
	set gg_trg_Forked_Lightning=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Forked_Lightning, 1.00)
	call TriggerAddAction(gg_trg_Forked_Lightning, function Trig_Forked_Lightning_Actions)
endfunction

//*  Trigger Autocast_Frost_Arrows_ON
//****************************************************************************
function Trig_Autocast_Frost_Arrows_ON_Conditions takes nothing returns boolean
	if ( not ( GetIssuedOrderIdBJ() == String2OrderIdBJ("coldarrows") ) ) then
		return false
	endif
	if ( not ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_STRUCTURE) == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Autocast_Frost_Arrows_ON_Actions takes nothing returns nothing
	set udg_Unit=LoadUnitHandleBJ(GetHandleIdBJ(GetTriggerUnit()), 0, udg_HeroTable)
	call IssueImmediateOrderBJ(udg_Unit, "coldarrows")
endfunction


//****************************************************************************
function InitTrig_Autocast_Frost_Arrows_ON takes nothing returns nothing
	set gg_trg_Autocast_Frost_Arrows_ON=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Autocast_Frost_Arrows_ON, EVENT_PLAYER_UNIT_ISSUED_ORDER)
	call TriggerAddCondition(gg_trg_Autocast_Frost_Arrows_ON, Condition(function Trig_Autocast_Frost_Arrows_ON_Conditions))
	call TriggerAddAction(gg_trg_Autocast_Frost_Arrows_ON, function Trig_Autocast_Frost_Arrows_ON_Actions)
endfunction

//*  Trigger Autocast_Frost_Arrows_OFF
//****************************************************************************
function Trig_Autocast_Frost_Arrows_OFF_Conditions takes nothing returns boolean
	if ( not ( GetIssuedOrderIdBJ() == String2OrderIdBJ("uncoldarrows") ) ) then
		return false
	endif
	if ( not ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_STRUCTURE) == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Autocast_Frost_Arrows_OFF_Actions takes nothing returns nothing
	set udg_Unit=LoadUnitHandleBJ(GetHandleIdBJ(GetTriggerUnit()), 0, udg_HeroTable)
	call IssueImmediateOrderBJ(udg_Unit, "uncoldarrows")
endfunction


//****************************************************************************
function InitTrig_Autocast_Frost_Arrows_OFF takes nothing returns nothing
	set gg_trg_Autocast_Frost_Arrows_OFF=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Autocast_Frost_Arrows_OFF, EVENT_PLAYER_UNIT_ISSUED_ORDER)
	call TriggerAddCondition(gg_trg_Autocast_Frost_Arrows_OFF, Condition(function Trig_Autocast_Frost_Arrows_OFF_Conditions))
	call TriggerAddAction(gg_trg_Autocast_Frost_Arrows_OFF, function Trig_Autocast_Frost_Arrows_OFF_Actions)
endfunction

//*  Trigger Mana_Shield
//****************************************************************************
function Trig_Mana_Shield_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'Nngs' ) ) then
		return false
	endif
	if ( not ( UnitHasBuffBJ(GetTriggerUnit(), 'BNms') == false ) ) then
		return false
	endif
	if ( not ( GetUnitLifePercent(GetTriggerUnit()) <= 20.00 ) ) then
		return false
	endif
	if ( not ( s__udg_activeManaShield[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Mana_Shield_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetTriggerUnit(), "manashieldon")
endfunction


//****************************************************************************
function InitTrig_Mana_Shield takes nothing returns nothing
	set gg_trg_Mana_Shield=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Mana_Shield, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Mana_Shield, Condition(function Trig_Mana_Shield_Conditions))
	call TriggerAddAction(gg_trg_Mana_Shield, function Trig_Mana_Shield_Actions)
endfunction

//*  Trigger Tornado_Neutral
//****************************************************************************
function Trig_Tornado_Neutral_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetAttacker()) == 'Nngs' and BlzGetUnitAbilityCooldownRemaining(GetAttacker(), 'ANto') <= 0.00 and s__udg_activeTornadoNeutral[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Tornado_Neutral_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call IssuePointOrderLocBJ(GetAttacker(), "tornado", udg_Point)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Tornado_Neutral takes nothing returns nothing
	set gg_trg_Tornado_Neutral=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Tornado_Neutral, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Tornado_Neutral, Condition(function Trig_Tornado_Neutral_Conditions))
	call TriggerAddAction(gg_trg_Tornado_Neutral, function Trig_Tornado_Neutral_Actions)
endfunction

//*  Trigger Pocket_Factory
//****************************************************************************
function Trig_Pocket_Factory_Conditions takes nothing returns boolean
	if ( not ( ( ( GetUnitTypeId(GetAttacker()) == 'Ntin' or GetUnitTypeId(GetAttacker()) == 'Nrob' ) and BlzGetUnitAbilityCooldownRemaining(GetAttacker(), 'ANsy') <= 0.00 and s__udg_activePocketFactory[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Pocket_Factory_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetAttacker())
	set udg_Point2=PolarProjectionBJ(udg_Point, 300.00, ( GetUnitFacing(GetAttacker()) + 180.00 ))
	call IssuePointOrderLocBJ(GetAttacker(), "summonfactory", udg_Point)
	call RemoveLocation(udg_Point)
	call RemoveLocation(udg_Point2)
endfunction


//****************************************************************************
function InitTrig_Pocket_Factory takes nothing returns nothing
	set gg_trg_Pocket_Factory=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Pocket_Factory, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Pocket_Factory, Condition(function Trig_Pocket_Factory_Conditions))
	call TriggerAddAction(gg_trg_Pocket_Factory, function Trig_Pocket_Factory_Actions)
endfunction

//*  Trigger Cluster_Rockets
//****************************************************************************
function BoolExpr_154 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_155 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Cluster_Rockets_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Tinkers) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Tinkers)
	if ( BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'ANcs') <= 0.00 and s__udg_activeClusterRockets[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_154))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(250.00, udg_Point2, Condition(function BoolExpr_155))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 2 ) then
	call IssuePointOrderLocBJ(udg_Unit, "clusterrockets", udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point2)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Cluster_Rockets takes nothing returns nothing
	set gg_trg_Cluster_Rockets=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Cluster_Rockets, 1.70)
	call TriggerAddAction(gg_trg_Cluster_Rockets, function Trig_Cluster_Rockets_Actions)
endfunction

//*  Trigger Robo_Goblin
//****************************************************************************
function BoolExpr_156 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Robo_Goblin_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Tinkers) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Tinkers)
	if ( s__udg_activeRoboGoblin[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_156))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	call IssueImmediateOrderBJ(udg_Unit, "robogoblin")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Robo_Goblin takes nothing returns nothing
	set gg_trg_Robo_Goblin=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Robo_Goblin, 1.25)
	call TriggerAddAction(gg_trg_Robo_Goblin, function Trig_Robo_Goblin_Actions)
endfunction

//*  Trigger Summon_Bear
//****************************************************************************
function Trig_Summon_Bear_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetAttacker()) == 'Nbst' and BlzGetUnitAbilityCooldownRemaining(GetAttacker(), 'ANsg') <= 0.00 and s__udg_activeSummonBear[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Summon_Bear_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "summongrizzly")
endfunction


//****************************************************************************
function InitTrig_Summon_Bear takes nothing returns nothing
	set gg_trg_Summon_Bear=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Summon_Bear, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Summon_Bear, Condition(function Trig_Summon_Bear_Conditions))
	call TriggerAddAction(gg_trg_Summon_Bear, function Trig_Summon_Bear_Actions)
endfunction

//*  Trigger Summon_Hawk_and_Quilbeast
//****************************************************************************
function BoolExpr_157 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_158 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Summon_Hawk_and_Quilbeast_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Beastmasters) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Beastmasters)
	if ( GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("stampede") ) then
	if ( GetUnitAbilityLevelSwapped('ANsw', udg_Unit) > 0 and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'ANsw') <= 0.00 and s__udg_activeSummonHawk[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_157))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	call IssueImmediateOrderBJ(udg_Unit, "summonwareagle")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	if ( BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'ANsq') <= 0.00 and s__udg_activeSummonQuilbeast[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_158))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	call IssueImmediateOrderBJ(udg_Unit, "summonquillbeast")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

	endif

	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Summon_Hawk_and_Quilbeast takes nothing returns nothing
	set gg_trg_Summon_Hawk_and_Quilbeast=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Summon_Hawk_and_Quilbeast, 1.50)
	call TriggerAddAction(gg_trg_Summon_Hawk_and_Quilbeast, function Trig_Summon_Hawk_and_Quilbeast_Actions)
endfunction

//*  Trigger Stampede
//****************************************************************************
function BoolExpr_159 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Stampede_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Beastmasters) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Beastmasters)
	if ( BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'ANst') <= 0.00 and s__udg_activeStampede[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_159))
	if ( CountUnitsInGroup(udg_UnitGroup) > 5 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	call IssuePointOrderLocBJ(udg_Unit, "stampede", udg_Point2)
	call RemoveLocation(udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Stampede takes nothing returns nothing
	set gg_trg_Stampede=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Stampede, 1.80)
	call TriggerAddAction(gg_trg_Stampede, function Trig_Stampede_Actions)
endfunction

//*  Trigger Breath_of_Fire
//****************************************************************************
function BoolExpr_160 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Breath_of_Fire_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Brewmasters) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Breath_of_Fire_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Brewmasters)
	if ( BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'ANbf') <= 0.00 and s__udg_activeBreathOfFire[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(375.00, udg_Point, Condition(function BoolExpr_160))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	call IssuePointOrderLocBJ(udg_Unit, "breathoffire", udg_Point2)
	call RemoveLocation(udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Breath_of_Fire takes nothing returns nothing
	set gg_trg_Breath_of_Fire=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Breath_of_Fire, 1.00)
	call TriggerAddCondition(gg_trg_Breath_of_Fire, Condition(function Trig_Breath_of_Fire_Conditions))
	call TriggerAddAction(gg_trg_Breath_of_Fire, function Trig_Breath_of_Fire_Actions)
endfunction

//*  Trigger Drunken_Haze
//****************************************************************************
function BoolExpr_161 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_162 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Drunken_Haze_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Brewmasters) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Brewmasters)
	if ( BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'ANdh') <= 0.00 and s__udg_activeDrunkenHaze[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(550.00, udg_Point, Condition(function BoolExpr_161))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(250.00, udg_Point2, Condition(function BoolExpr_162))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 1 ) then
	call IssueTargetOrderBJ(udg_Unit, "drunkenhaze", udg_Unit2)
	else
	endif

	call RemoveLocation(udg_Point2)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Drunken_Haze takes nothing returns nothing
	set gg_trg_Drunken_Haze=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Drunken_Haze, 1.70)
	call TriggerAddAction(gg_trg_Drunken_Haze, function Trig_Drunken_Haze_Actions)
endfunction

//*  Trigger Storm_Earth_and_Fire
//****************************************************************************
function Trig_Storm_Earth_and_Fire_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'Npbm' ) ) then
		return false
	endif
	if ( not ( s__udg_activeStormEarthFire[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	if ( not ( GetUnitLifePercent(GetTriggerUnit()) <= 60.00 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Storm_Earth_and_Fire_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetTriggerUnit(), "elementalfury")
endfunction


//****************************************************************************
function InitTrig_Storm_Earth_and_Fire takes nothing returns nothing
	set gg_trg_Storm_Earth_and_Fire=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Storm_Earth_and_Fire, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Storm_Earth_and_Fire, Condition(function Trig_Storm_Earth_and_Fire_Conditions))
	call TriggerAddAction(gg_trg_Storm_Earth_and_Fire, function Trig_Storm_Earth_and_Fire_Actions)
endfunction

//*  Trigger Storm_Earth_and_Fire_is_summoned
//****************************************************************************
function Trig_Storm_Earth_and_Fire_is_summoned_Actions takes nothing returns nothing
	if ( GetUnitTypeId(GetSummonedUnit()) == 'npn2' ) then
	call GroupAddUnitSimple(GetTriggerUnit(), udg_Storm)
	else
	endif

	if ( GetUnitTypeId(GetSummonedUnit()) == 'npn3' ) then
	call GroupAddUnitSimple(GetTriggerUnit(), udg_Earth)
	else
	endif

	if ( GetUnitTypeId(GetSummonedUnit()) == 'npn1' ) then
	call GroupAddUnitSimple(GetTriggerUnit(), udg_Fire)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Storm_Earth_and_Fire_is_summoned takes nothing returns nothing
	set gg_trg_Storm_Earth_and_Fire_is_summoned=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Storm_Earth_and_Fire_is_summoned, EVENT_PLAYER_UNIT_SUMMON)
	call TriggerAddAction(gg_trg_Storm_Earth_and_Fire_is_summoned, function Trig_Storm_Earth_and_Fire_is_summoned_Actions)
endfunction

//*  Trigger Storm_Wind_Walk
//****************************************************************************
function BoolExpr_163 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Storm_Wind_Walk_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Storm) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Storm)
	if ( BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'ANwk') <= 0.00 and UnitHasBuffBJ(udg_Unit, 'BOwk') == false ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(1000.00, udg_Point, Condition(function BoolExpr_163))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueImmediateOrderBJ(udg_Unit, "windwalk")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Storm_Wind_Walk takes nothing returns nothing
	set gg_trg_Storm_Wind_Walk=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Storm_Wind_Walk, 1.74)
	call TriggerAddAction(gg_trg_Storm_Wind_Walk, function Trig_Storm_Wind_Walk_Actions)
endfunction

//*  Trigger Storm_Wind_Walk_2
//****************************************************************************
function BoolExpr_164 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Storm_Wind_Walk_2_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Storm) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Storm)
	if ( s__udg_StormWindWalkUnit[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == null and UnitHasBuffBJ(udg_Unit, 'BOwk') == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_164))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set s__udg_StormWindWalkUnit[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))]= GroupPickRandomUnit(udg_UnitGroup2)
	else
	endif

	else
	endif

	if ( s__udg_StormWindWalkUnit[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] != null ) then
	call IssueTargetOrderBJ(udg_Unit, "attack", s__udg_StormWindWalkUnit[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))])
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Storm_Wind_Walk_2 takes nothing returns nothing
	set gg_trg_Storm_Wind_Walk_2=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Storm_Wind_Walk_2, 0.50)
	call TriggerAddAction(gg_trg_Storm_Wind_Walk_2, function Trig_Storm_Wind_Walk_2_Actions)
endfunction

//*  Trigger Storm_Wind_Walk_Unit_Dies
//****************************************************************************
function Trig_Storm_Wind_Walk_Unit_Dies_Conditions takes nothing returns boolean
	if ( not ( ( GetTriggerUnit() == s__udg_StormWindWalkUnit[7] or GetTriggerUnit() == s__udg_StormWindWalkUnit[8] or GetTriggerUnit() == s__udg_StormWindWalkUnit[9] or GetTriggerUnit() == s__udg_StormWindWalkUnit[10] or GetTriggerUnit() == s__udg_StormWindWalkUnit[11] or GetTriggerUnit() == s__udg_StormWindWalkUnit[12] ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Storm_Wind_Walk_Unit_Dies_Actions takes nothing returns nothing
	set bj_forLoopAIndex=7
set bj_forLoopAIndexEnd=12
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	if ( GetTriggerUnit() == s__udg_StormWindWalkUnit[GetForLoopIndexA()] ) then
	set s__udg_StormWindWalkUnit[GetForLoopIndexA()]= null
	else
	endif

	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
endfunction


//****************************************************************************
function InitTrig_Storm_Wind_Walk_Unit_Dies takes nothing returns nothing
	set gg_trg_Storm_Wind_Walk_Unit_Dies=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Storm_Wind_Walk_Unit_Dies, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddCondition(gg_trg_Storm_Wind_Walk_Unit_Dies, Condition(function Trig_Storm_Wind_Walk_Unit_Dies_Conditions))
	call TriggerAddAction(gg_trg_Storm_Wind_Walk_Unit_Dies, function Trig_Storm_Wind_Walk_Unit_Dies_Actions)
endfunction

//*  Trigger Storm_Dies
//****************************************************************************
function Trig_Storm_Dies_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'npn2' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Storm_Dies_Actions takes nothing returns nothing
	set s__udg_StormWindWalkUnit[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= null
endfunction


//****************************************************************************
function InitTrig_Storm_Dies takes nothing returns nothing
	set gg_trg_Storm_Dies=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Storm_Dies, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddCondition(gg_trg_Storm_Dies, Condition(function Trig_Storm_Dies_Conditions))
	call TriggerAddAction(gg_trg_Storm_Dies, function Trig_Storm_Dies_Actions)
endfunction

//*  Trigger Earth_Attacks
//****************************************************************************
function Trig_Earth_Attacks_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetAttacker()) == 'npn3' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Earth_Attacks_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "taunt")
endfunction


//****************************************************************************
function InitTrig_Earth_Attacks takes nothing returns nothing
	set gg_trg_Earth_Attacks=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Earth_Attacks, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Earth_Attacks, Condition(function Trig_Earth_Attacks_Conditions))
	call TriggerAddAction(gg_trg_Earth_Attacks, function Trig_Earth_Attacks_Actions)
endfunction

//*  Trigger Silence_Neutral
//****************************************************************************
function BoolExpr_165 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and GetUnitStateSwap(UNIT_STATE_MAX_MANA, GetFilterUnit()) >= 50.00 ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Silence_Neutral_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_DarkRangers) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_DarkRangers)
	if ( s__udg_activeSilenceNeutral[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'ANsi') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('ANsi', GetUnitAbilityLevelSwapped('ANsi', udg_Unit))) and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("drain") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_165))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	call IssuePointOrderLocBJ(udg_Unit, "silence", udg_Point2)
	call RemoveLocation(udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Silence_Neutral takes nothing returns nothing
	set gg_trg_Silence_Neutral=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Silence_Neutral, 2.10)
	call TriggerAddAction(gg_trg_Silence_Neutral, function Trig_Silence_Neutral_Actions)
endfunction

//*  Trigger Autocast_Black_Arrow_ON
//****************************************************************************
function Trig_Autocast_Black_Arrow_ON_Conditions takes nothing returns boolean
	if ( not ( GetIssuedOrderIdBJ() == String2OrderIdBJ("blackarrowon") ) ) then
		return false
	endif
	if ( not ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_STRUCTURE) == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Autocast_Black_Arrow_ON_Actions takes nothing returns nothing
	set udg_Unit=LoadUnitHandleBJ(GetHandleIdBJ(GetTriggerUnit()), 0, udg_HeroTable)
	call IssueImmediateOrderBJ(udg_Unit, "blackarrowon")
endfunction


//****************************************************************************
function InitTrig_Autocast_Black_Arrow_ON takes nothing returns nothing
	set gg_trg_Autocast_Black_Arrow_ON=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Autocast_Black_Arrow_ON, EVENT_PLAYER_UNIT_ISSUED_ORDER)
	call TriggerAddCondition(gg_trg_Autocast_Black_Arrow_ON, Condition(function Trig_Autocast_Black_Arrow_ON_Conditions))
	call TriggerAddAction(gg_trg_Autocast_Black_Arrow_ON, function Trig_Autocast_Black_Arrow_ON_Actions)
endfunction

//*  Trigger Autocast_Black_Arrow_OFF
//****************************************************************************
function Trig_Autocast_Black_Arrow_OFF_Conditions takes nothing returns boolean
	if ( not ( GetIssuedOrderIdBJ() == String2OrderIdBJ("blackarrowoff") ) ) then
		return false
	endif
	if ( not ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_STRUCTURE) == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Autocast_Black_Arrow_OFF_Actions takes nothing returns nothing
	set udg_Unit=LoadUnitHandleBJ(GetHandleIdBJ(GetTriggerUnit()), 0, udg_HeroTable)
	call IssueImmediateOrderBJ(udg_Unit, "blackarrowoff")
endfunction


//****************************************************************************
function InitTrig_Autocast_Black_Arrow_OFF takes nothing returns nothing
	set gg_trg_Autocast_Black_Arrow_OFF=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Autocast_Black_Arrow_OFF, EVENT_PLAYER_UNIT_ISSUED_ORDER)
	call TriggerAddCondition(gg_trg_Autocast_Black_Arrow_OFF, Condition(function Trig_Autocast_Black_Arrow_OFF_Conditions))
	call TriggerAddAction(gg_trg_Autocast_Black_Arrow_OFF, function Trig_Autocast_Black_Arrow_OFF_Actions)
endfunction

//*  Trigger Life_Drain
//****************************************************************************
function BoolExpr_166 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_167 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and GetUnitLifePercent(GetFilterUnit()) >= 75.00 ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Life_Drain_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_DarkRangers) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_DarkRangers)
	if ( s__udg_activeLifeDrain[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'ANdr') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('ANdr', GetUnitAbilityLevelSwapped('ANdr', udg_Unit))) and GetUnitLifePercent(udg_Unit) <= 90.00 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("drain") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_166))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(udg_Unit, "drain", udg_Unit2)
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_167))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	call IssueTargetOrderBJ(udg_Unit, "drain", udg_Unit2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Life_Drain takes nothing returns nothing
	set gg_trg_Life_Drain=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Life_Drain, 1.00)
	call TriggerAddAction(gg_trg_Life_Drain, function Trig_Life_Drain_Actions)
endfunction

//*  Trigger Charm
//****************************************************************************
function BoolExpr_168 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and GetUnitLevel(GetFilterUnit()) >= 4 ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_169 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and GetUnitLifePercent(GetFilterUnit()) >= 75.00 ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Charm_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_DarkRangers) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_DarkRangers)
	if ( s__udg_activeCharm[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'ANch') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('ANch', GetUnitAbilityLevelSwapped('ANch', udg_Unit))) and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("drain") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(700.00, udg_Point, Condition(function BoolExpr_168))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	call IssueTargetOrderBJ(udg_Unit, "charm", udg_Unit2)
	else
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(700.00, udg_Point, Condition(function BoolExpr_169))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup3)
	call IssueTargetOrderBJ(udg_Unit, "charm", udg_Unit2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Charm takes nothing returns nothing
	set gg_trg_Charm=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Charm, 1.50)
	call TriggerAddAction(gg_trg_Charm, function Trig_Charm_Actions)
endfunction

//*  Trigger Soul_Burn
//****************************************************************************
function BoolExpr_170 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_171 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Soul_Burn_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Firelords) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Firelords)
	if ( s__udg_activeSoulBurn[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'ANso') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('ANso', GetUnitAbilityLevelSwapped('ANso', udg_Unit))) and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("volcano") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(750.00, udg_Point, Condition(function BoolExpr_170))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	call IssueTargetOrderBJ(udg_Unit, "soulburn", udg_Unit2)
	else
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(700.00, udg_Point, Condition(function BoolExpr_171))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup3)
	call IssueTargetOrderBJ(udg_Unit, "soulburn", udg_Unit2)
	else
	endif

	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Soul_Burn takes nothing returns nothing
	set gg_trg_Soul_Burn=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Soul_Burn, 1.50)
	call TriggerAddAction(gg_trg_Soul_Burn, function Trig_Soul_Burn_Actions)
endfunction

//*  Trigger Lava_Spawn
//****************************************************************************
function Trig_Lava_Spawn_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetAttacker()) == 'Nfir' ) ) then
		return false
	endif
	if ( not ( s__udg_activeLavaSpawn[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	if ( not ( GetUnitCurrentOrder(GetAttacker()) != String2OrderIdBJ("volcano") ) ) then
		return false
	endif
	return true
endfunction

function Trig_Lava_Spawn_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "lavamonster")
endfunction


//****************************************************************************
function InitTrig_Lava_Spawn takes nothing returns nothing
	set gg_trg_Lava_Spawn=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Lava_Spawn, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Lava_Spawn, Condition(function Trig_Lava_Spawn_Conditions))
	call TriggerAddAction(gg_trg_Lava_Spawn, function Trig_Lava_Spawn_Actions)
endfunction

//*  Trigger Volcano
//****************************************************************************
function BoolExpr_172 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_173 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Volcano_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Firelords) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_Firelords)
	set udg_Point=GetUnitLoc(udg_Unit)
	if ( s__udg_activeVolcano[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'ANvc') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('ANvc', GetUnitAbilityLevelSwapped('ANvc', udg_Unit))) ) then
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_172))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(500.00, udg_Point2, Condition(function BoolExpr_173))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 5 ) then
	call IssuePointOrderLocBJ(udg_Unit, "volcano", udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Volcano takes nothing returns nothing
	set gg_trg_Volcano=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Volcano, 2.20)
	call TriggerAddAction(gg_trg_Volcano, function Trig_Volcano_Actions)
endfunction

//*  Trigger Volcano_Point_Check
//****************************************************************************
function BoolExpr_175 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetEnumUnit())) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Volcano_Point_Check_173 takes nothing returns nothing
	if ( s__udg_VolcanoActive[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == true ) then
	set udg_Point=GetUnitLoc(GetEnumUnit())
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(300.00, s__udg_VolcanoPoint[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))], Condition(function BoolExpr_175))
	if ( CountUnitsInGroup(udg_UnitGroup2) == 0 ) then
	call IssueImmediateOrderBJ(GetEnumUnit(), "stop")
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	call RemoveLocation(udg_Point)
	else
	endif


endfunction

function Trig_Volcano_Point_Check_Actions takes nothing returns nothing
	call ForGroup(udg_Firelords, function Trig_Volcano_Point_Check_173)

endfunction


//****************************************************************************
function InitTrig_Volcano_Point_Check takes nothing returns nothing
	set gg_trg_Volcano_Point_Check=CreateTrigger()
call TriggerRegisterTimerEventSingle(gg_trg_Volcano_Point_Check, 2.00)
	call TriggerAddAction(gg_trg_Volcano_Point_Check, function Trig_Volcano_Point_Check_Actions)
endfunction

//*  Trigger Rain_of_Fire
//****************************************************************************
function BoolExpr_176 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_177 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Rain_of_Fire_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_PitLords) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_PitLords)
	if ( s__udg_activeRainOfFire[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'ANrf') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('ANrf', GetUnitAbilityLevelSwapped('ANrf', udg_Unit))) and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("rainoffire") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_176))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(200.00, udg_Point2, Condition(function BoolExpr_177))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 2 ) then
	call IssuePointOrderLocBJ(udg_Unit, "rainoffire", udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Rain_of_Fire takes nothing returns nothing
	set gg_trg_Rain_of_Fire=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Rain_of_Fire, 1.00)
	call TriggerAddAction(gg_trg_Rain_of_Fire, function Trig_Rain_of_Fire_Actions)
endfunction

//*  Trigger Howl_of_Terror
//****************************************************************************
function BoolExpr_178 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetAttacker())) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Howl_of_Terror_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetAttacker()) == 'Nplh' ) ) then
		return false
	endif
	if ( not ( s__udg_activeHowlOfTerror[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Howl_of_Terror_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetAttacker())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(300.00, GetUnitLoc(GetAttacker()), Condition(function BoolExpr_178))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	call IssueImmediateOrderBJ(GetAttacker(), "howlofterror")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Howl_of_Terror takes nothing returns nothing
	set gg_trg_Howl_of_Terror=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Howl_of_Terror, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Howl_of_Terror, Condition(function Trig_Howl_of_Terror_Conditions))
	call TriggerAddAction(gg_trg_Howl_of_Terror, function Trig_Howl_of_Terror_Actions)
endfunction

//*  Trigger Doom
//****************************************************************************
function BoolExpr_179 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Doom_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_PitLords) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_PitLords)
	if ( s__udg_activeDoom[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'ANdo') <= 0.00 and GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) >= I2R(BlzGetAbilityManaCost('ANdo', GetUnitAbilityLevelSwapped('ANdo', udg_Unit))) ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(650.00, udg_Point, Condition(function BoolExpr_179))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	call IssueTargetOrderBJ(udg_Unit, "doom", udg_Unit2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Doom takes nothing returns nothing
	set gg_trg_Doom=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Doom, 1.50)
	call TriggerAddAction(gg_trg_Doom, function Trig_Doom_Actions)
endfunction

//*  Trigger Weaken_Cast
//****************************************************************************
function Trig_Weaken_Cast_Actions takes nothing returns nothing
	
	call GroupAddUnitSimple(GetSpellTargetUnit(), udg_WeakenGroup)
endfunction


//****************************************************************************
function InitTrig_Weaken_Cast takes nothing returns nothing
	set gg_trg_Weaken_Cast=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Weaken_Cast, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Weaken_Cast, function Trig_Weaken_Cast_Actions)
endfunction

//*  Trigger Weaken_Check
//****************************************************************************
function Trig_Weaken_Check_179 takes nothing returns nothing
	if ( ( true ) ) then
	call GroupRemoveUnitSimple(GetEnumUnit(), udg_WeakenGroup)
	else
	endif


endfunction

function Trig_Weaken_Check_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_WeakenGroup) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Weaken_Check_Actions takes nothing returns nothing
	call ForGroup(udg_WeakenGroup, function Trig_Weaken_Check_179)

endfunction


//****************************************************************************
function InitTrig_Weaken_Check takes nothing returns nothing
	set gg_trg_Weaken_Check=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Weaken_Check, 0.50)
	call TriggerAddCondition(gg_trg_Weaken_Check, Condition(function Trig_Weaken_Check_Conditions))
	call TriggerAddAction(gg_trg_Weaken_Check, function Trig_Weaken_Check_Actions)
endfunction

//*  Trigger Living_Bomb
//****************************************************************************
function Trig_Living_Bomb_Actions takes nothing returns nothing
	call GroupAddUnitSimple(GetSpellTargetUnit(), udg_LivingBombGroup)
endfunction


//****************************************************************************
function InitTrig_Living_Bomb takes nothing returns nothing
	set gg_trg_Living_Bomb=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Living_Bomb, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Living_Bomb, function Trig_Living_Bomb_Actions)
endfunction

//*  Trigger Living_Bomb_Effect
//****************************************************************************
function Trig_Living_Bomb_Effect_180 takes nothing returns nothing
	if ( ( true ) ) then
	call UnitDamageTargetBJ(GetEnumUnit(), GetEnumUnit(), 3.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)
	else
	call RemoveUnit(GetEnumUnit())
	endif


endfunction

function Trig_Living_Bomb_Effect_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_LivingBombGroup) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Living_Bomb_Effect_Actions takes nothing returns nothing
	call ForGroup(udg_LivingBombGroup, function Trig_Living_Bomb_Effect_180)

endfunction


//****************************************************************************
function InitTrig_Living_Bomb_Effect takes nothing returns nothing
	set gg_trg_Living_Bomb_Effect=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Living_Bomb_Effect, 1.00)
	call TriggerAddCondition(gg_trg_Living_Bomb_Effect, Condition(function Trig_Living_Bomb_Effect_Conditions))
	call TriggerAddAction(gg_trg_Living_Bomb_Effect, function Trig_Living_Bomb_Effect_Actions)
endfunction

//*  Trigger Living_Bomb_Death
//****************************************************************************
function BoolExpr_182 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == false and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Living_Bomb_Death_182 takes nothing returns nothing
	call UnitDamageTargetBJ(GetTriggerUnit(), GetEnumUnit(), 40.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)

endfunction

function Trig_Living_Bomb_Death_Conditions takes nothing returns boolean
	if ( not ( IsUnitInGroup(GetTriggerUnit(), udg_LivingBombGroup) == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Living_Bomb_Death_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(200.00, udg_Point, Condition(function BoolExpr_182))
	call AddSpecialEffectLocBJ(udg_Point, "Objects\\Spawnmodels\\Human\\FragmentationShards\\FragBoomSpawn.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call ForGroup(udg_UnitGroup, function Trig_Living_Bomb_Death_182)

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Living_Bomb_Death takes nothing returns nothing
	set gg_trg_Living_Bomb_Death=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Living_Bomb_Death, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddCondition(gg_trg_Living_Bomb_Death, Condition(function Trig_Living_Bomb_Death_Conditions))
	call TriggerAddAction(gg_trg_Living_Bomb_Death, function Trig_Living_Bomb_Death_Actions)
endfunction

//*  Trigger Arcane_Arrow
//****************************************************************************
function Trig_Arcane_Arrow_Actions takes nothing returns nothing
	if ( ( true ) ) then
	set udg_Real=60.00
	else
	if ( ( true ) ) then
	set udg_Real=100.00
	else
	if ( ( true ) ) then
	set udg_Real=145.00
	else
	endif

	endif

	endif

	set udg_Unit=GetSpellTargetUnit()
	call SetUnitManaBJ(udg_Unit, ( GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) - udg_Real ))
endfunction


//****************************************************************************
function InitTrig_Arcane_Arrow takes nothing returns nothing
	set gg_trg_Arcane_Arrow=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Arcane_Arrow, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Arcane_Arrow, function Trig_Arcane_Arrow_Actions)
endfunction

//*  Trigger Turmoil_of_Magic
//****************************************************************************
function BoolExpr_184 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == false and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Turmoil_of_Magic_184 takes nothing returns nothing
	call SetUnitManaBJ(GetEnumUnit(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetEnumUnit()) + 100.00 ))
	call AddSpecialEffectTargetUnitBJ("chest", GetEnumUnit(), "Abilities\\Spells\\Items\\AIma\\AImaTarget.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())

endfunction

function Trig_Turmoil_of_Magic_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(1200.00, udg_Point, Condition(function BoolExpr_184))
	call ForGroup(udg_UnitGroup, function Trig_Turmoil_of_Magic_184)

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Turmoil_of_Magic takes nothing returns nothing
	set gg_trg_Turmoil_of_Magic=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Turmoil_of_Magic, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Turmoil_of_Magic, function Trig_Turmoil_of_Magic_Actions)
endfunction

//*  Trigger Implode
//****************************************************************************
function Trig_Implode_Actions takes nothing returns nothing
	set udg_Point=GetSpellTargetLoc()
	if ( ( true ) ) then
	call UnitApplyTimedLifeBJ(2.00, 'BTLF', GetLastCreatedUnit())
	else
	if ( ( true ) ) then
	call UnitApplyTimedLifeBJ(2.00, 'BTLF', GetLastCreatedUnit())
	else
	if ( ( true ) ) then
	call UnitApplyTimedLifeBJ(2.00, 'BTLF', GetLastCreatedUnit())
	else
	endif

	endif

	endif

	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Implode takes nothing returns nothing
	set gg_trg_Implode=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Implode, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Implode, function Trig_Implode_Actions)
endfunction

//*  Trigger Implode_Dummy_Level_1
//****************************************************************************
function BoolExpr_186 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Implode_Dummy_Level_1_186 takes nothing returns nothing
	call UnitDamageTargetBJ(GetTriggerUnit(), GetEnumUnit(), 80.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)

endfunction

function Trig_Implode_Dummy_Level_1_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call AddSpecialEffectLocBJ(udg_Point, "Dalaran/FreezingRing.mdx")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(250.00, udg_Point, Condition(function BoolExpr_186))
	call ForGroup(udg_UnitGroup, function Trig_Implode_Dummy_Level_1_186)

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Implode_Dummy_Level_1 takes nothing returns nothing
	set gg_trg_Implode_Dummy_Level_1=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Implode_Dummy_Level_1, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddAction(gg_trg_Implode_Dummy_Level_1, function Trig_Implode_Dummy_Level_1_Actions)
endfunction

//*  Trigger Implode_Dummy_Level_2
//****************************************************************************
function BoolExpr_188 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Implode_Dummy_Level_2_188 takes nothing returns nothing
	call UnitDamageTargetBJ(GetTriggerUnit(), GetEnumUnit(), 160.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)

endfunction

function Trig_Implode_Dummy_Level_2_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call AddSpecialEffectLocBJ(udg_Point, "Dalaran/FreezingRing.mdx")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(250.00, udg_Point, Condition(function BoolExpr_188))
	call ForGroup(udg_UnitGroup, function Trig_Implode_Dummy_Level_2_188)

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Implode_Dummy_Level_2 takes nothing returns nothing
	set gg_trg_Implode_Dummy_Level_2=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Implode_Dummy_Level_2, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddAction(gg_trg_Implode_Dummy_Level_2, function Trig_Implode_Dummy_Level_2_Actions)
endfunction

//*  Trigger Implode_Dummy_Level_3
//****************************************************************************
function BoolExpr_190 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Implode_Dummy_Level_3_190 takes nothing returns nothing
	call UnitDamageTargetBJ(GetTriggerUnit(), GetEnumUnit(), 240.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)

endfunction

function Trig_Implode_Dummy_Level_3_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call AddSpecialEffectLocBJ(udg_Point, "Dalaran/FreezingRing.mdx")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(250.00, udg_Point, Condition(function BoolExpr_190))
	call ForGroup(udg_UnitGroup, function Trig_Implode_Dummy_Level_3_190)

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Implode_Dummy_Level_3 takes nothing returns nothing
	set gg_trg_Implode_Dummy_Level_3=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Implode_Dummy_Level_3, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddAction(gg_trg_Implode_Dummy_Level_3, function Trig_Implode_Dummy_Level_3_Actions)
endfunction

//*  Trigger Anti_Energy
//****************************************************************************
function Trig_Anti_Energy_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetSpellTargetUnit())
	if ( ( true ) ) then
	call UnitApplyTimedLifeBJ(1.00, 'BTLF', GetLastCreatedUnit())
	call IssueTargetOrderBJ(GetLastCreatedUnit(), "cripple", GetSpellTargetUnit())
	else
	if ( ( true ) ) then
	call UnitApplyTimedLifeBJ(1.00, 'BTLF', GetLastCreatedUnit())
	call IssueTargetOrderBJ(GetLastCreatedUnit(), "cripple", GetSpellTargetUnit())
	else
	if ( ( true ) ) then
	call UnitApplyTimedLifeBJ(1.00, 'BTLF', GetLastCreatedUnit())
	call IssueTargetOrderBJ(GetLastCreatedUnit(), "cripple", GetSpellTargetUnit())
	else
	endif

	endif

	endif

	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Anti_Energy takes nothing returns nothing
	set gg_trg_Anti_Energy=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Anti_Energy, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Anti_Energy, function Trig_Anti_Energy_Actions)
endfunction

//*  Trigger Anti_Energy_Effect
//****************************************************************************
function Trig_Anti_Energy_Effect_Conditions takes nothing returns boolean
	if ( not ( ( true ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Anti_Energy_Effect_Actions takes nothing returns nothing
	if ( ( true ) ) then
	call SetUnitLifeBJ(GetAttacker(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetAttacker()) - 6.00 ))
	call SetUnitManaBJ(GetAttacker(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetAttacker()) - 6.00 ))
	else
	if ( ( true ) ) then
	call SetUnitLifeBJ(GetAttacker(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetAttacker()) - 9.00 ))
	call SetUnitManaBJ(GetAttacker(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetAttacker()) - 9.00 ))
	else
	if ( ( true ) ) then
	call SetUnitLifeBJ(GetAttacker(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetAttacker()) - 12.00 ))
	call SetUnitManaBJ(GetAttacker(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetAttacker()) - 12.00 ))
	else
	endif

	endif

	endif

endfunction


//****************************************************************************
function InitTrig_Anti_Energy_Effect takes nothing returns nothing
	set gg_trg_Anti_Energy_Effect=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Anti_Energy_Effect, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Anti_Energy_Effect, Condition(function Trig_Anti_Energy_Effect_Conditions))
	call TriggerAddAction(gg_trg_Anti_Energy_Effect, function Trig_Anti_Energy_Effect_Actions)
endfunction

//*  Trigger Overpower
//****************************************************************************
function Trig_Overpower_Actions takes nothing returns nothing
	if ( ( true ) ) then
	else
	if ( ( true ) ) then
	else
	if ( ( true ) ) then
	else
	endif

	endif

	endif

endfunction


//****************************************************************************
function InitTrig_Overpower takes nothing returns nothing
	set gg_trg_Overpower=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Overpower, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Overpower, function Trig_Overpower_Actions)
endfunction

//*  Trigger Overpower_OFF
//****************************************************************************
function Trig_Overpower_OFF_191 takes nothing returns nothing
	if ( ( true ) ) then
	else
	if ( ( true ) ) then
	else
	if ( ( true ) ) then
	else
	endif

	endif

	endif


endfunction

function Trig_Overpower_OFF_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Thaumaturges) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Overpower_OFF_Actions takes nothing returns nothing
	call ForGroup(udg_Thaumaturges, function Trig_Overpower_OFF_191)

endfunction


//****************************************************************************
function InitTrig_Overpower_OFF takes nothing returns nothing
	set gg_trg_Overpower_OFF=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Overpower_OFF, 1.00)
	call TriggerAddCondition(gg_trg_Overpower_OFF, Condition(function Trig_Overpower_OFF_Conditions))
	call TriggerAddAction(gg_trg_Overpower_OFF, function Trig_Overpower_OFF_Actions)
endfunction

//*  Trigger Epicenter
//****************************************************************************
function BoolExpr_193 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true and GetUnitStateSwap(UNIT_STATE_MANA, GetFilterUnit()) >= 0.00 ) ) then
		return true
	endif
	return false
endfunction

function Trig_Epicenter_193 takes nothing returns nothing
	call SetUnitManaBJ(GetEnumUnit(), 0)

endfunction

function Trig_Epicenter_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call AddSpecialEffectLocBJ(udg_Point, "Dalaran/FreezingRing.mdx")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 3.00)
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	
	set udg_EpicenterUnit=GetLastCreatedUnit()
	call SetUnitPathing(udg_EpicenterUnit, false)
	call UnitApplyTimedLifeBJ(1.00, 'BTLF', udg_EpicenterUnit)
	call IssueTargetOrderBJ(udg_EpicenterUnit, "bloodlust", GetSpellAbilityUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(725.00, udg_Point, Condition(function BoolExpr_193))
	call ForGroup(udg_UnitGroup, function Trig_Epicenter_193)

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Epicenter takes nothing returns nothing
	set gg_trg_Epicenter=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Epicenter, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Epicenter, function Trig_Epicenter_Actions)
endfunction

//*  Trigger Epicenter_Bonus
//****************************************************************************
function Trig_Epicenter_Bonus_Conditions takes nothing returns boolean
	if ( not ( GetUnitManaPercent(GetAttackedUnitBJ()) <= 10.00 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Epicenter_Bonus_Actions takes nothing returns nothing
	call UnitDamageTargetBJ(GetAttacker(), GetAttackedUnitBJ(), 100.00, ATTACK_TYPE_HERO, DAMAGE_TYPE_NORMAL)
	call AddSpecialEffectTargetUnitBJ("origin", GetAttackedUnitBJ(), "Abilities\\Spells\\Human\\ManaFlare\\ManaFlareBoltImpact.mdl")
endfunction


//****************************************************************************
function InitTrig_Epicenter_Bonus takes nothing returns nothing
	set gg_trg_Epicenter_Bonus=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Epicenter_Bonus, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Epicenter_Bonus, Condition(function Trig_Epicenter_Bonus_Conditions))
	call TriggerAddAction(gg_trg_Epicenter_Bonus, function Trig_Epicenter_Bonus_Actions)
endfunction

//*  Trigger Unit_Casts_Dalaran_Rune
//****************************************************************************
function Trig_Unit_Casts_Dalaran_Rune_Conditions takes nothing returns boolean
	if ( not ( GetUnitStateSwap(UNIT_STATE_MAX_MANA, GetSpellTargetUnit()) > 0.00 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Unit_Casts_Dalaran_Rune_Actions takes nothing returns nothing
	
	call GroupAddUnitSimple(GetSpellTargetUnit(), udg_DalaranRuneGroup)
endfunction


//****************************************************************************
function InitTrig_Unit_Casts_Dalaran_Rune takes nothing returns nothing
	set gg_trg_Unit_Casts_Dalaran_Rune=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Unit_Casts_Dalaran_Rune, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Unit_Casts_Dalaran_Rune, Condition(function Trig_Unit_Casts_Dalaran_Rune_Conditions))
	call TriggerAddAction(gg_trg_Unit_Casts_Dalaran_Rune, function Trig_Unit_Casts_Dalaran_Rune_Actions)
endfunction

//*  Trigger Dalaran_Rune_Group_Check
//****************************************************************************
function Trig_Dalaran_Rune_Group_Check_194 takes nothing returns nothing
	if ( ( true ) ) then
	call GroupRemoveUnitSimple(GetEnumUnit(), udg_DalaranRuneGroup)
	else
	endif


endfunction

function Trig_Dalaran_Rune_Group_Check_Actions takes nothing returns nothing
	call ForGroup(udg_DalaranRuneGroup, function Trig_Dalaran_Rune_Group_Check_194)

endfunction


//****************************************************************************
function InitTrig_Dalaran_Rune_Group_Check takes nothing returns nothing
	set gg_trg_Dalaran_Rune_Group_Check=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Dalaran_Rune_Group_Check, 1.00)
	call TriggerAddAction(gg_trg_Dalaran_Rune_Group_Check, function Trig_Dalaran_Rune_Group_Check_Actions)
endfunction

//*  Trigger Wisdom_Embrace_Effect
//****************************************************************************
function Trig_Wisdom_Embrace_Effect_Actions takes nothing returns nothing
	if ( ( true ) ) then
	call SetUnitLifeBJ(GetSpellTargetUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetSpellTargetUnit()) + 150.00 ))
	else
	endif

	if ( ( true ) ) then
	call SetUnitLifeBJ(GetTriggerUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetTriggerUnit()) + 150.00 ))
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Wisdom_Embrace_Effect takes nothing returns nothing
	set gg_trg_Wisdom_Embrace_Effect=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Wisdom_Embrace_Effect, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Wisdom_Embrace_Effect, function Trig_Wisdom_Embrace_Effect_Actions)
endfunction

//*  Trigger Fusion
//****************************************************************************
function BoolExpr_196 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == false and ( GetUnitStateSwap(UNIT_STATE_MAX_MANA, GetFilterUnit()) > 0.00 and ( GetUnitTypeId(GetFilterUnit()) != 'e00X' and IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false ) ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Fusion_196 takes nothing returns nothing
	call SetUnitManaBJ(GetEnumUnit(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetEnumUnit()) + 100.00 ))
	call AddSpecialEffectTargetUnitBJ("chest", GetEnumUnit(), "Abilities\\Spells\\Items\\AIma\\AImaTarget.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())

endfunction

function Trig_Fusion_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(550.00, udg_Point, Condition(function BoolExpr_196))
	set udg_UnitGroup2=GetRandomSubGroup(4, udg_UnitGroup)
	call ForGroup(udg_UnitGroup2, function Trig_Fusion_196)

	call DestroyGroup(udg_UnitGroup)
	call DestroyGroup(udg_UnitGroup2)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Fusion takes nothing returns nothing
	set gg_trg_Fusion=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Fusion, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Fusion, function Trig_Fusion_Actions)
endfunction

//*  Trigger Arcane_Field
//****************************************************************************
function Trig_Arcane_Field_Actions takes nothing returns nothing
	set udg_Point=GetSpellTargetLoc()
	
	set udg_ArcaneField=GetLastCreatedUnit()
	call SetUnitPathing(udg_ArcaneField, false)
	call UnitApplyTimedLifeBJ(15.00, 'BTLF', udg_ArcaneField)
	call IssuePointOrderLocBJ(udg_ArcaneField, "cloudoffog", udg_Point)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Arcane_Field takes nothing returns nothing
	set gg_trg_Arcane_Field=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Arcane_Field, EVENT_PLAYER_UNIT_SPELL_CAST)
	call TriggerAddAction(gg_trg_Arcane_Field, function Trig_Arcane_Field_Actions)
endfunction

//*  Trigger Frost_Nova_Dalaran
//****************************************************************************
function Trig_Frost_Nova_Dalaran_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetSpellTargetUnit())
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Spells\\Undead\\FrostNova\\FrostNovaTarget.mdl")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 0.60)
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Frost_Nova_Dalaran takes nothing returns nothing
	set gg_trg_Frost_Nova_Dalaran=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Frost_Nova_Dalaran, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Frost_Nova_Dalaran, function Trig_Frost_Nova_Dalaran_Actions)
endfunction

//*  Trigger Mass_Frost_Armor
//****************************************************************************
function BoolExpr_198 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == false and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Mass_Frost_Armor_198 takes nothing returns nothing
	set udg_Point2=GetUnitLoc(GetEnumUnit())
	
	
	call UnitApplyTimedLifeBJ(1.00, 'BTLF', GetLastCreatedUnit())
	call IssueTargetOrderBJ(GetLastCreatedUnit(), "frostarmor", GetEnumUnit())
	call RemoveLocation(udg_Point2)

endfunction

function Trig_Mass_Frost_Armor_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetSpellTargetUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(300.00, udg_Point, Condition(function BoolExpr_198))
	call ForGroup(udg_UnitGroup, function Trig_Mass_Frost_Armor_198)

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Mass_Frost_Armor takes nothing returns nothing
	set gg_trg_Mass_Frost_Armor=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Mass_Frost_Armor, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Mass_Frost_Armor, function Trig_Mass_Frost_Armor_Actions)
endfunction

//*  Trigger Permafrost
//****************************************************************************
function BoolExpr_200 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Permafrost_200 takes nothing returns nothing
	call UnitDamageTargetBJ(GetTriggerUnit(), GetEnumUnit(), 100.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)

endfunction

function Trig_Permafrost_Actions takes nothing returns nothing
	set s__udg_PointPermafrost[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= GetSpellTargetLoc()
	
	call UnitApplyTimedLifeBJ(12.00, 'BTLF', GetLastCreatedUnit())
	call AddSpecialEffectLocBJ(s__udg_PointPermafrost[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))], "frostnovaNoIcemdx.mdx")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 1.60)
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(300.00, s__udg_PointPermafrost[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))], Condition(function BoolExpr_200))
	call ForGroup(udg_UnitGroup, function Trig_Permafrost_200)

	call DestroyGroup(udg_UnitGroup)
	set bj_forLoopAIndex=1
set bj_forLoopAIndexEnd=10
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	set udg_Point=PolarProjectionBJ(s__udg_PointPermafrost[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))], 100.00, ( 36.00 * I2R(GetForLoopIndexA()) ))
	if ( GetTerrainTypeBJ(udg_Point) != 'Ztil' ) then
	call SetTerrainTypeBJ(udg_Point, 'Iice', - 1, 1, 0)
	else
	endif

	call RemoveLocation(udg_Point)
	set udg_Point=PolarProjectionBJ(s__udg_PointPermafrost[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))], 200.00, ( 36.00 * I2R(GetForLoopIndexA()) ))
	if ( GetTerrainTypeBJ(udg_Point) != 'Ztil' ) then
	call SetTerrainTypeBJ(udg_Point, 'Iice', - 1, 1, 0)
	else
	endif

	call RemoveLocation(udg_Point)
	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
endfunction


//****************************************************************************
function InitTrig_Permafrost takes nothing returns nothing
	set gg_trg_Permafrost=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Permafrost, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Permafrost, function Trig_Permafrost_Actions)
endfunction

//*  Trigger Permafrost_OFF
//****************************************************************************
function Trig_Permafrost_OFF_Actions takes nothing returns nothing
	set bj_forLoopAIndex=1
set bj_forLoopAIndexEnd=10
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	set udg_Point=PolarProjectionBJ(s__udg_PointPermafrost[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))], 100.00, ( 36.00 * I2R(GetForLoopIndexA()) ))
	if ( GetTerrainTypeBJ(udg_Point) != 'Ztil' ) then
	call SetTerrainTypeBJ(udg_Point, 'Zdrt', - 1, 1, 0)
	else
	endif

	call RemoveLocation(udg_Point)
	set udg_Point=PolarProjectionBJ(s__udg_PointPermafrost[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))], 200.00, ( 36.00 * I2R(GetForLoopIndexA()) ))
	if ( GetTerrainTypeBJ(udg_Point) != 'Ztil' ) then
	call SetTerrainTypeBJ(udg_Point, 'Zdrt', - 1, 1, 0)
	else
	endif

	call RemoveLocation(udg_Point)
	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
	call RemoveLocation(s__udg_PointPermafrost[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))])
endfunction


//****************************************************************************
function InitTrig_Permafrost_OFF takes nothing returns nothing
	set gg_trg_Permafrost_OFF=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Permafrost_OFF, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddAction(gg_trg_Permafrost_OFF, function Trig_Permafrost_OFF_Actions)
endfunction

//*  Trigger Earth_Elemental_Rank_3_Dies
//****************************************************************************
function Trig_Earth_Elemental_Rank_3_Dies_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	
	
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Earth_Elemental_Rank_3_Dies takes nothing returns nothing
	set gg_trg_Earth_Elemental_Rank_3_Dies=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Earth_Elemental_Rank_3_Dies, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddAction(gg_trg_Earth_Elemental_Rank_3_Dies, function Trig_Earth_Elemental_Rank_3_Dies_Actions)
endfunction

//*  Trigger Fire_Elemental_Dies
//****************************************************************************
function BoolExpr_202 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Fire_Elemental_Dies_202 takes nothing returns nothing
	call UnitDamageTargetBJ(GetTriggerUnit(), GetEnumUnit(), 125.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)

endfunction

function Trig_Fire_Elemental_Dies_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(300.00, udg_Point, Condition(function BoolExpr_202))
	call ForGroup(udg_UnitGroup, function Trig_Fire_Elemental_Dies_202)

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Fire_Elemental_Dies takes nothing returns nothing
	set gg_trg_Fire_Elemental_Dies=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Fire_Elemental_Dies, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddAction(gg_trg_Fire_Elemental_Dies, function Trig_Fire_Elemental_Dies_Actions)
endfunction

//*  Trigger AI_Blink_High_Wizard
//****************************************************************************
function Trig_AI_Blink_High_Wizard_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeBlinkHighWizard[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	if ( not ( GetUnitLifePercent(GetTriggerUnit()) <= 30.00 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Blink_High_Wizard_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetAttacker())
	set udg_Point2=GetUnitLoc(GetTriggerUnit())
	set udg_Point3=PolarProjectionBJ(udg_Point, 1000.00, AngleBetweenPoints(udg_Point, udg_Point2))
	call IssuePointOrderLocBJ(GetTriggerUnit(), "blink", udg_Point3)
	call RemoveLocation(udg_Point)
	call RemoveLocation(udg_Point2)
	call RemoveLocation(udg_Point3)
endfunction


//****************************************************************************
function InitTrig_AI_Blink_High_Wizard takes nothing returns nothing
	set gg_trg_AI_Blink_High_Wizard=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Blink_High_Wizard, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Blink_High_Wizard, Condition(function Trig_AI_Blink_High_Wizard_Conditions))
	call TriggerAddAction(gg_trg_AI_Blink_High_Wizard, function Trig_AI_Blink_High_Wizard_Actions)
endfunction

//*  Trigger AI_Unstable_Portal
//****************************************************************************
function Trig_AI_Unstable_Portal_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeUnstablePortal[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Unstable_Portal_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "waterelemental")
endfunction


//****************************************************************************
function InitTrig_AI_Unstable_Portal takes nothing returns nothing
	set gg_trg_AI_Unstable_Portal=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Unstable_Portal, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Unstable_Portal, Condition(function Trig_AI_Unstable_Portal_Conditions))
	call TriggerAddAction(gg_trg_AI_Unstable_Portal, function Trig_AI_Unstable_Portal_Actions)
endfunction

//*  Trigger AI_Mana_Ward
//****************************************************************************
function Trig_AI_Mana_Ward_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeManaWard[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Mana_Ward_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetAttacker())
	call IssuePointOrderLocBJ(GetAttacker(), "healingward", udg_Point)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_AI_Mana_Ward takes nothing returns nothing
	set gg_trg_AI_Mana_Ward=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Mana_Ward, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Mana_Ward, Condition(function Trig_AI_Mana_Ward_Conditions))
	call TriggerAddAction(gg_trg_AI_Mana_Ward, function Trig_AI_Mana_Ward_Actions)
endfunction

//*  Trigger AI_Disruption
//****************************************************************************
function Trig_AI_Disruption_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeDisruption[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Disruption_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "locustswarm")
endfunction


//****************************************************************************
function InitTrig_AI_Disruption takes nothing returns nothing
	set gg_trg_AI_Disruption=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Disruption, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Disruption, Condition(function Trig_AI_Disruption_Conditions))
	call TriggerAddAction(gg_trg_AI_Disruption, function Trig_AI_Disruption_Actions)
endfunction

//*  Trigger AI_Summon_Earth_Elemental
//****************************************************************************
function Trig_AI_Summon_Earth_Elemental_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeSummonEarthElemental[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Summon_Earth_Elemental_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "summongrizzly")
endfunction


//****************************************************************************
function InitTrig_AI_Summon_Earth_Elemental takes nothing returns nothing
	set gg_trg_AI_Summon_Earth_Elemental=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Summon_Earth_Elemental, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Summon_Earth_Elemental, Condition(function Trig_AI_Summon_Earth_Elemental_Conditions))
	call TriggerAddAction(gg_trg_AI_Summon_Earth_Elemental, function Trig_AI_Summon_Earth_Elemental_Actions)
endfunction

//*  Trigger Summon_Aether_and_Water_Elemental
//****************************************************************************
function BoolExpr_204 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_205 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Summon_Aether_and_Water_Elemental_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Elementalists) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Summon_Aether_and_Water_Elemental_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Elementalists)
	if ( s__udg_activeSummonAetherElemental[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(750.00, udg_Point, Condition(function BoolExpr_204))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	call IssueImmediateOrderBJ(udg_Unit, "summonwareagle")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	if ( s__udg_activeSummonWaterEleDALARAN[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(750.00, udg_Point, Condition(function BoolExpr_205))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	call IssueImmediateOrderBJ(udg_Unit, "waterelemental")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

	endif

endfunction


//****************************************************************************
function InitTrig_Summon_Aether_and_Water_Elemental takes nothing returns nothing
	set gg_trg_Summon_Aether_and_Water_Elemental=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Summon_Aether_and_Water_Elemental, 1.00)
	call TriggerAddCondition(gg_trg_Summon_Aether_and_Water_Elemental, Condition(function Trig_Summon_Aether_and_Water_Elemental_Conditions))
	call TriggerAddAction(gg_trg_Summon_Aether_and_Water_Elemental, function Trig_Summon_Aether_and_Water_Elemental_Actions)
endfunction

//*  Trigger AI_Summon_Fire_Elemental
//****************************************************************************
function Trig_AI_Summon_Fire_Elemental_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeSummonFireElemental[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Summon_Fire_Elemental_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "summonquillbeast")
endfunction


//****************************************************************************
function InitTrig_AI_Summon_Fire_Elemental takes nothing returns nothing
	set gg_trg_AI_Summon_Fire_Elemental=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Summon_Fire_Elemental, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Summon_Fire_Elemental, Condition(function Trig_AI_Summon_Fire_Elemental_Conditions))
	call TriggerAddAction(gg_trg_AI_Summon_Fire_Elemental, function Trig_AI_Summon_Fire_Elemental_Actions)
endfunction

//*  Trigger AI_AntiEnergy
//****************************************************************************
function BoolExpr_206 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_207 takes nothing returns boolean
	if ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true ) then
		return true
	endif
	return false
endfunction

function Trig_AI_AntiEnergy_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Thaumaturges) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_AntiEnergy_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Thaumaturges)
	if ( s__udg_activeAntiEnergy[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_206))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "firebolt", GroupPickRandomUnit(udg_UnitGroup2))
	else
	set udg_UnitGroup4=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_207))
	if ( GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("holybolt") and BlzGetUnitAbilityCooldownRemaining(udg_Unit, 'AHtb') <= 0.00 ) then
	call IssueTargetOrderBJ(udg_Unit, "firebolt", GroupPickRandomUnit(udg_UnitGroup4))
	else
	endif

	call DestroyGroup(udg_UnitGroup4)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_AntiEnergy takes nothing returns nothing
	set gg_trg_AI_AntiEnergy=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_AntiEnergy, 1.30)
	call TriggerAddCondition(gg_trg_AI_AntiEnergy, Condition(function Trig_AI_AntiEnergy_Conditions))
	call TriggerAddAction(gg_trg_AI_AntiEnergy, function Trig_AI_AntiEnergy_Actions)
endfunction

//*  Trigger AI_Overpower
//****************************************************************************
function Trig_AI_Overpower_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeOverpower[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	if ( not ( GetUnitCurrentOrder(GetAttacker()) != String2OrderIdBJ("berserk") ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Overpower_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "berserk")
endfunction


//****************************************************************************
function InitTrig_AI_Overpower takes nothing returns nothing
	set gg_trg_AI_Overpower=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Overpower, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Overpower, Condition(function Trig_AI_Overpower_Conditions))
	call TriggerAddAction(gg_trg_AI_Overpower, function Trig_AI_Overpower_Actions)
endfunction

//*  Trigger AI_Epicenter
//****************************************************************************
function BoolExpr_208 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetAttacker())) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and GetUnitStateSwap(UNIT_STATE_MANA, GetFilterUnit()) >= 25.00 ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Epicenter_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeEpicenter[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Epicenter_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(700.00, udg_Point, Condition(function BoolExpr_208))
	if ( CountUnitsInGroup(udg_UnitGroup) > 2 ) then
	call IssueImmediateOrderBJ(GetAttacker(), "channel")
	else
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_AI_Epicenter takes nothing returns nothing
	set gg_trg_AI_Epicenter=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Epicenter, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Epicenter, Condition(function Trig_AI_Epicenter_Conditions))
	call TriggerAddAction(gg_trg_AI_Epicenter, function Trig_AI_Epicenter_Actions)
endfunction

//*  Trigger AI_Frost_Bolt
//****************************************************************************
function BoolExpr_209 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_210 takes nothing returns boolean
	if ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Frost_Bolt_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Mages) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Frost_Bolt_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Mages)
	if ( s__udg_activeFrostBolt[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_209))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "thunderbolt", GroupPickRandomUnit(udg_UnitGroup2))
	else
	set udg_UnitGroup4=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_210))
	if ( GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("thunderbolt") ) then
	call IssueTargetOrderBJ(udg_Unit, "thunderbolt", GroupPickRandomUnit(udg_UnitGroup4))
	else
	endif

	call DestroyGroup(udg_UnitGroup4)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Frost_Bolt takes nothing returns nothing
	set gg_trg_AI_Frost_Bolt=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Frost_Bolt, 1.00)
	call TriggerAddCondition(gg_trg_AI_Frost_Bolt, Condition(function Trig_AI_Frost_Bolt_Conditions))
	call TriggerAddAction(gg_trg_AI_Frost_Bolt, function Trig_AI_Frost_Bolt_Actions)
endfunction

//*  Trigger AI_Mass_Frost_Armor
//****************************************************************************
function BoolExpr_211 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Mass_Frost_Armor_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Mages) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Mass_Frost_Armor_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Mages)
	if ( s__udg_activeMassFrostArmor[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(1000.00, udg_Point, Condition(function BoolExpr_211))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 and CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "frostarmor", GroupPickRandomUnit(udg_UnitGroup))
	else
	
	if ( CountUnitsInGroup(udg_UnitGroup3) > 0 and CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "frostarmor", GroupPickRandomUnit(udg_UnitGroup3))
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	endif

	call DestroyGroup(udg_UnitGroup2)
	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Mass_Frost_Armor takes nothing returns nothing
	set gg_trg_AI_Mass_Frost_Armor=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Mass_Frost_Armor, 1.00)
	call TriggerAddCondition(gg_trg_AI_Mass_Frost_Armor, Condition(function Trig_AI_Mass_Frost_Armor_Conditions))
	call TriggerAddAction(gg_trg_AI_Mass_Frost_Armor, function Trig_AI_Mass_Frost_Armor_Actions)
endfunction

//*  Trigger AI_Blink_Mage
//****************************************************************************
function Trig_AI_Blink_Mage_Conditions takes nothing returns boolean
	if ( not ( GetUnitLifePercent(GetTriggerUnit()) <= 30.00 ) ) then
		return false
	endif
	if ( not ( s__udg_activeBlinkMage[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Blink_Mage_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetAttacker())
	set udg_Point2=GetUnitLoc(GetTriggerUnit())
	set udg_Point3=PolarProjectionBJ(udg_Point2, 1000.00, AngleBetweenPoints(udg_Point, udg_Point2))
	call IssuePointOrderLocBJ(GetTriggerUnit(), "blink", udg_Point3)
	call RemoveLocation(udg_Point)
	call RemoveLocation(udg_Point2)
	call RemoveLocation(udg_Point3)
endfunction


//****************************************************************************
function InitTrig_AI_Blink_Mage takes nothing returns nothing
	set gg_trg_AI_Blink_Mage=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Blink_Mage, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Blink_Mage, Condition(function Trig_AI_Blink_Mage_Conditions))
	call TriggerAddAction(gg_trg_AI_Blink_Mage, function Trig_AI_Blink_Mage_Actions)
endfunction

//*  Trigger AI_Permafrost
//****************************************************************************
function BoolExpr_212 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_213 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Permafrost_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Mages) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Permafrost_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Mages)
	if ( s__udg_activePermafrost[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_212))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(300.00, udg_Point2, Condition(function BoolExpr_213))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 2 ) then
	call IssuePointOrderLocBJ(udg_Unit, "blizzard", udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Permafrost takes nothing returns nothing
	set gg_trg_AI_Permafrost=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Permafrost, 1.50)
	call TriggerAddCondition(gg_trg_AI_Permafrost, Condition(function Trig_AI_Permafrost_Conditions))
	call TriggerAddAction(gg_trg_AI_Permafrost, function Trig_AI_Permafrost_Actions)
endfunction

//*  Trigger Apprentice_Weaken
//****************************************************************************
function BoolExpr_214 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false and IsUnitAliveBJ(GetFilterUnit()) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Apprentice_Weaken_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Apprentices) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Apprentice_Weaken_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Apprentices)
	if ( s__udg_activeWeaken[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(700.00, udg_Point, Condition(function BoolExpr_214))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "curse", GroupPickRandomUnit(udg_UnitGroup))
	else
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Apprentice_Weaken takes nothing returns nothing
	set gg_trg_Apprentice_Weaken=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Apprentice_Weaken, 0.30)
	call TriggerAddCondition(gg_trg_Apprentice_Weaken, Condition(function Trig_Apprentice_Weaken_Conditions))
	call TriggerAddAction(gg_trg_Apprentice_Weaken, function Trig_Apprentice_Weaken_Actions)
endfunction

//*  Trigger Apprentice_Barrier
//****************************************************************************
function Trig_Apprentice_Barrier_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Apprentices) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Apprentice_Barrier_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Apprentices)
	if ( s__udg_activeBarrierDalaran[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "bloodlust", GroupPickRandomUnit(udg_UnitGroup))
	else
	
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "bloodlust", GroupPickRandomUnit(udg_UnitGroup2))
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Apprentice_Barrier takes nothing returns nothing
	set gg_trg_Apprentice_Barrier=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Apprentice_Barrier, 0.40)
	call TriggerAddCondition(gg_trg_Apprentice_Barrier, Condition(function Trig_Apprentice_Barrier_Conditions))
	call TriggerAddAction(gg_trg_Apprentice_Barrier, function Trig_Apprentice_Barrier_Actions)
endfunction

//*  Trigger Construct_Absorb_Mana
//****************************************************************************
function BoolExpr_215 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == false and GetUnitStateSwap(UNIT_STATE_MANA, GetFilterUnit()) >= 100.00 ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Construct_Absorb_Mana_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Constructs) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Construct_Absorb_Mana_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Constructs)
	if ( GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) < 100.00 and s__udg_activeAbsorbManaDalaran[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(550.00, udg_Point, Condition(function BoolExpr_215))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "absorb", GroupPickRandomUnit(udg_UnitGroup))
	else
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Construct_Absorb_Mana takes nothing returns nothing
	set gg_trg_Construct_Absorb_Mana=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Construct_Absorb_Mana, 0.80)
	call TriggerAddCondition(gg_trg_Construct_Absorb_Mana, Condition(function Trig_Construct_Absorb_Mana_Conditions))
	call TriggerAddAction(gg_trg_Construct_Absorb_Mana, function Trig_Construct_Absorb_Mana_Actions)
endfunction

//*  Trigger Construct_Fusion
//****************************************************************************
function BoolExpr_216 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and GetUnitManaPercent(GetFilterUnit()) <= 50.00 ) ) then
		return true
	endif
	return false
endfunction

function Trig_Construct_Fusion_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Constructs) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Construct_Fusion_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Constructs)
	if ( GetUnitStateSwap(UNIT_STATE_MANA, udg_Unit) > 100.00 and s__udg_activeFusion[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(550.00, udg_Point, Condition(function BoolExpr_216))
	if ( CountUnitsInGroup(udg_UnitGroup) > 1 ) then
	call IssueImmediateOrderBJ(udg_Unit, "channel")
	else
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Construct_Fusion takes nothing returns nothing
	set gg_trg_Construct_Fusion=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Construct_Fusion, 0.75)
	call TriggerAddCondition(gg_trg_Construct_Fusion, Condition(function Trig_Construct_Fusion_Conditions))
	call TriggerAddAction(gg_trg_Construct_Fusion, function Trig_Construct_Fusion_Actions)
endfunction

//*  Trigger Arcanist_Inversion
//****************************************************************************
function BoolExpr_217 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and GetUnitStateSwap(UNIT_STATE_MANA, GetFilterUnit()) >= 30.00 ) ) then
		return true
	endif
	return false
endfunction

function Trig_Arcanist_Inversion_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Arcanists) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Arcanist_Inversion_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Arcanists)
	if ( s__udg_activeInversion[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(700.00, udg_Point, Condition(function BoolExpr_217))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "manaburn", GroupPickRandomUnit(udg_UnitGroup))
	else
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Arcanist_Inversion takes nothing returns nothing
	set gg_trg_Arcanist_Inversion=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Arcanist_Inversion, 0.30)
	call TriggerAddCondition(gg_trg_Arcanist_Inversion, Condition(function Trig_Arcanist_Inversion_Conditions))
	call TriggerAddAction(gg_trg_Arcanist_Inversion, function Trig_Arcanist_Inversion_Actions)
endfunction

//*  Trigger Arcanist_Wisdom_Embrace
//****************************************************************************
function BoolExpr_218 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'h021' and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == false ) ) then
		return true
	endif
	return false
endfunction

function Trig_Arcanist_Wisdom_Embrace_Conditions takes nothing returns boolean
	if ( not ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_MECHANICAL) == false ) ) then
		return false
	endif
	return true
endfunction

function Trig_Arcanist_Wisdom_Embrace_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Arcanists) > 0 ) then
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_218))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup)
	if ( GetTriggerUnit() != udg_Unit and s__udg_activeWisdomEmbrace[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	call IssueTargetOrderBJ(udg_Unit, "rejuvination", GetTriggerUnit())
	else
	endif

	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Arcanist_Wisdom_Embrace takes nothing returns nothing
	set gg_trg_Arcanist_Wisdom_Embrace=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Arcanist_Wisdom_Embrace, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Arcanist_Wisdom_Embrace, Condition(function Trig_Arcanist_Wisdom_Embrace_Conditions))
	call TriggerAddAction(gg_trg_Arcanist_Wisdom_Embrace, function Trig_Arcanist_Wisdom_Embrace_Actions)
endfunction

//*  Trigger Arcanist_Sheep
//****************************************************************************
function BoolExpr_219 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and UnitHasBuffBJ(GetFilterUnit(), 'Bply') == false ) ) then
		return true
	endif
	return false
endfunction

function Trig_Arcanist_Sheep_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Arcanists) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Arcanist_Sheep_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Arcanists)
	if ( s__udg_activePolymorphDalaran[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(650.00, udg_Point, Condition(function BoolExpr_219))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "polymorph", GroupPickRandomUnit(udg_UnitGroup2))
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Arcanist_Sheep takes nothing returns nothing
	set gg_trg_Arcanist_Sheep=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Arcanist_Sheep, 0.50)
	call TriggerAddCondition(gg_trg_Arcanist_Sheep, Condition(function Trig_Arcanist_Sheep_Conditions))
	call TriggerAddAction(gg_trg_Arcanist_Sheep, function Trig_Arcanist_Sheep_Actions)
endfunction

//*  Trigger Pyromancer_Burn
//****************************************************************************
function Trig_Pyromancer_Burn_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Pyromancers) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Pyromancer_Burn_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Pyromancers)
	if ( s__udg_activeBurn[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("tornado") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "soulburn", GroupPickRandomUnit(udg_UnitGroup))
	else
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Pyromancer_Burn takes nothing returns nothing
	set gg_trg_Pyromancer_Burn=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Pyromancer_Burn, 0.50)
	call TriggerAddCondition(gg_trg_Pyromancer_Burn, Condition(function Trig_Pyromancer_Burn_Conditions))
	call TriggerAddAction(gg_trg_Pyromancer_Burn, function Trig_Pyromancer_Burn_Actions)
endfunction

//*  Trigger AI_Dalaran_Defend
//****************************************************************************
function Trig_AI_Dalaran_Defend_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeDefendDalaran[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Dalaran_Defend_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetTriggerUnit(), "defend")
endfunction


//****************************************************************************
function InitTrig_AI_Dalaran_Defend takes nothing returns nothing
	set gg_trg_AI_Dalaran_Defend=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Dalaran_Defend, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Dalaran_Defend, Condition(function Trig_AI_Dalaran_Defend_Conditions))
	call TriggerAddAction(gg_trg_AI_Dalaran_Defend, function Trig_AI_Dalaran_Defend_Actions)
endfunction

//*  Trigger AI_Protective_Field
//****************************************************************************
function Trig_AI_Protective_Field_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeProtectiveField[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Protective_Field_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call IssuePointOrderLocBJ(GetTriggerUnit(), "healingward", udg_Point)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_AI_Protective_Field takes nothing returns nothing
	set gg_trg_AI_Protective_Field=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Protective_Field, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Protective_Field, Condition(function Trig_AI_Protective_Field_Conditions))
	call TriggerAddAction(gg_trg_AI_Protective_Field, function Trig_AI_Protective_Field_Actions)
endfunction

//*  Trigger AI_Protective_Field_2
//****************************************************************************
function Trig_AI_Protective_Field_2_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeProtectiveField[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Protective_Field_2_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetAttacker())
	call IssuePointOrderLocBJ(GetAttacker(), "healingward", udg_Point)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_AI_Protective_Field_2 takes nothing returns nothing
	set gg_trg_AI_Protective_Field_2=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Protective_Field_2, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Protective_Field_2, Condition(function Trig_AI_Protective_Field_2_Conditions))
	call TriggerAddAction(gg_trg_AI_Protective_Field_2, function Trig_AI_Protective_Field_2_Actions)
endfunction

//*  Trigger Kirin_Tor_Operative_Frost_Nova
//****************************************************************************
function BoolExpr_220 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Kirin_Tor_Operative_Frost_Nova_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_KirinTorOperatives) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Kirin_Tor_Operative_Frost_Nova_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_KirinTorOperatives)
	set udg_Point=GetUnitLoc(udg_Unit)
	if ( s__udg_activeFrostPillar[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(750.00, udg_Point, Condition(function BoolExpr_220))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	call IssueTargetOrderBJ(udg_Unit, "frostnova", udg_Unit2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Kirin_Tor_Operative_Frost_Nova takes nothing returns nothing
	set gg_trg_Kirin_Tor_Operative_Frost_Nova=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Kirin_Tor_Operative_Frost_Nova, 0.90)
	call TriggerAddCondition(gg_trg_Kirin_Tor_Operative_Frost_Nova, Condition(function Trig_Kirin_Tor_Operative_Frost_Nova_Conditions))
	call TriggerAddAction(gg_trg_Kirin_Tor_Operative_Frost_Nova, function Trig_Kirin_Tor_Operative_Frost_Nova_Actions)
endfunction

//*  Trigger Kirin_Tor_Operative_Blink
//****************************************************************************
function Trig_Kirin_Tor_Operative_Blink_Conditions takes nothing returns boolean
	if ( not ( ( true ) ) ) then
		return false
	endif
	if ( not ( s__udg_activeBlinkDalaran[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) ) then
		return false
	endif
	if ( not ( GetUnitLifePercent(GetTriggerUnit()) <= 50.00 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Kirin_Tor_Operative_Blink_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetAttacker())
	set udg_Point2=GetUnitLoc(GetTriggerUnit())
	set udg_Point3=PolarProjectionBJ(udg_Point2, 1000.00, AngleBetweenPoints(udg_Point, udg_Point2))
	call IssuePointOrderLocBJ(GetTriggerUnit(), "blink", udg_Point3)
	call RemoveLocation(udg_Point)
	call RemoveLocation(udg_Point2)
	call RemoveLocation(udg_Point3)
endfunction


//****************************************************************************
function InitTrig_Kirin_Tor_Operative_Blink takes nothing returns nothing
	set gg_trg_Kirin_Tor_Operative_Blink=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Kirin_Tor_Operative_Blink, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Kirin_Tor_Operative_Blink, Condition(function Trig_Kirin_Tor_Operative_Blink_Conditions))
	call TriggerAddAction(gg_trg_Kirin_Tor_Operative_Blink, function Trig_Kirin_Tor_Operative_Blink_Actions)
endfunction

//*  Trigger Kirin_Tor_Curator_Arcane_Leash
//****************************************************************************
function Trig_Kirin_Tor_Curator_Arcane_Leash_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeArcaneLeash[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	if ( not ( GetUnitLifePercent(GetTriggerUnit()) <= 50.00 ) ) then
		return false
	endif
	if ( not ( GetUnitCurrentOrder(GetTriggerUnit()) != String2OrderIdBJ("magicleash") ) ) then
		return false
	endif
	return true
endfunction

function Trig_Kirin_Tor_Curator_Arcane_Leash_Actions takes nothing returns nothing
	call IssueTargetOrderBJ(GetTriggerUnit(), "magicleash", GetAttacker())
endfunction


//****************************************************************************
function InitTrig_Kirin_Tor_Curator_Arcane_Leash takes nothing returns nothing
	set gg_trg_Kirin_Tor_Curator_Arcane_Leash=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Kirin_Tor_Curator_Arcane_Leash, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Kirin_Tor_Curator_Arcane_Leash, Condition(function Trig_Kirin_Tor_Curator_Arcane_Leash_Conditions))
	call TriggerAddAction(gg_trg_Kirin_Tor_Curator_Arcane_Leash, function Trig_Kirin_Tor_Curator_Arcane_Leash_Actions)
endfunction

//*  Trigger Kirin_Tor_Curaotr_Arcane_Leash_2
//****************************************************************************
function BoolExpr_221 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == false and GetUnitLevel(GetFilterUnit()) > 2 ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_222 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == false ) ) then
		return true
	endif
	return false
endfunction

function Trig_Kirin_Tor_Curaotr_Arcane_Leash_2_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_KirinTorCurators) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Kirin_Tor_Curaotr_Arcane_Leash_2_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_KirinTorCurators)
	if ( s__udg_activeArcaneLeash[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("magicleash") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(650.00, udg_Point, Condition(function BoolExpr_221))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(udg_Unit, "magicleash", udg_Unit2)
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(650.00, udg_Point, Condition(function BoolExpr_222))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	call IssueTargetOrderBJ(udg_Unit, "magicleash", udg_Unit2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Kirin_Tor_Curaotr_Arcane_Leash_2 takes nothing returns nothing
	set gg_trg_Kirin_Tor_Curaotr_Arcane_Leash_2=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Kirin_Tor_Curaotr_Arcane_Leash_2, 0.50)
	call TriggerAddCondition(gg_trg_Kirin_Tor_Curaotr_Arcane_Leash_2, Condition(function Trig_Kirin_Tor_Curaotr_Arcane_Leash_2_Conditions))
	call TriggerAddAction(gg_trg_Kirin_Tor_Curaotr_Arcane_Leash_2, function Trig_Kirin_Tor_Curaotr_Arcane_Leash_2_Actions)
endfunction

//*  Trigger Piercing_Charge
//****************************************************************************
function Trig_Piercing_Charge_Actions takes nothing returns nothing
	call GroupAddUnitSimple(GetTriggerUnit(), udg_PiercingChargeGroup)
	call SaveUnitHandleBJ(GetSpellTargetUnit(), 0, GetHandleIdBJ(GetTriggerUnit()), udg_TablePiercingCharge)
	call EnableTrigger(gg_trg_Piercing_Charge_Periodic)
endfunction


//****************************************************************************
function InitTrig_Piercing_Charge takes nothing returns nothing
	set gg_trg_Piercing_Charge=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Piercing_Charge, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Piercing_Charge, function Trig_Piercing_Charge_Actions)
endfunction

//*  Trigger Piercing_Charge_Periodic
//****************************************************************************
function BoolExpr_224 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_FLYING) == true and GetFilterUnit() != udg_Unit2 ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Piercing_Charge_Periodic_222 takes nothing returns nothing
	set udg_Unit=GetEnumUnit()
	set udg_Unit2=LoadUnitHandleBJ(0, GetHandleIdBJ(GetEnumUnit()), udg_TablePiercingCharge)
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	set udg_Point3=PolarProjectionBJ(udg_Point, 20.00, AngleBetweenPoints(udg_Point, udg_Point2))
	if ( DistanceBetweenPoints(udg_Point, udg_Point2) >= 50.00 ) then
	call SetUnitPositionLocFacingLocBJ(udg_Unit, udg_Point3, udg_Point2)
	else
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(300.00, udg_Point2, Condition(function BoolExpr_224))
	call UnitDamageTargetBJ(udg_Unit, udg_Unit2, 200.00, ATTACK_TYPE_MELEE, DAMAGE_TYPE_NORMAL)
	call GroupAddGroup(udg_UnitGroup, udg_PiercingChargeDamageGroup)
	call GroupRemoveUnitSimple(GetEnumUnit(), udg_PiercingChargeGroup)
	call AddSpecialEffectTargetUnitBJ("chest", udg_Unit, "Abilities\\Spells\\NightElf\\ManaBurn\\ManaBurnTarget.mdl")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 2.50)
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	endif

	call RemoveLocation(udg_Point)
	call RemoveLocation(udg_Point2)
	call RemoveLocation(udg_Point3)
	call DestroyGroup(udg_UnitGroup)

endfunction

function Trig_Piercing_Charge_Periodic_224 takes nothing returns nothing
	call UnitDamageTargetBJ(GetEnumUnit(), GetEnumUnit(), 100.00, ATTACK_TYPE_MELEE, DAMAGE_TYPE_NORMAL)

endfunction

function Trig_Piercing_Charge_Periodic_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_PiercingChargeGroup) > 0 ) then
	call ForGroup(udg_PiercingChargeGroup, function Trig_Piercing_Charge_Periodic_222)

	call ForGroup(udg_PiercingChargeDamageGroup, function Trig_Piercing_Charge_Periodic_224)

	call GroupClear(udg_PiercingChargeDamageGroup)
	else
	call DisableTrigger(GetTriggeringTrigger())
	endif

endfunction


//****************************************************************************
function InitTrig_Piercing_Charge_Periodic takes nothing returns nothing
	set gg_trg_Piercing_Charge_Periodic=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Piercing_Charge_Periodic, 0.03)
	call DisableTrigger(gg_trg_Piercing_Charge_Periodic)
	call TriggerAddAction(gg_trg_Piercing_Charge_Periodic, function Trig_Piercing_Charge_Periodic_Actions)
endfunction

//*  Trigger Battlecry
//****************************************************************************
function Trig_Battlecry_Actions takes nothing returns nothing
	call SetUnitLifeBJ(GetTriggerUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetTriggerUnit()) - 100.00 ))
endfunction


//****************************************************************************
function InitTrig_Battlecry takes nothing returns nothing
	set gg_trg_Battlecry=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Battlecry, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Battlecry, function Trig_Battlecry_Actions)
endfunction

//*  Trigger Magic_Hunger
//****************************************************************************
function Trig_Magic_Hunger_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	
	call UnitApplyTimedLifeBJ(1.00, 'BTLF', GetLastCreatedUnit())
	call IssueTargetOrderBJ(GetLastCreatedUnit(), "soulburn", GetSpellTargetUnit())
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Magic_Hunger takes nothing returns nothing
	set gg_trg_Magic_Hunger=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Magic_Hunger, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Magic_Hunger, function Trig_Magic_Hunger_Actions)
endfunction

//*  Trigger Magic_Hunger_Attack
//****************************************************************************
function Trig_Magic_Hunger_Attack_Actions takes nothing returns nothing
	call SetUnitManaBJ(GetAttacker(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetAttacker()) - 15.00 ))
endfunction


//****************************************************************************
function InitTrig_Magic_Hunger_Attack takes nothing returns nothing
	set gg_trg_Magic_Hunger_Attack=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Magic_Hunger_Attack, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddAction(gg_trg_Magic_Hunger_Attack, function Trig_Magic_Hunger_Attack_Actions)
endfunction

//*  Trigger Doppleganger
//****************************************************************************
function Trig_Doppleganger_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetSpellTargetUnit())
	call CreateNUnitsAtLoc(1, GetUnitTypeId(GetSpellTargetUnit()), GetOwningPlayer(GetTriggerUnit()), udg_Point, bj_UNIT_FACING)
	call UnitApplyTimedLifeBJ(20.00, 'BTLF', GetLastCreatedUnit())
	call SetUnitVertexColorBJ(GetLastCreatedUnit(), 50.00, 50.00, 100, 0)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Doppleganger takes nothing returns nothing
	set gg_trg_Doppleganger=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Doppleganger, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Doppleganger, function Trig_Doppleganger_Actions)
endfunction

//*  Trigger Petal_Ward
//****************************************************************************
function Trig_Petal_Ward_Actions takes nothing returns nothing
	call UnitDamageTargetBJ(GetTriggerUnit(), GetAttacker(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetAttacker()) - ( GetUnitStateSwap(UNIT_STATE_MAX_LIFE, GetAttacker()) * 0.02 ) ), ATTACK_TYPE_MAGIC, DAMAGE_TYPE_NORMAL)
endfunction


//****************************************************************************
function InitTrig_Petal_Ward takes nothing returns nothing
	set gg_trg_Petal_Ward=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Petal_Ward, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddAction(gg_trg_Petal_Ward, function Trig_Petal_Ward_Actions)
endfunction

//*  Trigger Arcane_Rush
//****************************************************************************
function BoolExpr_226 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Arcane_Rush_226 takes nothing returns nothing
	if ( IsUnitType(GetEnumUnit(), UNIT_TYPE_STRUCTURE) == false and IsUnitType(GetEnumUnit(), UNIT_TYPE_HERO) == false and IsUnitType(GetEnumUnit(), UNIT_TYPE_MECHANICAL) == false and GetUnitStateSwap(UNIT_STATE_MAX_MANA, GetEnumUnit()) > 0.00 ) then
	call UnitDamageTargetBJ(GetTriggerUnit(), GetEnumUnit(), 100.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)
	call SetUnitManaBJ(GetEnumUnit(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetEnumUnit()) - 200.00 ))
	else
	endif


endfunction

function Trig_Arcane_Rush_Actions takes nothing returns nothing
	set udg_Point=GetSpellTargetLoc()
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_226))
	call ForGroup(udg_UnitGroup, function Trig_Arcane_Rush_226)

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Arcane_Rush takes nothing returns nothing
	set gg_trg_Arcane_Rush=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Arcane_Rush, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Arcane_Rush, function Trig_Arcane_Rush_Actions)
endfunction

//*  Trigger Verbis_Virtus
//****************************************************************************
function BoolExpr_228 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == false and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Verbis_Virtus_228 takes nothing returns nothing
	if ( IsUnitType(GetEnumUnit(), UNIT_TYPE_STRUCTURE) == false and IsUnitType(GetEnumUnit(), UNIT_TYPE_HERO) == false and IsUnitType(GetEnumUnit(), UNIT_TYPE_MECHANICAL) == false ) then
	call UnitRemoveBuffsBJ(bj_REMOVEBUFFS_NEGATIVE, GetEnumUnit())
	call SetUnitLifeBJ(GetEnumUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetEnumUnit()) + 100.00 ))
	else
	endif


endfunction

function Trig_Verbis_Virtus_Actions takes nothing returns nothing
	set udg_Point=GetSpellTargetLoc()
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(200.00, udg_Point, Condition(function BoolExpr_228))
	call ForGroup(udg_UnitGroup, function Trig_Verbis_Virtus_228)

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Verbis_Virtus takes nothing returns nothing
	set gg_trg_Verbis_Virtus=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Verbis_Virtus, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Verbis_Virtus, function Trig_Verbis_Virtus_Actions)
endfunction

//*  Trigger Sun_Blast
//****************************************************************************
function BoolExpr_230 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == false and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Sun_Blast_230 takes nothing returns nothing
	call UnitDamageTargetBJ(GetTriggerUnit(), GetEnumUnit(), 40.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)

endfunction

function Trig_Sun_Blast_Actions takes nothing returns nothing
	set udg_Point=GetSpellTargetLoc()
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(200.00, udg_Point, Condition(function BoolExpr_230))
	call ForGroup(udg_UnitGroup, function Trig_Sun_Blast_230)

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Sun_Blast takes nothing returns nothing
	set gg_trg_Sun_Blast=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Sun_Blast, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Sun_Blast, function Trig_Sun_Blast_Actions)
endfunction

//*  Trigger Ember_Cannon_Mode_ON
//****************************************************************************
function Trig_Ember_Cannon_Mode_ON_Conditions takes nothing returns boolean
	if ( not ( GetIssuedOrderIdBJ() == String2OrderIdBJ("stoneform") ) ) then
		return false
	endif
	return true
endfunction

function Trig_Ember_Cannon_Mode_ON_Actions takes nothing returns nothing
	call GroupAddUnitSimple(GetTriggerUnit(), udg_EmberCannonMode)
endfunction


//****************************************************************************
function InitTrig_Ember_Cannon_Mode_ON takes nothing returns nothing
	set gg_trg_Ember_Cannon_Mode_ON=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Ember_Cannon_Mode_ON, EVENT_PLAYER_UNIT_ISSUED_ORDER)
	call TriggerAddCondition(gg_trg_Ember_Cannon_Mode_ON, Condition(function Trig_Ember_Cannon_Mode_ON_Conditions))
	call TriggerAddAction(gg_trg_Ember_Cannon_Mode_ON, function Trig_Ember_Cannon_Mode_ON_Actions)
endfunction

//*  Trigger Ember_Cannon_Mode_OFF
//****************************************************************************
function Trig_Ember_Cannon_Mode_OFF_Conditions takes nothing returns boolean
	if ( not ( GetIssuedOrderIdBJ() == String2OrderIdBJ("unstoneform") ) ) then
		return false
	endif
	return true
endfunction

function Trig_Ember_Cannon_Mode_OFF_Actions takes nothing returns nothing
	call GroupRemoveUnitSimple(GetTriggerUnit(), udg_EmberCannonMode)
endfunction


//****************************************************************************
function InitTrig_Ember_Cannon_Mode_OFF takes nothing returns nothing
	set gg_trg_Ember_Cannon_Mode_OFF=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Ember_Cannon_Mode_OFF, EVENT_PLAYER_UNIT_ISSUED_ORDER)
	call TriggerAddCondition(gg_trg_Ember_Cannon_Mode_OFF, Condition(function Trig_Ember_Cannon_Mode_OFF_Conditions))
	call TriggerAddAction(gg_trg_Ember_Cannon_Mode_OFF, function Trig_Ember_Cannon_Mode_OFF_Actions)
endfunction

//*  Trigger Meld
//****************************************************************************
function Trig_Meld_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetAttacker())
	
	if ( ( true ) ) then
	else
	if ( ( true ) ) then
	else
	if ( ( true ) ) then
	else
	endif

	endif

	endif

	call UnitApplyTimedLifeBJ(1.00, 'BTLF', GetLastCreatedUnit())
	call IssueTargetOrderBJ(GetLastCreatedUnit(), "faeriefire", GetTriggerUnit())
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Meld takes nothing returns nothing
	set gg_trg_Meld=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Meld, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddAction(gg_trg_Meld, function Trig_Meld_Actions)
endfunction

//*  Trigger Phoenix_Slash
//****************************************************************************
function BoolExpr_232 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetAttacker())) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Phoenix_Slash_232 takes nothing returns nothing
	call UnitDamageTargetBJ(GetAttacker(), GetEnumUnit(), udg_Real, ATTACK_TYPE_HERO, DAMAGE_TYPE_NORMAL)
	if ( IsUnitDeadBJ(GetEnumUnit()) == true ) then
	set udg_Point2=GetUnitLoc(GetEnumUnit())
	call AddSpecialEffectLocBJ(udg_Point2, "Abilities\\Spells\\Undead\\DeathPact\\DeathPactTarget.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call SetUnitLifeBJ(GetAttacker(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetAttacker()) + 150.00 ))
	call SetUnitManaBJ(GetAttacker(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetAttacker()) + 50.00 ))
	call RemoveLocation(udg_Point2)
	else
	endif


endfunction

function Trig_Phoenix_Slash_Conditions takes nothing returns boolean
	if ( not ( GetRandomInt(1, 100) <= 50 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Phoenix_Slash_Actions takes nothing returns nothing
	if ( s__udg_PhoenixSlashTick[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == 3 ) then
	set s__udg_PhoenixSlashTick[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))]= 0
	call AddSpecialEffectTargetUnitBJ("chest", GetAttacker(), "animeslashfinal.mdx")
	call BlzSetSpecialEffectColor(GetLastCreatedEffectBJ(), 100, 255, 100)
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(150.00, udg_Point, Condition(function BoolExpr_232))
	set udg_Real=I2R(BlzGetUnitWeaponIntegerField(GetAttacker(), UNIT_WEAPON_IF_ATTACK_DAMAGE_BASE, 0))
	call ForGroup(udg_UnitGroup, function Trig_Phoenix_Slash_232)

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	set udg_Point=GetUnitLoc(GetAttacker())
	set s__udg_PhoenixSlashTick[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))]= ( s__udg_PhoenixSlashTick[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] + 1 )
	call CreateTextTagLocBJ(( "|cffff3636Phoenix Energy: " + ( I2S(s__udg_PhoenixSlashTick[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))]) + "|r" ) ), udg_Point, 0, 8.00, 100, 100, 100, 0)
	call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
	call SetTextTagLifespanBJ(GetLastCreatedTextTag(), 0.80)
	call SetTextTagFadepointBJ(GetLastCreatedTextTag(), 0.50)
	call RemoveLocation(udg_Point)
	endif

endfunction


//****************************************************************************
function InitTrig_Phoenix_Slash takes nothing returns nothing
	set gg_trg_Phoenix_Slash=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Phoenix_Slash, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Phoenix_Slash, Condition(function Trig_Phoenix_Slash_Conditions))
	call TriggerAddAction(gg_trg_Phoenix_Slash, function Trig_Phoenix_Slash_Actions)
endfunction

//*  Trigger Blade_Dance
//****************************************************************************
function BoolExpr_234 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Blade_Dance_234 takes nothing returns nothing
	call UnitDamageTargetBJ(GetTriggerUnit(), GetEnumUnit(), 100.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)

endfunction

function Trig_Blade_Dance_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(250.00, udg_Point, Condition(function BoolExpr_234))
	call ForGroup(udg_UnitGroup, function Trig_Blade_Dance_234)

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Blade_Dance takes nothing returns nothing
	set gg_trg_Blade_Dance=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Blade_Dance, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Blade_Dance, function Trig_Blade_Dance_Actions)
endfunction

//*  Trigger Havok
//****************************************************************************
function Trig_Havok_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	
	call UnitApplyTimedLifeBJ(1.00, 'BTLF', GetLastCreatedUnit())
	call IssueImmediateOrderBJ(GetLastCreatedUnit(), "roar")
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Havok takes nothing returns nothing
	set gg_trg_Havok=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Havok, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Havok, function Trig_Havok_Actions)
endfunction

//*  Trigger Berserkers_Call
//****************************************************************************
function Trig_Berserkers_Call_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	
	call UnitApplyTimedLifeBJ(1.00, 'BTLF', GetLastCreatedUnit())
	call IssueTargetOrderBJ(GetLastCreatedUnit(), "innerfire", GetTriggerUnit())
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Berserkers_Call takes nothing returns nothing
	set gg_trg_Berserkers_Call=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Berserkers_Call, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Berserkers_Call, function Trig_Berserkers_Call_Actions)
endfunction

//*  Trigger Shield_Bash
//****************************************************************************
function Trig_Shield_Bash_Actions takes nothing returns nothing
	call SetUnitAnimationWithRarity(GetTriggerUnit(), "walk, defend", RARITY_RARE)
	call AddSpecialEffectTargetUnitBJ("chest", GetTriggerUnit(), "ChargerCasterArt.mdx")
	set s__udg_ShieldBashChargeEffect[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= GetLastCreatedEffectBJ()
	call SetUnitPathing(GetTriggerUnit(), false)
	call GroupAddUnitSimple(GetTriggerUnit(), udg_ShieldBashGroup)
	call SaveUnitHandleBJ(GetSpellTargetUnit(), 0, GetHandleIdBJ(GetTriggerUnit()), udg_TableShieldBashCharge)
	call EnableTrigger(gg_trg_Shield_Bash_Periodic)
endfunction


//****************************************************************************
function InitTrig_Shield_Bash takes nothing returns nothing
	set gg_trg_Shield_Bash=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Shield_Bash, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Shield_Bash, function Trig_Shield_Bash_Actions)
endfunction

//*  Trigger Shield_Bash_Periodic
//****************************************************************************
function BoolExpr_237 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true and GetFilterUnit() != udg_Unit2 ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Shield_Bash_Periodic_235 takes nothing returns nothing
	set udg_Unit=GetEnumUnit()
	set udg_Unit2=LoadUnitHandleBJ(0, GetHandleIdBJ(GetEnumUnit()), udg_TableShieldBashCharge)
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	set udg_Point3=PolarProjectionBJ(udg_Point, 20.00, AngleBetweenPoints(udg_Point, udg_Point2))
	if ( DistanceBetweenPoints(udg_Point, udg_Point2) >= 150.00 ) then
	call SetUnitPositionLocFacingLocBJ(udg_Unit, udg_Point3, udg_Point2)
	else
	call ResetUnitAnimation(GetEnumUnit())
	call SetUnitPathing(GetEnumUnit(), true)
	call DestroyEffectBJ(s__udg_ShieldBashChargeEffect[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))])
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(175.00, udg_Point2, Condition(function BoolExpr_237))
	
	call GroupAddGroup(udg_UnitGroup, udg_ShieldBashDamageGroup)
	call GroupRemoveUnitSimple(GetEnumUnit(), udg_ShieldBashGroup)
	call AddSpecialEffectTargetUnitBJ("chest", udg_Unit, "Abilities\\Spells\\NightElf\\ManaBurn\\ManaBurnTarget.mdl")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 2.50)
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call DestroyGroup(udg_UnitGroup)
	endif

	call RemoveLocation(udg_Point)
	call RemoveLocation(udg_Point2)
	call RemoveLocation(udg_Point3)

endfunction

function Trig_Shield_Bash_Periodic_237 takes nothing returns nothing
	

endfunction

function Trig_Shield_Bash_Periodic_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_ShieldBashGroup) > 0 ) then
	call ForGroup(udg_ShieldBashGroup, function Trig_Shield_Bash_Periodic_235)

	call ForGroup(udg_ShieldBashDamageGroup, function Trig_Shield_Bash_Periodic_237)

	call GroupClear(udg_ShieldBashDamageGroup)
	else
	call DisableTrigger(GetTriggeringTrigger())
	endif

endfunction


//****************************************************************************
function InitTrig_Shield_Bash_Periodic takes nothing returns nothing
	set gg_trg_Shield_Bash_Periodic=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Shield_Bash_Periodic, 0.03)
	call DisableTrigger(gg_trg_Shield_Bash_Periodic)
	call TriggerAddAction(gg_trg_Shield_Bash_Periodic, function Trig_Shield_Bash_Periodic_Actions)
endfunction

//*  Trigger Stand_United
//****************************************************************************
function BoolExpr_239 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == false and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Stand_United_239 takes nothing returns nothing
	set udg_Point2=GetUnitLoc(GetEnumUnit())
	
	call UnitApplyTimedLifeBJ(1.00, 'BTLF', GetLastCreatedUnit())
	call IssueTargetOrderBJ(GetLastCreatedUnit(), "antimagicshell", GetEnumUnit())
	call RemoveLocation(udg_Point2)

endfunction

function Trig_Stand_United_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(700.00, udg_Point, Condition(function BoolExpr_239))
	call ForGroup(udg_UnitGroup, function Trig_Stand_United_239)

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Stand_United takes nothing returns nothing
	set gg_trg_Stand_United=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Stand_United, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Stand_United, function Trig_Stand_United_Actions)
endfunction

//*  Trigger Liberate
//****************************************************************************
function Trig_Liberate_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetSpellTargetUnit())
	
	call UnitApplyTimedLifeBJ(1.00, 'BTLF', GetLastCreatedUnit())
	call IssuePointOrderLocBJ(GetLastCreatedUnit(), "silence", udg_Point)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Liberate takes nothing returns nothing
	set gg_trg_Liberate=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Liberate, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Liberate, function Trig_Liberate_Actions)
endfunction

//*  Trigger Arcane_Clarity
//****************************************************************************
function BoolExpr_241 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == false and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Arcane_Clarity_241 takes nothing returns nothing
	if ( ( true ) ) then
	call SetUnitManaBJ(GetEnumUnit(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetEnumUnit()) + ( 0.03 * GetUnitStateSwap(UNIT_STATE_MAX_MANA, GetEnumUnit()) ) ))
	else
	if ( ( true ) ) then
	call SetUnitManaBJ(GetEnumUnit(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetEnumUnit()) + ( 0.04 * GetUnitStateSwap(UNIT_STATE_MAX_MANA, GetEnumUnit()) ) ))
	else
	if ( ( true ) ) then
	call SetUnitManaBJ(GetEnumUnit(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetEnumUnit()) + ( 0.05 * GetUnitStateSwap(UNIT_STATE_MAX_MANA, GetEnumUnit()) ) ))
	else
	endif

	endif

	endif


endfunction

function Trig_Arcane_Clarity_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_241))
	call ForGroup(udg_UnitGroup, function Trig_Arcane_Clarity_241)

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Arcane_Clarity takes nothing returns nothing
	set gg_trg_Arcane_Clarity=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Arcane_Clarity, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Arcane_Clarity, function Trig_Arcane_Clarity_Actions)
endfunction

//*  Trigger AI_Refraction
//****************************************************************************
function Trig_AI_Refraction_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeRefraction[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Refraction_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetTriggerUnit(), "berserk")
endfunction


//****************************************************************************
function InitTrig_AI_Refraction takes nothing returns nothing
	set gg_trg_AI_Refraction=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Refraction, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Refraction, Condition(function Trig_AI_Refraction_Conditions))
	call TriggerAddAction(gg_trg_AI_Refraction, function Trig_AI_Refraction_Actions)
endfunction

//*  Trigger AI_Refraction_2
//****************************************************************************
function Trig_AI_Refraction_2_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeRefraction[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Refraction_2_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "berserk")
endfunction


//****************************************************************************
function InitTrig_AI_Refraction_2 takes nothing returns nothing
	set gg_trg_AI_Refraction_2=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Refraction_2, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Refraction_2, Condition(function Trig_AI_Refraction_2_Conditions))
	call TriggerAddAction(gg_trg_AI_Refraction_2, function Trig_AI_Refraction_2_Actions)
endfunction

//*  Trigger AI_Meld
//****************************************************************************
function BoolExpr_243 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false and IsUnitType(GetFilterUnit(), UNIT_TYPE_SUMMONED) == false ) ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Meld_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_PhoenixAssassins) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Meld_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_PhoenixAssassins)
	if ( s__udg_activeMeld[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(1000.00, udg_Point, Condition(function BoolExpr_243))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueImmediateOrderBJ(udg_Unit, "windwalk")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Meld takes nothing returns nothing
	set gg_trg_AI_Meld=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Meld, 1.76)
	call TriggerAddCondition(gg_trg_AI_Meld, Condition(function Trig_AI_Meld_Conditions))
	call TriggerAddAction(gg_trg_AI_Meld, function Trig_AI_Meld_Actions)
endfunction

//*  Trigger AI_Meld_2
//****************************************************************************
function BoolExpr_244 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true and ( GetUnitTypeId(GetFilterUnit()) != 'ushd' and IsUnitType(GetFilterUnit(), UNIT_TYPE_SUMMONED) == false ) ) ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Meld_2_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_PhoenixAssassins) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Meld_2_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_PhoenixAssassins)
	if ( s__udg_MeldUnit[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == null ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_244))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set s__udg_MeldUnit[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))]= GroupPickRandomUnit(udg_UnitGroup2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	if ( s__udg_MeldUnit[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] != null ) then
	call IssueTargetOrderBJ(udg_Unit, "attack", s__udg_MeldUnit[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))])
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Meld_2 takes nothing returns nothing
	set gg_trg_AI_Meld_2=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Meld_2, 0.50)
	call TriggerAddCondition(gg_trg_AI_Meld_2, Condition(function Trig_AI_Meld_2_Conditions))
	call TriggerAddAction(gg_trg_AI_Meld_2, function Trig_AI_Meld_2_Actions)
endfunction

//*  Trigger Meld_Unit_Dies
//****************************************************************************
function Trig_Meld_Unit_Dies_Conditions takes nothing returns boolean
	if ( not ( ( GetTriggerUnit() == s__udg_MeldUnit[7] or GetTriggerUnit() == s__udg_MeldUnit[8] or GetTriggerUnit() == s__udg_MeldUnit[9] or GetTriggerUnit() == s__udg_MeldUnit[10] or GetTriggerUnit() == s__udg_MeldUnit[11] or GetTriggerUnit() == s__udg_MeldUnit[12] ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Meld_Unit_Dies_Actions takes nothing returns nothing
	set bj_forLoopAIndex=7
set bj_forLoopAIndexEnd=12
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	if ( GetTriggerUnit() == s__udg_MeldUnit[GetForLoopIndexA()] ) then
	set s__udg_MeldUnit[GetForLoopIndexA()]= null
	else
	endif

	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
endfunction


//****************************************************************************
function InitTrig_Meld_Unit_Dies takes nothing returns nothing
	set gg_trg_Meld_Unit_Dies=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Meld_Unit_Dies, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddCondition(gg_trg_Meld_Unit_Dies, Condition(function Trig_Meld_Unit_Dies_Conditions))
	call TriggerAddAction(gg_trg_Meld_Unit_Dies, function Trig_Meld_Unit_Dies_Actions)
endfunction

//*  Trigger Phoenix_Assassin_Dies
//****************************************************************************
function Trig_Phoenix_Assassin_Dies_Actions takes nothing returns nothing
	set s__udg_MeldUnit[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= null
endfunction


//****************************************************************************
function InitTrig_Phoenix_Assassin_Dies takes nothing returns nothing
	set gg_trg_Phoenix_Assassin_Dies=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Phoenix_Assassin_Dies, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddAction(gg_trg_Phoenix_Assassin_Dies, function Trig_Phoenix_Assassin_Dies_Actions)
endfunction

//*  Trigger AI_Bladestorm_BELF
//****************************************************************************
function BoolExpr_245 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Bladestorm_BELF_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_SentinelCommanders) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Bladestorm_BELF_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_SentinelCommanders)
	if ( s__udg_activeBladestormBELF[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(400.00, udg_Point, Condition(function BoolExpr_245))
	if ( CountUnitsInGroup(udg_UnitGroup) > 3 ) then
	call IssueImmediateOrderBJ(udg_Unit, "whirlwind")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Bladestorm_BELF takes nothing returns nothing
	set gg_trg_AI_Bladestorm_BELF=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Bladestorm_BELF, 1.00)
	call TriggerAddCondition(gg_trg_AI_Bladestorm_BELF, Condition(function Trig_AI_Bladestorm_BELF_Conditions))
	call TriggerAddAction(gg_trg_AI_Bladestorm_BELF, function Trig_AI_Bladestorm_BELF_Actions)
endfunction

//*  Trigger AI_SinDorei_Blades
//****************************************************************************
function Trig_AI_SinDorei_Blades_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeSinDoreiBlades[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	if ( not ( GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("whirlwind") ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_SinDorei_Blades_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "metamorphosis")
endfunction


//****************************************************************************
function InitTrig_AI_SinDorei_Blades takes nothing returns nothing
	set gg_trg_AI_SinDorei_Blades=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_SinDorei_Blades, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_SinDorei_Blades, Condition(function Trig_AI_SinDorei_Blades_Conditions))
	call TriggerAddAction(gg_trg_AI_SinDorei_Blades, function Trig_AI_SinDorei_Blades_Actions)
endfunction

//*  Trigger AI_Mana_Burn_BELF
//****************************************************************************
function BoolExpr_246 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and GetUnitStateSwap(UNIT_STATE_MANA, GetFilterUnit()) >= 50.00 ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Mana_Burn_BELF_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_SentinelCommanders) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Mana_Burn_BELF_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_SentinelCommanders)
	if ( s__udg_activeManaBurnBELF[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("whirlwind") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(400.00, udg_Point, Condition(function BoolExpr_246))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "manaburn", GroupPickRandomUnit(udg_UnitGroup2))
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Mana_Burn_BELF takes nothing returns nothing
	set gg_trg_AI_Mana_Burn_BELF=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Mana_Burn_BELF, 1.00)
	call TriggerAddCondition(gg_trg_AI_Mana_Burn_BELF, Condition(function Trig_AI_Mana_Burn_BELF_Conditions))
	call TriggerAddAction(gg_trg_AI_Mana_Burn_BELF, function Trig_AI_Mana_Burn_BELF_Actions)
endfunction

//*  Trigger AI_Berserkers_Call
//****************************************************************************
function Trig_AI_Berserkers_Call_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeBerserkersCall[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	if ( not ( GetUnitLifePercent(GetAttacker()) >= 20.00 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Berserkers_Call_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "taunt")
endfunction


//****************************************************************************
function InitTrig_AI_Berserkers_Call takes nothing returns nothing
	set gg_trg_AI_Berserkers_Call=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Berserkers_Call, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Berserkers_Call, Condition(function Trig_AI_Berserkers_Call_Conditions))
	call TriggerAddAction(gg_trg_AI_Berserkers_Call, function Trig_AI_Berserkers_Call_Actions)
endfunction

//*  Trigger AI_Shield_Bash
//****************************************************************************
function BoolExpr_247 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_248 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_249 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Shield_Bash_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_BloodKnights) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Shield_Bash_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_BloodKnights)
	if ( s__udg_activeShieldBash[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(1000.00, udg_Point, Condition(function BoolExpr_247))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(udg_Unit, "polymorph", udg_Unit2)
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(1000.00, udg_Point, Condition(function BoolExpr_248))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(300.00, udg_Point2, Condition(function BoolExpr_249))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 1 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup3)
	call IssueTargetOrderBJ(udg_Unit, "polymorph", udg_Unit2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Shield_Bash takes nothing returns nothing
	set gg_trg_AI_Shield_Bash=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Shield_Bash, 0.80)
	call TriggerAddCondition(gg_trg_AI_Shield_Bash, Condition(function Trig_AI_Shield_Bash_Conditions))
	call TriggerAddAction(gg_trg_AI_Shield_Bash, function Trig_AI_Shield_Bash_Actions)
endfunction

//*  Trigger AI_Havok
//****************************************************************************
function Trig_AI_Havok_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeHavok[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	if ( not ( GetUnitCurrentOrder(GetAttacker()) != String2OrderIdBJ("scrollofspeed") ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Havok_Actions takes nothing returns nothing
	call IssueImmediateOrderById(GetAttacker(), 852285)
endfunction


//****************************************************************************
function InitTrig_AI_Havok takes nothing returns nothing
	set gg_trg_AI_Havok=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Havok, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Havok, Condition(function Trig_AI_Havok_Conditions))
	call TriggerAddAction(gg_trg_AI_Havok, function Trig_AI_Havok_Actions)
endfunction

//*  Trigger AI_Ultimate_Strength
//****************************************************************************
function Trig_AI_Ultimate_Strength_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeUltimateStrength[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	if ( not ( GetUnitCurrentOrder(GetAttacker()) != String2OrderIdBJ("chemicalrage") ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Ultimate_Strength_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "chemicalrage")
endfunction


//****************************************************************************
function InitTrig_AI_Ultimate_Strength takes nothing returns nothing
	set gg_trg_AI_Ultimate_Strength=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Ultimate_Strength, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Ultimate_Strength, Condition(function Trig_AI_Ultimate_Strength_Conditions))
	call TriggerAddAction(gg_trg_AI_Ultimate_Strength, function Trig_AI_Ultimate_Strength_Actions)
endfunction

//*  Trigger AI_Ultimate_Strength_2
//****************************************************************************
function Trig_AI_Ultimate_Strength_2_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeUltimateStrength[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	if ( not ( GetUnitCurrentOrder(GetTriggerUnit()) != String2OrderIdBJ("chemicalrage") ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Ultimate_Strength_2_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetTriggerUnit(), "chemicalrage")
endfunction


//****************************************************************************
function InitTrig_AI_Ultimate_Strength_2 takes nothing returns nothing
	set gg_trg_AI_Ultimate_Strength_2=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Ultimate_Strength_2, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Ultimate_Strength_2, Condition(function Trig_AI_Ultimate_Strength_2_Conditions))
	call TriggerAddAction(gg_trg_AI_Ultimate_Strength_2, function Trig_AI_Ultimate_Strength_2_Actions)
endfunction

//*  Trigger AI_Rain_of_Chaos
//****************************************************************************
function BoolExpr_250 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_251 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_252 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Rain_of_Chaos_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Sunreavers) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Rain_of_Chaos_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Sunreavers)
	if ( s__udg_activeRainOfChaos[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("drain") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_250))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup))
	call IssuePointOrderByIdLoc(udg_Unit, 852237, udg_Point2)
	call RemoveLocation(udg_Point2)
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_251))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(400.00, udg_Point2, Condition(function BoolExpr_252))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 1 ) then
	call IssuePointOrderByIdLoc(udg_Unit, 852237, udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	endif

	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Rain_of_Chaos takes nothing returns nothing
	set gg_trg_AI_Rain_of_Chaos=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Rain_of_Chaos, 1.00)
	call TriggerAddCondition(gg_trg_AI_Rain_of_Chaos, Condition(function Trig_AI_Rain_of_Chaos_Conditions))
	call TriggerAddAction(gg_trg_AI_Rain_of_Chaos, function Trig_AI_Rain_of_Chaos_Actions)
endfunction

//*  Trigger AI_Liberate
//****************************************************************************
function BoolExpr_253 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true and GetFilterUnit() != udg_Unit ) ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_254 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_255 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( GetUnitLevel(GetFilterUnit()) > 3 and GetFilterUnit() != udg_Unit ) ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_256 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_257 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and ( IsUnitAliveBJ(GetFilterUnit()) == true or GetFilterUnit() != udg_Unit ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_258 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Liberate_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Sunreavers) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Liberate_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Sunreavers)
	if ( s__udg_activeLiberate[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_253))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(350.00, udg_Point, Condition(function BoolExpr_254))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "unholyfrenzy", GroupPickRandomUnit(udg_UnitGroup))
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_255))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(350.00, udg_Point, Condition(function BoolExpr_256))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "unholyfrenzy", GroupPickRandomUnit(udg_UnitGroup2))
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	else
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_257))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 0 ) then
	set udg_UnitGroup4=GetUnitsInRangeOfLocMatching(350.00, udg_Point, Condition(function BoolExpr_258))
	if ( CountUnitsInGroup(udg_UnitGroup4) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "unholyfrenzy", GroupPickRandomUnit(udg_UnitGroup3))
	else
	endif

	call DestroyGroup(udg_UnitGroup4)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Liberate takes nothing returns nothing
	set gg_trg_AI_Liberate=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Liberate, 0.75)
	call TriggerAddCondition(gg_trg_AI_Liberate, Condition(function Trig_AI_Liberate_Conditions))
	call TriggerAddAction(gg_trg_AI_Liberate, function Trig_AI_Liberate_Actions)
endfunction

//*  Trigger AI_Siphon_Life_and_Mana
//****************************************************************************
function BoolExpr_259 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_260 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and GetUnitLevel(GetFilterUnit()) > 3 ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Siphon_Life_and_Mana_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Sunreavers) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Siphon_Life_and_Mana_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Sunreavers)
	if ( s__udg_activeSiphonLifeMana[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_259))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderById(udg_Unit, 852487, udg_Unit2)
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_260))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	call IssueTargetOrderById(udg_Unit, 852487, udg_Unit2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Siphon_Life_and_Mana takes nothing returns nothing
	set gg_trg_AI_Siphon_Life_and_Mana=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Siphon_Life_and_Mana, 0.75)
	call TriggerAddCondition(gg_trg_AI_Siphon_Life_and_Mana, Condition(function Trig_AI_Siphon_Life_and_Mana_Conditions))
	call TriggerAddAction(gg_trg_AI_Siphon_Life_and_Mana, function Trig_AI_Siphon_Life_and_Mana_Actions)
endfunction

//*  Trigger AI_Concentration
//****************************************************************************
function Trig_AI_Concentration_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeConcentration[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Concentration_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "berserk")
endfunction


//****************************************************************************
function InitTrig_AI_Concentration takes nothing returns nothing
	set gg_trg_AI_Concentration=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Concentration, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Concentration, Condition(function Trig_AI_Concentration_Conditions))
	call TriggerAddAction(gg_trg_AI_Concentration, function Trig_AI_Concentration_Actions)
endfunction

//*  Trigger AI_Slow_BELF
//****************************************************************************
function BoolExpr_261 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false and GetUnitLevel(GetFilterUnit()) > 3 ) ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_262 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Slow_BELF_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Darkcasters) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Slow_BELF_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Darkcasters)
	if ( s__udg_activeSlowBloodElf[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(750.00, udg_Point, Condition(function BoolExpr_261))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(udg_Unit, "slow", udg_Unit2)
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(750.00, udg_Point, Condition(function BoolExpr_262))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	call IssueTargetOrderBJ(udg_Unit, "slow", udg_Unit2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Slow_BELF takes nothing returns nothing
	set gg_trg_AI_Slow_BELF=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Slow_BELF, 0.50)
	call TriggerAddCondition(gg_trg_AI_Slow_BELF, Condition(function Trig_AI_Slow_BELF_Conditions))
	call TriggerAddAction(gg_trg_AI_Slow_BELF, function Trig_AI_Slow_BELF_Actions)
endfunction

//*  Trigger AI_Silver_Edge_Form
//****************************************************************************
function BoolExpr_263 takes nothing returns boolean
	if ( ( IsUnitType(GetFilterUnit(), UNIT_TYPE_FLYING) == true and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Silver_Edge_Form_263 takes nothing returns nothing
	if ( s__udg_activeSilverEdgeForm[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == true ) then
	call IssueImmediateOrderBJ(GetEnumUnit(), "ravenform")
	else
	endif


endfunction

function BoolExpr_265 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'e014' and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Silver_Edge_Form_265 takes nothing returns nothing
	call IssueImmediateOrderBJ(GetEnumUnit(), "unravenform")

endfunction

function Trig_AI_Silver_Edge_Form_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Darkcasters) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Silver_Edge_Form_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Darkcasters)
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(700.00, udg_Point, Condition(function BoolExpr_263))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	
	call ForGroup(udg_UnitGroup2, function Trig_AI_Silver_Edge_Form_263)

	call DestroyGroup(udg_UnitGroup2)
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(700.00, udg_Point, Condition(function BoolExpr_265))
	call ForGroup(udg_UnitGroup2, function Trig_AI_Silver_Edge_Form_265)

	call DestroyGroup(udg_UnitGroup2)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_AI_Silver_Edge_Form takes nothing returns nothing
	set gg_trg_AI_Silver_Edge_Form=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Silver_Edge_Form, 0.75)
	call TriggerAddCondition(gg_trg_AI_Silver_Edge_Form, Condition(function Trig_AI_Silver_Edge_Form_Conditions))
	call TriggerAddAction(gg_trg_AI_Silver_Edge_Form, function Trig_AI_Silver_Edge_Form_Actions)
endfunction

//*  Trigger AI_Dragonhawk_Rider_Mana_Decay
//****************************************************************************
function BoolExpr_267 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == false and ( GetUnitLifePercent(GetFilterUnit()) >= 40.00 and GetUnitManaPercent(GetFilterUnit()) >= 40.00 ) ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_268 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and GetUnitLifePercent(GetFilterUnit()) >= 40.00 ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Dragonhawk_Rider_Mana_Decay_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_DragonhawkRidersBE) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Dragonhawk_Rider_Mana_Decay_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_DragonhawkRidersBE)
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_267))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 and s__udg_activeManaDecay[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	call IssueTargetOrderBJ(udg_Unit, "drain", GroupPickRandomUnit(udg_UnitGroup))
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(450.00, udg_Point, Condition(function BoolExpr_268))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 and s__udg_activeManaDecay[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	call IssueTargetOrderBJ(udg_Unit, "drain", GroupPickRandomUnit(udg_UnitGroup2))
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_AI_Dragonhawk_Rider_Mana_Decay takes nothing returns nothing
	set gg_trg_AI_Dragonhawk_Rider_Mana_Decay=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Dragonhawk_Rider_Mana_Decay, 0.40)
	call TriggerAddCondition(gg_trg_AI_Dragonhawk_Rider_Mana_Decay, Condition(function Trig_AI_Dragonhawk_Rider_Mana_Decay_Conditions))
	call TriggerAddAction(gg_trg_AI_Dragonhawk_Rider_Mana_Decay, function Trig_AI_Dragonhawk_Rider_Mana_Decay_Actions)
endfunction

//*  Trigger AI_Petal_Ward
//****************************************************************************
function BoolExpr_269 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Petal_Ward_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Maguses) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Petal_Ward_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Maguses)
	if ( s__udg_activePetalWard[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(700.00, udg_Point, Condition(function BoolExpr_269))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Point2=PolarProjectionBJ(udg_Point, 200.00, GetUnitFacing(udg_Unit))
	call IssuePointOrderLocBJ(udg_Unit, "healingward", udg_Point2)
	call RemoveLocation(udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Petal_Ward takes nothing returns nothing
	set gg_trg_AI_Petal_Ward=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Petal_Ward, 1.30)
	call TriggerAddCondition(gg_trg_AI_Petal_Ward, Condition(function Trig_AI_Petal_Ward_Conditions))
	call TriggerAddAction(gg_trg_AI_Petal_Ward, function Trig_AI_Petal_Ward_Actions)
endfunction

//*  Trigger AI_Sun_Blast
//****************************************************************************
function BoolExpr_270 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_271 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Sun_Blast_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Maguses) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Sun_Blast_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Maguses)
	if ( s__udg_activeSunBlast[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_270))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup))
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(250.00, udg_Point2, Condition(function BoolExpr_271))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 1 ) then
	call IssuePointOrderLocBJ(udg_Unit, "rainoffire", udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	call RemoveLocation(udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Sun_Blast takes nothing returns nothing
	set gg_trg_AI_Sun_Blast=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Sun_Blast, 0.70)
	call TriggerAddCondition(gg_trg_AI_Sun_Blast, Condition(function Trig_AI_Sun_Blast_Conditions))
	call TriggerAddAction(gg_trg_AI_Sun_Blast, function Trig_AI_Sun_Blast_Actions)
endfunction

//*  Trigger AI_Arcane_Rush
//****************************************************************************
function BoolExpr_272 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_273 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false ) ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Arcane_Rush_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Maguses) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Arcane_Rush_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Maguses)
	if ( s__udg_activeArcaneRush[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_272))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(250.00, udg_Point2, Condition(function BoolExpr_273))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 2 ) then
	call IssuePointOrderLocBJ(udg_Unit, "blink", udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Arcane_Rush takes nothing returns nothing
	set gg_trg_AI_Arcane_Rush=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Arcane_Rush, 0.70)
	call TriggerAddCondition(gg_trg_AI_Arcane_Rush, Condition(function Trig_AI_Arcane_Rush_Conditions))
	call TriggerAddAction(gg_trg_AI_Arcane_Rush, function Trig_AI_Arcane_Rush_Actions)
endfunction

//*  Trigger AI_Verbis_Virtus
//****************************************************************************
function BoolExpr_274 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and GetUnitLifePercent(GetFilterUnit()) <= 75.00 ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Verbis_Virtus_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Magisters) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Verbis_Virtus_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Magisters)
	if ( s__udg_activeVerbisVirtus[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(750.00, udg_Point, Condition(function BoolExpr_274))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(udg_Unit, "healingwave", udg_Unit2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Verbis_Virtus takes nothing returns nothing
	set gg_trg_AI_Verbis_Virtus=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Verbis_Virtus, 0.90)
	call TriggerAddCondition(gg_trg_AI_Verbis_Virtus, Condition(function Trig_AI_Verbis_Virtus_Conditions))
	call TriggerAddAction(gg_trg_AI_Verbis_Virtus, function Trig_AI_Verbis_Virtus_Actions)
endfunction

//*  Trigger AI_Liberate_Shield
//****************************************************************************
function Trig_AI_Liberate_Shield_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Magisters) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Liberate_Shield_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Magisters)
	if ( s__udg_activeLiberateShield[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(udg_Unit, "innerfire", udg_Unit2)
	else
	
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	if ( GetUnitTypeId(udg_Unit2) != 'ushd' ) then
	call IssueTargetOrderBJ(udg_Unit, "innerfire", udg_Unit2)
	else
	endif

	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Liberate_Shield takes nothing returns nothing
	set gg_trg_AI_Liberate_Shield=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Liberate_Shield, 0.55)
	call TriggerAddCondition(gg_trg_AI_Liberate_Shield, Condition(function Trig_AI_Liberate_Shield_Conditions))
	call TriggerAddAction(gg_trg_AI_Liberate_Shield, function Trig_AI_Liberate_Shield_Actions)
endfunction

//*  Trigger AI_Relocate
//****************************************************************************
function BoolExpr_275 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == false and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Relocate_Conditions takes nothing returns boolean
	if ( not ( GetUnitCurrentOrder(GetTriggerUnit()) != String2OrderIdBJ("massteleport") ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Relocate_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_Point2=GetUnitLoc(GetAttacker())
	set udg_Point3=PolarProjectionBJ(udg_Point2, 750.00, AngleBetweenPoints(udg_Point2, udg_Point))
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(1000.00, udg_Point, Condition(function BoolExpr_275))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	call IssueTargetOrderBJ(GetTriggerUnit(), "massteleport", GroupPickRandomUnit(udg_UnitGroup))
	else
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	call RemoveLocation(udg_Point2)
	call RemoveLocation(udg_Point3)
endfunction


//****************************************************************************
function InitTrig_AI_Relocate takes nothing returns nothing
	set gg_trg_AI_Relocate=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Relocate, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Relocate, Condition(function Trig_AI_Relocate_Conditions))
	call TriggerAddAction(gg_trg_AI_Relocate, function Trig_AI_Relocate_Actions)
endfunction

//*  Trigger AI_Ember_Cannon_Mode
//****************************************************************************
function Trig_AI_Ember_Cannon_Mode_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeEmberCannonMode[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Ember_Cannon_Mode_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "stoneform")
endfunction


//****************************************************************************
function InitTrig_AI_Ember_Cannon_Mode takes nothing returns nothing
	set gg_trg_AI_Ember_Cannon_Mode=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Ember_Cannon_Mode, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Ember_Cannon_Mode, Condition(function Trig_AI_Ember_Cannon_Mode_Conditions))
	call TriggerAddAction(gg_trg_AI_Ember_Cannon_Mode, function Trig_AI_Ember_Cannon_Mode_Actions)
endfunction

//*  Trigger AI_Decimator_Mode
//****************************************************************************
function BoolExpr_277 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetEnumUnit())) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Decimator_Mode_275 takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetEnumUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(950.00, udg_Point, Condition(function BoolExpr_277))
	if ( CountUnitsInGroup(udg_UnitGroup) == 0 ) then
	call IssueImmediateOrderBJ(GetEnumUnit(), "unstoneform")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)

endfunction

function Trig_AI_Decimator_Mode_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_EmberCannonMode) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Decimator_Mode_Actions takes nothing returns nothing
	call ForGroup(udg_EmberCannonMode, function Trig_AI_Decimator_Mode_275)

endfunction


//****************************************************************************
function InitTrig_AI_Decimator_Mode takes nothing returns nothing
	set gg_trg_AI_Decimator_Mode=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Decimator_Mode, 1.00)
	call TriggerAddCondition(gg_trg_AI_Decimator_Mode, Condition(function Trig_AI_Decimator_Mode_Conditions))
	call TriggerAddAction(gg_trg_AI_Decimator_Mode, function Trig_AI_Decimator_Mode_Actions)
endfunction

//*  Trigger Hook_Init
//****************************************************************************
function Trig_Hook_Init_Actions takes nothing returns nothing
	call InitHashtableBJ()
	set udg_HookTable=GetLastCreatedHashtableBJ()
	call InitHashtableBJ()
	set udg_HookDummyPointTable=GetLastCreatedHashtableBJ()
	call InitHashtableBJ()
	set udg_HookDummyCountTable=GetLastCreatedHashtableBJ()
	call InitHashtableBJ()
	set udg_HookDummyDoPullTable=GetLastCreatedHashtableBJ()
	call InitHashtableBJ()
	set udg_HookDummyEffectTable=GetLastCreatedHashtableBJ()
endfunction


//****************************************************************************
function InitTrig_Hook_Init takes nothing returns nothing
	set gg_trg_Hook_Init=CreateTrigger()
	call TriggerAddAction(gg_trg_Hook_Init, function Trig_Hook_Init_Actions)
endfunction

//*  Trigger Unit_Casts_Hook
//****************************************************************************
function Trig_Unit_Casts_Hook_Actions takes nothing returns nothing
	call GroupAddUnitSimple(GetTriggerUnit(), udg_HookCasterGroup)
	call GroupAddUnitSimple(GetSpellTargetUnit(), udg_HookGroup)
	call SaveUnitHandleBJ(GetTriggerUnit(), 0, GetHandleIdBJ(GetSpellTargetUnit()), udg_HookTable)
	call SaveUnitHandleBJ(GetSpellTargetUnit(), GetHandleIdBJ(GetTriggerUnit()), 0, udg_HookTable)
	call SaveBooleanBJ(false, 0, GetHandleIdBJ(GetTriggerUnit()), udg_HookDummyDoPullTable)
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call SaveLocationHandleBJ(udg_Point, 0, GetHandleIdBJ(GetTriggerUnit()), udg_HookDummyPointTable)
	call EnableTrigger(gg_trg_Hook_Periodic)
endfunction


//****************************************************************************
function InitTrig_Unit_Casts_Hook takes nothing returns nothing
	set gg_trg_Unit_Casts_Hook=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Unit_Casts_Hook, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Unit_Casts_Hook, function Trig_Unit_Casts_Hook_Actions)
endfunction

//*  Trigger Hook_Periodic
//****************************************************************************
function Trig_Hook_Periodic_277 takes nothing returns nothing
	if ( LoadBooleanBJ(0, GetHandleIdBJ(GetEnumUnit()), udg_HookDummyDoPullTable) == false ) then
	set udg_Integer=( LoadIntegerBJ(0, GetHandleIdBJ(GetEnumUnit()), udg_HookDummyCountTable) + 0 )
	set udg_Point=LoadLocationHandleBJ(udg_Integer, GetHandleIdBJ(GetEnumUnit()), udg_HookDummyPointTable)
	set udg_Point2=GetUnitLoc(LoadUnitHandleBJ(GetHandleIdBJ(GetEnumUnit()), 0, udg_HookTable))
	set udg_Real=AngleBetweenPoints(udg_Point, udg_Point2)
	set udg_Point3=PolarProjectionBJ(udg_Point, 50.00, udg_Real)
	set udg_Integer=( LoadIntegerBJ(0, GetHandleIdBJ(GetEnumUnit()), udg_HookDummyCountTable) + 1 )
	call SaveLocationHandleBJ(udg_Point3, udg_Integer, GetHandleIdBJ(GetEnumUnit()), udg_HookDummyPointTable)
	call SaveIntegerBJ(udg_Integer, 0, GetHandleIdBJ(GetEnumUnit()), udg_HookDummyCountTable)
	call AddSpecialEffectLocBJ(udg_Point3, "Abilities\\Weapons\\WardenMissile\\WardenMissile.mdl")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 2.00)
	call BlzSetSpecialEffectYaw(GetLastCreatedEffectBJ(), ( udg_Real * ( 3.14 / 180.00 ) ))
	call SaveEffectHandleBJ(GetLastCreatedEffectBJ(), udg_Integer, GetHandleIdBJ(GetEnumUnit()), udg_HookDummyEffectTable)
	if ( DistanceBetweenPoints(udg_Point, udg_Point2) <= 60.00 ) then
	call SaveBooleanBJ(true, 0, GetHandleIdBJ(GetEnumUnit()), udg_HookDummyDoPullTable)
	call DestroyEffectBJ(LoadEffectHandleBJ(udg_Integer, GetHandleIdBJ(GetEnumUnit()), udg_HookDummyEffectTable))
	call RemoveLocation(udg_Point3)
	else
	endif

	call RemoveLocation(udg_Point2)
	else
	set udg_Integer=( LoadIntegerBJ(0, GetHandleIdBJ(GetEnumUnit()), udg_HookDummyCountTable) - 1 )
	call SaveIntegerBJ(udg_Integer, 0, GetHandleIdBJ(GetEnumUnit()), udg_HookDummyCountTable)
	set udg_Point=LoadLocationHandleBJ(udg_Integer, GetHandleIdBJ(GetEnumUnit()), udg_HookDummyPointTable)
	call DestroyEffectBJ(LoadEffectHandleBJ(udg_Integer, GetHandleIdBJ(GetEnumUnit()), udg_HookDummyEffectTable))
	set udg_Unit=LoadUnitHandleBJ(GetHandleIdBJ(GetEnumUnit()), 0, udg_HookTable)
	call SetUnitPositionLoc(udg_Unit, udg_Point)
	call SetUnitPathing(udg_Unit, false)
	if ( udg_Integer == 0 ) then
	call SetUnitPathing(udg_Unit, true)
	call GroupRemoveUnitSimple(GetEnumUnit(), udg_HookCasterGroup)
	else
	endif

	call RemoveLocation(udg_Point)
	endif


endfunction

function Trig_Hook_Periodic_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_HookCasterGroup) == 0 ) then
	call DisableTrigger(GetTriggeringTrigger())
	else
	endif

	call ForGroup(udg_HookCasterGroup, function Trig_Hook_Periodic_277)

endfunction


//****************************************************************************
function InitTrig_Hook_Periodic takes nothing returns nothing
	set gg_trg_Hook_Periodic=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Hook_Periodic, 0.03)
	call DisableTrigger(gg_trg_Hook_Periodic)
	call TriggerAddAction(gg_trg_Hook_Periodic, function Trig_Hook_Periodic_Actions)
endfunction

//*  Trigger Unit_Finishes_Casting_Hook
//****************************************************************************
function Trig_Unit_Finishes_Casting_Hook_Actions takes nothing returns nothing
	call GroupRemoveUnitSimple(GetSpellTargetUnit(), udg_HookGroup)
endfunction


//****************************************************************************
function InitTrig_Unit_Finishes_Casting_Hook takes nothing returns nothing
	set gg_trg_Unit_Finishes_Casting_Hook=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Unit_Finishes_Casting_Hook, EVENT_PLAYER_UNIT_SPELL_FINISH)
call TriggerRegisterAnyUnitEventBJ(gg_trg_Unit_Finishes_Casting_Hook, EVENT_PLAYER_UNIT_SPELL_ENDCAST)
	call TriggerAddAction(gg_trg_Unit_Finishes_Casting_Hook, function Trig_Unit_Finishes_Casting_Hook_Actions)
endfunction

//*  Trigger Shadows_Call_Cast
//****************************************************************************
function Trig_Shadows_Call_Cast_Actions takes nothing returns nothing
	call UnitAddAbilityBJ('A080', GetSpellTargetUnit())
	call GroupAddUnitSimple(GetSpellTargetUnit(), udg_ShadowsCallGroup)
endfunction


//****************************************************************************
function InitTrig_Shadows_Call_Cast takes nothing returns nothing
	set gg_trg_Shadows_Call_Cast=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Shadows_Call_Cast, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Shadows_Call_Cast, function Trig_Shadows_Call_Cast_Actions)
endfunction

//*  Trigger Shadows_Call
//****************************************************************************
function Trig_Shadows_Call_278 takes nothing returns nothing
	if ( ( true ) ) then
	call UnitAddAbilityBJ('A080', GetEnumUnit())
	else
	call UnitRemoveAbilityBJ('A080', GetEnumUnit())
	call GroupRemoveUnitSimple(GetEnumUnit(), udg_ShadowsCallGroup)
	endif


endfunction

function Trig_Shadows_Call_Actions takes nothing returns nothing
	call ForGroup(udg_ShadowsCallGroup, function Trig_Shadows_Call_278)

endfunction


//****************************************************************************
function InitTrig_Shadows_Call takes nothing returns nothing
	set gg_trg_Shadows_Call=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Shadows_Call, 1.00)
	call TriggerAddAction(gg_trg_Shadows_Call, function Trig_Shadows_Call_Actions)
endfunction

//*  Trigger Fade_Cast
//****************************************************************************
function Trig_Fade_Cast_Actions takes nothing returns nothing
	call SetUnitVertexColorBJ(GetSpellTargetUnit(), 100, 100, 100, 50.00)
	call UnitAddAbilityBJ('A080', GetSpellTargetUnit())
	call GroupAddUnitSimple(GetSpellTargetUnit(), udg_FadeGroup)
endfunction


//****************************************************************************
function InitTrig_Fade_Cast takes nothing returns nothing
	set gg_trg_Fade_Cast=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Fade_Cast, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Fade_Cast, function Trig_Fade_Cast_Actions)
endfunction

//*  Trigger Fade
//****************************************************************************
function Trig_Fade_279 takes nothing returns nothing
	if ( ( true ) ) then
	call SetUnitVertexColorBJ(GetEnumUnit(), 100, 100, 100, 50.00)
	else
	call SetUnitVertexColorBJ(GetEnumUnit(), 100, 100, 100, 0.00)
	call GroupRemoveUnitSimple(GetEnumUnit(), udg_FadeGroup)
	endif


endfunction

function Trig_Fade_Actions takes nothing returns nothing
	call ForGroup(udg_FadeGroup, function Trig_Fade_279)

endfunction


//****************************************************************************
function InitTrig_Fade takes nothing returns nothing
	set gg_trg_Fade=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Fade, 1.00)
	call TriggerAddAction(gg_trg_Fade, function Trig_Fade_Actions)
endfunction

//*  Trigger Blight_Spread
//****************************************************************************
function Trig_Blight_Spread_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call SetBlightRadiusLocBJ(true, GetOwningPlayer(GetSpellAbilityUnit()), udg_Point, 325.00)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Blight_Spread takes nothing returns nothing
	set gg_trg_Blight_Spread=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Blight_Spread, EVENT_PLAYER_UNIT_SPELL_CAST)
	call TriggerAddAction(gg_trg_Blight_Spread, function Trig_Blight_Spread_Actions)
endfunction

//*  Trigger Fateful_Strike
//****************************************************************************
function Trig_Fateful_Strike_Actions takes nothing returns nothing
	call TriggerSleepAction(0.40)
	if ( ( true ) ) then
	set udg_Point=GetUnitLoc(GetSpellTargetUnit())
	set s__udg_BlackStrike[1]= GetLastCreatedUnit()
	call SetUnitPathing(s__udg_BlackStrike[1], false)
	call UnitApplyTimedLifeBJ(1.00, 'BTLF', s__udg_BlackStrike[1])
	call IssueImmediateOrderBJ(s__udg_BlackStrike[1], "thunderclap")
	call RemoveLocation(udg_Point)
	else
	endif

	if ( ( true ) ) then
	set udg_Point=GetUnitLoc(GetSpellTargetUnit())
	set s__udg_BlackStrike[2]= GetLastCreatedUnit()
	call SetUnitPathing(s__udg_BlackStrike[2], false)
	call UnitApplyTimedLifeBJ(1.00, 'BTLF', s__udg_BlackStrike[2])
	call IssueImmediateOrderBJ(s__udg_BlackStrike[2], "thunderclap")
	call RemoveLocation(udg_Point)
	else
	endif

	if ( ( true ) ) then
	set udg_Point=GetUnitLoc(GetSpellTargetUnit())
	set s__udg_BlackStrike[3]= GetLastCreatedUnit()
	call SetUnitPathing(s__udg_BlackStrike[3], false)
	call UnitApplyTimedLifeBJ(1.00, 'BTLF', s__udg_BlackStrike[3])
	call IssueImmediateOrderBJ(s__udg_BlackStrike[3], "thunderclap")
	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Fateful_Strike takes nothing returns nothing
	set gg_trg_Fateful_Strike=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Fateful_Strike, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Fateful_Strike, function Trig_Fateful_Strike_Actions)
endfunction

//*  Trigger Banshee_Scream_Cast
//****************************************************************************
function Trig_Banshee_Scream_Cast_Actions takes nothing returns nothing
	set s__udg_BansheeScreamCaster[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= GetTriggerUnit()
	set s__udg_isCastingBansheeScream[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= true
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call AddSpecialEffectLocBJ(udg_Point, "AlternateBansheeQueen.mdx")
	set s__udg_BansheeScreamEffect[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= GetLastCreatedEffectBJ()
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 1.15)
	call BlzPlaySpecialEffect(GetLastCreatedEffectBJ(), ANIM_TYPE_SPELL)
	call BlzSetSpecialEffectYaw(GetLastCreatedEffectBJ(), ( GetUnitFacing(GetTriggerUnit()) * ( 3.14 / 180.00 ) ))
	call ShowUnitHide(GetTriggerUnit())
	call StartTimerBJ(s__udg_BansheeScreamInitTimer[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))], false, 1.00)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Banshee_Scream_Cast takes nothing returns nothing
	set gg_trg_Banshee_Scream_Cast=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Banshee_Scream_Cast, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Banshee_Scream_Cast, function Trig_Banshee_Scream_Cast_Actions)
endfunction

//*  Trigger Banshee_Scream_Start
//****************************************************************************
function BoolExpr_281 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == false and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true and GetUnitLevel(GetFilterUnit()) > 3 ) ) ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_282 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == false and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Banshee_Scream_Start_282 takes nothing returns nothing
	
	call IssueTargetOrderBJ(GetLastCreatedUnit(), "possession", GetEnumUnit())

endfunction

function Trig_Banshee_Scream_Start_Actions takes nothing returns nothing
	set bj_forLoopAIndex=1
set bj_forLoopAIndexEnd=12
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	if ( TimerGetRemaining(GetExpiredTimer()) <= 0.00 and s__udg_isCastingBansheeScream[GetForLoopIndexA()] == true ) then
	set s__udg_isCastingBansheeScream[GetForLoopIndexA()]= false
	set udg_Unit=s__udg_BansheeScreamCaster[GetForLoopIndexA()]
	call ShowUnitShow(udg_Unit)
	call DestroyEffectBJ(s__udg_BansheeScreamEffect[GetForLoopIndexA()])
	set udg_Point=GetUnitLoc(s__udg_BansheeScreamCaster[GetForLoopIndexA()])
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(900.00, udg_Point, Condition(function BoolExpr_281))
	set udg_UnitGroup2=GetRandomSubGroup(3, udg_UnitGroup)
	call DestroyGroup(udg_UnitGroup)
	if ( CountUnitsInGroup(udg_UnitGroup2) < 3 ) then
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(900.00, udg_Point, Condition(function BoolExpr_282))
	set udg_UnitGroup3=GetRandomSubGroup(( 3 - CountUnitsInGroup(udg_UnitGroup2) ), udg_UnitGroup)
	call GroupAddGroup(udg_UnitGroup3, udg_UnitGroup2)
	call DestroyGroup(udg_UnitGroup)
	call DestroyGroup(udg_UnitGroup3)
	else
	endif

	call ForGroup(udg_UnitGroup2, function Trig_Banshee_Scream_Start_282)

	call DestroyGroup(udg_UnitGroup2)
	call RemoveLocation(udg_Point)
	else
	endif

	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
endfunction


//****************************************************************************
function InitTrig_Banshee_Scream_Start takes nothing returns nothing
	set gg_trg_Banshee_Scream_Start=CreateTrigger()
call TriggerRegisterTimerExpireEventBJ(gg_trg_Banshee_Scream_Start, s__udg_BansheeScreamInitTimer[1])
call TriggerRegisterTimerExpireEventBJ(gg_trg_Banshee_Scream_Start, s__udg_BansheeScreamInitTimer[7])
call TriggerRegisterTimerExpireEventBJ(gg_trg_Banshee_Scream_Start, s__udg_BansheeScreamInitTimer[8])
call TriggerRegisterTimerExpireEventBJ(gg_trg_Banshee_Scream_Start, s__udg_BansheeScreamInitTimer[9])
call TriggerRegisterTimerExpireEventBJ(gg_trg_Banshee_Scream_Start, s__udg_BansheeScreamInitTimer[10])
call TriggerRegisterTimerExpireEventBJ(gg_trg_Banshee_Scream_Start, s__udg_BansheeScreamInitTimer[11])
call TriggerRegisterTimerExpireEventBJ(gg_trg_Banshee_Scream_Start, s__udg_BansheeScreamInitTimer[12])
	call TriggerAddAction(gg_trg_Banshee_Scream_Start, function Trig_Banshee_Scream_Start_Actions)
endfunction

//*  Trigger Grave_Blow
//****************************************************************************
function Trig_Grave_Blow_Actions takes nothing returns nothing
	call TriggerSleepAction(0.50)
	if ( ( true ) ) then
	set udg_Point=GetUnitLoc(GetSpellTargetUnit())
	call UnitDamageTargetBJ(GetSpellAbilityUnit(), GetSpellTargetUnit(), 50.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)
	set udg_GraveBlowStun=GetLastCreatedUnit()
	call UnitApplyTimedLifeBJ(2.00, 'BTLF', udg_GraveBlowStun)
	call IssueTargetOrderBJ(udg_GraveBlowStun, "thunderbolt", GetSpellTargetUnit())
	call RemoveLocation(udg_Point)
	else
	endif

	if ( ( true ) ) then
	set udg_Point=GetUnitLoc(GetSpellTargetUnit())
	call UnitDamageTargetBJ(GetSpellAbilityUnit(), GetSpellTargetUnit(), 70.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)
	set udg_GraveBlowStun=GetLastCreatedUnit()
	call UnitApplyTimedLifeBJ(2.00, 'BTLF', udg_GraveBlowStun)
	call IssueTargetOrderBJ(udg_GraveBlowStun, "thunderbolt", GetSpellTargetUnit())
	call RemoveLocation(udg_Point)
	else
	endif

	if ( ( true ) ) then
	set udg_Point=GetUnitLoc(GetSpellTargetUnit())
	call UnitDamageTargetBJ(GetSpellAbilityUnit(), GetSpellTargetUnit(), 90.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)
	set udg_GraveBlowStun=GetLastCreatedUnit()
	call UnitApplyTimedLifeBJ(2.00, 'BTLF', udg_GraveBlowStun)
	call IssueTargetOrderBJ(udg_GraveBlowStun, "thunderbolt", GetSpellTargetUnit())
	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Grave_Blow takes nothing returns nothing
	set gg_trg_Grave_Blow=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Grave_Blow, EVENT_PLAYER_UNIT_SPELL_CAST)
	call TriggerAddAction(gg_trg_Grave_Blow, function Trig_Grave_Blow_Actions)
endfunction

//*  Trigger Blight_Aura
//****************************************************************************
function BoolExpr_285 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetEnumUnit())) == false and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Blight_Aura_283 takes nothing returns nothing
	if ( IsUnitAliveBJ(GetEnumUnit()) == true ) then
	
	set udg_Point=GetUnitLoc(GetEnumUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(900.00, udg_Point, Condition(function BoolExpr_285))
	call GroupAddGroup(udg_UnitGroup, s__udg_BlightAuraGroup[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))])
	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif


endfunction

function Trig_Blight_Aura_285 takes nothing returns nothing
	if ( s__udg_BlightAuraLevelTemp[GetForLoopIndexA()] == 1 ) then
	call SetUnitLifeBJ(GetEnumUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetEnumUnit()) + 2.00 ))
	else
	if ( s__udg_BlightAuraLevelTemp[GetForLoopIndexA()] == 2 ) then
	call SetUnitLifeBJ(GetEnumUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetEnumUnit()) + 3.00 ))
	else
	if ( s__udg_BlightAuraLevelTemp[GetForLoopIndexA()] == 3 ) then
	call SetUnitLifeBJ(GetEnumUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetEnumUnit()) + 4.00 ))
	else
	endif

	endif

	endif


endfunction

function Trig_Blight_Aura_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Reapers) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Blight_Aura_Actions takes nothing returns nothing
	call ForGroup(udg_Reapers, function Trig_Blight_Aura_283)

	set bj_forLoopAIndex=7
set bj_forLoopAIndexEnd=12
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	call ForGroup(s__udg_BlightAuraGroup[GetForLoopIndexA()], function Trig_Blight_Aura_285)

	call GroupClear(s__udg_BlightAuraGroup[GetForLoopIndexA()])
	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
endfunction


//****************************************************************************
function InitTrig_Blight_Aura takes nothing returns nothing
	set gg_trg_Blight_Aura=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Blight_Aura, 2.00)
	call TriggerAddCondition(gg_trg_Blight_Aura, Condition(function Trig_Blight_Aura_Conditions))
	call TriggerAddAction(gg_trg_Blight_Aura, function Trig_Blight_Aura_Actions)
endfunction

//*  Trigger Punish_New
//****************************************************************************
function Trig_Punish_New_Conditions takes nothing returns boolean
	if ( not ( TimerGetRemaining(s__udg_PunishTimer[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))]) <= 0.00 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Punish_New_Actions takes nothing returns nothing
	call UnitDamageTargetBJ(GetAttacker(), GetTriggerUnit(), 50.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)
	if ( ( true ) ) then
	call StartTimerBJ(s__udg_PunishTimer[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))], false, 10.00)
	else
	if ( ( true ) ) then
	call StartTimerBJ(s__udg_PunishTimer[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))], false, 8.00)
	else
	if ( ( true ) ) then
	call StartTimerBJ(s__udg_PunishTimer[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))], false, 6.00)
	else
	endif

	endif

	endif

endfunction


//****************************************************************************
function InitTrig_Punish_New takes nothing returns nothing
	set gg_trg_Punish_New=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Punish_New, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Punish_New, Condition(function Trig_Punish_New_Conditions))
	call TriggerAddAction(gg_trg_Punish_New, function Trig_Punish_New_Actions)
endfunction

//*  Trigger Corpse_Consume
//****************************************************************************
function BoolExpr_288 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetEnumUnit())) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == false and IsUnitDeadBJ(GetFilterUnit()) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Corpse_Consume_286 takes nothing returns nothing
	if ( IsUnitAliveBJ(GetEnumUnit()) == true ) then
	set udg_Point=GetUnitLoc(GetEnumUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(512, udg_Point, Condition(function BoolExpr_288))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup)
	set udg_Point2=GetUnitLoc(udg_Unit)
	
	call SetUnitLifeBJ(GetEnumUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetEnumUnit()) + udg_Real ))
	call AddSpecialEffectTargetUnitBJ("chest", GetEnumUnit(), "Abilities\\Spells\\Undead\\DeathCoil\\DeathCoilSpecialArt.mdl")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 1.50)
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call AddSpecialEffectLocBJ(udg_Point2, "Abilities\\Spells\\Undead\\DeathCoil\\DeathCoilSpecialArt.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveUnit(udg_Unit)
	call RemoveLocation(udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif


endfunction

function Trig_Corpse_Consume_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Deathstalkers) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Corpse_Consume_Actions takes nothing returns nothing
	call ForGroup(udg_Deathstalkers, function Trig_Corpse_Consume_286)

endfunction


//****************************************************************************
function InitTrig_Corpse_Consume takes nothing returns nothing
	set gg_trg_Corpse_Consume=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Corpse_Consume, 10.00)
	call TriggerAddCondition(gg_trg_Corpse_Consume, Condition(function Trig_Corpse_Consume_Conditions))
	call TriggerAddAction(gg_trg_Corpse_Consume, function Trig_Corpse_Consume_Actions)
endfunction

//*  Trigger Contract_Kill
//****************************************************************************
function Trig_Contract_Kill_Actions takes nothing returns nothing
	if ( ( true ) ) then
	call SetUnitLifeBJ(GetKillingUnitBJ(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetKillingUnitBJ()) + ( GetUnitStateSwap(UNIT_STATE_MAX_LIFE, GetKillingUnitBJ()) * 0.08 ) ))
	else
	endif

	if ( ( true ) ) then
	call SetUnitLifeBJ(GetKillingUnitBJ(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetKillingUnitBJ()) + ( GetUnitStateSwap(UNIT_STATE_MAX_LIFE, GetKillingUnitBJ()) * 0.12 ) ))
	else
	endif

	if ( ( true ) ) then
	call SetUnitLifeBJ(GetKillingUnitBJ(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetKillingUnitBJ()) + ( GetUnitStateSwap(UNIT_STATE_MAX_LIFE, GetKillingUnitBJ()) * 0.16 ) ))
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Contract_Kill takes nothing returns nothing
	set gg_trg_Contract_Kill=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Contract_Kill, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddAction(gg_trg_Contract_Kill, function Trig_Contract_Kill_Actions)
endfunction

//*  Trigger AI_Grave_Blow
//****************************************************************************
function BoolExpr_289 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_290 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Grave_Blow_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Reapers) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Grave_Blow_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Reapers)
	if ( s__udg_activeGraveBlow[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(200.00, udg_Point, Condition(function BoolExpr_289))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "forkedlightning", GroupPickRandomUnit(udg_UnitGroup))
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(200.00, udg_Point, Condition(function BoolExpr_290))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "forkedlightning", GroupPickRandomUnit(udg_UnitGroup2))
	call RemoveLocation(udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Grave_Blow takes nothing returns nothing
	set gg_trg_AI_Grave_Blow=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Grave_Blow, 0.75)
	call TriggerAddCondition(gg_trg_AI_Grave_Blow, Condition(function Trig_AI_Grave_Blow_Conditions))
	call TriggerAddAction(gg_trg_AI_Grave_Blow, function Trig_AI_Grave_Blow_Actions)
endfunction

//*  Trigger AI_Dread
//****************************************************************************
function BoolExpr_291 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetAttacker())) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false and IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false ) ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Dread_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeDread[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Dread_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetAttacker())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(300.00, udg_Point, Condition(function BoolExpr_291))
	if ( CountUnitsInGroup(udg_UnitGroup) > 1 ) then
	call IssueImmediateOrderBJ(GetAttacker(), "howlofterror")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_AI_Dread takes nothing returns nothing
	set gg_trg_AI_Dread=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Dread, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Dread, Condition(function Trig_AI_Dread_Conditions))
	call TriggerAddAction(gg_trg_AI_Dread, function Trig_AI_Dread_Actions)
endfunction

//*  Trigger AI_Life_Drain
//****************************************************************************
function BoolExpr_292 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_293 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and GetUnitLifePercent(GetFilterUnit()) >= 50.00 ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Life_Drain_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_BansheeMaidens) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Life_Drain_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_BansheeMaidens)
	if ( s__udg_activeLifeDrainForsaken[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitLifePercent(udg_Unit) < 100.00 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("drain") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_292))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(udg_Unit, "drain", udg_Unit2)
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_293))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	call IssueTargetOrderBJ(udg_Unit, "drain", udg_Unit2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Life_Drain takes nothing returns nothing
	set gg_trg_AI_Life_Drain=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Life_Drain, 1.00)
	call TriggerAddCondition(gg_trg_AI_Life_Drain, Condition(function Trig_AI_Life_Drain_Conditions))
	call TriggerAddAction(gg_trg_AI_Life_Drain, function Trig_AI_Life_Drain_Actions)
endfunction

//*  Trigger AI_Remorseless
//****************************************************************************
function Trig_AI_Remorseless_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeRemorseless[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Remorseless_Actions takes nothing returns nothing
	call IssueImmediateOrder(GetAttacker(), "frenzy")
endfunction


//****************************************************************************
function InitTrig_AI_Remorseless takes nothing returns nothing
	set gg_trg_AI_Remorseless=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Remorseless, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Remorseless, Condition(function Trig_AI_Remorseless_Conditions))
	call TriggerAddAction(gg_trg_AI_Remorseless, function Trig_AI_Remorseless_Actions)
endfunction

//*  Trigger AI_Banshee_Scream
//****************************************************************************
function BoolExpr_294 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == false and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Banshee_Scream_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_BansheeMaidens) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Banshee_Scream_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_BansheeMaidens)
	if ( s__udg_activeBansheeScream[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(900.00, udg_Point, Condition(function BoolExpr_294))
	if ( CountUnitsInGroup(udg_UnitGroup) > 2 ) then
	call IssueImmediateOrderBJ(udg_Unit, "roar")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Banshee_Scream takes nothing returns nothing
	set gg_trg_AI_Banshee_Scream=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Banshee_Scream, 1.00)
	call TriggerAddCondition(gg_trg_AI_Banshee_Scream, Condition(function Trig_AI_Banshee_Scream_Conditions))
	call TriggerAddAction(gg_trg_AI_Banshee_Scream, function Trig_AI_Banshee_Scream_Actions)
endfunction

//*  Trigger AI_Punish
//****************************************************************************
function BoolExpr_295 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_296 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Punish_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Deathstalkers) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Punish_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Deathstalkers)
	if ( s__udg_activePunish[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(200.00, udg_Point, Condition(function BoolExpr_295))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "shadowstrike", GroupPickRandomUnit(udg_UnitGroup))
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(200.00, udg_Point, Condition(function BoolExpr_296))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "shadowstrike", GroupPickRandomUnit(udg_UnitGroup2))
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Punish takes nothing returns nothing
	set gg_trg_AI_Punish=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Punish, 0.75)
	call TriggerAddCondition(gg_trg_AI_Punish, Condition(function Trig_AI_Punish_Conditions))
	call TriggerAddAction(gg_trg_AI_Punish, function Trig_AI_Punish_Actions)
endfunction

//*  Trigger AI_Death_Bound
//****************************************************************************
function BoolExpr_297 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_298 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_299 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Death_Bound_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Deathstalkers) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Death_Bound_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Deathstalkers)
	if ( s__udg_activeDeathBound[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_297))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "doom", GroupPickRandomUnit(udg_UnitGroup))
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_298))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(300.00, udg_Point2, Condition(function BoolExpr_299))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 2 ) then
	call IssueTargetOrderBJ(udg_Unit, "doom", GroupPickRandomUnit(udg_UnitGroup2))
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Death_Bound takes nothing returns nothing
	set gg_trg_AI_Death_Bound=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Death_Bound, 1.00)
	call TriggerAddCondition(gg_trg_AI_Death_Bound, Condition(function Trig_AI_Death_Bound_Conditions))
	call TriggerAddAction(gg_trg_AI_Death_Bound, function Trig_AI_Death_Bound_Actions)
endfunction

//*  Trigger AI_Vile_Blast
//****************************************************************************
function BoolExpr_300 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_301 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Vile_Blast_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Exterminators) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Vile_Blast_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Exterminators)
	if ( s__udg_activeVileBlast[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("tornado") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_300))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(250.00, udg_Point2, Condition(function BoolExpr_301))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 2 ) then
	call IssuePointOrderLocBJ(udg_Unit, "flamestrike", udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Vile_Blast takes nothing returns nothing
	set gg_trg_AI_Vile_Blast=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Vile_Blast, 1.20)
	call TriggerAddCondition(gg_trg_AI_Vile_Blast, Condition(function Trig_AI_Vile_Blast_Conditions))
	call TriggerAddAction(gg_trg_AI_Vile_Blast, function Trig_AI_Vile_Blast_Actions)
endfunction

//*  Trigger AI_Plague
//****************************************************************************
function Trig_AI_Plague_Conditions takes nothing returns boolean
	if ( not ( s__udg_activePlague[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) ) then
		return false
	endif
	if ( not ( GetUnitCurrentOrder(GetAttacker()) != String2OrderIdBJ("flamestrike") ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Plague_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "locustswarm")
endfunction


//****************************************************************************
function InitTrig_AI_Plague takes nothing returns nothing
	set gg_trg_AI_Plague=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Plague, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Plague, Condition(function Trig_AI_Plague_Conditions))
	call TriggerAddAction(gg_trg_AI_Plague, function Trig_AI_Plague_Actions)
endfunction

//*  Trigger AI_Greater_Abomination
//****************************************************************************
function Trig_AI_Greater_Abomination_Conditions takes nothing returns boolean
	if ( not ( s__udg_activeGreaterAbomination[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
		return false
	endif
	if ( not ( GetUnitCurrentOrder(GetAttacker()) != String2OrderIdBJ("flamestrike") ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Greater_Abomination_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "spiritwolf")
endfunction


//****************************************************************************
function InitTrig_AI_Greater_Abomination takes nothing returns nothing
	set gg_trg_AI_Greater_Abomination=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Greater_Abomination, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Greater_Abomination, Condition(function Trig_AI_Greater_Abomination_Conditions))
	call TriggerAddAction(gg_trg_AI_Greater_Abomination, function Trig_AI_Greater_Abomination_Actions)
endfunction

//*  Trigger AI_Potent_Remedy
//****************************************************************************
function BoolExpr_302 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and ( IsUnitAliveBJ(GetFilterUnit()) == true and GetUnitLifePercent(GetFilterUnit()) <= 90.00 ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Potent_Remedy_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Apothecarys) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Potent_Remedy_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Apothecarys)
	if ( s__udg_activePotentRemedy[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_302))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(udg_Unit, "rejuvination", udg_Unit2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Potent_Remedy takes nothing returns nothing
	set gg_trg_AI_Potent_Remedy=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Potent_Remedy, 0.70)
	call TriggerAddCondition(gg_trg_AI_Potent_Remedy, Condition(function Trig_AI_Potent_Remedy_Conditions))
	call TriggerAddAction(gg_trg_AI_Potent_Remedy, function Trig_AI_Potent_Remedy_Actions)
endfunction

//*  Trigger AI_Forsaken_Concoction
//****************************************************************************
function BoolExpr_303 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_304 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_305 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Forsaken_Concoction_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Apothecarys) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Forsaken_Concoction_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Apothecarys)
	if ( s__udg_activeForsakenConcoction[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_303))
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(1000.00, udg_Point, Condition(function BoolExpr_304))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 and CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	
	set udg_UnitGroup4=GetUnitsInRangeOfLocMatching(400.00, udg_Point2, Condition(function BoolExpr_305))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 1 and CountUnitsInGroup(udg_UnitGroup4) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "acidbomb", udg_Unit2)
	else
	endif

	call RemoveLocation(udg_Point2)
	call DestroyGroup(udg_UnitGroup3)
	call DestroyGroup(udg_UnitGroup4)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Forsaken_Concoction takes nothing returns nothing
	set gg_trg_AI_Forsaken_Concoction=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Forsaken_Concoction, 0.70)
	call TriggerAddCondition(gg_trg_AI_Forsaken_Concoction, Condition(function Trig_AI_Forsaken_Concoction_Conditions))
	call TriggerAddAction(gg_trg_AI_Forsaken_Concoction, function Trig_AI_Forsaken_Concoction_Actions)
endfunction

//*  Trigger AI_Death_Fumes
//****************************************************************************
function BoolExpr_306 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_307 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Death_Fumes_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Apothecarys) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Death_Fumes_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Apothecarys)
	if ( GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("healingspray") and s__udg_activeAcerbicPotion[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_306))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(300.00, udg_Point2, Condition(function BoolExpr_307))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 2 ) then
	call IssuePointOrderLocBJ(udg_Unit, "healingward", udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point2)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Death_Fumes takes nothing returns nothing
	set gg_trg_AI_Death_Fumes=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Death_Fumes, 0.80)
	call TriggerAddCondition(gg_trg_AI_Death_Fumes, Condition(function Trig_AI_Death_Fumes_Conditions))
	call TriggerAddAction(gg_trg_AI_Death_Fumes, function Trig_AI_Death_Fumes_Actions)
endfunction

//*  Trigger AI_Hook
//****************************************************************************
function BoolExpr_308 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true and BlzGetUnitWeaponRealField(GetFilterUnit(), UNIT_WEAPON_RF_ATTACK_RANGE, 0) >= 650.00 ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_309 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true and BlzGetUnitWeaponRealField(GetFilterUnit(), UNIT_WEAPON_RF_ATTACK_RANGE, 0) >= 400.00 ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Hook_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_AbominationsForsaken) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Hook_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_AbominationsForsaken)
	if ( s__udg_activeHook[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(850.00, udg_Point, Condition(function BoolExpr_308))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	if ( IsUnitInGroup(udg_Unit2, udg_HookGroup) == false and DistanceBetweenPoints(udg_Point, udg_Point2) >= 500.00 ) then
	call IssueTargetOrderBJ(udg_Unit, "chainlightning", udg_Unit2)
	else
	endif

	call RemoveLocation(udg_Point2)
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(850.00, udg_Point, Condition(function BoolExpr_309))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	set udg_Point2=GetUnitLoc(udg_Unit2)
	if ( IsUnitInGroup(udg_Unit2, udg_HookGroup) == false and DistanceBetweenPoints(udg_Point, udg_Point2) >= 450.00 ) then
	call IssueTargetOrderBJ(udg_Unit, "chainlightning", udg_Unit2)
	else
	endif

	call RemoveLocation(udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Hook takes nothing returns nothing
	set gg_trg_AI_Hook=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Hook, 0.30)
	call TriggerAddCondition(gg_trg_AI_Hook, Condition(function Trig_AI_Hook_Conditions))
	call TriggerAddAction(gg_trg_AI_Hook, function Trig_AI_Hook_Actions)
endfunction

//*  Trigger AI_Forlorn_Cell
//****************************************************************************
function BoolExpr_310 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and UnitHasBuffBJ(GetFilterUnit(), 'Bams') == false ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Forlorn_Cell_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Wraithblades) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Forlorn_Cell_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Wraithblades)
	if ( s__udg_activeForlornCell[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(500.00, udg_Point, Condition(function BoolExpr_310))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	call IssueTargetOrderBJ(udg_Unit, "antimagicshell", udg_Unit2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Forlorn_Cell takes nothing returns nothing
	set gg_trg_AI_Forlorn_Cell=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Forlorn_Cell, 0.75)
	call TriggerAddCondition(gg_trg_AI_Forlorn_Cell, Condition(function Trig_AI_Forlorn_Cell_Conditions))
	call TriggerAddAction(gg_trg_AI_Forlorn_Cell, function Trig_AI_Forlorn_Cell_Actions)
endfunction

//*  Trigger AI_Consume_NEW
//****************************************************************************
function BoolExpr_311 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( GetUnitStateSwap(UNIT_STATE_MAX_MANA, GetFilterUnit()) >= 0.00 and GetUnitManaPercent(GetFilterUnit()) >= 35.00 ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Consume_NEW_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Spectres) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Consume_NEW_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Spectres)
	if ( s__udg_activeConsume[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(850.00, udg_Point, Condition(function BoolExpr_311))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(udg_Unit, "absorb", udg_Unit2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Consume_NEW takes nothing returns nothing
	set gg_trg_AI_Consume_NEW=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Consume_NEW, 0.80)
	call TriggerAddCondition(gg_trg_AI_Consume_NEW, Condition(function Trig_AI_Consume_NEW_Conditions))
	call TriggerAddAction(gg_trg_AI_Consume_NEW, function Trig_AI_Consume_NEW_Actions)
endfunction

//*  Trigger AI_Fade
//****************************************************************************
function Trig_AI_Fade_Conditions takes nothing returns boolean
	if ( not ( GetUnitLifePercent(GetTriggerUnit()) < 90.00 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Fade_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_Spectres) > 0 ) then
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_UnitGroup)
	if ( s__udg_activeFade[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	call IssueTargetOrderBJ(udg_Unit, "unholyfrenzy", GetTriggerUnit())
	else
	endif

	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Fade takes nothing returns nothing
	set gg_trg_AI_Fade=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Fade, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Fade, Condition(function Trig_AI_Fade_Conditions))
	call TriggerAddAction(gg_trg_AI_Fade, function Trig_AI_Fade_Actions)
endfunction

//*  Trigger AI_Petrify
//****************************************************************************
function Trig_AI_Petrify_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Gorgons) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Petrify_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Gorgons)
	if ( s__udg_activePetrify[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	call IssueTargetOrderBJ(udg_Unit, "sleep", udg_Unit2)
	else
	
	if ( CountUnitsInGroup(udg_UnitGroup3) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup3)
	call IssueTargetOrderBJ(udg_Unit, "sleep", udg_Unit2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Petrify takes nothing returns nothing
	set gg_trg_AI_Petrify=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Petrify, 0.65)
	call TriggerAddCondition(gg_trg_AI_Petrify, Condition(function Trig_AI_Petrify_Conditions))
	call TriggerAddAction(gg_trg_AI_Petrify, function Trig_AI_Petrify_Actions)
endfunction

//*  Trigger AI_Sentient
//****************************************************************************
function BoolExpr_312 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and IsUnitAliveBJ(GetFilterUnit()) == false ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Sentient_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Wraithblades) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Sentient_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Wraithblades)
	if ( s__udg_activeSentient[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_312))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	call IssueImmediateOrderBJ(udg_Unit, "animatedead")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Sentient takes nothing returns nothing
	set gg_trg_AI_Sentient=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Sentient, 0.75)
	call TriggerAddCondition(gg_trg_AI_Sentient, Condition(function Trig_AI_Sentient_Conditions))
	call TriggerAddAction(gg_trg_AI_Sentient, function Trig_AI_Sentient_Actions)
endfunction

//*  Trigger AI_Salubrious
//****************************************************************************
function BoolExpr_313 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and GetUnitLifePercent(GetFilterUnit()) <= 75.00 ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Salubrious_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Wraithblades) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Salubrious_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Wraithblades)
	if ( s__udg_activeSalubrious[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(700.00, udg_Point, Condition(function BoolExpr_313))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "healingwave", GroupPickRandomUnit(udg_UnitGroup2))
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Salubrious takes nothing returns nothing
	set gg_trg_AI_Salubrious=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Salubrious, 1.00)
	call TriggerAddCondition(gg_trg_AI_Salubrious, Condition(function Trig_AI_Salubrious_Conditions))
	call TriggerAddAction(gg_trg_AI_Salubrious, function Trig_AI_Salubrious_Actions)
endfunction

//*  Trigger AI_Undead_Embrace
//****************************************************************************
function BoolExpr_314 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_UNDEAD) == true and ( GetUnitLevel(GetFilterUnit()) >= 3 and GetUnitLifePercent(GetFilterUnit()) <= 75.00 ) ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Undead_Embrace_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Valkyrs) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Undead_Embrace_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Valkyrs)
	if ( s__udg_activeUndeadEmbrace[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_314))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "deathcoil", GroupPickRandomUnit(udg_UnitGroup2))
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Undead_Embrace takes nothing returns nothing
	set gg_trg_AI_Undead_Embrace=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Undead_Embrace, 1.00)
	call TriggerAddCondition(gg_trg_AI_Undead_Embrace, Condition(function Trig_AI_Undead_Embrace_Conditions))
	call TriggerAddAction(gg_trg_AI_Undead_Embrace, function Trig_AI_Undead_Embrace_Actions)
endfunction

//*  Trigger Magical_Skin
//****************************************************************************
function Trig_Magical_Skin_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	
	call UnitApplyTimedLifeBJ(1.00, 'BTLF', GetLastCreatedUnit())
	call IssueTargetOrderBJ(GetLastCreatedUnit(), "slow", GetAttacker())
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Magical_Skin takes nothing returns nothing
	set gg_trg_Magical_Skin=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Magical_Skin, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddAction(gg_trg_Magical_Skin, function Trig_Magical_Skin_Actions)
endfunction

//*  Trigger Murloc_Acid
//****************************************************************************
function BoolExpr_315 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Murloc_Acid_315 takes nothing returns nothing
	call UnitDamageTargetBJ(GetTriggerUnit(), GetEnumUnit(), 35.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)

endfunction

function Trig_Murloc_Acid_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(150.00, udg_Point, Condition(function BoolExpr_315))
	call ForGroup(udg_UnitGroup, function Trig_Murloc_Acid_315)

	
	set udg_Unit=GetLastCreatedUnit()
	
	call UnitApplyTimedLifeBJ(1.00, 'BTLF', udg_Unit)
	call UnitApplyTimedLifeBJ(1.00, 'BTLF', GetLastCreatedUnit())
	call IssueTargetOrderBJ(udg_Unit, "acidbomb", GetLastCreatedUnit())
	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Murloc_Acid takes nothing returns nothing
	set gg_trg_Murloc_Acid=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Murloc_Acid, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddAction(gg_trg_Murloc_Acid, function Trig_Murloc_Acid_Actions)
endfunction

//*  Trigger Couatl_Dies
//****************************************************************************
function Trig_Couatl_Dies_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	
	call SetUnitAnimation(GetLastCreatedUnit(), "birth")
	call GroupAddUnitSimple(GetLastCreatedUnit(), udg_CouatlEggGroup)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Couatl_Dies takes nothing returns nothing
	set gg_trg_Couatl_Dies=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Couatl_Dies, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddAction(gg_trg_Couatl_Dies, function Trig_Couatl_Dies_Actions)
endfunction

//*  Trigger Couatl_Egg_Dies
//****************************************************************************
function Trig_Couatl_Egg_Dies_316 takes nothing returns nothing
	if ( GetUnitStateSwap(UNIT_STATE_MANA, GetEnumUnit()) >= 10.00 ) then
	set udg_Point=GetUnitLoc(GetEnumUnit())
	call SetUnitLifePercentBJ(GetLastCreatedUnit(), GetUnitLifePercent(GetEnumUnit()))
	call KillUnit(GetEnumUnit())
	call GroupRemoveUnitSimple(GetEnumUnit(), udg_CouatlEggGroup)
	call RemoveLocation(udg_Point)
	else
	endif


endfunction

function Trig_Couatl_Egg_Dies_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_CouatlEggGroup) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Couatl_Egg_Dies_Actions takes nothing returns nothing
	call ForGroup(udg_CouatlEggGroup, function Trig_Couatl_Egg_Dies_316)

endfunction


//****************************************************************************
function InitTrig_Couatl_Egg_Dies takes nothing returns nothing
	set gg_trg_Couatl_Egg_Dies=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Couatl_Egg_Dies, 1.00)
	call TriggerAddCondition(gg_trg_Couatl_Egg_Dies, Condition(function Trig_Couatl_Egg_Dies_Conditions))
	call TriggerAddAction(gg_trg_Couatl_Egg_Dies, function Trig_Couatl_Egg_Dies_Actions)
endfunction

//*  Trigger Siren_Aura
//****************************************************************************
function BoolExpr_318 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Siren_Aura_318 takes nothing returns nothing
	call SetUnitLifeBJ(GetTriggerUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetTriggerUnit()) - 30.00 ))
	call SetUnitLifeBJ(GetFilterUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetFilterUnit()) + 30.00 ))

endfunction

function BoolExpr_320 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Siren_Aura_320 takes nothing returns nothing
	call SetUnitLifeBJ(GetTriggerUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetTriggerUnit()) - 60.00 ))
	call SetUnitLifeBJ(GetFilterUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetFilterUnit()) + 60.00 ))

endfunction

function BoolExpr_322 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Siren_Aura_322 takes nothing returns nothing
	call SetUnitLifeBJ(GetTriggerUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetTriggerUnit()) - 90.00 ))
	call SetUnitLifeBJ(GetFilterUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetFilterUnit()) + 90.00 ))

endfunction

function Trig_Siren_Aura_Conditions takes nothing returns boolean
	if ( not ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Siren_Aura_Actions takes nothing returns nothing
	if ( ( true ) ) then
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_318))
	call ForGroup(udg_UnitGroup, function Trig_Siren_Aura_318)

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	if ( ( true ) ) then
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_320))
	call ForGroup(udg_UnitGroup, function Trig_Siren_Aura_320)

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	if ( ( true ) ) then
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_322))
	call ForGroup(udg_UnitGroup, function Trig_Siren_Aura_322)

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

	endif

	endif

endfunction


//****************************************************************************
function InitTrig_Siren_Aura takes nothing returns nothing
	set gg_trg_Siren_Aura=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Siren_Aura, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Siren_Aura, Condition(function Trig_Siren_Aura_Conditions))
	call TriggerAddAction(gg_trg_Siren_Aura, function Trig_Siren_Aura_Actions)
endfunction

//*  Trigger Malediction
//****************************************************************************
function Trig_Malediction_Actions takes nothing returns nothing
	call SetUnitLifeBJ(GetSpellTargetUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetSpellTargetUnit()) * 0.60 ))
	call SetUnitManaBJ(GetSpellTargetUnit(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetSpellTargetUnit()) * 0.60 ))
endfunction


//****************************************************************************
function InitTrig_Malediction takes nothing returns nothing
	set gg_trg_Malediction=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Malediction, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Malediction, function Trig_Malediction_Actions)
endfunction

//*  Trigger Gust
//****************************************************************************
function Trig_Gust_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetSpellTargetUnit())
	call AddSpecialEffectLocBJ(udg_Point, "Objects\\Spawnmodels\\Naga\\NagaDeath\\NagaDeath.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	
	call UnitApplyTimedLifeBJ(1.00, 'BTLF', GetLastCreatedUnit())
	
	call IssueTargetOrderBJ(GetLastCreatedUnit(), "acidbomb", GetSpellTargetUnit())
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Gust takes nothing returns nothing
	set gg_trg_Gust=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Gust, EVENT_PLAYER_UNIT_SPELL_CAST)
	call TriggerAddAction(gg_trg_Gust, function Trig_Gust_Actions)
endfunction

//*  Trigger Ravage
//****************************************************************************
function Trig_Ravage_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_Integer=7
	set udg_Real=0.00
	set bj_forLoopAIndex=1
set bj_forLoopAIndexEnd=udg_Integer
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	
	call UnitApplyTimedLifeBJ(2.00, 'BTLF', GetLastCreatedUnit())
	set udg_Real=( udg_Real + ( 360.00 / I2R(GetForLoopIndexA()) ) )
	set udg_Point2=PolarProjectionBJ(udg_Point, 256, udg_Real)
	call IssuePointOrderLocBJ(GetLastCreatedUnit(), "impale", udg_Point2)
	call RemoveLocation(udg_Point2)
	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Ravage takes nothing returns nothing
	set gg_trg_Ravage=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Ravage, EVENT_PLAYER_UNIT_SPELL_CAST)
	call TriggerAddAction(gg_trg_Ravage, function Trig_Ravage_Actions)
endfunction

//*  Trigger Kraken_Shell
//****************************************************************************
function Trig_Kraken_Shell_Conditions takes nothing returns boolean
	if ( not ( GetRandomInt(1, 5) == 1 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Kraken_Shell_Actions takes nothing returns nothing
	call UnitRemoveBuffsExBJ(bj_BUFF_POLARITY_NEGATIVE, bj_BUFF_RESIST_EITHER, GetAttacker(), false, false)
endfunction


//****************************************************************************
function InitTrig_Kraken_Shell takes nothing returns nothing
	set gg_trg_Kraken_Shell=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Kraken_Shell, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_Kraken_Shell, Condition(function Trig_Kraken_Shell_Conditions))
	call TriggerAddAction(gg_trg_Kraken_Shell, function Trig_Kraken_Shell_Actions)
endfunction

//*  Trigger Termal_Eruption
//****************************************************************************
function Trig_Termal_Eruption_Actions takes nothing returns nothing
	set udg_Point=GetSpellTargetLoc()
	call AddSpecialEffectLocBJ(udg_Point, "Objects\\Spawnmodels\\Naga\\NagaDeath\\NagaDeath.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	
	call UnitApplyTimedLifeBJ(1.00, 'BTLF', GetLastCreatedUnit())
	
	call IssueImmediateOrderBJ(GetLastCreatedUnit(), "thunderclap")
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Termal_Eruption takes nothing returns nothing
	set gg_trg_Termal_Eruption=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Termal_Eruption, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Termal_Eruption, function Trig_Termal_Eruption_Actions)
endfunction

//*  Trigger Aqua_Burst
//****************************************************************************
function BoolExpr_324 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Aqua_Burst_324 takes nothing returns nothing
	call UnitDamageTargetBJ(GetTriggerUnit(), GetEnumUnit(), udg_Real, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)

endfunction

function Trig_Aqua_Burst_Actions takes nothing returns nothing
	set udg_Point=GetSpellTargetLoc()
	call SetUnitPositionLoc(GetTriggerUnit(), udg_Point)
	call BlzStartUnitAbilityCooldown(GetTriggerUnit(), GetSpellAbilityId(), BlzGetAbilityRealLevelField(BlzGetUnitAbility(GetTriggerUnit(), GetSpellAbilityId()), ABILITY_RLF_COOLDOWN, GetUnitAbilityLevelSwapped(GetSpellAbilityId(), GetTriggerUnit())))
	call AddSpecialEffectLocBJ(udg_Point, "Objects\\Spawnmodels\\Naga\\NagaDeath\\NagaDeath.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(250.00, udg_Point, Condition(function BoolExpr_324))
	if ( ( true ) ) then
	set udg_Real=100.00
	else
	if ( ( true ) ) then
	set udg_Real=150.00
	else
	if ( ( true ) ) then
	set udg_Real=200.00
	else
	endif

	endif

	endif

	call ForGroup(udg_UnitGroup, function Trig_Aqua_Burst_324)

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Aqua_Burst takes nothing returns nothing
	set gg_trg_Aqua_Burst=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Aqua_Burst, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Aqua_Burst, function Trig_Aqua_Burst_Actions)
endfunction

//*  Trigger Vortex_Aura
//****************************************************************************
function BoolExpr_327 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetEnumUnit())) == false and ( IsUnitAliveBJ(GetFilterUnit()) == true and GetUnitStateSwap(UNIT_STATE_MAX_MANA, GetFilterUnit()) >= 1.00 ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Vortex_Aura_325 takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetEnumUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(900.00, udg_Point, Condition(function BoolExpr_327))
	call GroupAddGroup(udg_UnitGroup, udg_VortexAuraGroup)
	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)

endfunction

function Trig_Vortex_Aura_327 takes nothing returns nothing
	if ( ( true ) ) then
	else
	if ( ( true ) ) then
	else
	if ( ( true ) ) then
	else
	endif

	endif

	endif


endfunction

function Trig_Vortex_Aura_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_RoyalCommanders) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Vortex_Aura_Actions takes nothing returns nothing
	call ForGroup(udg_RoyalCommanders, function Trig_Vortex_Aura_325)

	call ForGroup(udg_VortexAuraGroup, function Trig_Vortex_Aura_327)

	call GroupClear(udg_VortexAuraGroup)
endfunction


//****************************************************************************
function InitTrig_Vortex_Aura takes nothing returns nothing
	set gg_trg_Vortex_Aura=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Vortex_Aura, 2)
	call TriggerAddCondition(gg_trg_Vortex_Aura, Condition(function Trig_Vortex_Aura_Conditions))
	call TriggerAddAction(gg_trg_Vortex_Aura, function Trig_Vortex_Aura_Actions)
endfunction

//*  Trigger Razor_Edge
//****************************************************************************
function Trig_Razor_Edge_Actions takes nothing returns nothing
	call SetUnitPathing(GetTriggerUnit(), false)
	set s__udg_isRazorEdgeOn[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= true
	set s__udg_RazorEdgeCaster[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= GetTriggerUnit()
	call GroupAddUnitSimple(GetTriggerUnit(), udg_RazorEdgeGroup)
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_Point2=GetSpellTargetLoc()
	set s__udg_RazorEdgeEndLoc[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= PolarProjectionBJ(udg_Point, 500.00, AngleBetweenPoints(udg_Point, udg_Point2))
	call SetUnitAnimationWithRarity(GetTriggerUnit(), "attack, walk, stand, spin", RARITY_RARE)
	call GroupClear(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	call RemoveLocation(udg_Point2)
	call EnableTrigger(gg_trg_Razor_Edge_Periodic)
endfunction


//****************************************************************************
function InitTrig_Razor_Edge takes nothing returns nothing
	set gg_trg_Razor_Edge=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Razor_Edge, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Razor_Edge, function Trig_Razor_Edge_Actions)
endfunction

//*  Trigger Razor_Edge_Periodic
//****************************************************************************
function BoolExpr_329 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true and IsUnitInGroup(GetFilterUnit(), s__udg_RazorEdgeTargets[GetForLoopIndexA()]) == false ) ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Razor_Edge_Periodic_329 takes nothing returns nothing
	
	call GroupAddUnitSimple(GetEnumUnit(), s__udg_RazorEdgeTargets[GetForLoopIndexA()])

endfunction

function Trig_Razor_Edge_Periodic_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_RazorEdgeGroup) > 0 ) then
	set bj_forLoopAIndex=7
set bj_forLoopAIndexEnd=12
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	if ( s__udg_isRazorEdgeOn[GetForLoopIndexA()] == true ) then
	set udg_Unit=s__udg_RazorEdgeCaster[GetForLoopIndexA()]
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_Point2=s__udg_RazorEdgeEndLoc[GetForLoopIndexA()]
	if ( DistanceBetweenPoints(udg_Point, udg_Point2) >= 50.00 ) then
	set udg_Point3=PolarProjectionBJ(udg_Point, 20.00, AngleBetweenPoints(udg_Point, udg_Point2))
	call SetUnitPositionLocFacingLocBJ(udg_Unit, udg_Point3, udg_Point2)
	call RemoveLocation(udg_Point3)
	else
	call SetUnitPathing(udg_Unit, true)
	set s__udg_isRazorEdgeOn[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))]= false
	call RemoveLocation(udg_Point2)
	call GroupRemoveUnitSimple(udg_Unit, udg_RazorEdgeGroup)
	call GroupClear(s__udg_RazorEdgeTargets[GetForLoopIndexA()])
	call ResetUnitAnimation(udg_Unit)
	endif

	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(200.00, udg_Point, Condition(function BoolExpr_329))
	call ForGroup(udg_UnitGroup, function Trig_Razor_Edge_Periodic_329)

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif

	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
	else
	call DisableTrigger(GetTriggeringTrigger())
	endif

endfunction


//****************************************************************************
function InitTrig_Razor_Edge_Periodic takes nothing returns nothing
	set gg_trg_Razor_Edge_Periodic=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Razor_Edge_Periodic, 0.03)
	call DisableTrigger(gg_trg_Razor_Edge_Periodic)
	call TriggerAddAction(gg_trg_Razor_Edge_Periodic, function Trig_Razor_Edge_Periodic_Actions)
endfunction

//*  Trigger Retreat
//****************************************************************************
function Trig_Retreat_Actions takes nothing returns nothing
	set s__udg_activeRazorEdge[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= false
	call SetUnitPathing(GetTriggerUnit(), false)
	set s__udg_isRetreatOn[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= true
	set s__udg_RetreatCaster[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= GetTriggerUnit()
	call GroupAddUnitSimple(GetTriggerUnit(), udg_RetreatGroup)
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	if ( IsPlayerInForce(GetOwningPlayer(GetTriggerUnit()), s__udg_Teams[1]) == true ) then
	set s__udg_RetreatEndLoc[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= Location(( GetLocationX(udg_Point) + 1000.00 ), GetLocationY(udg_Point))
	else
	set s__udg_RetreatEndLoc[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= Location(( GetLocationX(udg_Point) - 1000.00 ), GetLocationY(udg_Point))
	endif

	call RemoveLocation(udg_Point)
	call EnableTrigger(gg_trg_Retreat_Periodic)
endfunction


//****************************************************************************
function InitTrig_Retreat takes nothing returns nothing
	set gg_trg_Retreat=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Retreat, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Retreat, function Trig_Retreat_Actions)
endfunction

//*  Trigger Retreat_Surface
//****************************************************************************
function Trig_Retreat_Surface_Actions takes nothing returns nothing
	set s__udg_activeRazorEdge[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= true
	if ( ( true ) ) then
	else
	if ( ( true ) ) then
	else
	if ( ( true ) ) then
	else
	endif

	endif

	endif

endfunction


//****************************************************************************
function InitTrig_Retreat_Surface takes nothing returns nothing
	set gg_trg_Retreat_Surface=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Retreat_Surface, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Retreat_Surface, function Trig_Retreat_Surface_Actions)
endfunction

//*  Trigger Retreat_Periodic
//****************************************************************************
function Trig_Retreat_Periodic_Actions takes nothing returns nothing
	if ( CountUnitsInGroup(udg_RetreatGroup) > 0 ) then
	set bj_forLoopAIndex=7
set bj_forLoopAIndexEnd=12
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	if ( s__udg_isRetreatOn[GetForLoopIndexA()] == true ) then
	set udg_Unit=s__udg_RetreatCaster[GetForLoopIndexA()]
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_Point2=s__udg_RetreatEndLoc[GetForLoopIndexA()]
	if ( DistanceBetweenPoints(udg_Point, udg_Point2) >= 50.00 ) then
	set udg_Point3=PolarProjectionBJ(udg_Point, 20.00, AngleBetweenPoints(udg_Point, udg_Point2))
	call SetUnitPositionLocFacingLocBJ(udg_Unit, udg_Point3, udg_Point2)
	call RemoveLocation(udg_Point3)
	else
	call IssueImmediateOrderBJ(udg_Unit, "unburrow")
	call SetUnitPathing(udg_Unit, true)
	set s__udg_isRetreatOn[GetForLoopIndexA()]= false
	call RemoveLocation(udg_Point2)
	call GroupRemoveUnitSimple(udg_Unit, udg_RetreatGroup)
	call ResetUnitAnimation(udg_Unit)
	endif

	call RemoveLocation(udg_Point)
	else
	endif

	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
	else
	call DisableTrigger(GetTriggeringTrigger())
	endif

endfunction


//****************************************************************************
function InitTrig_Retreat_Periodic takes nothing returns nothing
	set gg_trg_Retreat_Periodic=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Retreat_Periodic, 0.03)
	call DisableTrigger(gg_trg_Retreat_Periodic)
	call TriggerAddAction(gg_trg_Retreat_Periodic, function Trig_Retreat_Periodic_Actions)
endfunction

//*  Trigger AI_Termal_Eruption
//****************************************************************************
function BoolExpr_331 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_332 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Termal_Eruption_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_RoyalCommanders) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Termal_Eruption_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_RoyalCommanders)
	if ( s__udg_activeThermalEruption[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("carrionswarm") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_331))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(250.00, udg_Point2, Condition(function BoolExpr_332))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 2 ) then
	call IssuePointOrderLocBJ(udg_Unit, "silence", udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Termal_Eruption takes nothing returns nothing
	set gg_trg_AI_Termal_Eruption=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Termal_Eruption, 1.50)
	call TriggerAddCondition(gg_trg_AI_Termal_Eruption, Condition(function Trig_AI_Termal_Eruption_Conditions))
	call TriggerAddAction(gg_trg_AI_Termal_Eruption, function Trig_AI_Termal_Eruption_Actions)
endfunction

//*  Trigger AI_Aqua_Burst
//****************************************************************************
function BoolExpr_333 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_334 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Aqua_Burst_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_RoyalCommanders) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Aqua_Burst_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_RoyalCommanders)
	if ( s__udg_activeAquaBurst[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("silence") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_333))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(250.00, udg_Point2, Condition(function BoolExpr_334))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 1 ) then
	call IssuePointOrderLocBJ(udg_Unit, "carrionswarm", udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Aqua_Burst takes nothing returns nothing
	set gg_trg_AI_Aqua_Burst=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Aqua_Burst, 1.00)
	call TriggerAddCondition(gg_trg_AI_Aqua_Burst, Condition(function Trig_AI_Aqua_Burst_Conditions))
	call TriggerAddAction(gg_trg_AI_Aqua_Burst, function Trig_AI_Aqua_Burst_Actions)
endfunction

//*  Trigger AI_Curse_of_the_Depth
//****************************************************************************
function BoolExpr_335 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_336 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Curse_of_the_Depth_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_RoyalCommanders) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Curse_of_the_Depth_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_RoyalCommanders)
	if ( s__udg_activeCurseOfTheDepth[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(650.00, udg_Point, Condition(function BoolExpr_335))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(udg_Unit, "doom", udg_Unit2)
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(650.00, udg_Point, Condition(function BoolExpr_336))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	call IssueTargetOrderBJ(udg_Unit, "doom", udg_Unit2)
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Curse_of_the_Depth takes nothing returns nothing
	set gg_trg_AI_Curse_of_the_Depth=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Curse_of_the_Depth, 1.30)
	call TriggerAddCondition(gg_trg_AI_Curse_of_the_Depth, Condition(function Trig_AI_Curse_of_the_Depth_Conditions))
	call TriggerAddAction(gg_trg_AI_Curse_of_the_Depth, function Trig_AI_Curse_of_the_Depth_Actions)
endfunction

//*  Trigger AI_Gust
//****************************************************************************
function BoolExpr_337 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_338 takes nothing returns boolean
	if ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Gust_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_TideHunters) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Gust_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_TideHunters)
	if ( s__udg_activeGust[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_337))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "shadowstrike", GroupPickRandomUnit(udg_UnitGroup2))
	else
	set udg_UnitGroup4=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_338))
	if ( CountUnitsInGroup(udg_UnitGroup4) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "shadowstrike", GroupPickRandomUnit(udg_UnitGroup4))
	else
	endif

	call DestroyGroup(udg_UnitGroup4)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Gust takes nothing returns nothing
	set gg_trg_AI_Gust=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Gust, 1.30)
	call TriggerAddCondition(gg_trg_AI_Gust, Condition(function Trig_AI_Gust_Conditions))
	call TriggerAddAction(gg_trg_AI_Gust, function Trig_AI_Gust_Actions)
endfunction

//*  Trigger AI_Ravage
//****************************************************************************
function BoolExpr_339 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetAttacker())) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false and IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false ) ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Ravage_Conditions takes nothing returns boolean
	if ( not ( ( true ) ) ) then
		return false
	endif
	if ( not ( s__udg_activeRavage[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Ravage_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetAttacker())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(300.00, udg_Point, Condition(function BoolExpr_339))
	if ( CountUnitsInGroup(udg_UnitGroup) > 1 ) then
	call IssueImmediateOrderBJ(GetAttacker(), "channel")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_AI_Ravage takes nothing returns nothing
	set gg_trg_AI_Ravage=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Ravage, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Ravage, Condition(function Trig_AI_Ravage_Conditions))
	call TriggerAddAction(gg_trg_AI_Ravage, function Trig_AI_Ravage_Actions)
endfunction

//*  Trigger AI_Healing_Water
//****************************************************************************
function BoolExpr_340 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false and GetUnitLifePercent(GetFilterUnit()) <= 90.00 ) ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_341 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and ( IsUnitAliveBJ(GetFilterUnit()) == true and GetUnitLifePercent(GetFilterUnit()) <= 90.00 ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Healing_Water_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_SunkenEmpresses) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Healing_Water_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_SunkenEmpresses)
	if ( s__udg_activeHealingWater[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("cloudoffog") and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("monsoon") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(550.00, udg_Point, Condition(function BoolExpr_340))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(400.00, udg_Point2, Condition(function BoolExpr_341))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 0 ) then
	call IssuePointOrderLocBJ(udg_Unit, "impale", udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Healing_Water takes nothing returns nothing
	set gg_trg_AI_Healing_Water=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Healing_Water, 1.20)
	call TriggerAddCondition(gg_trg_AI_Healing_Water, Condition(function Trig_AI_Healing_Water_Conditions))
	call TriggerAddAction(gg_trg_AI_Healing_Water, function Trig_AI_Healing_Water_Actions)
endfunction

//*  Trigger AI_Monsoon
//****************************************************************************
function BoolExpr_342 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_343 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Monsoon_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_SunkenEmpresses) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Monsoon_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_SunkenEmpresses)
	if ( s__udg_activeMist[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("cloudoffog") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_342))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(400.00, udg_Point2, Condition(function BoolExpr_343))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 2 ) then
	call IssuePointOrderLocBJ(udg_Unit, "monsoon", udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Monsoon takes nothing returns nothing
	set gg_trg_AI_Monsoon=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Monsoon, 1.00)
	call TriggerAddCondition(gg_trg_AI_Monsoon, Condition(function Trig_AI_Monsoon_Conditions))
	call TriggerAddAction(gg_trg_AI_Monsoon, function Trig_AI_Monsoon_Actions)
endfunction

//*  Trigger AI_Mist
//****************************************************************************
function BoolExpr_344 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_345 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Mist_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_SunkenEmpresses) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Mist_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_SunkenEmpresses)
	if ( s__udg_activeMist[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("monsoon") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(800.00, udg_Point, Condition(function BoolExpr_344))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(250.00, udg_Point2, Condition(function BoolExpr_345))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 2 ) then
	call IssuePointOrderLocBJ(udg_Unit, "cloudoffog", udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Mist takes nothing returns nothing
	set gg_trg_AI_Mist=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Mist, 1.00)
	call TriggerAddCondition(gg_trg_AI_Mist, Condition(function Trig_AI_Mist_Conditions))
	call TriggerAddAction(gg_trg_AI_Mist, function Trig_AI_Mist_Actions)
endfunction

//*  Trigger AI_Frenzy
//****************************************************************************
function Trig_AI_Frenzy_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetAttacker(), "berserk")
endfunction


//****************************************************************************
function InitTrig_AI_Frenzy takes nothing returns nothing
	set gg_trg_AI_Frenzy=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Frenzy, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddAction(gg_trg_AI_Frenzy, function Trig_AI_Frenzy_Actions)
endfunction

//*  Trigger AI_Retreat
//****************************************************************************
function Trig_AI_Retreat_Conditions takes nothing returns boolean
	if ( not ( GetUnitLifePercent(GetTriggerUnit()) <= 35.00 ) ) then
		return false
	endif
	if ( not ( s__udg_activeRetreat[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Retreat_Actions takes nothing returns nothing
	call IssueImmediateOrderBJ(GetTriggerUnit(), "burrow")
endfunction


//****************************************************************************
function InitTrig_AI_Retreat takes nothing returns nothing
	set gg_trg_AI_Retreat=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Retreat, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddCondition(gg_trg_AI_Retreat, Condition(function Trig_AI_Retreat_Conditions))
	call TriggerAddAction(gg_trg_AI_Retreat, function Trig_AI_Retreat_Actions)
endfunction

//*  Trigger AI_Razor_Edge
//****************************************************************************
function BoolExpr_346 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_347 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Razor_Edge_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_MyrmidonCommanders) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Razor_Edge_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_MyrmidonCommanders)
	if ( s__udg_activeRazorEdge[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(550.00, udg_Point, Condition(function BoolExpr_346))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup2))
	set udg_UnitGroup3=GetUnitsInRangeOfLocMatching(300.00, udg_Point2, Condition(function BoolExpr_347))
	if ( CountUnitsInGroup(udg_UnitGroup3) > 2 ) then
	call IssuePointOrderLocBJ(udg_Unit, "carrionswarm", udg_Point2)
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	call RemoveLocation(udg_Point2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Razor_Edge takes nothing returns nothing
	set gg_trg_AI_Razor_Edge=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Razor_Edge, 1.20)
	call TriggerAddCondition(gg_trg_AI_Razor_Edge, Condition(function Trig_AI_Razor_Edge_Conditions))
	call TriggerAddAction(gg_trg_AI_Razor_Edge, function Trig_AI_Razor_Edge_Actions)
endfunction

//*  Trigger AI_Hunter_Instincts
//****************************************************************************
function BoolExpr_348 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false and IsUnitType(GetFilterUnit(), UNIT_TYPE_SUMMONED) == false ) ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Hunter_Instincts_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_MyrmidonCommanders) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Hunter_Instincts_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_MyrmidonCommanders)
	if ( s__udg_activeHunterInstinct[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(1000.00, udg_Point, Condition(function BoolExpr_348))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueImmediateOrderBJ(udg_Unit, "windwalk")
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Hunter_Instincts takes nothing returns nothing
	set gg_trg_AI_Hunter_Instincts=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Hunter_Instincts, 1.20)
	call TriggerAddCondition(gg_trg_AI_Hunter_Instincts, Condition(function Trig_AI_Hunter_Instincts_Conditions))
	call TriggerAddAction(gg_trg_AI_Hunter_Instincts, function Trig_AI_Hunter_Instincts_Actions)
endfunction

//*  Trigger AI_Hunter_Instincts_2
//****************************************************************************
function BoolExpr_349 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true and ( GetUnitTypeId(GetFilterUnit()) != 'ushd' and IsUnitType(GetFilterUnit(), UNIT_TYPE_SUMMONED) == false ) ) ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Hunter_Instincts_2_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_MyrmidonCommanders) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Hunter_Instincts_2_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_MyrmidonCommanders)
	if ( s__udg_HunterInstinctsUnit[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == null ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(600.00, udg_Point, Condition(function BoolExpr_349))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set s__udg_HunterInstinctsUnit[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))]= GroupPickRandomUnit(udg_UnitGroup2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	if ( s__udg_HunterInstinctsUnit[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] != null ) then
	call IssueTargetOrderBJ(udg_Unit, "attack", s__udg_HunterInstinctsUnit[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))])
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Hunter_Instincts_2 takes nothing returns nothing
	set gg_trg_AI_Hunter_Instincts_2=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Hunter_Instincts_2, 0.50)
	call TriggerAddCondition(gg_trg_AI_Hunter_Instincts_2, Condition(function Trig_AI_Hunter_Instincts_2_Conditions))
	call TriggerAddAction(gg_trg_AI_Hunter_Instincts_2, function Trig_AI_Hunter_Instincts_2_Actions)
endfunction

//*  Trigger Hunter_Instincts_Unit_Dies
//****************************************************************************
function Trig_Hunter_Instincts_Unit_Dies_Conditions takes nothing returns boolean
	if ( not ( ( GetTriggerUnit() == s__udg_HunterInstinctsUnit[7] or GetTriggerUnit() == s__udg_HunterInstinctsUnit[8] or GetTriggerUnit() == s__udg_HunterInstinctsUnit[9] or GetTriggerUnit() == s__udg_HunterInstinctsUnit[10] or GetTriggerUnit() == s__udg_HunterInstinctsUnit[11] or GetTriggerUnit() == s__udg_HunterInstinctsUnit[12] ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Hunter_Instincts_Unit_Dies_Actions takes nothing returns nothing
	set bj_forLoopAIndex=7
set bj_forLoopAIndexEnd=12
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	if ( GetTriggerUnit() == s__udg_HunterInstinctsUnit[GetForLoopIndexA()] ) then
	set s__udg_HunterInstinctsUnit[GetForLoopIndexA()]= null
	else
	endif

	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
endfunction


//****************************************************************************
function InitTrig_Hunter_Instincts_Unit_Dies takes nothing returns nothing
	set gg_trg_Hunter_Instincts_Unit_Dies=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Hunter_Instincts_Unit_Dies, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddCondition(gg_trg_Hunter_Instincts_Unit_Dies, Condition(function Trig_Hunter_Instincts_Unit_Dies_Conditions))
	call TriggerAddAction(gg_trg_Hunter_Instincts_Unit_Dies, function Trig_Hunter_Instincts_Unit_Dies_Actions)
endfunction

//*  Trigger Myrmidon_Commander_Dies
//****************************************************************************
function Trig_Myrmidon_Commander_Dies_Actions takes nothing returns nothing
	set s__udg_HunterInstinctsUnit[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= null
endfunction


//****************************************************************************
function InitTrig_Myrmidon_Commander_Dies takes nothing returns nothing
	set gg_trg_Myrmidon_Commander_Dies=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Myrmidon_Commander_Dies, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddAction(gg_trg_Myrmidon_Commander_Dies, function Trig_Myrmidon_Commander_Dies_Actions)
endfunction

//*  Trigger AI_Typhoon
//****************************************************************************
function Trig_AI_Typhoon_Actions takes nothing returns nothing
	if ( s__udg_activeTyphoon[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) then
	call IssueTargetOrderBJ(GetAttacker(), "cyclone", GetTriggerUnit())
	else
	if ( s__udg_activeTyphoon[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) then
	call IssueTargetOrderBJ(GetTriggerUnit(), "cyclone", GetAttacker())
	else
	endif

	endif

endfunction


//****************************************************************************
function InitTrig_AI_Typhoon takes nothing returns nothing
	set gg_trg_AI_Typhoon=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Typhoon, EVENT_PLAYER_UNIT_ATTACKED)
	call TriggerAddAction(gg_trg_AI_Typhoon, function Trig_AI_Typhoon_Actions)
endfunction

//*  Trigger AI_Mending_Water
//****************************************************************************
function BoolExpr_350 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == false and ( GetUnitLifePercent(GetFilterUnit()) <= 90.00 and IsUnitAliveBJ(GetFilterUnit()) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Mending_Water_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Summoners) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Mending_Water_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Summoners)
	if ( s__udg_activeMendingWater[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(750.00, udg_Point, Condition(function BoolExpr_350))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "healingwave", GroupPickRandomUnit(udg_UnitGroup))
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Mending_Water takes nothing returns nothing
	set gg_trg_AI_Mending_Water=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Mending_Water, 0.70)
	call TriggerAddCondition(gg_trg_AI_Mending_Water, Condition(function Trig_AI_Mending_Water_Conditions))
	call TriggerAddAction(gg_trg_AI_Mending_Water, function Trig_AI_Mending_Water_Actions)
endfunction

//*  Trigger AI_Madness
//****************************************************************************
function Trig_AI_Madness_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Swellers) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Madness_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Swellers)
	if ( s__udg_activeMadness[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("acidbomb") ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(udg_Unit, "unholyfrenzy", udg_Unit2)
	else
	
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	if ( GetUnitTypeId(udg_Unit2) != 'ushd' ) then
	call IssueTargetOrderBJ(udg_Unit, "unholyfrenzy", udg_Unit2)
	else
	endif

	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Madness takes nothing returns nothing
	set gg_trg_AI_Madness=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Madness, 0.55)
	call TriggerAddCondition(gg_trg_AI_Madness, Condition(function Trig_AI_Madness_Conditions))
	call TriggerAddAction(gg_trg_AI_Madness, function Trig_AI_Madness_Actions)
endfunction

//*  Trigger AI_Water_Shield
//****************************************************************************
function Trig_AI_Water_Shield_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Swellers) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Water_Shield_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Swellers)
	if ( s__udg_activeWaterShield[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("frostarmor") ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(udg_Unit, "frostarmor", udg_Unit2)
	else
	
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	if ( GetUnitTypeId(udg_Unit2) != 'ushd' ) then
	call IssueTargetOrderBJ(udg_Unit, "frostarmor", udg_Unit2)
	else
	endif

	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Water_Shield takes nothing returns nothing
	set gg_trg_AI_Water_Shield=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Water_Shield, 0.55)
	call TriggerAddCondition(gg_trg_AI_Water_Shield, Condition(function Trig_AI_Water_Shield_Conditions))
	call TriggerAddAction(gg_trg_AI_Water_Shield, function Trig_AI_Water_Shield_Actions)
endfunction

//*  Trigger AI_Suffocate
//****************************************************************************
function Trig_AI_Suffocate_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Swellers) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Suffocate_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_Swellers)
	if ( s__udg_activeSuffocate[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 and GetUnitCurrentOrder(udg_Unit) != String2OrderIdBJ("unholyfrenzy") ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(udg_Unit, "cripple", udg_Unit2)
	else
	
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup2)
	if ( ( true ) ) then
	call IssueTargetOrderBJ(udg_Unit, "cripple", udg_Unit2)
	else
	endif

	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Suffocate takes nothing returns nothing
	set gg_trg_AI_Suffocate=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Suffocate, 0.70)
	call TriggerAddCondition(gg_trg_AI_Suffocate, Condition(function Trig_AI_Suffocate_Conditions))
	call TriggerAddAction(gg_trg_AI_Suffocate, function Trig_AI_Suffocate_Actions)
endfunction

//*  Trigger AI_Devour
//****************************************************************************
function BoolExpr_352 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Devour_350 takes nothing returns nothing
	set udg_Unit=GetEnumUnit()
	if ( s__udg_activeDevourNaga[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(200.00, udg_Point, Condition(function BoolExpr_352))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Unit2=GroupPickRandomUnit(udg_UnitGroup)
	call IssueTargetOrderBJ(udg_Unit, "devour", udg_Unit2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif


endfunction

function Trig_AI_Devour_Actions takes nothing returns nothing
	call ForGroup(udg_DragonTurtles, function Trig_AI_Devour_350)

endfunction


//****************************************************************************
function InitTrig_AI_Devour takes nothing returns nothing
	set gg_trg_AI_Devour=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Devour, 1.00)
	call TriggerAddAction(gg_trg_AI_Devour, function Trig_AI_Devour_Actions)
endfunction

//*  Trigger AI_Crystalized
//****************************************************************************
function Trig_AI_Crystalized_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_NagaMyrmidons) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Crystalized_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_NagaMyrmidons)
	if ( s__udg_activeMendingWater[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "ensnare", GroupPickRandomUnit(udg_UnitGroup))
	else
	
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "ensnare", GroupPickRandomUnit(udg_UnitGroup2))
	else
	
	if ( CountUnitsInGroup(udg_UnitGroup3) > 0 ) then
	call IssueTargetOrderBJ(udg_Unit, "ensnare", GroupPickRandomUnit(udg_UnitGroup3))
	else
	endif

	call DestroyGroup(udg_UnitGroup3)
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Crystalized takes nothing returns nothing
	set gg_trg_AI_Crystalized=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Crystalized, 0.70)
	call TriggerAddCondition(gg_trg_AI_Crystalized, Condition(function Trig_AI_Crystalized_Conditions))
	call TriggerAddAction(gg_trg_AI_Crystalized, function Trig_AI_Crystalized_Actions)
endfunction

//*  Trigger AI_Submerge
//****************************************************************************
function BoolExpr_353 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_Unit)) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Submerge_353 takes nothing returns nothing
	if ( s__udg_activeSubmerge[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == true ) then
	call IssueImmediateOrderBJ(GetEnumUnit(), "burrow")
	else
	endif


endfunction

function Trig_AI_Submerge_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_NagaMyrmidons) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Submerge_Actions takes nothing returns nothing
	set udg_Unit=GroupPickRandomUnit(udg_NagaMyrmidons)
	if ( s__udg_activeSubmerge[GetConvertedPlayerId(GetOwningPlayer(udg_Unit))] == true ) then
	set udg_Point=GetUnitLoc(udg_Unit)
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(2000.00, udg_Point, Condition(function BoolExpr_353))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	
	call ForGroup(udg_UnitGroup2, function Trig_AI_Submerge_353)

	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
	else
	endif

endfunction


//****************************************************************************
function InitTrig_AI_Submerge takes nothing returns nothing
	set gg_trg_AI_Submerge=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Submerge, 1.00)
	call TriggerAddCondition(gg_trg_AI_Submerge, Condition(function Trig_AI_Submerge_Conditions))
	call TriggerAddAction(gg_trg_AI_Submerge, function Trig_AI_Submerge_Actions)
endfunction

//*  Trigger AI_Submerge_OnCast
//****************************************************************************
function Trig_AI_Submerge_OnCast_Conditions takes nothing returns boolean
	if ( not ( ( true ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Submerge_OnCast_Actions takes nothing returns nothing
	call GroupRemoveUnitSimple(GetTriggerUnit(), udg_NagaMyrmidons)
	call GroupAddUnitSimple(GetTriggerUnit(), udg_SubmergedGroup)
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	if ( ModuloInteger(GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit())), 2) == 0 ) then
	set udg_Point2=GetRectCenter(gg_rct_Fortress_Team_1)
	set udg_Real=DistanceBetweenPoints(udg_Point, udg_Point2)
	set udg_Point3=OffsetLocation(udg_Point, udg_Real, 0)
	call RemoveLocation(udg_Point2)
	else
	set udg_Point2=GetRectCenter(gg_rct_Fortress_Team_2)
	set udg_Real=DistanceBetweenPoints(udg_Point, udg_Point2)
	set udg_Point3=OffsetLocation(udg_Point, ( 0.00 - udg_Real ), 0)
	call RemoveLocation(udg_Point2)
	endif

	call IssuePointOrderLocBJ(GetTriggerUnit(), "attack", udg_Point3)
	call RemoveLocation(udg_Point)
	call RemoveLocation(udg_Point3)
	call TriggerSleepAction(0.50)
	
endfunction


//****************************************************************************
function InitTrig_AI_Submerge_OnCast takes nothing returns nothing
	set gg_trg_AI_Submerge_OnCast=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Submerge_OnCast, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_AI_Submerge_OnCast, Condition(function Trig_AI_Submerge_OnCast_Conditions))
	call TriggerAddAction(gg_trg_AI_Submerge_OnCast, function Trig_AI_Submerge_OnCast_Actions)
endfunction

//*  Trigger AI_Submerge_Scan
//****************************************************************************
function BoolExpr_356 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetEnumUnit())) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_357 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetEnumUnit())) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Submerge_Scan_354 takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetEnumUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(250.00, udg_Point, Condition(function BoolExpr_356))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	call IssueImmediateOrderBJ(GetEnumUnit(), "unburrow")
	else
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(350.00, udg_Point, Condition(function BoolExpr_357))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 0 ) then
	call IssueImmediateOrderBJ(GetEnumUnit(), "unburrow")
	else
	endif

	call DestroyGroup(udg_UnitGroup2)
	endif

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)

endfunction

function Trig_AI_Submerge_Scan_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_SubmergedGroup) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Submerge_Scan_Actions takes nothing returns nothing
	call ForGroup(udg_SubmergedGroup, function Trig_AI_Submerge_Scan_354)

endfunction


//****************************************************************************
function InitTrig_AI_Submerge_Scan takes nothing returns nothing
	set gg_trg_AI_Submerge_Scan=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Submerge_Scan, 0.50)
	call TriggerAddCondition(gg_trg_AI_Submerge_Scan, Condition(function Trig_AI_Submerge_Scan_Conditions))
	call TriggerAddAction(gg_trg_AI_Submerge_Scan, function Trig_AI_Submerge_Scan_Actions)
endfunction

//*  Trigger AI_Submerge_OnSurface
//****************************************************************************
function BoolExpr_358 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetEnumUnit())) == true and ( IsUnitAliveBJ(GetFilterUnit()) == true and IsUnitType(GetFilterUnit(), UNIT_TYPE_GROUND) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Submerge_OnSurface_358 takes nothing returns nothing
	call UnitDamageTargetBJ(GetTriggerUnit(), GetEnumUnit(), 50.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)

endfunction

function Trig_AI_Submerge_OnSurface_Actions takes nothing returns nothing
	call GroupRemoveUnitSimple(GetTriggerUnit(), udg_SubmergedGroup)
	call GroupAddUnitSimple(GetTriggerUnit(), udg_NagaMyrmidons)
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call AddSpecialEffectLocBJ(udg_Point, "Objects\\Spawnmodels\\Naga\\NagaDeath\\NagaDeath.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(275.00, udg_Point, Condition(function BoolExpr_358))
	call ForGroup(udg_UnitGroup, function Trig_AI_Submerge_OnSurface_358)

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_AI_Submerge_OnSurface takes nothing returns nothing
	set gg_trg_AI_Submerge_OnSurface=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_AI_Submerge_OnSurface, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_AI_Submerge_OnSurface, function Trig_AI_Submerge_OnSurface_Actions)
endfunction

//*  Trigger Place_Racial_Building
//****************************************************************************
function Trig_Place_Racial_Building_Conditions takes nothing returns boolean
	if ( not ( ( true ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Place_Racial_Building_Actions takes nothing returns nothing
	set udg_Point=GetSpellTargetLoc()
	if ( RectContainsLoc(gg_rct_Defensive_Structure_Area, udg_Point) == true ) then
	if ( IsPlayerInForce(GetOwningPlayer(GetTriggerUnit()), s__udg_Teams[1]) == true and GetLocationX(udg_Point) > 0.00 ) then
	call UnitRemoveAbilityBJ(GetSpellAbilityId(), GetTriggerUnit())
	else
	if ( IsPlayerInForce(GetOwningPlayer(GetTriggerUnit()), s__udg_Teams[2]) == true and GetLocationX(udg_Point) < 0.00 ) then
	call UnitRemoveAbilityBJ(GetSpellAbilityId(), GetTriggerUnit())
	else
	call IssueImmediateOrderBJ(GetTriggerUnit(), "stop")
	call DisplayTextToForce(GetForceOfPlayer(GetOwningPlayer(GetTriggerUnit())), "Cannot place on enemy's half!")
	endif

	endif

	else
	call IssueImmediateOrderBJ(GetTriggerUnit(), "stop")
	call DisplayTextToForce(GetForceOfPlayer(GetOwningPlayer(GetTriggerUnit())), "Cannot place outside battlefield!")
	endif

	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Place_Racial_Building takes nothing returns nothing
	set gg_trg_Place_Racial_Building=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Place_Racial_Building, EVENT_PLAYER_UNIT_SPELL_CAST)
	call TriggerAddCondition(gg_trg_Place_Racial_Building, Condition(function Trig_Place_Racial_Building_Conditions))
	call TriggerAddAction(gg_trg_Place_Racial_Building, function Trig_Place_Racial_Building_Actions)
endfunction

//*  Trigger Move_Racial_Building
//****************************************************************************
function Trig_Move_Racial_Building_Conditions takes nothing returns boolean
	if ( not ( ( true ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Move_Racial_Building_Actions takes nothing returns nothing
	call RemoveUnit(GetTriggerUnit())
endfunction


//****************************************************************************
function InitTrig_Move_Racial_Building takes nothing returns nothing
	set gg_trg_Move_Racial_Building=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Move_Racial_Building, EVENT_PLAYER_UNIT_SPELL_FINISH)
	call TriggerAddCondition(gg_trg_Move_Racial_Building, Condition(function Trig_Move_Racial_Building_Conditions))
	call TriggerAddAction(gg_trg_Move_Racial_Building, function Trig_Move_Racial_Building_Actions)
endfunction

//*  Trigger Move_Racial_Building_Prevent
//****************************************************************************
function Trig_Move_Racial_Building_Prevent_Conditions takes nothing returns boolean
	if ( not ( ( true ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Move_Racial_Building_Prevent_Actions takes nothing returns nothing
	set udg_Point=GetSpellTargetLoc()
	if ( RectContainsLoc(gg_rct_Defensive_Structure_Area, udg_Point) == true ) then
	if ( IsPlayerInForce(GetOwningPlayer(GetTriggerUnit()), s__udg_Teams[1]) == true and GetLocationX(udg_Point) > 0.00 ) then
	else
	if ( IsPlayerInForce(GetOwningPlayer(GetTriggerUnit()), s__udg_Teams[2]) == true and GetLocationX(udg_Point) < 0.00 ) then
	else
	call IssueImmediateOrderBJ(GetTriggerUnit(), "stop")
	call DisplayTextToForce(GetForceOfPlayer(GetOwningPlayer(GetTriggerUnit())), "Cannot place on enemy's half!")
	endif

	endif

	else
	call IssueImmediateOrderBJ(GetTriggerUnit(), "stop")
	call DisplayTextToForce(GetForceOfPlayer(GetOwningPlayer(GetTriggerUnit())), "Cannot place outside battlefield!")
	endif

	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Move_Racial_Building_Prevent takes nothing returns nothing
	set gg_trg_Move_Racial_Building_Prevent=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Move_Racial_Building_Prevent, EVENT_PLAYER_UNIT_SPELL_CAST)
	call TriggerAddCondition(gg_trg_Move_Racial_Building_Prevent, Condition(function Trig_Move_Racial_Building_Prevent_Conditions))
	call TriggerAddAction(gg_trg_Move_Racial_Building_Prevent, function Trig_Move_Racial_Building_Prevent_Actions)
endfunction

//*  Trigger Arcane_Tower_Start
//****************************************************************************
function Trig_Arcane_Tower_Start_Actions takes nothing returns nothing
	
endfunction


//****************************************************************************
function InitTrig_Arcane_Tower_Start takes nothing returns nothing
	set gg_trg_Arcane_Tower_Start=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Arcane_Tower_Start, EVENT_PLAYER_UNIT_RESEARCH_START)
	call TriggerAddAction(gg_trg_Arcane_Tower_Start, function Trig_Arcane_Tower_Start_Actions)
endfunction

//*  Trigger Reconstruction_Tower_Start
//****************************************************************************
function Trig_Reconstruction_Tower_Start_Actions takes nothing returns nothing
	
endfunction


//****************************************************************************
function InitTrig_Reconstruction_Tower_Start takes nothing returns nothing
	set gg_trg_Reconstruction_Tower_Start=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Reconstruction_Tower_Start, EVENT_PLAYER_UNIT_RESEARCH_START)
	call TriggerAddAction(gg_trg_Reconstruction_Tower_Start, function Trig_Reconstruction_Tower_Start_Actions)
endfunction

//*  Trigger Dalaran_Tower_Finish
//****************************************************************************
function Trig_Dalaran_Tower_Finish_Conditions takes nothing returns boolean
	if ( not ( ( true ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Dalaran_Tower_Finish_Actions takes nothing returns nothing
	if ( ( true ) ) then
	else
	if ( ( true ) ) then
	else
	call DisplayTextToForce(GetForceOfPlayer(GetOwningPlayer(GetTriggerUnit())), "|cffff1919Cannot research multiple special tech.|r")
	endif

	endif

endfunction


//****************************************************************************
function InitTrig_Dalaran_Tower_Finish takes nothing returns nothing
	set gg_trg_Dalaran_Tower_Finish=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Dalaran_Tower_Finish, EVENT_PLAYER_UNIT_RESEARCH_FINISH)
	call TriggerAddCondition(gg_trg_Dalaran_Tower_Finish, Condition(function Trig_Dalaran_Tower_Finish_Conditions))
	call TriggerAddAction(gg_trg_Dalaran_Tower_Finish, function Trig_Dalaran_Tower_Finish_Actions)
endfunction

//*  Trigger Dalaran_Tower_Cancel
//****************************************************************************
function Trig_Dalaran_Tower_Cancel_Conditions takes nothing returns boolean
	if ( not ( ( true ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Dalaran_Tower_Cancel_Actions takes nothing returns nothing
	
	
endfunction


//****************************************************************************
function InitTrig_Dalaran_Tower_Cancel takes nothing returns nothing
	set gg_trg_Dalaran_Tower_Cancel=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Dalaran_Tower_Cancel, EVENT_PLAYER_UNIT_RESEARCH_CANCEL)
	call TriggerAddCondition(gg_trg_Dalaran_Tower_Cancel, Condition(function Trig_Dalaran_Tower_Cancel_Conditions))
	call TriggerAddAction(gg_trg_Dalaran_Tower_Cancel, function Trig_Dalaran_Tower_Cancel_Actions)
endfunction

//*  Trigger AI_Wrath_of_The_Phoenix
//****************************************************************************
function BoolExpr_361 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetEnumUnit())) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_362 takes nothing returns boolean
	if ( ( IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetEnumUnit())) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_AI_Wrath_of_The_Phoenix_359 takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetEnumUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(1200.00, udg_Point, Condition(function BoolExpr_361))
	if ( CountUnitsInGroup(udg_UnitGroup) > 0 ) then
	set udg_Point2=GetUnitLoc(GroupPickRandomUnit(udg_UnitGroup))
	set udg_UnitGroup2=GetUnitsInRangeOfLocMatching(400.00, udg_Point2, Condition(function BoolExpr_362))
	if ( CountUnitsInGroup(udg_UnitGroup2) > 2 ) then
	call IssueTargetOrderBJ(GetEnumUnit(), "unstableconcoction", GroupPickRandomUnit(udg_UnitGroup2))
	else
	endif

	call RemoveLocation(udg_Point2)
	call DestroyGroup(udg_UnitGroup2)
	else
	endif

	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)

endfunction

function Trig_AI_Wrath_of_The_Phoenix_Conditions takes nothing returns boolean
	if ( not ( CountUnitsInGroup(udg_Phoenixes) > 0 ) ) then
		return false
	endif
	return true
endfunction

function Trig_AI_Wrath_of_The_Phoenix_Actions takes nothing returns nothing
	call ForGroup(udg_Phoenixes, function Trig_AI_Wrath_of_The_Phoenix_359)

endfunction


//****************************************************************************
function InitTrig_AI_Wrath_of_The_Phoenix takes nothing returns nothing
	set gg_trg_AI_Wrath_of_The_Phoenix=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_AI_Wrath_of_The_Phoenix, 0.50)
	call TriggerAddCondition(gg_trg_AI_Wrath_of_The_Phoenix, Condition(function Trig_AI_Wrath_of_The_Phoenix_Conditions))
	call TriggerAddAction(gg_trg_AI_Wrath_of_The_Phoenix, function Trig_AI_Wrath_of_The_Phoenix_Actions)
endfunction

//*  Trigger Wrath_of_the_Phoenix_Cast
//****************************************************************************
function Trig_Wrath_of_the_Phoenix_Cast_Actions takes nothing returns nothing
endfunction


//****************************************************************************
function InitTrig_Wrath_of_the_Phoenix_Cast takes nothing returns nothing
	set gg_trg_Wrath_of_the_Phoenix_Cast=CreateTrigger()
	call TriggerAddAction(gg_trg_Wrath_of_the_Phoenix_Cast, function Trig_Wrath_of_the_Phoenix_Cast_Actions)
endfunction

//*  Trigger Unit_Builds_Phoenix
//****************************************************************************
function Trig_Unit_Builds_Phoenix_Actions takes nothing returns nothing
	
endfunction


//****************************************************************************
function InitTrig_Unit_Builds_Phoenix takes nothing returns nothing
	set gg_trg_Unit_Builds_Phoenix=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Unit_Builds_Phoenix, EVENT_PLAYER_UNIT_CONSTRUCT_START)
	call TriggerAddAction(gg_trg_Unit_Builds_Phoenix, function Trig_Unit_Builds_Phoenix_Actions)
endfunction

//*  Trigger Dark_Ladys_Vengeance_Start
//****************************************************************************
function Trig_Dark_Ladys_Vengeance_Start_Actions takes nothing returns nothing
	
	
endfunction


//****************************************************************************
function InitTrig_Dark_Ladys_Vengeance_Start takes nothing returns nothing
	set gg_trg_Dark_Ladys_Vengeance_Start=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Dark_Ladys_Vengeance_Start, EVENT_PLAYER_UNIT_RESEARCH_START)
	call TriggerAddAction(gg_trg_Dark_Ladys_Vengeance_Start, function Trig_Dark_Ladys_Vengeance_Start_Actions)
endfunction

//*  Trigger Dark_Ladys_Vengeance_Finish
//****************************************************************************
function Trig_Dark_Ladys_Vengeance_Finish_Actions takes nothing returns nothing
	if ( ( true ) ) then
	else
	call SetPlayerTechResearchedSwap(GetResearched(), 0, GetOwningPlayer(GetTriggerUnit()))
	call DisplayTextToForce(GetForceOfPlayer(GetOwningPlayer(GetTriggerUnit())), "|cffff1919Cannot research multiple special tech.|r")
	endif

endfunction


//****************************************************************************
function InitTrig_Dark_Ladys_Vengeance_Finish takes nothing returns nothing
	set gg_trg_Dark_Ladys_Vengeance_Finish=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Dark_Ladys_Vengeance_Finish, EVENT_PLAYER_UNIT_RESEARCH_FINISH)
	call TriggerAddAction(gg_trg_Dark_Ladys_Vengeance_Finish, function Trig_Dark_Ladys_Vengeance_Finish_Actions)
endfunction

//*  Trigger Dark_Ladys_Vengeance_Effect
//****************************************************************************
function Trig_Dark_Ladys_Vengeance_Effect_Conditions takes nothing returns boolean
	if ( not ( GetRandomInt(1, 100) <= 45 ) ) then
		return false
	endif
	if ( not ( ( true ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Dark_Ladys_Vengeance_Effect_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	
	call UnitApplyTimedLifeBJ(25.00, 'BTLF', GetLastCreatedUnit())
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Spells\\Undead\\RaiseSkeletonWarrior\\RaiseSkeleton.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Dark_Ladys_Vengeance_Effect takes nothing returns nothing
	set gg_trg_Dark_Ladys_Vengeance_Effect=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Dark_Ladys_Vengeance_Effect, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddCondition(gg_trg_Dark_Ladys_Vengeance_Effect, Condition(function Trig_Dark_Ladys_Vengeance_Effect_Conditions))
	call TriggerAddAction(gg_trg_Dark_Ladys_Vengeance_Effect, function Trig_Dark_Ladys_Vengeance_Effect_Actions)
endfunction

//*  Trigger Pale_Ladys_Gaze
//****************************************************************************
function Trig_Pale_Ladys_Gaze_Actions takes nothing returns nothing
	if ( ModuloInteger(GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit())), 2) == 0 ) then
	set udg_Point=GetRectCenter(gg_rct_Fortress_Team_2)
	call UnitApplyTimedLifeBJ(30.00, 'BTLF', GetLastCreatedUnit())
	call RemoveLocation(udg_Point)
	else
	set udg_Point=GetRectCenter(gg_rct_Fortress_Team_1)
	call UnitApplyTimedLifeBJ(30.00, 'BTLF', GetLastCreatedUnit())
	call RemoveLocation(udg_Point)
	endif

endfunction


//****************************************************************************
function InitTrig_Pale_Ladys_Gaze takes nothing returns nothing
	set gg_trg_Pale_Ladys_Gaze=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Pale_Ladys_Gaze, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddAction(gg_trg_Pale_Ladys_Gaze, function Trig_Pale_Ladys_Gaze_Actions)
endfunction

//*  Trigger Cult_of_Forgotten_Shadow_Start
//****************************************************************************
function Trig_Cult_of_Forgotten_Shadow_Start_Actions takes nothing returns nothing
	
	
endfunction


//****************************************************************************
function InitTrig_Cult_of_Forgotten_Shadow_Start takes nothing returns nothing
	set gg_trg_Cult_of_Forgotten_Shadow_Start=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Cult_of_Forgotten_Shadow_Start, EVENT_PLAYER_UNIT_RESEARCH_START)
	call TriggerAddAction(gg_trg_Cult_of_Forgotten_Shadow_Start, function Trig_Cult_of_Forgotten_Shadow_Start_Actions)
endfunction

//*  Trigger Cult_of_Forgotten_Shadow_Finish
//****************************************************************************
function Trig_Cult_of_Forgotten_Shadow_Finish_Actions takes nothing returns nothing
	if ( ( true ) ) then
	set s__udg_isCultOfForgottenResearched[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= true
	else
	call SetPlayerTechResearchedSwap(GetResearched(), 0, GetOwningPlayer(GetTriggerUnit()))
	call DisplayTextToForce(GetForceOfPlayer(GetOwningPlayer(GetTriggerUnit())), "|cffff1919Cannot research multiple special tech.|r")
	endif

endfunction


//****************************************************************************
function InitTrig_Cult_of_Forgotten_Shadow_Finish takes nothing returns nothing
	set gg_trg_Cult_of_Forgotten_Shadow_Finish=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Cult_of_Forgotten_Shadow_Finish, EVENT_PLAYER_UNIT_RESEARCH_FINISH)
	call TriggerAddAction(gg_trg_Cult_of_Forgotten_Shadow_Finish, function Trig_Cult_of_Forgotten_Shadow_Finish_Actions)
endfunction

//*  Trigger Cult_of_Forgotten_Shadow_Effect
//****************************************************************************
function Trig_Cult_of_Forgotten_Shadow_Effect_362 takes nothing returns nothing
	if ( s__udg_isCultOfForgottenResearched[GetConvertedPlayerId(GetEnumPlayer())] == true ) then
	if ( CountUnitsInGroup(udg_DeadUnits) > 0 ) then
	set udg_Unit=GroupPickRandomUnit(udg_DeadUnits)
	set udg_Point=GetUnitLoc(udg_Unit)
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Spells\\Undead\\AnimateDead\\AnimateDeadTarget.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveUnit(udg_Unit)
	call RemoveLocation(udg_Point)
	else
	endif

	else
	endif


endfunction

function Trig_Cult_of_Forgotten_Shadow_Effect_Actions takes nothing returns nothing
	call ForForce(GetPlayersAll(), function Trig_Cult_of_Forgotten_Shadow_Effect_362)

endfunction


//****************************************************************************
function InitTrig_Cult_of_Forgotten_Shadow_Effect takes nothing returns nothing
	set gg_trg_Cult_of_Forgotten_Shadow_Effect=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Cult_of_Forgotten_Shadow_Effect, 18.00)
	call TriggerAddAction(gg_trg_Cult_of_Forgotten_Shadow_Effect, function Trig_Cult_of_Forgotten_Shadow_Effect_Actions)
endfunction

//*  Trigger Super_Plague_Start
//****************************************************************************
function Trig_Super_Plague_Start_Actions takes nothing returns nothing
	
	
endfunction


//****************************************************************************
function InitTrig_Super_Plague_Start takes nothing returns nothing
	set gg_trg_Super_Plague_Start=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Super_Plague_Start, EVENT_PLAYER_UNIT_RESEARCH_START)
	call TriggerAddAction(gg_trg_Super_Plague_Start, function Trig_Super_Plague_Start_Actions)
endfunction

//*  Trigger Super_Plague_Finish
//****************************************************************************
function Trig_Super_Plague_Finish_Actions takes nothing returns nothing
	if ( ( true ) ) then
	if ( IsPlayerInForce(GetOwningPlayer(GetTriggerUnit()), s__udg_Teams[1]) == true ) then
	else
	endif

	else
	call SetPlayerTechResearchedSwap(GetResearched(), 0, GetOwningPlayer(GetTriggerUnit()))
	call DisplayTextToForce(GetForceOfPlayer(GetOwningPlayer(GetTriggerUnit())), "|cffff1919Cannot research multiple special tech.|r")
	endif

endfunction


//****************************************************************************
function InitTrig_Super_Plague_Finish takes nothing returns nothing
	set gg_trg_Super_Plague_Finish=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Super_Plague_Finish, EVENT_PLAYER_UNIT_RESEARCH_FINISH)
	call TriggerAddAction(gg_trg_Super_Plague_Finish, function Trig_Super_Plague_Finish_Actions)
endfunction

//*  Trigger Forsaken_Mastery_Cancel
//****************************************************************************
function Trig_Forsaken_Mastery_Cancel_Conditions takes nothing returns boolean
	if ( not ( ( true ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Forsaken_Mastery_Cancel_Actions takes nothing returns nothing
	
	
	
endfunction


//****************************************************************************
function InitTrig_Forsaken_Mastery_Cancel takes nothing returns nothing
	set gg_trg_Forsaken_Mastery_Cancel=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Forsaken_Mastery_Cancel, EVENT_PLAYER_UNIT_RESEARCH_CANCEL)
	call TriggerAddCondition(gg_trg_Forsaken_Mastery_Cancel, Condition(function Trig_Forsaken_Mastery_Cancel_Conditions))
	call TriggerAddAction(gg_trg_Forsaken_Mastery_Cancel, function Trig_Forsaken_Mastery_Cancel_Actions)
endfunction

//*  Trigger Toxic_Murgul_Reaver
//****************************************************************************
function Trig_Toxic_Murgul_Reaver_Conditions takes nothing returns boolean
	if ( not ( GetPlayerState(GetOwningPlayer(GetTriggerUnit()), PLAYER_STATE_RESOURCE_GOLD) >= 55 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Toxic_Murgul_Reaver_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call RemoveUnit(GetTriggerUnit())
	
	call AddSpecialEffectLocBJ(udg_Point, "WaterEnchant.mdx")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), ( 0.30 * I2R(GetUnitLevel(GetTriggerUnit())) ))
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Toxic_Murgul_Reaver takes nothing returns nothing
	set gg_trg_Toxic_Murgul_Reaver=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Toxic_Murgul_Reaver, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Toxic_Murgul_Reaver, Condition(function Trig_Toxic_Murgul_Reaver_Conditions))
	call TriggerAddAction(gg_trg_Toxic_Murgul_Reaver, function Trig_Toxic_Murgul_Reaver_Actions)
endfunction

//*  Trigger Evolved_Naga_Siren
//****************************************************************************
function Trig_Evolved_Naga_Siren_Conditions takes nothing returns boolean
	if ( not ( GetPlayerState(GetOwningPlayer(GetTriggerUnit()), PLAYER_STATE_RESOURCE_GOLD) >= 90 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Evolved_Naga_Siren_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call RemoveUnit(GetTriggerUnit())
	
	call AddSpecialEffectLocBJ(udg_Point, "WaterEnchant.mdx")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), ( 0.30 * I2R(GetUnitLevel(GetTriggerUnit())) ))
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Evolved_Naga_Siren takes nothing returns nothing
	set gg_trg_Evolved_Naga_Siren=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Evolved_Naga_Siren, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Evolved_Naga_Siren, Condition(function Trig_Evolved_Naga_Siren_Conditions))
	call TriggerAddAction(gg_trg_Evolved_Naga_Siren, function Trig_Evolved_Naga_Siren_Actions)
endfunction

//*  Trigger Evolved_Couatl
//****************************************************************************
function Trig_Evolved_Couatl_Conditions takes nothing returns boolean
	if ( not ( GetPlayerState(GetOwningPlayer(GetTriggerUnit()), PLAYER_STATE_RESOURCE_GOLD) >= 50 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Evolved_Couatl_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call RemoveUnit(GetTriggerUnit())
	
	call AddSpecialEffectLocBJ(udg_Point, "WaterEnchant.mdx")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), ( 0.30 * I2R(GetUnitLevel(GetTriggerUnit())) ))
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Evolved_Couatl takes nothing returns nothing
	set gg_trg_Evolved_Couatl=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Evolved_Couatl, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Evolved_Couatl, Condition(function Trig_Evolved_Couatl_Conditions))
	call TriggerAddAction(gg_trg_Evolved_Couatl, function Trig_Evolved_Couatl_Actions)
endfunction

//*  Trigger Evolved_Dragon_Turtle
//****************************************************************************
function Trig_Evolved_Dragon_Turtle_Conditions takes nothing returns boolean
	if ( not ( GetPlayerState(GetOwningPlayer(GetTriggerUnit()), PLAYER_STATE_RESOURCE_GOLD) >= 75 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Evolved_Dragon_Turtle_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call RemoveUnit(GetTriggerUnit())
	
	call AddSpecialEffectLocBJ(udg_Point, "WaterEnchant.mdx")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), ( 0.30 * I2R(GetUnitLevel(GetTriggerUnit())) ))
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Evolved_Dragon_Turtle takes nothing returns nothing
	set gg_trg_Evolved_Dragon_Turtle=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Evolved_Dragon_Turtle, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Evolved_Dragon_Turtle, Condition(function Trig_Evolved_Dragon_Turtle_Conditions))
	call TriggerAddAction(gg_trg_Evolved_Dragon_Turtle, function Trig_Evolved_Dragon_Turtle_Actions)
endfunction

//*  Trigger Evolved_Naga_Myrmidon
//****************************************************************************
function Trig_Evolved_Naga_Myrmidon_Conditions takes nothing returns boolean
	if ( not ( GetPlayerState(GetOwningPlayer(GetTriggerUnit()), PLAYER_STATE_RESOURCE_GOLD) >= 75 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Evolved_Naga_Myrmidon_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call RemoveUnit(GetTriggerUnit())
	
	call AddSpecialEffectLocBJ(udg_Point, "WaterEnchant.mdx")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), ( 0.30 * I2R(GetUnitLevel(GetTriggerUnit())) ))
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Evolved_Naga_Myrmidon takes nothing returns nothing
	set gg_trg_Evolved_Naga_Myrmidon=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Evolved_Naga_Myrmidon, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Evolved_Naga_Myrmidon, Condition(function Trig_Evolved_Naga_Myrmidon_Conditions))
	call TriggerAddAction(gg_trg_Evolved_Naga_Myrmidon, function Trig_Evolved_Naga_Myrmidon_Actions)
endfunction

//*  Trigger Evolved_Ancient_Hydra
//****************************************************************************
function Trig_Evolved_Ancient_Hydra_Conditions takes nothing returns boolean
	if ( not ( GetPlayerState(GetOwningPlayer(GetTriggerUnit()), PLAYER_STATE_RESOURCE_GOLD) >= 150 ) ) then
		return false
	endif
	return true
endfunction

function Trig_Evolved_Ancient_Hydra_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call RemoveUnit(GetTriggerUnit())
	
	call AddSpecialEffectLocBJ(udg_Point, "WaterEnchant.mdx")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), ( 0.30 * I2R(GetUnitLevel(GetTriggerUnit())) ))
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Evolved_Ancient_Hydra takes nothing returns nothing
	set gg_trg_Evolved_Ancient_Hydra=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Evolved_Ancient_Hydra, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Evolved_Ancient_Hydra, Condition(function Trig_Evolved_Ancient_Hydra_Conditions))
	call TriggerAddAction(gg_trg_Evolved_Ancient_Hydra, function Trig_Evolved_Ancient_Hydra_Actions)
endfunction

function Trig_Set_Map_Music_Actions takes nothing returns nothing
    set udg_MapMusic="Sound\\Music\\mp3Music\\Human1.mp3;Sound\\Music\\mp3Music\\Human2.mp3;Sound\\Music\\mp3Music\\Human3.mp3;Sound\\Music\\mp3Music\\HumanX1.mp3;Sound\\Music\\mp3Music\\Orc1.mp3;Sound\\Music\\mp3Music\\Orc2.mp3;Sound\\Music\\mp3Music\\Orc3.mp3;Sound\\Music\\mp3Music\\OrcX1.mp3;Sound\\Music\\mp3Music\\Undead1.mp3;Sound\\Music\\mp3Music\\Undead2.mp3;Sound\\Music\\mp3Music\\Undead3.mp3;Sound\\Music\\mp3Music\\UndeadX1.mp3;Sound\\Music\\mp3Music\\NightElf1.mp3;Sound\\Music\\mp3Music\\NightElf2.mp3;Sound\\Music\\mp3Music\\NightElf3.mp3;Sound\\Music\\mp3Music\\NightElfX1.mp3;Sound\\Music\\mp3Music\\NagaTheme.mp3;Sound\\Music\\mp3Music\\BloodElfTheme.mp3;Sound\\Music\\mp3Music\\ArthasTheme.mp3;Sound\\Music\\mp3Music\\IllidansTheme.mp3;Sound\\Music\\mp3Music\\PursuitTheme.mp3;Sound\\Music\\mp3Music\\War3XMainScreen.mp3;Sound\\Music\\mp3Music\\Mainscreen.mp3;"
    call SetMapMusic(udg_MapMusic, true, 0)
endfunction

//===========================================================================
function InitTrig_Set_Map_Music takes nothing returns nothing
    set gg_trg_Set_Map_Music=CreateTrigger()
    call TriggerAddAction(gg_trg_Set_Map_Music, function Trig_Set_Map_Music_Actions)
endfunction


//*  Trigger Initialization
//****************************************************************************
function Trig_Initialization_364 takes nothing returns nothing
	call CreateFogModifierRadiusLocBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, udg_Point, 150.00)

endfunction

function Trig_Initialization_363 takes nothing returns nothing
	set udg_Point=GetItemLoc(GetEnumItem())
	call ForForce(GetPlayersAll(), function Trig_Initialization_364)

	call RemoveLocation(udg_Point)

endfunction

function Trig_Initialization_365 takes nothing returns nothing
	if ( GetConvertedPlayerId(GetEnumPlayer()) <= 6 ) then
	set udg_Point=GetRectCenter(s__udg_BuildRegion[GetConvertedPlayerId(GetEnumPlayer())])
	call CreateFogModifierRadiusLocBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, udg_Point, 1500.00)
	call RemoveLocation(udg_Point)
	call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_Middle_Doodad_00)
	call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_Middle_Doodad_04)
	call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_Middle_Doodad_08)
	
//*  --
	call SetPlayerUnitAvailableBJ('n00G', false, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('n010', false, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('n00Z', false, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('n011', false, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('e00D', false, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('e00C', false, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('e00B', false, GetEnumPlayer())
	
//*  HEROES
	call SetPlayerUnitAvailableBJ('E00P', false, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('E00M', false, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('E00T', false, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('E00Q', false, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('E00O', false, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('E00N', false, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('E00S', false, GetEnumPlayer())
	
//*  --
	if ( ModuloInteger(GetConvertedPlayerId(GetEnumPlayer()), 2) == 0 ) then
	call ForceAddPlayerSimple(GetEnumPlayer(), s__udg_Teams[2])
	else
	call ForceAddPlayerSimple(GetEnumPlayer(), s__udg_Teams[1])
	endif

	set s__udg_ActivePlayers[GetConvertedPlayerId(GetEnumPlayer())]= true
	set s__udg_Income[GetConvertedPlayerId(GetEnumPlayer())]= 10
	set udg_Point=GetRectCenter(s__udg_WorkerRegion[GetConvertedPlayerId(GetEnumPlayer())])
	set udg_Point2=GetRectCenter(s__udg_UpgradeRegion[GetConvertedPlayerId(GetEnumPlayer())])
	set udg_Point3=GetRectCenter(s__udg_ResearchRegion[GetConvertedPlayerId(GetEnumPlayer())])
	set udg_Point4=GetRectCenter(s__udg_ResearchRegion2[GetConvertedPlayerId(GetEnumPlayer())])
	set s__udg_CameraZoom[GetConvertedPlayerId(GetEnumPlayer())]= 1650.00
	set s__udg_IncomeNoMiddleText[GetConvertedPlayerId(GetEnumPlayer())]= "100"
	set s__udg_IncomeMiddleText[GetConvertedPlayerId(GetEnumPlayer())]= "|cff00ff00110|r"
	call RemoveLocation(udg_Point)
	call RemoveLocation(udg_Point2)
	call RemoveLocation(udg_Point3)
	call RemoveLocation(udg_Point4)
	else
	endif


endfunction

function Trig_Initialization_366 takes nothing returns nothing
	call SetPlayerAllianceStateBJ(GetEnumPlayer(), Player(12), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(Player(12), GetEnumPlayer(), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(Player(6), GetEnumPlayer(), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(GetEnumPlayer(), Player(6), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(Player(8), GetEnumPlayer(), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(GetEnumPlayer(), Player(8), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(Player(10), GetEnumPlayer(), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(GetEnumPlayer(), Player(10), bj_ALLIANCE_ALLIED_VISION)

endfunction

function Trig_Initialization_367 takes nothing returns nothing
	call SetPlayerAllianceStateBJ(GetEnumPlayer(), Player(13), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(Player(13), GetEnumPlayer(), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(Player(7), GetEnumPlayer(), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(GetEnumPlayer(), Player(7), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(Player(9), GetEnumPlayer(), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(GetEnumPlayer(), Player(9), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(Player(11), GetEnumPlayer(), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(GetEnumPlayer(), Player(11), bj_ALLIANCE_ALLIED_VISION)

endfunction

function Trig_Initialization_Actions takes nothing returns nothing
	call DisplayTextToForce(GetPlayersAll(), "Initializing...")
	
	
	call UseTimeOfDayBJ(false)
	call SetTimeOfDay(12)
	call SetAmbientDaySound("BarrensDay")
	call EnumItemsInRectBJ(GetPlayableMapRect(), function Trig_Initialization_363)

	
//*  SETUP PLAYER COLORS
	set s__udg_PlayerColors[1]= "|cffff0303"
	set s__udg_PlayerColors[2]= "|cff0042ff"
	set s__udg_PlayerColors[3]= "|cff1be7ba"
	set s__udg_PlayerColors[4]= "|cff550081"
	set s__udg_PlayerColors[5]= "|cfffefc00"
	set s__udg_PlayerColors[6]= "|cfffe890d"
	
//*  SETUP HASHTABLES
	call InitHashtableBJ()
	set udg_SpawnTable=GetLastCreatedHashtableBJ()
	call InitHashtableBJ()
	set udg_HeroTable=GetLastCreatedHashtableBJ()
	set bj_forLoopAIndex=1
set bj_forLoopAIndexEnd=4
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	call InitHashtableBJ()
	set s__udg_SkinTable[GetForLoopIndexA()]= GetLastCreatedHashtableBJ()
	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
	call InitHashtableBJ()
	set udg_CustomValueSkinTable=GetLastCreatedHashtableBJ()
	call InitHashtableBJ()
	set udg_UnitTypeTable=GetLastCreatedHashtableBJ()
	call InitHashtableBJ()
	set udg_TableUnitTimedLife=GetLastCreatedHashtableBJ()
	call InitHashtableBJ()
	set udg_TableTimedLifeTT=GetLastCreatedHashtableBJ()
	call InitHashtableBJ()
	set udg_MMD_HeroNamesTable=GetLastCreatedHashtableBJ()
	call InitHashtableBJ()
	set udg_TablePlayerRace=GetLastCreatedHashtableBJ()
	
//*  SET REGIONS
	set s__udg_SpawnRegions[1]= gg_rct_Team_1_Spawn
	set s__udg_SpawnRegions[2]= gg_rct_Team_2_Spawn
	set s__udg_BuildRegion[1]= gg_rct_Build_Player_1
	set s__udg_BuildRegion[2]= gg_rct_Build_Player_2
	set s__udg_BuildRegion[3]= gg_rct_Build_Player_3
	set s__udg_BuildRegion[4]= gg_rct_Build_Player_4
	set s__udg_BuildRegion[5]= gg_rct_Build_Player_5
	set s__udg_BuildRegion[6]= gg_rct_Build_Player_6
	set s__udg_UpgradeRegion[1]= gg_rct_Upgrade_Player_1
	set s__udg_UpgradeRegion[2]= gg_rct_Upgrade_Player_2
	set s__udg_UpgradeRegion[3]= gg_rct_Upgrade_Player_3
	set s__udg_UpgradeRegion[4]= gg_rct_Upgrade_Player_4
	set s__udg_UpgradeRegion[5]= gg_rct_Upgrade_Player_5
	set s__udg_UpgradeRegion[6]= gg_rct_Upgrade_Player_6
	set s__udg_ResearchRegion[1]= gg_rct_Upgrade_Player_1_Copy
	set s__udg_ResearchRegion[2]= gg_rct_Upgrade_Player_2_Copy
	set s__udg_ResearchRegion[3]= gg_rct_Upgrade_Player_3_Copy
	set s__udg_ResearchRegion[4]= gg_rct_Upgrade_Player_4_Copy
	set s__udg_ResearchRegion[5]= gg_rct_Upgrade_Player_5_Copy
	set s__udg_ResearchRegion[6]= gg_rct_Upgrade_Player_6_Copy
	set s__udg_ResearchRegion2[1]= gg_rct_Upgrade_Player_1_Copy_2
	set s__udg_ResearchRegion2[2]= gg_rct_Upgrade_Player_2_Copy_2
	set s__udg_ResearchRegion2[3]= gg_rct_Upgrade_Player_3_Copy_2
	set s__udg_ResearchRegion2[4]= gg_rct_Upgrade_Player_4_Copy_2
	set s__udg_ResearchRegion2[5]= gg_rct_Upgrade_Player_5_Copy_2
	set s__udg_ResearchRegion2[6]= gg_rct_Upgrade_Player_6_Copy_2
	set s__udg_ItemShopRegion[1]= gg_rct_Item_Shop_Player_1
	set s__udg_ItemShopRegion[2]= gg_rct_Item_Shop_Player_2
	set s__udg_ItemShopRegion[3]= gg_rct_Item_Shop_Player_3
	set s__udg_ItemShopRegion[4]= gg_rct_Item_Shop_Player_4
	set s__udg_ItemShopRegion[5]= gg_rct_Item_Shop_Player_5
	set s__udg_ItemShopRegion[6]= gg_rct_Item_Shop_Player_6
	set s__udg_WorkerRegion[1]= gg_rct_Spawn_Player_1
	set s__udg_WorkerRegion[2]= gg_rct_Spawn_Player_2
	set s__udg_WorkerRegion[3]= gg_rct_Spawn_Player_3
	set s__udg_WorkerRegion[4]= gg_rct_Spawn_Player_4
	set s__udg_WorkerRegion[5]= gg_rct_Spawn_Player_5
	set s__udg_WorkerRegion[6]= gg_rct_Spawn_Player_6
	set s__udg_MiddleRegions[1]= gg_rct_Middle_Team_1
	set s__udg_MiddleRegions[2]= gg_rct_Middle_Team_2
	set s__udg_UnitXP[1]= 25
	set s__udg_UnitXP[2]= 40
	set s__udg_UnitXP[3]= 60
	set s__udg_UnitXP[4]= 85
	set s__udg_UnitXP[5]= 115
	set s__udg_UnitXP[6]= 150
	set s__udg_HeroXP[1]= 100
	set s__udg_HeroXP[2]= 120
	set s__udg_HeroXP[3]= 160
	set s__udg_HeroXP[4]= 220
	set s__udg_HeroXP[5]= 300
	set s__udg_HeroXP[6]= 400
	set s__udg_HeroXP[7]= 500
	set s__udg_HeroXP[8]= 600
	set s__udg_HeroXP[9]= 700
	set s__udg_HeroXP[10]= 800
	
//*  SET BUILDERS
	set s__udg_BuilderType[1]= 'hpea'
	set s__udg_BuilderType[2]= 'h00C'
	set s__udg_BuilderType[3]= 'uaco'
	set s__udg_BuilderType[4]= 'ewsp'
	
	
	
	
	
//*  SET BUILDINGS
	set s__udg_MainBuildingType[1]= 'htow'
	set s__udg_MainBuildingType[2]= 'ogre'
	set s__udg_MainBuildingType[3]= 'unpl'
	set s__udg_MainBuildingType[4]= 'etol'
	
	
	
	
	set s__udg_ResearchBuilding1Type[1]= 'hbla'
	set s__udg_ResearchBuilding1Type[2]= 'ofor'
	set s__udg_ResearchBuilding1Type[3]= 'ugrv'
	set s__udg_ResearchBuilding1Type[4]= 'edob'
	
	
	
	
	set s__udg_ResearchBuilding2Type[1]= 'hvlt'
	set s__udg_ResearchBuilding2Type[2]= 'ovln'
	set s__udg_ResearchBuilding2Type[3]= 'utom'
	set s__udg_ResearchBuilding2Type[4]= 'eden'
	
	
	
	
	
//*  SET CAMERAS
	set s__udg_PlayerCameras[1]= gg_cam_Camera_Player_1
	set s__udg_PlayerCameras[2]= gg_cam_Camera_Player_2
	set s__udg_PlayerCameras[3]= gg_cam_Camera_Player_3
	set s__udg_PlayerCameras[4]= gg_cam_Camera_Player_4
	set s__udg_PlayerCameras[5]= gg_cam_Camera_Player_5
	set s__udg_PlayerCameras[6]= gg_cam_Camera_Player_6
	call ConditionalTriggerExecute(gg_trg_Setup_Fortress_and_Watch_Tower_etc)
	set bj_forLoopAIndex=1
set bj_forLoopAIndexEnd=6
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	call SetPlayerName(ConvertedPlayer(( GetForLoopIndexA() + 6 )), GetPlayerName(ConvertedPlayer(GetForLoopIndexA())))
	call CreateFogModifierRectBJ(true, ConvertedPlayer(GetForLoopIndexA()), FOG_OF_WAR_VISIBLE, GetPlayableMapRect())
	set s__udg_VisibilityModifier[GetForLoopIndexA()]= GetLastCreatedFogModifier()
	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
	call CameraSetupApplyForPlayer(true, gg_cam_Cinematic_01_Team_1, Player(0), 0)
	call CameraSetupApplyForPlayer(true, gg_cam_Cinematic_01_Team_1, Player(2), 0)
	call CameraSetupApplyForPlayer(true, gg_cam_Cinematic_01_Team_1, Player(4), 0)
	call CameraSetupApplyForPlayer(true, gg_cam_Cinematic_01_Team_2, Player(1), 0)
	call CameraSetupApplyForPlayer(true, gg_cam_Cinematic_01_Team_2, Player(3), 0)
	call CameraSetupApplyForPlayer(true, gg_cam_Cinematic_01_Team_2, Player(5), 0)
	call SetCameraField(CAMERA_FIELD_FARZ, 0, 0)
	call ForForce(GetPlayersAll(), function Trig_Initialization_365)

	call ForceAddPlayerSimple(Player(6), s__udg_Teams[1])
	call ForceAddPlayerSimple(Player(8), s__udg_Teams[1])
	call ForceAddPlayerSimple(Player(10), s__udg_Teams[1])
	call ForceAddPlayerSimple(Player(7), s__udg_Teams[2])
	call ForceAddPlayerSimple(Player(9), s__udg_Teams[2])
	call ForceAddPlayerSimple(Player(11), s__udg_Teams[2])
	call ForForce(s__udg_Teams[1], function Trig_Initialization_366)

	call SetPlayerAllianceStateBJ(Player(6), Player(8), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(Player(6), Player(10), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(Player(8), Player(6), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(Player(8), Player(10), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(Player(10), Player(6), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(Player(10), Player(8), bj_ALLIANCE_ALLIED_VISION)
	call ForForce(s__udg_Teams[2], function Trig_Initialization_367)

	call SetPlayerAllianceStateBJ(Player(7), Player(9), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(Player(7), Player(11), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(Player(9), Player(7), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(Player(9), Player(11), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(Player(11), Player(7), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerAllianceStateBJ(Player(11), Player(9), bj_ALLIANCE_ALLIED_VISION)
	call SetPlayerColorBJ(Player(6), PLAYER_COLOR_RED, true)
	call SetPlayerColorBJ(Player(7), PLAYER_COLOR_BLUE, true)
	call SetPlayerColorBJ(Player(8), PLAYER_COLOR_CYAN, true)
	call SetPlayerColorBJ(Player(9), PLAYER_COLOR_PURPLE, true)
	call SetPlayerColorBJ(Player(10), PLAYER_COLOR_YELLOW, true)
	call SetPlayerColorBJ(Player(11), PLAYER_COLOR_ORANGE, true)
	call SetMapFlag(MAP_RESOURCE_TRADING_ALLIES_ONLY, true)
endfunction


//****************************************************************************
function InitTrig_Initialization takes nothing returns nothing
	set gg_trg_Initialization=CreateTrigger()
	call TriggerAddAction(gg_trg_Initialization, function Trig_Initialization_Actions)
endfunction

//*  Trigger Initializatize_Scripts
//****************************************************************************
function Trig_Initializatize_Scripts_Actions takes nothing returns nothing
	call Setup()
endfunction


//****************************************************************************
function InitTrig_Initializatize_Scripts takes nothing returns nothing
	set gg_trg_Initializatize_Scripts=CreateTrigger()
call TriggerRegisterTimerEventSingle(gg_trg_Initializatize_Scripts, 0.50)
	call TriggerAddAction(gg_trg_Initializatize_Scripts, function Trig_Initializatize_Scripts_Actions)
endfunction

//*  Trigger Start_Game
//****************************************************************************
function Trig_Start_Game_368 takes nothing returns nothing
	
//*  Increment losses to eliminate cheesing - it is decremented at game finish
	set s__udg_MMD_Losses[GetConvertedPlayerId(GetEnumPlayer())]= ( s__udg_MMD_Losses[GetConvertedPlayerId(GetEnumPlayer())] + 1 )

endfunction

function BoolExpr_371 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'h01B' and GetOwningPlayer(GetFilterUnit()) == GetEnumPlayer() ) ) then
		return true
	endif
	return false
endfunction

function Trig_Start_Game_371 takes nothing returns nothing
	call BlzUnitHideAbility(GetEnumUnit(), 'A010', false)

endfunction

function Trig_Start_Game_369 takes nothing returns nothing
	if ( s__udg_ActivePlayers[GetConvertedPlayerId(GetEnumPlayer())] == true and GetConvertedPlayerId(GetEnumPlayer()) <= 6 ) then
	set udg_Point=GetRectCenter(s__udg_WorkerRegion[GetConvertedPlayerId(GetEnumPlayer())])
	set udg_Point2=GetRectCenter(s__udg_UpgradeRegion[GetConvertedPlayerId(GetEnumPlayer())])
	set udg_Point3=GetRectCenter(s__udg_ResearchRegion[GetConvertedPlayerId(GetEnumPlayer())])
	set udg_Point4=GetRectCenter(s__udg_ResearchRegion2[GetConvertedPlayerId(GetEnumPlayer())])
	set udg_Point5=GetRectCenter(s__udg_ItemShopRegion[GetConvertedPlayerId(GetEnumPlayer())])
	call SetPlayerStateBJ(GetEnumPlayer(), PLAYER_STATE_RESOURCE_GOLD, 280)
	set udg_UnitGroup=GetUnitsInRectMatching(GetPlayableMapRect(), Condition(function BoolExpr_371))
	call ForGroup(udg_UnitGroup, function Trig_Start_Game_371)

	call DestroyGroup(udg_UnitGroup)
	
//*  Make sure players can't get the same race twice if they picked random
	if ( s__udg_PlayerRace[GetConvertedPlayerId(GetEnumPlayer())] == 0 ) then
	if ( udg_isGameModeClassic == true ) then
	set udg_Integer=0
	set bj_forLoopAIndex=1
set bj_forLoopAIndexEnd=4
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	if ( s__udg_PlayerRacePrevious[GetConvertedPlayerId(GetEnumPlayer())] != GetForLoopIndexA() ) then
	set udg_Integer=( udg_Integer + 1 )
	call SaveIntegerBJ(GetForLoopIndexA(), udg_Integer, 0, udg_TablePlayerRace)
	else
	endif

	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
	set udg_Integer2=LoadIntegerBJ(GetRandomInt(1, udg_Integer), 0, udg_TablePlayerRace)
	set s__udg_PlayerRace[GetConvertedPlayerId(GetEnumPlayer())]= udg_Integer2
	set s__udg_PlayerRacePrevious[GetConvertedPlayerId(GetEnumPlayer())]= udg_Integer2
	else
	endif

	if ( udg_isGameModeClassic == false ) then
	set udg_Integer=0
	set bj_forLoopAIndex=5
set bj_forLoopAIndexEnd=8
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	if ( s__udg_PlayerRacePrevious[GetConvertedPlayerId(GetEnumPlayer())] != GetForLoopIndexA() ) then
	set udg_Integer=( udg_Integer + 1 )
	call SaveIntegerBJ(GetForLoopIndexA(), udg_Integer, 0, udg_TablePlayerRace)
	else
	endif

	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
	set udg_Integer2=LoadIntegerBJ(GetRandomInt(1, udg_Integer), 0, udg_TablePlayerRace)
	set s__udg_PlayerRace[GetConvertedPlayerId(GetEnumPlayer())]= udg_Integer2
	set s__udg_PlayerRacePrevious[GetConvertedPlayerId(GetEnumPlayer())]= udg_Integer2
	else
	endif

	else
	endif

	call CreateNUnitsAtLoc(1, s__udg_BuilderType[s__udg_PlayerRace[GetConvertedPlayerId(GetEnumPlayer())]], GetEnumPlayer(), udg_Point, bj_UNIT_FACING)
	call CreateNUnitsAtLoc(1, s__udg_MainBuildingType[s__udg_PlayerRace[GetConvertedPlayerId(GetEnumPlayer())]], GetEnumPlayer(), udg_Point2, bj_UNIT_FACING)
	set s__udg_MainBuilding[GetConvertedPlayerId(GetEnumPlayer())]= GetLastCreatedUnit()
	call CreateNUnitsAtLoc(1, s__udg_ResearchBuilding1Type[s__udg_PlayerRace[GetConvertedPlayerId(GetEnumPlayer())]], GetEnumPlayer(), udg_Point3, bj_UNIT_FACING)
	call CreateNUnitsAtLoc(1, s__udg_ResearchBuilding2Type[s__udg_PlayerRace[GetConvertedPlayerId(GetEnumPlayer())]], GetEnumPlayer(), udg_Point4, bj_UNIT_FACING)
	if ( ( s__udg_PlayerRace[GetConvertedPlayerId(GetEnumPlayer())] == 3 or s__udg_PlayerRace[GetConvertedPlayerId(GetEnumPlayer())] == 7 ) ) then
	call SetBlightRectBJ(true, GetEnumPlayer(), s__udg_BuildRegion[GetConvertedPlayerId(GetEnumPlayer())])
	else
	call SetBlightRectBJ(false, GetEnumPlayer(), s__udg_BuildRegion[GetConvertedPlayerId(GetEnumPlayer())])
	endif

	call CreateNUnitsAtLoc(1, 'ngme', GetEnumPlayer(), udg_Point5, bj_UNIT_FACING)
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Spells\\Items\\TomeOfRetraining\\TomeOfRetrainingCaster.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveLocation(udg_Point)
	call RemoveLocation(udg_Point2)
	call RemoveLocation(udg_Point3)
	call RemoveLocation(udg_Point4)
	call RemoveLocation(udg_Point5)
	call ShowMainUI()
	else
	endif


endfunction

function Trig_Start_Game_Actions takes nothing returns nothing
	call TriggerSleepAction(0.50)
	set bj_forLoopAIndex=1
set bj_forLoopAIndexEnd=6
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	set s__udg_XRVoteClickCheck[GetForLoopIndexA()]= false
	call DestroyFogModifier(s__udg_VisibilityModifier[GetForLoopIndexA()])
	set udg_Point=GetRectCenter(s__udg_WorkerRegion[GetConvertedPlayerId(GetEnumPlayer())])
	call CameraSetupApplyForPlayerSmooth(true, s__udg_PlayerCameras[GetForLoopIndexA()], ConvertedPlayer(GetForLoopIndexA()), 5.00, 1.00, 1.00, 1.00)
	call StartTimerBJ(s__udg_GoldExtractorCooldown[GetForLoopIndexA()], false, 1.00)
	call RemoveLocation(udg_Point)
	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
	call TriggerSleepAction(5.00)
	set udg_TotalRounds=( udg_TotalRounds + 1 )
	call StartTimerBJ(udg_Timer, false, udg_WaveTime)
	call StartTimerBJ(udg_TwentyMinuteTimer, false, 1200.00)
	set udg_AmountOfRoundsPlayed=( udg_AmountOfRoundsPlayed + 1 )
	call MultiboardSetup()
	call EnableTrigger(gg_trg_Timer_Update)
	call EnableTrigger(gg_trg_Basic_Income)
	call EnableTrigger(gg_trg_Extra_Income)
	call ForForce(GetPlayersAll(), function Trig_Start_Game_368)

	call ForForce(GetPlayersAll(), function Trig_Start_Game_369)

	
//*  Set correct spawn players
	set bj_forLoopAIndex=1
set bj_forLoopAIndexEnd=6
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	set s__udg_PlayerQueue[GetForLoopIndexA()]= 0
	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
	set bj_forLoopBIndex=1
set bj_forLoopBIndexEnd=2
	loop
	exitwhen bj_forLoopBIndex > bj_forLoopBIndexEnd
	set udg_Integer=0
	set bj_forLoopAIndex=1
set bj_forLoopAIndexEnd=6
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	if ( IsPlayerInForce(ConvertedPlayer(GetForLoopIndexA()), s__udg_Teams[GetForLoopIndexB()]) == true ) then
	set s__udg_PlayerQueue[GetForLoopIndexA()]= udg_Integer
	if ( udg_Integer == 0 ) then
	set s__udg_SpawnPlayers[GetForLoopIndexB()]= GetForLoopIndexA()
	else
	endif

	set udg_Integer=( udg_Integer + 1 )
	else
	endif

	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
	set bj_forLoopBIndex=bj_forLoopBIndex + 1
endloop
	
//*  Add new MMD values for heroes
	call ConditionalTriggerExecute(gg_trg_New_Round_MMD_Values)
endfunction


//****************************************************************************
function InitTrig_Start_Game takes nothing returns nothing
	set gg_trg_Start_Game=CreateTrigger()
	call TriggerAddAction(gg_trg_Start_Game, function Trig_Start_Game_Actions)
endfunction

//*  Trigger Info_Init
//****************************************************************************
function Trig_Info_Init_Actions takes nothing returns nothing
	call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, "Heroes", "Heroes in your building area are a mirror of your heroes on the battlefield.\r\nWhen you learn abilities for your hero in your building area, the actual hero on the battlefield will receive those abilities.|n|nMelee heroes receive an additional 10% XP per kill.\r\n\r\nYou can only have one hero type active at a time, e.g. you cannot have two Paladins on the battlefield.|n|nYour hero will respawn when it's dead.", "ReplaceableTextures\\CommandButtons\\BTNResurrection.blp")
	call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, "Income", "|cffd45e19Income System:|r\r\n\r\nYou get |cffffff00100|r gold over 20 seconds. Building Gold Extractors increases your income.\r\nControlling the middle counts as an |cff32ff00extra Gold Extractor|r.\r\n\r\n0 Gold Extractors:  |cffffff00100|r/|cff32ff00110|r gold\r\n1 Gold Extractor:  |cffffff00110|r/|cff32ff00120|r gold\r\n2 Gold Extractors:  |cffffff00120|r/|cff32ff00130|r gold\r\n3 Gold Extractors: |cffffff00130|r/|cff32ff00140|r gold\r\n4 Gold Extractors: |cffffff00140|r/|cff32ff00150|r gold", "ReplaceableTextures\\CommandButtons\\BTNChestOfGold.blp")
	call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, "Units", "Units have timed life, meaning they will die if they have been alive for 130 seconds.", "ReplaceableTextures\\CommandButtons\\BTNFootman.blp")
	call CreateQuestItemBJ(GetLastCreatedQuestBJ(), "Units in your building area will be sent as a wave your timer has finished counting down.")
	call CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, "Camera", "", "ReplaceableTextures\\WorldEditUI\\Doodad-Cinematic.blp")
	call CreateQuestItemBJ(GetLastCreatedQuestBJ(), "Use the camera buttons or write \"-zoom [number]\" to change the camera distance. Default camera distance is 1650.")
	call CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, "Critters", "", "ReplaceableTextures\\CommandButtons\\BTNHex.blp")
	call CreateQuestItemBJ(GetLastCreatedQuestBJ(), "Testers, donators and honorable mentions can be found in the mountain area.")
	call CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, "|cff7289DADiscord|r", "", "war3mapImported\\discord.dds")
	call CreateQuestItemBJ(GetLastCreatedQuestBJ(), "Join the discord: |cff7289DAdiscord.gg/YXRuCXS7hw|r")
endfunction


//****************************************************************************
function InitTrig_Info_Init takes nothing returns nothing
	set gg_trg_Info_Init=CreateTrigger()
call TriggerRegisterTimerEventSingle(gg_trg_Info_Init, 1.00)
	call TriggerAddAction(gg_trg_Info_Init, function Trig_Info_Init_Actions)
endfunction

//*  Trigger Info_Prompt
//****************************************************************************
function Trig_Info_Prompt_Actions takes nothing returns nothing
	call PlaySoundBJ(gg_snd_Hint)
	call DisplayTextToForce(GetPlayersAll(), "-- Press |cff00ff00F9|r for info --")
endfunction


//****************************************************************************
function InitTrig_Info_Prompt takes nothing returns nothing
	set gg_trg_Info_Prompt=CreateTrigger()
call TriggerRegisterTimerEventSingle(gg_trg_Info_Prompt, 90.00)
	call TriggerAddAction(gg_trg_Info_Prompt, function Trig_Info_Prompt_Actions)
endfunction

//*  Trigger Load_Building_Models
//****************************************************************************
function Trig_Load_Building_Models_Actions takes nothing returns nothing
	set udg_Point=GetRectCenter(gg_rct_UnitLoad)
	
//*  HUMAN
	call CreateNUnitsAtLoc(1, 'htow', Player(PLAYER_NEUTRAL_PASSIVE), udg_Point, bj_UNIT_FACING)
	call RemoveUnit(GetLastCreatedUnit())
	call CreateNUnitsAtLoc(1, 'hkee', Player(PLAYER_NEUTRAL_PASSIVE), udg_Point, bj_UNIT_FACING)
	call RemoveUnit(GetLastCreatedUnit())
	call CreateNUnitsAtLoc(1, 'hcas', Player(PLAYER_NEUTRAL_PASSIVE), udg_Point, bj_UNIT_FACING)
	call RemoveUnit(GetLastCreatedUnit())
	call CreateNUnitsAtLoc(1, 'hbla', Player(PLAYER_NEUTRAL_PASSIVE), udg_Point, bj_UNIT_FACING)
	call RemoveUnit(GetLastCreatedUnit())
	call CreateNUnitsAtLoc(1, 'hvlt', Player(PLAYER_NEUTRAL_PASSIVE), udg_Point, bj_UNIT_FACING)
	call RemoveUnit(GetLastCreatedUnit())
	
//*  ORC
	call CreateNUnitsAtLoc(1, 'ogre', Player(PLAYER_NEUTRAL_PASSIVE), udg_Point, bj_UNIT_FACING)
	call RemoveUnit(GetLastCreatedUnit())
	call CreateNUnitsAtLoc(1, 'ostr', Player(PLAYER_NEUTRAL_PASSIVE), udg_Point, bj_UNIT_FACING)
	call RemoveUnit(GetLastCreatedUnit())
	call CreateNUnitsAtLoc(1, 'ofrt', Player(PLAYER_NEUTRAL_PASSIVE), udg_Point, bj_UNIT_FACING)
	call RemoveUnit(GetLastCreatedUnit())
	call CreateNUnitsAtLoc(1, 'ofor', Player(PLAYER_NEUTRAL_PASSIVE), udg_Point, bj_UNIT_FACING)
	call RemoveUnit(GetLastCreatedUnit())
	call CreateNUnitsAtLoc(1, 'ovln', Player(PLAYER_NEUTRAL_PASSIVE), udg_Point, bj_UNIT_FACING)
	call RemoveUnit(GetLastCreatedUnit())
	
//*  UNDEAD
	call CreateNUnitsAtLoc(1, 'unpl', Player(PLAYER_NEUTRAL_PASSIVE), udg_Point, bj_UNIT_FACING)
	call RemoveUnit(GetLastCreatedUnit())
	call CreateNUnitsAtLoc(1, 'unp1', Player(PLAYER_NEUTRAL_PASSIVE), udg_Point, bj_UNIT_FACING)
	call RemoveUnit(GetLastCreatedUnit())
	call CreateNUnitsAtLoc(1, 'unp2', Player(PLAYER_NEUTRAL_PASSIVE), udg_Point, bj_UNIT_FACING)
	call RemoveUnit(GetLastCreatedUnit())
	call CreateNUnitsAtLoc(1, 'ugrv', Player(PLAYER_NEUTRAL_PASSIVE), udg_Point, bj_UNIT_FACING)
	call RemoveUnit(GetLastCreatedUnit())
	call CreateNUnitsAtLoc(1, 'utom', Player(PLAYER_NEUTRAL_PASSIVE), udg_Point, bj_UNIT_FACING)
	call RemoveUnit(GetLastCreatedUnit())
	
//*  NIGHT ELF
	call CreateNUnitsAtLoc(1, 'etol', Player(PLAYER_NEUTRAL_PASSIVE), udg_Point, bj_UNIT_FACING)
	call RemoveUnit(GetLastCreatedUnit())
	call CreateNUnitsAtLoc(1, 'etoa', Player(PLAYER_NEUTRAL_PASSIVE), udg_Point, bj_UNIT_FACING)
	call RemoveUnit(GetLastCreatedUnit())
	call CreateNUnitsAtLoc(1, 'etoe', Player(PLAYER_NEUTRAL_PASSIVE), udg_Point, bj_UNIT_FACING)
	call RemoveUnit(GetLastCreatedUnit())
	call CreateNUnitsAtLoc(1, 'edob', Player(PLAYER_NEUTRAL_PASSIVE), udg_Point, bj_UNIT_FACING)
	call RemoveUnit(GetLastCreatedUnit())
	call CreateNUnitsAtLoc(1, 'eden', Player(PLAYER_NEUTRAL_PASSIVE), udg_Point, bj_UNIT_FACING)
	call RemoveUnit(GetLastCreatedUnit())
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Load_Building_Models takes nothing returns nothing
	set gg_trg_Load_Building_Models=CreateTrigger()
	call TriggerAddAction(gg_trg_Load_Building_Models, function Trig_Load_Building_Models_Actions)
endfunction

//*  Trigger Reset_Game
//****************************************************************************
function BoolExpr_373 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) != 'h01B' and GetUnitTypeId(GetFilterUnit()) != 'u000' ) ) then
		return true
	endif
	return false
endfunction

function Trig_Reset_Game_373 takes nothing returns nothing
	call DestroyTextTagBJ(LoadTextTagHandleBJ(0, GetHandleIdBJ(GetEnumUnit()), udg_TableTimedLifeTT))
	call RemoveUnit(GetEnumUnit())

endfunction

function Trig_Reset_Game_374 takes nothing returns nothing
	call RemoveUnit(GetEnumUnit())

endfunction

function Trig_Reset_Game_375 takes nothing returns nothing
	call RemoveItem(GetEnumItem())

endfunction

function Trig_Reset_Game_376 takes nothing returns nothing
	call RemoveItem(GetEnumItem())

endfunction

function Trig_Reset_Game_377 takes nothing returns nothing
	set s__udg_Victory[GetConvertedPlayerId(GetEnumPlayer())]= false

endfunction

function Trig_Reset_Game_378 takes nothing returns nothing
	call StartTimerBJ(s__udg_GoldExtractorCooldown[GetConvertedPlayerId(GetEnumPlayer())], false, 1.00)
	set s__udg_GoldExtractorNumber[GetConvertedPlayerId(GetEnumPlayer())]= 0
	set s__udg_GoldExtractorCost[GetConvertedPlayerId(GetEnumPlayer())]= 150
	set s__udg_GoldExtractorCooldownBoolean[GetConvertedPlayerId(GetEnumPlayer())]= false
	set s__udg_IncomeNoMiddleText[GetConvertedPlayerId(GetEnumPlayer())]= "100"
	set s__udg_IncomeMiddleText[GetConvertedPlayerId(GetEnumPlayer())]= "100"
	call MultiboardDisplayBJ(false, s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())])
	call MultiboardSetItemValueBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 2, 1, "None")
	call MultiboardSetItemValueBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 2, 5, s__udg_IncomeNoMiddleText[GetConvertedPlayerId(GetEnumPlayer())])
	set s__udg_TotalScore[GetConvertedPlayerId(GetEnumPlayer())]= 0
	set s__udg_TotalKills[GetConvertedPlayerId(GetEnumPlayer())]= 0
	set s__udg_TotalDamage[GetConvertedPlayerId(GetEnumPlayer())]= 0.00
	set s__udg_TotalUnitsSpawned[GetConvertedPlayerId(GetEnumPlayer())]= 0
	set s__udg_TotalGoldEarned[GetConvertedPlayerId(GetEnumPlayer())]= 0
	set s__udg_TotalUnits[GetConvertedPlayerId(GetEnumPlayer())]= 0
	set s__udg_TotalHeroes[GetConvertedPlayerId(GetEnumPlayer())]= 0
	
//*  HUMAN
	call SetPlayerTechResearchedSwap('Rhme', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rhra', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rhhb', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rhar', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rhgb', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rhde', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rhan', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rhpt', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rhst', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rhla', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rhri', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rhfl', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rhss', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rhrt', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rhfc', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rhfs', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rhfs', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rhsb', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('R00J', 0, GetEnumPlayer())
	
	
	call SetPlayerUnitAvailableBJ('H01F', true, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('H01I', true, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('H01J', true, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('H01L', true, GetEnumPlayer())
	
//*  ORC
	call SetPlayerTechResearchedSwap('Rome', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rora', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Roar', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rwdm', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Robs', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rows', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Roen', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rovs', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rowd', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rost', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rotr', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rowt', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Robk', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Robf', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('R00K', 0, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('O002', true, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('O003', true, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('O004', true, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('O005', true, GetEnumPlayer())
	
//*  UNDEAD
	call SetPlayerTechResearchedSwap('Rume', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rura', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Ruar', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rugf', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Ruwb', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rune', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Ruba', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rufb', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rusl', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rucr', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rupc', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rusm', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rubu', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Ruex', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('R00L', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rusf', 0, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('U005', true, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('U006', true, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('U007', true, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('U008', true, GetEnumPlayer())
	
//*  NIGHT ELF
	call SetPlayerTechResearchedSwap('Resm', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Resw', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rema', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rerh', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Resc', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Remg', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Reib', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Remk', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Redt', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Redc', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Resi', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Recb', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Repb', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rers', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Rehs', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('Reeb', 0, GetEnumPlayer())
	call SetPlayerTechResearchedSwap('R00M', 0, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('E00H', true, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('E00I', true, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('E00J', true, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('E00K', true, GetEnumPlayer())
	
//*  HEROES
	call SetPlayerUnitAvailableBJ('N012', true, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('N013', true, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('N014', true, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('N015', true, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('N016', true, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('N017', true, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('N018', true, GetEnumPlayer())
	call SetPlayerUnitAvailableBJ('N019', true, GetEnumPlayer())
	
//*  CUSTOM RACES
	
//*  -
	
//*  DALARAN
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
//*  BLOOD ELVES
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
//*  FORSAKEN
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
//*  NAGA
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

endfunction

function Trig_Reset_Game_Actions takes nothing returns nothing
	call EnableTrigger(gg_trg_Game_Over)
	call EnableTrigger(gg_trg_Spawn)
	call EnableTrigger(gg_trg_Middle_Check)
	call EnableTrigger(gg_trg_Idle_Check)
	call SetBlightRectBJ(false, Player(PLAYER_NEUTRAL_PASSIVE), gg_rct_Battlefield)
	set udg_UnitGroup=GetUnitsInRectMatching(GetEntireMapRect(), Condition(function BoolExpr_373))
	call ForGroup(udg_UnitGroup, function Trig_Reset_Game_373)

	call DestroyGroup(udg_UnitGroup)
	call ForGroup(udg_DiseaseClouds, function Trig_Reset_Game_374)

	call GroupClear(udg_DiseaseClouds)
	call PauseAllUnitsBJ(false)
	set bj_forLoopAIndex=1
set bj_forLoopAIndexEnd=30
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	call RemoveDestructable(s__udg_Rocks[GetForLoopIndexA()])
	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
	call ConditionalTriggerExecute(gg_trg_Setup_Fortress_and_Watch_Tower_etc)
	set s__udg_MiddleIncome[2]= 0
	set s__udg_MiddleIncome[1]= 0
	set s__udg_MiddleIncome2[2]= 0.00
	set s__udg_MiddleIncome2[1]= 0.00
	set udg_intHours=0
	set udg_intMinutes=0
	set udg_intSeconds=0
	call EnumItemsInRectBJ(gg_rct_Item_Removal_1, function Trig_Reset_Game_375)

	call EnumItemsInRectBJ(gg_rct_Item_Removal_2, function Trig_Reset_Game_376)

	call ForForce(GetPlayersAll(), function Trig_Reset_Game_377)

	set bj_forLoopAIndex=1
set bj_forLoopAIndexEnd=2
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	call ForForce(s__udg_Teams[GetForLoopIndexA()], function Trig_Reset_Game_378)

	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
endfunction


//****************************************************************************
function InitTrig_Reset_Game takes nothing returns nothing
	set gg_trg_Reset_Game=CreateTrigger()
	call TriggerAddAction(gg_trg_Reset_Game, function Trig_Reset_Game_Actions)
endfunction

//*  Trigger Setup_Fortress_and_Watch_Tower_etc
//****************************************************************************
function BoolExpr_380 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'u000' or GetUnitTypeId(GetFilterUnit()) == 'h01B' ) ) then
		return true
	endif
	return false
endfunction

function Trig_Setup_Fortress_and_Watch_Tower_etc_380 takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetEnumUnit())
	call RemoveUnit(GetEnumUnit())
	call CreateNUnitsAtLoc(1, 'h01B', GetOwningPlayer(GetEnumUnit()), udg_Point, bj_UNIT_FACING)
	call BlzUnitHideAbility(GetLastCreatedUnit(), 'A010', true)
	call BlzUnitHideAbility(GetLastCreatedUnit(), 'A013', true)
	call BlzUnitHideAbility(GetLastCreatedUnit(), 'A014', true)
	call BlzUnitHideAbility(GetLastCreatedUnit(), 'A015', true)
	call RemoveLocation(udg_Point)

endfunction

function Trig_Setup_Fortress_and_Watch_Tower_etc_Actions takes nothing returns nothing
	set udg_Point=GetRectCenter(gg_rct_Fortress_Team_1)
	call CreateNUnitsAtLoc(1, 'o000', Player(12), udg_Point, bj_UNIT_FACING)
	set s__udg_Fortress[1]= GetLastCreatedUnit()
	call RemoveLocation(udg_Point)
	set udg_Point=GetRectCenter(gg_rct_Fortress_Team_2)
	call CreateNUnitsAtLoc(1, 'o000', Player(13), udg_Point, bj_UNIT_FACING)
	set s__udg_Fortress[2]= GetLastCreatedUnit()
	call RemoveLocation(udg_Point)
	set udg_Point=GetRectCenter(gg_rct_Tower_Team_1)
	call CreateNUnitsAtLoc(1, 'owtw', Player(12), udg_Point, bj_UNIT_FACING)
	set s__udg_WatchTower[1]= GetLastCreatedUnit()
	call RemoveLocation(udg_Point)
	set udg_Point=GetRectCenter(gg_rct_Tower_Team_2)
	call CreateNUnitsAtLoc(1, 'owtw', Player(13), udg_Point, bj_UNIT_FACING)
	set s__udg_WatchTower[2]= GetLastCreatedUnit()
	call RemoveLocation(udg_Point)
	set udg_UnitGroup=GetUnitsInRectMatching(GetEntireMapRect(), Condition(function BoolExpr_380))
	call ForGroup(udg_UnitGroup, function Trig_Setup_Fortress_and_Watch_Tower_etc_380)

	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Setup_Fortress_and_Watch_Tower_etc takes nothing returns nothing
	set gg_trg_Setup_Fortress_and_Watch_Tower_etc=CreateTrigger()
	call TriggerAddAction(gg_trg_Setup_Fortress_and_Watch_Tower_etc, function Trig_Setup_Fortress_and_Watch_Tower_etc_Actions)
endfunction

//*  Trigger Camera_Zoom
//****************************************************************************
function Trig_Camera_Zoom_Actions takes nothing returns nothing
	set udg_String=SubStringBJ(GetEventPlayerChatString(), 7, 10)
	set udg_Real=S2R(udg_String)
	if ( udg_Real <= 500.00 ) then
	set udg_Real=500.00
	else
	if ( udg_Real >= 4000.00 ) then
	set udg_Real=4000.00
	else
	endif

	endif

	set s__udg_CameraZoom[GetConvertedPlayerId(GetTriggerPlayer())]= udg_Real
	call SetCameraFieldForPlayer(GetTriggerPlayer(), CAMERA_FIELD_TARGET_DISTANCE, udg_Real, 1.00)
endfunction


//****************************************************************************
function InitTrig_Camera_Zoom takes nothing returns nothing
	set gg_trg_Camera_Zoom=CreateTrigger()
call TriggerRegisterPlayerChatEvent(gg_trg_Camera_Zoom, Player(0), "-zoom", false)
call TriggerRegisterPlayerChatEvent(gg_trg_Camera_Zoom, Player(1), "-zoom", false)
call TriggerRegisterPlayerChatEvent(gg_trg_Camera_Zoom, Player(2), "-zoom", false)
call TriggerRegisterPlayerChatEvent(gg_trg_Camera_Zoom, Player(3), "-zoom", false)
call TriggerRegisterPlayerChatEvent(gg_trg_Camera_Zoom, Player(4), "-zoom", false)
call TriggerRegisterPlayerChatEvent(gg_trg_Camera_Zoom, Player(5), "-zoom", false)
	call TriggerAddAction(gg_trg_Camera_Zoom, function Trig_Camera_Zoom_Actions)
endfunction

//*  Trigger Spawn
//****************************************************************************
function BoolExpr_382 takes nothing returns boolean
	if ( IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == true ) then
		return true
	endif
	return false
endfunction

function BoolExpr_383 takes nothing returns boolean
	if ( IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == true ) then
		return true
	endif
	return false
endfunction

function Trig_Spawn_Actions takes nothing returns nothing
	call StartTimerBJ(udg_Timer, false, udg_WaveTime)
	set s__udg_UnitGroupBuildings[1]= GetUnitsInRectMatching(s__udg_BuildRegion[s__udg_SpawnPlayers[1]], Condition(function BoolExpr_382))
	set s__udg_UnitGroupBuildings[2]= GetUnitsInRectMatching(s__udg_BuildRegion[s__udg_SpawnPlayers[2]], Condition(function BoolExpr_383))
	set s__udg_TotalUnitsSpawned[s__udg_SpawnPlayers[1]]= ( s__udg_TotalUnitsSpawned[s__udg_SpawnPlayers[1]] + CountUnitsInGroup(s__udg_UnitGroupBuildings[1]) )
	set s__udg_TotalUnitsSpawned[s__udg_SpawnPlayers[2]]= ( s__udg_TotalUnitsSpawned[s__udg_SpawnPlayers[2]] + CountUnitsInGroup(s__udg_UnitGroupBuildings[2]) )
	call SpawnUnits()
	set bj_forLoopBIndex=1
set bj_forLoopBIndexEnd=2
	loop
	exitwhen bj_forLoopBIndex > bj_forLoopBIndexEnd
	set bj_forLoopAIndex=1
set bj_forLoopAIndexEnd=6
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	if ( IsPlayerInForce(ConvertedPlayer(GetForLoopIndexA()), s__udg_Teams[GetForLoopIndexB()]) == true ) then
	if ( s__udg_PlayerQueue[GetForLoopIndexA()] == 0 ) then
	set s__udg_PlayerQueue[GetForLoopIndexA()]= ( CountPlayersInForceBJ(s__udg_Teams[GetForLoopIndexB()]) - 4 )
	else
	if ( s__udg_PlayerQueue[GetForLoopIndexA()] == 1 ) then
	set s__udg_PlayerQueue[GetForLoopIndexA()]= 0
	set s__udg_SpawnPlayers[GetForLoopIndexB()]= GetForLoopIndexA()
	else
	if ( s__udg_PlayerQueue[GetForLoopIndexA()] == 2 ) then
	set s__udg_PlayerQueue[GetForLoopIndexA()]= 1
	else
	endif

	endif

	endif

	else
	endif

	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
	set bj_forLoopBIndex=bj_forLoopBIndex + 1
endloop
	call DestroyGroup(s__udg_UnitGroupBuildings[1])
	call DestroyGroup(s__udg_UnitGroupBuildings[2])
endfunction


//****************************************************************************
function InitTrig_Spawn takes nothing returns nothing
	set gg_trg_Spawn=CreateTrigger()
call TriggerRegisterTimerExpireEventBJ(gg_trg_Spawn, udg_Timer)
	call TriggerAddAction(gg_trg_Spawn, function Trig_Spawn_Actions)
endfunction

//*  Trigger Player_Leaves
//****************************************************************************
function Trig_Player_Leaves_383 takes nothing returns nothing
	set s__udg_PlayerQueue[GetConvertedPlayerId(GetEnumPlayer())]= ( s__udg_PlayerQueue[GetConvertedPlayerId(GetEnumPlayer())] - 1 )

endfunction

function Trig_Player_Leaves_384 takes nothing returns nothing
	if ( s__udg_PlayerQueue[GetConvertedPlayerId(GetEnumPlayer())] == 2 ) then
	set s__udg_PlayerQueue[GetConvertedPlayerId(GetEnumPlayer())]= ( s__udg_PlayerQueue[GetConvertedPlayerId(GetEnumPlayer())] - 1 )
	else
	endif


endfunction

function Trig_Player_Leaves_385 takes nothing returns nothing
	if ( s__udg_PlayerQueue[GetConvertedPlayerId(GetEnumPlayer())] == 0 and s__udg_ActivePlayers[GetConvertedPlayerId(GetEnumPlayer())] == true ) then
	set s__udg_SpawnPlayers[GetForLoopIndexA()]= GetConvertedPlayerId(GetEnumPlayer())
	else
	endif


endfunction

function Trig_Player_Leaves_386 takes nothing returns nothing
	call RemoveUnit(GetEnumUnit())

endfunction

function Trig_Player_Leaves_Actions takes nothing returns nothing
	if ( udg_PlayerLeavesEventReal == 1.00 ) then
	set udg_Player=udg_EventPlayerLeave
	else
	set udg_Player=GetTriggerPlayer()
	endif

	set udg_PlayerLeavesEventReal=0.00
	set s__udg_ActivePlayers[GetConvertedPlayerId(udg_Player)]= false
	set bj_forLoopAIndex=1
set bj_forLoopAIndexEnd=2
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	if ( IsPlayerInForce(udg_Player, s__udg_Teams[GetForLoopIndexA()]) == true ) then
	call ForceRemovePlayerSimple(udg_Player, s__udg_Teams[GetForLoopIndexA()])
	if ( s__udg_PlayerQueue[GetConvertedPlayerId(udg_Player)] == 0 ) then
	call ForForce(s__udg_Teams[GetForLoopIndexA()], function Trig_Player_Leaves_383)

	else
	if ( s__udg_PlayerQueue[GetConvertedPlayerId(udg_Player)] == 1 ) then
	call ForForce(s__udg_Teams[GetForLoopIndexA()], function Trig_Player_Leaves_384)

	else
	endif

	endif

	call ForForce(s__udg_Teams[GetForLoopIndexA()], function Trig_Player_Leaves_385)

	else
	endif

	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
	set udg_UnitGroup=GetUnitsInRectAll(s__udg_BuildRegion[GetConvertedPlayerId(udg_Player)])
	call ForGroup(udg_UnitGroup, function Trig_Player_Leaves_386)

	call DestroyGroup(udg_UnitGroup)
	call PlayerLeaves()
	
//*  UPDATE MMD VALUES
	if ( udg_isMMDEnabled == true and udg_GameOver == false ) then
	if ( s__udg_MMD_Wins[GetConvertedPlayerId(udg_Player)] > s__udg_MMD_Losses[GetConvertedPlayerId(udg_Player)] ) then
	set s__udg_MMD_Score[GetConvertedPlayerId(udg_Player)]= R2I(( 15.00 * ( I2R(( s__udg_MMD_Wins[GetConvertedPlayerId(udg_Player)] - s__udg_MMD_Losses[GetConvertedPlayerId(udg_Player)] )) * ( I2R(s__udg_MMD_MiddleTime[GetConvertedPlayerId(udg_Player)]) / I2R(s__udg_MMD_MiddleTimeTotal[GetConvertedPlayerId(udg_Player)]) ) ) ))
	call CustomVictoryBJ(udg_Player, false, true)
	else
	if ( s__udg_MMD_Wins[GetConvertedPlayerId(udg_Player)] < s__udg_MMD_Losses[GetConvertedPlayerId(udg_Player)] ) then
	set s__udg_MMD_Score[GetConvertedPlayerId(udg_Player)]= R2I(( - 15.00 * ( I2R(( s__udg_MMD_Losses[GetConvertedPlayerId(udg_Player)] - s__udg_MMD_Wins[GetConvertedPlayerId(udg_Player)] )) * ( 1.00 - ( I2R(s__udg_MMD_MiddleTime[GetConvertedPlayerId(udg_Player)]) / I2R(s__udg_MMD_MiddleTimeTotal[GetConvertedPlayerId(udg_Player)]) ) ) ) ))
	else
	if ( s__udg_MMD_Wins[GetConvertedPlayerId(udg_Player)] == s__udg_MMD_Losses[GetConvertedPlayerId(udg_Player)] ) then
	set s__udg_MMD_Score[GetConvertedPlayerId(udg_Player)]= 0
	else
	endif

	endif

	endif

	call MMD__update_value(("score" ) , ( udg_Player ) , MMD__ops[( MMD_OP_SET )] , I2S(( s__udg_MMD_Score[GetConvertedPlayerId(udg_Player)])) , MMD_TYPE_INT) // INLINED!!
	else
	endif

endfunction


//****************************************************************************
function InitTrig_Player_Leaves takes nothing returns nothing
	set gg_trg_Player_Leaves=CreateTrigger()
call TriggerRegisterVariableEvent(gg_trg_Player_Leaves, "udg_PlayerLeavesEventReal", EQUAL, 1.00)
call TriggerRegisterPlayerEventLeave(gg_trg_Player_Leaves, Player(0))
call TriggerRegisterPlayerEventLeave(gg_trg_Player_Leaves, Player(1))
call TriggerRegisterPlayerEventLeave(gg_trg_Player_Leaves, Player(2))
call TriggerRegisterPlayerEventLeave(gg_trg_Player_Leaves, Player(3))
call TriggerRegisterPlayerEventLeave(gg_trg_Player_Leaves, Player(4))
call TriggerRegisterPlayerEventLeave(gg_trg_Player_Leaves, Player(5))
	call TriggerAddAction(gg_trg_Player_Leaves, function Trig_Player_Leaves_Actions)
endfunction

//*  Trigger Tower_Team_1_Dies
//****************************************************************************
function Trig_Tower_Team_1_Dies_387 takes nothing returns nothing
	call AdjustPlayerStateBJ(125, GetEnumPlayer(), PLAYER_STATE_RESOURCE_GOLD)

endfunction

function Trig_Tower_Team_1_Dies_388 takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	if ( GetLocalPlayer() == GetEnumPlayer() ) then
	call CreateTextTagLocBJ("+125", udg_Point, 0, 16.00, 100, 100, 0.00, 0)
	call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
	call SetTextTagLifespanBJ(GetLastCreatedTextTag(), 4.00)
	call SetTextTagVelocityBJ(GetLastCreatedTextTag(), 32.00, 90)
	call PlaySoundBJ(gg_snd_UI_Stinger_VictoryPanel02)
	endif
	call RemoveLocation(udg_Point)

endfunction

function Trig_Tower_Team_1_Dies_389 takes nothing returns nothing
	if ( GetLocalPlayer() == GetEnumPlayer() ) then
	call PlaySoundBJ(gg_snd_Warning)
	endif

endfunction

function Trig_Tower_Team_1_Dies_Conditions takes nothing returns boolean
	if ( not ( GetTriggerUnit() == s__udg_WatchTower[1] ) ) then
		return false
	endif
	return true
endfunction

function Trig_Tower_Team_1_Dies_Actions takes nothing returns nothing
	call ForForce(s__udg_Teams[2], function Trig_Tower_Team_1_Dies_387)

	call ForForce(s__udg_Teams[2], function Trig_Tower_Team_1_Dies_388)

	call ForForce(s__udg_Teams[1], function Trig_Tower_Team_1_Dies_389)

	call TowerDiesTeam1()
endfunction


//****************************************************************************
function InitTrig_Tower_Team_1_Dies takes nothing returns nothing
	set gg_trg_Tower_Team_1_Dies=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Tower_Team_1_Dies, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddCondition(gg_trg_Tower_Team_1_Dies, Condition(function Trig_Tower_Team_1_Dies_Conditions))
	call TriggerAddAction(gg_trg_Tower_Team_1_Dies, function Trig_Tower_Team_1_Dies_Actions)
endfunction

//*  Trigger Tower_Team_2_Dies
//****************************************************************************
function Trig_Tower_Team_2_Dies_390 takes nothing returns nothing
	call AdjustPlayerStateBJ(125, GetEnumPlayer(), PLAYER_STATE_RESOURCE_GOLD)

endfunction

function Trig_Tower_Team_2_Dies_391 takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	if ( GetLocalPlayer() == GetEnumPlayer() ) then
	call CreateTextTagLocBJ("+125", udg_Point, 0, 16.00, 100, 100, 0.00, 0)
	call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
	call SetTextTagLifespanBJ(GetLastCreatedTextTag(), 2.00)
	call SetTextTagVelocityBJ(GetLastCreatedTextTag(), 64, 90)
	call PlaySoundBJ(gg_snd_UI_Stinger_VictoryPanel02)
	endif
	call RemoveLocation(udg_Point)

endfunction

function Trig_Tower_Team_2_Dies_392 takes nothing returns nothing
	if ( GetLocalPlayer() == GetEnumPlayer() ) then
	call PlaySoundBJ(gg_snd_Warning)
	endif

endfunction

function Trig_Tower_Team_2_Dies_Conditions takes nothing returns boolean
	if ( not ( GetTriggerUnit() == s__udg_WatchTower[2] ) ) then
		return false
	endif
	return true
endfunction

function Trig_Tower_Team_2_Dies_Actions takes nothing returns nothing
	call ForForce(s__udg_Teams[1], function Trig_Tower_Team_2_Dies_390)

	call ForForce(s__udg_Teams[1], function Trig_Tower_Team_2_Dies_391)

	call ForForce(s__udg_Teams[2], function Trig_Tower_Team_2_Dies_392)

	call TowerDiesTeam2()
endfunction


//****************************************************************************
function InitTrig_Tower_Team_2_Dies takes nothing returns nothing
	set gg_trg_Tower_Team_2_Dies=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Tower_Team_2_Dies, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddCondition(gg_trg_Tower_Team_2_Dies, Condition(function Trig_Tower_Team_2_Dies_Conditions))
	call TriggerAddAction(gg_trg_Tower_Team_2_Dies, function Trig_Tower_Team_2_Dies_Actions)
endfunction

//*  Trigger Game_Over
//****************************************************************************
function Trig_Game_Over_393 takes nothing returns nothing
	if ( GetLocalPlayer() == GetEnumPlayer() ) then
	call PlaySoundBJ(gg_snd_AchievementEarned)
	endif

endfunction

function Trig_Game_Over_394 takes nothing returns nothing
	if ( GetLocalPlayer() == GetEnumPlayer() ) then
	call PlaySoundBJ(gg_snd_Warning)
	endif

endfunction

function Trig_Game_Over_395 takes nothing returns nothing
	if ( GetLocalPlayer() == GetEnumPlayer() ) then
	call PlaySoundBJ(gg_snd_AchievementEarned)
	endif

endfunction

function Trig_Game_Over_396 takes nothing returns nothing
	if ( GetLocalPlayer() == GetEnumPlayer() ) then
	call PlaySoundBJ(gg_snd_Warning)
	endif

endfunction

function Trig_Game_Over_397 takes nothing returns nothing
	set udg_Integer=( R2I(s__udg_TotalDamage[GetConvertedPlayerId(GetEnumPlayer())]) / 250 )
	set udg_Integer2=s__udg_TotalKills[GetConvertedPlayerId(GetEnumPlayer())]
	set s__udg_TotalScore[GetConvertedPlayerId(GetEnumPlayer())]= ( udg_Integer + udg_Integer2 )
	set s__udg_isCultOfForgottenResearched[GetConvertedPlayerId(GetEnumPlayer())]= false
	call PanCameraToTimedLocForPlayer(GetEnumPlayer(), GetUnitLoc(GetLastCreatedUnit()), 0)
	call SetCameraTargetControllerNoZForPlayer(GetEnumPlayer(), GetLastCreatedUnit(), 0, 0, false)
	call HideMainUI()
	call GameOverMusic()

endfunction

function Trig_Game_Over_Conditions takes nothing returns boolean
	if ( not ( ( GetTriggerUnit() == s__udg_Fortress[1] or GetTriggerUnit() == s__udg_Fortress[2] ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Game_Over_Actions takes nothing returns nothing
	call DisableTrigger(GetTriggeringTrigger())
	call DisableTrigger(gg_trg_Timer_Update)
	call DisableTrigger(gg_trg_Spawn)
	call DisableTrigger(gg_trg_Middle_Check)
	call DisableTrigger(gg_trg_Idle_Check)
	call DisableTrigger(gg_trg_Basic_Income)
	call DisableTrigger(gg_trg_Extra_Income)
	call PauseTimerBJ(true, udg_TwentyMinuteTimer)
	set udg_GameOver=true
	if ( GetTriggerUnit() == s__udg_Fortress[2] ) then
	set s__udg_Victory[1]= true
	set s__udg_Victory[3]= true
	set s__udg_Victory[5]= true
	call ForForce(s__udg_Teams[1], function Trig_Game_Over_393)

	call ForForce(s__udg_Teams[2], function Trig_Game_Over_394)

	else
	set s__udg_Victory[2]= true
	set s__udg_Victory[4]= true
	set s__udg_Victory[6]= true
	call ForForce(s__udg_Teams[2], function Trig_Game_Over_395)

	call ForForce(s__udg_Teams[1], function Trig_Game_Over_396)

	endif

	call CreateNUnitsAtLoc(1, 'n000', Player(PLAYER_NEUTRAL_PASSIVE), GetUnitLoc(GetTriggerUnit()), bj_UNIT_FACING)
	call ForForce(GetPlayersAll(), function Trig_Game_Over_397)

	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call PingMinimapLocForForce(GetPlayersAll(), udg_Point, 5.00)
	call AddSpecialEffectLocBJ(udg_Point, "Effects\\ExplosionBIG.mdx")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 2.00)
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call AddSpecialEffectLocBJ(udg_Point, "Effects\\NewGroundEX.mdx")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 2.00)
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveLocation(udg_Point)
	call PauseAllUnitsBJ(true)
	call ConditionalTriggerExecute(gg_trg_Update_MMD_Values)
	call StartTimerBJ(udg_TimerScoreboard, false, 3.00)
endfunction


//****************************************************************************
function InitTrig_Game_Over takes nothing returns nothing
	set gg_trg_Game_Over=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Game_Over, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddCondition(gg_trg_Game_Over, Condition(function Trig_Game_Over_Conditions))
	call TriggerAddAction(gg_trg_Game_Over, function Trig_Game_Over_Actions)
endfunction

//*  Trigger Show_Scoreboard
//****************************************************************************
function Trig_Show_Scoreboard_Actions takes nothing returns nothing
	call ShowScoreboard()
endfunction


//****************************************************************************
function InitTrig_Show_Scoreboard takes nothing returns nothing
	set gg_trg_Show_Scoreboard=CreateTrigger()
call TriggerRegisterTimerExpireEventBJ(gg_trg_Show_Scoreboard, udg_TimerScoreboard)
	call TriggerAddAction(gg_trg_Show_Scoreboard, function Trig_Show_Scoreboard_Actions)
endfunction

//*  Trigger Research
//****************************************************************************
function Trig_Research_Actions takes nothing returns nothing
	call SetPlayerTechResearchedSwap(GetResearched(), GetPlayerTechCountSimple(GetResearched(), GetOwningPlayer(GetTriggerUnit())), ConvertedPlayer(( GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit())) + 6 )))
endfunction


//****************************************************************************
function InitTrig_Research takes nothing returns nothing
	set gg_trg_Research=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Research, EVENT_PLAYER_UNIT_RESEARCH_FINISH)
	call TriggerAddAction(gg_trg_Research, function Trig_Research_Actions)
endfunction

//*  Trigger Unit_Constructs_Building
//****************************************************************************
function Trig_Unit_Constructs_Building_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetTriggerUnit()) != 'u000' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Unit_Constructs_Building_Actions takes nothing returns nothing
	call UnitBuilds()
endfunction


//****************************************************************************
function InitTrig_Unit_Constructs_Building takes nothing returns nothing
	set gg_trg_Unit_Constructs_Building=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Unit_Constructs_Building, EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
	call TriggerAddCondition(gg_trg_Unit_Constructs_Building, Condition(function Trig_Unit_Constructs_Building_Conditions))
	call TriggerAddAction(gg_trg_Unit_Constructs_Building, function Trig_Unit_Constructs_Building_Actions)
endfunction

//*  Trigger Summon_Hero_Builder
//****************************************************************************
function Trig_Summon_Hero_Builder_Conditions takes nothing returns boolean
	if ( not ( ( GetResearched() == 'R00J' or GetResearched() == 'R00K' or GetResearched() == 'R00L' or GetResearched() == 'R00M' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Summon_Hero_Builder_Actions takes nothing returns nothing
	set udg_Point=GetRectCenter(s__udg_BuildRegion[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))])
	if ( GetResearched() == 'R00J' ) then
	call CreateNUnitsAtLoc(1, 'e00E', GetOwningPlayer(GetTriggerUnit()), udg_Point, bj_UNIT_FACING)
	else
	endif

	if ( GetResearched() == 'R00K' ) then
	call CreateNUnitsAtLoc(1, 'e00F', GetOwningPlayer(GetTriggerUnit()), udg_Point, bj_UNIT_FACING)
	else
	endif

	if ( GetResearched() == 'R00L' ) then
	call CreateNUnitsAtLoc(1, 'e00G', GetOwningPlayer(GetTriggerUnit()), udg_Point, bj_UNIT_FACING)
	else
	endif

	if ( GetResearched() == 'R00M' ) then
	call CreateNUnitsAtLoc(1, 'e00L', GetOwningPlayer(GetTriggerUnit()), udg_Point, bj_UNIT_FACING)
	else
	endif

	if ( ( true ) ) then
	else
	endif

	if ( ( true ) ) then
	else
	endif

	if ( ( true ) ) then
	else
	endif

	if ( ( true ) ) then
	else
	endif

	call AddSpecialEffectTargetUnitBJ("overhead", GetTriggerUnit(), "Abilities\\Spells\\Human\\Resurrect\\ResurrectCaster.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Spells\\Human\\Resurrect\\ResurrectTarget.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Summon_Hero_Builder takes nothing returns nothing
	set gg_trg_Summon_Hero_Builder=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Summon_Hero_Builder, EVENT_PLAYER_UNIT_RESEARCH_FINISH)
	call TriggerAddCondition(gg_trg_Summon_Hero_Builder, Condition(function Trig_Summon_Hero_Builder_Conditions))
	call TriggerAddAction(gg_trg_Summon_Hero_Builder, function Trig_Summon_Hero_Builder_Actions)
endfunction

//*  Trigger Construct_Hero
//****************************************************************************
function BoolExpr_399 takes nothing returns boolean
	if ( GetUnitTypeId(GetFilterUnit()) == 'e00E' ) then
		return true
	endif
	return false
endfunction

function BoolExpr_400 takes nothing returns boolean
	if ( GetUnitTypeId(GetFilterUnit()) == 'e00F' ) then
		return true
	endif
	return false
endfunction

function BoolExpr_401 takes nothing returns boolean
	if ( GetUnitTypeId(GetFilterUnit()) == 'e00G' ) then
		return true
	endif
	return false
endfunction

function BoolExpr_402 takes nothing returns boolean
	if ( GetUnitTypeId(GetFilterUnit()) == 'e00L' ) then
		return true
	endif
	return false
endfunction

function BoolExpr_403 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'e00E' or ( GetUnitTypeId(GetFilterUnit()) == 'e00L' or ( GetUnitTypeId(GetFilterUnit()) == 'e00F' or GetUnitTypeId(GetFilterUnit()) == 'e00G' ) ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_404 takes nothing returns boolean
	if ( GetUnitTypeId(GetFilterUnit()) == 'e012' ) then
		return true
	endif
	return false
endfunction

function BoolExpr_405 takes nothing returns boolean
	if ( GetUnitTypeId(GetFilterUnit()) == 'e013' ) then
		return true
	endif
	return false
endfunction

function Trig_Construct_Hero_Conditions takes nothing returns boolean
	if ( not ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Construct_Hero_Actions takes nothing returns nothing
	set s__udg_TotalHeroes[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= ( s__udg_TotalHeroes[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] + 1 )
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	if ( ( GetUnitTypeId(GetTriggerUnit()) == 'H01F' or GetUnitTypeId(GetTriggerUnit()) == 'H01I' or GetUnitTypeId(GetTriggerUnit()) == 'H01J' or GetUnitTypeId(GetTriggerUnit()) == 'H01L' ) ) then
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Spells\\Human\\Resurrect\\ResurrectCaster.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Spells\\Human\\Resurrect\\ResurrectTarget.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(200.00, udg_Point, Condition(function BoolExpr_399))
	call RemoveUnit(GroupPickRandomUnit(udg_UnitGroup))
	else
	endif

	if ( ( GetUnitTypeId(GetTriggerUnit()) == 'O002' or GetUnitTypeId(GetTriggerUnit()) == 'O003' or GetUnitTypeId(GetTriggerUnit()) == 'O004' or GetUnitTypeId(GetTriggerUnit()) == 'O005' ) ) then
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Spells\\Orc\\Reincarnation\\ReincarnationTarget.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(200.00, udg_Point, Condition(function BoolExpr_400))
	call RemoveUnit(GroupPickRandomUnit(udg_UnitGroup))
	else
	endif

	if ( ( GetUnitTypeId(GetTriggerUnit()) == 'U005' or GetUnitTypeId(GetTriggerUnit()) == 'U006' or GetUnitTypeId(GetTriggerUnit()) == 'U007' or GetUnitTypeId(GetTriggerUnit()) == 'U008' ) ) then
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Spells\\Undead\\AnimateDead\\AnimateDeadTarget.mdl")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 1.50)
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(200.00, udg_Point, Condition(function BoolExpr_401))
	call RemoveUnit(GroupPickRandomUnit(udg_UnitGroup))
	else
	endif

	if ( ( GetUnitTypeId(GetTriggerUnit()) == 'E00H' or GetUnitTypeId(GetTriggerUnit()) == 'E00I' or GetUnitTypeId(GetTriggerUnit()) == 'E00J' or GetUnitTypeId(GetTriggerUnit()) == 'E00K' ) ) then
	call AddSpecialEffectLocBJ(udg_Point, "Objects\\Spawnmodels\\NightElf\\NEDeathSmall\\NEDeathSmall.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(200.00, udg_Point, Condition(function BoolExpr_402))
	call RemoveUnit(GroupPickRandomUnit(udg_UnitGroup))
	else
	endif

	if ( ( GetUnitTypeId(GetTriggerUnit()) == 'N012' or GetUnitTypeId(GetTriggerUnit()) == 'N013' or GetUnitTypeId(GetTriggerUnit()) == 'N014' or GetUnitTypeId(GetTriggerUnit()) == 'N015' or GetUnitTypeId(GetTriggerUnit()) == 'N016' or GetUnitTypeId(GetTriggerUnit()) == 'N017' or GetUnitTypeId(GetTriggerUnit()) == 'N018' or GetUnitTypeId(GetTriggerUnit()) == 'N019' ) ) then
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Spells\\Demon\\DarkPortal\\DarkPortalTarget.mdl")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 1.50)
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(200.00, udg_Point, Condition(function BoolExpr_403))
	call RemoveUnit(GroupPickRandomUnit(udg_UnitGroup))
	else
	endif

	if ( ( true ) ) then
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(200.00, udg_Point, Condition(function BoolExpr_404))
	call RemoveUnit(GroupPickRandomUnit(udg_UnitGroup))
	else
	endif

	if ( ( true ) ) then
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Spells\\Human\\Resurrect\\ResurrectCaster.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Spells\\Human\\Resurrect\\ResurrectTarget.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(200.00, udg_Point, Condition(function BoolExpr_405))
	call RemoveUnit(GroupPickRandomUnit(udg_UnitGroup))
	else
	endif

	if ( ( true ) ) then
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Spells\\Undead\\AnimateDead\\AnimateDeadTarget.mdl")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 1.50)
	
	call RemoveUnit(GroupPickRandomUnit(udg_UnitGroup))
	else
	endif

	if ( ( true ) ) then
	call AddSpecialEffectLocBJ(udg_Point, "Objects\\Spawnmodels\\Naga\\NagaDeath\\NagaDeath.mdl")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 1.50)
	
	call RemoveUnit(GroupPickRandomUnit(udg_UnitGroup))
	else
	endif

	call SetPlayerUnitAvailableBJ(GetUnitTypeId(GetTriggerUnit()), false, GetOwningPlayer(GetTriggerUnit()))
	call DestroyGroup(udg_UnitGroup)
	call RemoveLocation(udg_Point)
	call BuildHero()
	
//*  MMD values
	if ( udg_isMMDEnabled == true ) then
	if ( udg_isGameModeClassic == true ) then
	if ( s__udg_TotalHeroes[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == 1 ) then
	call MMD_UpdateValueString("Round " + I2S(udg_TotalRounds) + " Hero 1" , GetOwningPlayer(GetTriggerUnit()) , LoadStr(udg_MMD_HeroNamesTable, GetUnitTypeId(GetTriggerUnit()), 0))
	else
	if ( s__udg_TotalHeroes[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == 2 ) then
	call MMD_UpdateValueString("Round " + I2S(udg_TotalRounds) + " Hero 2" , GetOwningPlayer(GetTriggerUnit()) , LoadStr(udg_MMD_HeroNamesTable, GetUnitTypeId(GetTriggerUnit()), 0))
	else
	if ( s__udg_TotalHeroes[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == 3 ) then
	call MMD_UpdateValueString("Round " + I2S(udg_TotalRounds) + " Hero 3" , GetOwningPlayer(GetTriggerUnit()) , LoadStr(udg_MMD_HeroNamesTable, GetUnitTypeId(GetTriggerUnit()), 0))
	else
	endif

	endif

	endif

	else
	if ( s__udg_TotalHeroes[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == 1 ) then
	call MMD_UpdateValueString("Custom Round " + I2S(udg_TotalRounds) + " Hero 1" , GetOwningPlayer(GetTriggerUnit()) , LoadStr(udg_MMD_HeroNamesTable, GetUnitTypeId(GetTriggerUnit()), 0))
	else
	if ( s__udg_TotalHeroes[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == 2 ) then
	call MMD_UpdateValueString("Custom Round " + I2S(udg_TotalRounds) + " Hero 2" , GetOwningPlayer(GetTriggerUnit()) , LoadStr(udg_MMD_HeroNamesTable, GetUnitTypeId(GetTriggerUnit()), 0))
	else
	if ( s__udg_TotalHeroes[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == 3 ) then
	call MMD_UpdateValueString("Custom Round " + I2S(udg_TotalRounds) + " Hero 3" , GetOwningPlayer(GetTriggerUnit()) , LoadStr(udg_MMD_HeroNamesTable, GetUnitTypeId(GetTriggerUnit()), 0))
	else
	endif

	endif

	endif

	endif

	else
	endif

endfunction


//****************************************************************************
function InitTrig_Construct_Hero takes nothing returns nothing
	set gg_trg_Construct_Hero=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Construct_Hero, EVENT_PLAYER_UNIT_CONSTRUCT_START)
	call TriggerAddCondition(gg_trg_Construct_Hero, Condition(function Trig_Construct_Hero_Conditions))
	call TriggerAddAction(gg_trg_Construct_Hero, function Trig_Construct_Hero_Actions)
endfunction

//*  Trigger Hero_Building_Dies
//****************************************************************************
function Trig_Hero_Building_Dies_Conditions takes nothing returns boolean
	if ( not ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) == true ) ) then
		return false
	endif
	if ( not ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_STRUCTURE) == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Hero_Building_Dies_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call ReviveHeroLoc(GetTriggerUnit(), udg_Point, false)
	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Hero_Building_Dies takes nothing returns nothing
	set gg_trg_Hero_Building_Dies=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Hero_Building_Dies, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddCondition(gg_trg_Hero_Building_Dies, Condition(function Trig_Hero_Building_Dies_Conditions))
	call TriggerAddAction(gg_trg_Hero_Building_Dies, function Trig_Hero_Building_Dies_Actions)
endfunction

//*  Trigger Hero_Building_Set_Mana_Zero
//****************************************************************************
function Trig_Hero_Building_Set_Mana_Zero_405 takes nothing returns nothing
	if ( IsUnitType(GetEnumUnit(), UNIT_TYPE_STRUCTURE) == true ) then
	call BlzSetUnitMaxMana(GetEnumUnit(), 0)
	else
	endif


endfunction

function Trig_Hero_Building_Set_Mana_Zero_Actions takes nothing returns nothing
	call ForGroup(udg_HeroBuildings, function Trig_Hero_Building_Set_Mana_Zero_405)

endfunction


//****************************************************************************
function InitTrig_Hero_Building_Set_Mana_Zero takes nothing returns nothing
	set gg_trg_Hero_Building_Set_Mana_Zero=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Hero_Building_Set_Mana_Zero, 10.00)
	call TriggerAddAction(gg_trg_Hero_Building_Set_Mana_Zero, function Trig_Hero_Building_Set_Mana_Zero_Actions)
endfunction

//*  Trigger Move_Building
//****************************************************************************
function Trig_Move_Building_Conditions takes nothing returns boolean
	if ( not ( ( GetSpellAbilityId() == 'A00Z' or GetSpellAbilityId() == 'A011' or GetSpellAbilityId() == 'A01A' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Move_Building_Actions takes nothing returns nothing
	set udg_Point=GetSpellTargetLoc()
	set udg_Point2=GetUnitLoc(GetTriggerUnit())
	if ( RectContainsLoc(s__udg_BuildRegion[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))], udg_Point) == true ) then
	call ClearSelectionForPlayer(GetOwningPlayer(GetTriggerUnit()))
	call SetUnitPositionLoc(GetTriggerUnit(), udg_Point)
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Spells\\Human\\Polymorph\\PolyMorphDoneGround.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call AddSpecialEffectLocBJ(udg_Point2, "Abilities\\Spells\\Human\\Polymorph\\PolyMorphDoneGround.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	else
	call IssueImmediateOrderBJ(GetTriggerUnit(), "stop")
	call DisplayTextToForce(GetForceOfPlayer(GetOwningPlayer(GetTriggerUnit())), "|cffff0000Must be within bounds|r")
	endif

	call RemoveLocation(udg_Point)
	call RemoveLocation(udg_Point2)
endfunction


//****************************************************************************
function InitTrig_Move_Building takes nothing returns nothing
	set gg_trg_Move_Building=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Move_Building, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Move_Building, Condition(function Trig_Move_Building_Conditions))
	call TriggerAddAction(gg_trg_Move_Building, function Trig_Move_Building_Actions)
endfunction

//*  Trigger Sell_Building_100
//****************************************************************************
function Trig_Sell_Building_100_Conditions takes nothing returns boolean
	if ( not ( GetSpellAbilityId() == 'A000' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Sell_Building_100_Actions takes nothing returns nothing
	if ( GetLocalPlayer() == GetOwningPlayer(GetTriggerUnit()) ) then
	call PlaySoundOnUnitBJ(gg_snd_ReceiveGold, 100, GetTriggerUnit())
	endif
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call AddSpecialEffectLocBJ(udg_Point, "UI\\Feedback\\GoldCredit\\GoldCredit.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveLocation(udg_Point)
	call UnitSell(1.00)
	call RemoveUnit(GetTriggerUnit())
endfunction


//****************************************************************************
function InitTrig_Sell_Building_100 takes nothing returns nothing
	set gg_trg_Sell_Building_100=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Sell_Building_100, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Sell_Building_100, Condition(function Trig_Sell_Building_100_Conditions))
	call TriggerAddAction(gg_trg_Sell_Building_100, function Trig_Sell_Building_100_Actions)
endfunction

//*  Trigger Sell_Building_75
//****************************************************************************
function Trig_Sell_Building_75_Conditions takes nothing returns boolean
	if ( not ( GetSpellAbilityId() == 'A0BK' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Sell_Building_75_Actions takes nothing returns nothing
	if ( GetLocalPlayer() == GetOwningPlayer(GetTriggerUnit()) ) then
	call PlaySoundOnUnitBJ(gg_snd_ReceiveGold, 100, GetTriggerUnit())
	endif
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call AddSpecialEffectLocBJ(udg_Point, "UI\\Feedback\\GoldCredit\\GoldCredit.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveLocation(udg_Point)
	call UnitSell(0.75)
	call RemoveUnit(GetTriggerUnit())
endfunction


//****************************************************************************
function InitTrig_Sell_Building_75 takes nothing returns nothing
	set gg_trg_Sell_Building_75=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Sell_Building_75, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Sell_Building_75, Condition(function Trig_Sell_Building_75_Conditions))
	call TriggerAddAction(gg_trg_Sell_Building_75, function Trig_Sell_Building_75_Actions)
endfunction

//*  Trigger Build_Footman
//****************************************************************************
function Trig_Build_Footman_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'h000' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Build_Footman_Actions takes nothing returns nothing
	
endfunction


//****************************************************************************
function InitTrig_Build_Footman takes nothing returns nothing
	set gg_trg_Build_Footman=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Build_Footman, EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
	call TriggerAddCondition(gg_trg_Build_Footman, Condition(function Trig_Build_Footman_Conditions))
	call TriggerAddAction(gg_trg_Build_Footman, function Trig_Build_Footman_Actions)
endfunction

//*  Trigger Build_Priest
//****************************************************************************
function Trig_Build_Priest_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'h01P' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Build_Priest_Actions takes nothing returns nothing
	
endfunction


//****************************************************************************
function InitTrig_Build_Priest takes nothing returns nothing
	set gg_trg_Build_Priest=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Build_Priest, EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
	call TriggerAddCondition(gg_trg_Build_Priest, Condition(function Trig_Build_Priest_Conditions))
	call TriggerAddAction(gg_trg_Build_Priest, function Trig_Build_Priest_Actions)
endfunction

//*  Trigger Build_Grunt
//****************************************************************************
function Trig_Build_Grunt_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'h00B' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Build_Grunt_Actions takes nothing returns nothing
	
endfunction


//****************************************************************************
function InitTrig_Build_Grunt takes nothing returns nothing
	set gg_trg_Build_Grunt=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Build_Grunt, EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
	call TriggerAddCondition(gg_trg_Build_Grunt, Condition(function Trig_Build_Grunt_Conditions))
	call TriggerAddAction(gg_trg_Build_Grunt, function Trig_Build_Grunt_Actions)
endfunction

//*  Trigger Build_Headhunter
//****************************************************************************
function Trig_Build_Headhunter_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'h00D' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Build_Headhunter_Actions takes nothing returns nothing
	
endfunction


//****************************************************************************
function InitTrig_Build_Headhunter takes nothing returns nothing
	set gg_trg_Build_Headhunter=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Build_Headhunter, EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
	call TriggerAddCondition(gg_trg_Build_Headhunter, Condition(function Trig_Build_Headhunter_Conditions))
	call TriggerAddAction(gg_trg_Build_Headhunter, function Trig_Build_Headhunter_Actions)
endfunction

//*  Trigger Build_Witch_Doctor
//****************************************************************************
function Trig_Build_Witch_Doctor_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'h00K' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Build_Witch_Doctor_Actions takes nothing returns nothing
	
endfunction


//****************************************************************************
function InitTrig_Build_Witch_Doctor takes nothing returns nothing
	set gg_trg_Build_Witch_Doctor=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Build_Witch_Doctor, EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
	call TriggerAddCondition(gg_trg_Build_Witch_Doctor, Condition(function Trig_Build_Witch_Doctor_Conditions))
	call TriggerAddAction(gg_trg_Build_Witch_Doctor, function Trig_Build_Witch_Doctor_Actions)
endfunction

//*  Trigger Build_Raider
//****************************************************************************
function Trig_Build_Raider_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'h00E' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Build_Raider_Actions takes nothing returns nothing
	
endfunction


//****************************************************************************
function InitTrig_Build_Raider takes nothing returns nothing
	set gg_trg_Build_Raider=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Build_Raider, EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
	call TriggerAddCondition(gg_trg_Build_Raider, Condition(function Trig_Build_Raider_Conditions))
	call TriggerAddAction(gg_trg_Build_Raider, function Trig_Build_Raider_Actions)
endfunction

//*  Trigger Build_Kodo_Beast
//****************************************************************************
function Trig_Build_Kodo_Beast_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'h00H' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Build_Kodo_Beast_Actions takes nothing returns nothing
	
endfunction


//****************************************************************************
function InitTrig_Build_Kodo_Beast takes nothing returns nothing
	set gg_trg_Build_Kodo_Beast=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Build_Kodo_Beast, EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
	call TriggerAddCondition(gg_trg_Build_Kodo_Beast, Condition(function Trig_Build_Kodo_Beast_Conditions))
	call TriggerAddAction(gg_trg_Build_Kodo_Beast, function Trig_Build_Kodo_Beast_Actions)
endfunction

//*  Trigger Build_Crypt_Fiend
//****************************************************************************
function Trig_Build_Crypt_Fiend_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'h00O' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Build_Crypt_Fiend_Actions takes nothing returns nothing
	
endfunction


//****************************************************************************
function InitTrig_Build_Crypt_Fiend takes nothing returns nothing
	set gg_trg_Build_Crypt_Fiend=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Build_Crypt_Fiend, EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
	call TriggerAddCondition(gg_trg_Build_Crypt_Fiend, Condition(function Trig_Build_Crypt_Fiend_Conditions))
	call TriggerAddAction(gg_trg_Build_Crypt_Fiend, function Trig_Build_Crypt_Fiend_Actions)
endfunction

//*  Trigger Build_Ghoul
//****************************************************************************
function Trig_Build_Ghoul_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'h00N' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Build_Ghoul_Actions takes nothing returns nothing
	
endfunction


//****************************************************************************
function InitTrig_Build_Ghoul takes nothing returns nothing
	set gg_trg_Build_Ghoul=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Build_Ghoul, EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
	call TriggerAddCondition(gg_trg_Build_Ghoul, Condition(function Trig_Build_Ghoul_Conditions))
	call TriggerAddAction(gg_trg_Build_Ghoul, function Trig_Build_Ghoul_Actions)
endfunction

//*  Trigger Build_Necromancer
//****************************************************************************
function Trig_Build_Necromancer_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'h00T' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Build_Necromancer_Actions takes nothing returns nothing
	
endfunction


//****************************************************************************
function InitTrig_Build_Necromancer takes nothing returns nothing
	set gg_trg_Build_Necromancer=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Build_Necromancer, EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
	call TriggerAddCondition(gg_trg_Build_Necromancer, Condition(function Trig_Build_Necromancer_Conditions))
	call TriggerAddAction(gg_trg_Build_Necromancer, function Trig_Build_Necromancer_Actions)
endfunction

//*  Trigger Build_Banshee
//****************************************************************************
function Trig_Build_Banshee_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'h00S' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Build_Banshee_Actions takes nothing returns nothing
	
endfunction


//****************************************************************************
function InitTrig_Build_Banshee takes nothing returns nothing
	set gg_trg_Build_Banshee=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Build_Banshee, EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
	call TriggerAddCondition(gg_trg_Build_Banshee, Condition(function Trig_Build_Banshee_Conditions))
	call TriggerAddAction(gg_trg_Build_Banshee, function Trig_Build_Banshee_Actions)
endfunction

//*  Trigger Build_Frost_Wyrm
//****************************************************************************
function Trig_Build_Frost_Wyrm_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'h00V' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Build_Frost_Wyrm_Actions takes nothing returns nothing
	
endfunction


//****************************************************************************
function InitTrig_Build_Frost_Wyrm takes nothing returns nothing
	set gg_trg_Build_Frost_Wyrm=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Build_Frost_Wyrm, EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
	call TriggerAddCondition(gg_trg_Build_Frost_Wyrm, Condition(function Trig_Build_Frost_Wyrm_Conditions))
	call TriggerAddAction(gg_trg_Build_Frost_Wyrm, function Trig_Build_Frost_Wyrm_Actions)
endfunction

//*  Trigger Build_Huntress
//****************************************************************************
function Trig_Build_Huntress_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'e001' or GetUnitTypeId(GetTriggerUnit()) == 'e00C' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Build_Huntress_Actions takes nothing returns nothing
	
endfunction


//****************************************************************************
function InitTrig_Build_Huntress takes nothing returns nothing
	set gg_trg_Build_Huntress=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Build_Huntress, EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
	call TriggerAddCondition(gg_trg_Build_Huntress, Condition(function Trig_Build_Huntress_Conditions))
	call TriggerAddAction(gg_trg_Build_Huntress, function Trig_Build_Huntress_Actions)
endfunction

//*  Trigger Build_Glaive_Thrower
//****************************************************************************
function Trig_Build_Glaive_Thrower_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'e003' or GetUnitTypeId(GetTriggerUnit()) == 'e00D' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Build_Glaive_Thrower_Actions takes nothing returns nothing
	
endfunction


//****************************************************************************
function InitTrig_Build_Glaive_Thrower takes nothing returns nothing
	set gg_trg_Build_Glaive_Thrower=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Build_Glaive_Thrower, EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
	call TriggerAddCondition(gg_trg_Build_Glaive_Thrower, Condition(function Trig_Build_Glaive_Thrower_Conditions))
	call TriggerAddAction(gg_trg_Build_Glaive_Thrower, function Trig_Build_Glaive_Thrower_Actions)
endfunction

//*  Trigger Build_Mountain_Giant
//****************************************************************************
function Trig_Build_Mountain_Giant_Conditions takes nothing returns boolean
	if ( not ( ( GetUnitTypeId(GetTriggerUnit()) == 'e009' or GetUnitTypeId(GetTriggerUnit()) == 'n010' or GetUnitTypeId(GetTriggerUnit()) == 'n00Z' or GetUnitTypeId(GetTriggerUnit()) == 'n011' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Build_Mountain_Giant_Actions takes nothing returns nothing
	
endfunction


//****************************************************************************
function InitTrig_Build_Mountain_Giant takes nothing returns nothing
	set gg_trg_Build_Mountain_Giant=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Build_Mountain_Giant, EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
	call TriggerAddCondition(gg_trg_Build_Mountain_Giant, Condition(function Trig_Build_Mountain_Giant_Conditions))
	call TriggerAddAction(gg_trg_Build_Mountain_Giant, function Trig_Build_Mountain_Giant_Actions)
endfunction

//*  Trigger Basic_Income
//****************************************************************************
function Trig_Basic_Income_406 takes nothing returns nothing
	call AdjustPlayerStateBJ(2, GetEnumPlayer(), PLAYER_STATE_RESOURCE_GOLD)
	set s__udg_TotalGoldEarned[GetConvertedPlayerId(GetEnumPlayer())]= ( s__udg_TotalGoldEarned[GetConvertedPlayerId(GetEnumPlayer())] + 2 )

endfunction

function Trig_Basic_Income_Actions takes nothing returns nothing
	call ForForce(GetPlayersAll(), function Trig_Basic_Income_406)

endfunction


//****************************************************************************
function InitTrig_Basic_Income takes nothing returns nothing
	set gg_trg_Basic_Income=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Basic_Income, 0.40)
	call DisableTrigger(gg_trg_Basic_Income)
	call TriggerAddAction(gg_trg_Basic_Income, function Trig_Basic_Income_Actions)
endfunction

//*  Trigger Extra_Income
//****************************************************************************
function Trig_Extra_Income_407 takes nothing returns nothing
	call AdjustPlayerStateBJ(( s__udg_GoldExtractorNumber[GetConvertedPlayerId(GetEnumPlayer())] + s__udg_MiddleIncome[1] ), GetEnumPlayer(), PLAYER_STATE_RESOURCE_GOLD)
	set s__udg_TotalGoldEarned[GetConvertedPlayerId(GetEnumPlayer())]= ( s__udg_TotalGoldEarned[GetConvertedPlayerId(GetEnumPlayer())] + ( s__udg_GoldExtractorNumber[GetConvertedPlayerId(GetEnumPlayer())] + s__udg_MiddleIncome[1] ) )

endfunction

function Trig_Extra_Income_408 takes nothing returns nothing
	call AdjustPlayerStateBJ(( s__udg_GoldExtractorNumber[GetConvertedPlayerId(GetEnumPlayer())] + s__udg_MiddleIncome[2] ), GetEnumPlayer(), PLAYER_STATE_RESOURCE_GOLD)
	set s__udg_TotalGoldEarned[GetConvertedPlayerId(GetEnumPlayer())]= ( s__udg_TotalGoldEarned[GetConvertedPlayerId(GetEnumPlayer())] + ( s__udg_GoldExtractorNumber[GetConvertedPlayerId(GetEnumPlayer())] + s__udg_MiddleIncome[2] ) )

endfunction

function Trig_Extra_Income_Actions takes nothing returns nothing
	call ForForce(s__udg_Teams[1], function Trig_Extra_Income_407)

	call ForForce(s__udg_Teams[2], function Trig_Extra_Income_408)

endfunction


//****************************************************************************
function InitTrig_Extra_Income takes nothing returns nothing
	set gg_trg_Extra_Income=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Extra_Income, 2.00)
	call DisableTrigger(gg_trg_Extra_Income)
	call TriggerAddAction(gg_trg_Extra_Income, function Trig_Extra_Income_Actions)
endfunction

//*  Trigger Gold_Extractor_Add
//****************************************************************************
function BoolExpr_410 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'h01B' and GetOwningPlayer(GetFilterUnit()) == GetOwningPlayer(GetTriggerUnit()) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Gold_Extractor_Add_410 takes nothing returns nothing
	call BlzUnitHideAbility(GetEnumUnit(), 'A010', true)
	call BlzUnitHideAbility(GetEnumUnit(), 'A013', false)

endfunction

function BoolExpr_412 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'h01B' and GetOwningPlayer(GetFilterUnit()) == GetOwningPlayer(GetTriggerUnit()) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Gold_Extractor_Add_412 takes nothing returns nothing
	call BlzUnitHideAbility(GetEnumUnit(), 'A013', true)
	call BlzUnitHideAbility(GetEnumUnit(), 'A014', false)

endfunction

function BoolExpr_414 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'h01B' and GetOwningPlayer(GetFilterUnit()) == GetOwningPlayer(GetTriggerUnit()) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Gold_Extractor_Add_414 takes nothing returns nothing
	call BlzUnitHideAbility(GetEnumUnit(), 'A014', true)
	call BlzUnitHideAbility(GetEnumUnit(), 'A015', false)

endfunction

function BoolExpr_416 takes nothing returns boolean
	if ( ( GetUnitTypeId(GetFilterUnit()) == 'h01B' and GetOwningPlayer(GetFilterUnit()) == GetOwningPlayer(GetTriggerUnit()) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Gold_Extractor_Add_416 takes nothing returns nothing
	call BlzUnitHideAbility(GetEnumUnit(), 'A015', true)

endfunction

function Trig_Gold_Extractor_Add_Conditions takes nothing returns boolean
	if ( not ( ( GetSpellAbilityId() == 'A010' or GetSpellAbilityId() == 'A013' or GetSpellAbilityId() == 'A014' or GetSpellAbilityId() == 'A015' ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Gold_Extractor_Add_Actions takes nothing returns nothing
	if ( s__udg_GoldExtractorCooldownBoolean[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == false and GetPlayerState(GetOwningPlayer(GetTriggerUnit()), PLAYER_STATE_RESOURCE_GOLD) >= s__udg_GoldExtractorCost[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] ) then
	if ( GetSpellAbilityId() == 'A010' ) then
	set s__udg_TotalGoldEarned[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= ( s__udg_TotalGoldEarned[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] - 150 )
	set udg_UnitGroup=GetUnitsInRectMatching(GetPlayableMapRect(), Condition(function BoolExpr_410))
	call ForGroup(udg_UnitGroup, function Trig_Gold_Extractor_Add_410)

	call DestroyGroup(udg_UnitGroup)
	else
	endif

	if ( GetSpellAbilityId() == 'A013' ) then
	set s__udg_TotalGoldEarned[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= ( s__udg_TotalGoldEarned[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] - 225 )
	set udg_UnitGroup=GetUnitsInRectMatching(GetPlayableMapRect(), Condition(function BoolExpr_412))
	call ForGroup(udg_UnitGroup, function Trig_Gold_Extractor_Add_412)

	call DestroyGroup(udg_UnitGroup)
	else
	endif

	if ( GetSpellAbilityId() == 'A014' ) then
	set s__udg_TotalGoldEarned[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= ( s__udg_TotalGoldEarned[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] - 300 )
	set udg_UnitGroup=GetUnitsInRectMatching(GetPlayableMapRect(), Condition(function BoolExpr_414))
	call ForGroup(udg_UnitGroup, function Trig_Gold_Extractor_Add_414)

	call DestroyGroup(udg_UnitGroup)
	else
	endif

	if ( GetSpellAbilityId() == 'A015' ) then
	set s__udg_TotalGoldEarned[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= ( s__udg_TotalGoldEarned[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] - 375 )
	set udg_UnitGroup=GetUnitsInRectMatching(GetPlayableMapRect(), Condition(function BoolExpr_416))
	call ForGroup(udg_UnitGroup, function Trig_Gold_Extractor_Add_416)

	call DestroyGroup(udg_UnitGroup)
	else
	endif

	set s__udg_GoldExtractorCost[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= ( s__udg_GoldExtractorCost[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] + 75 )
	set s__udg_GoldExtractorCooldownBoolean[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= true
	set s__udg_GoldExtractorNumber[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= ( s__udg_GoldExtractorNumber[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] + 1 )
	set s__udg_IncomeNoMiddleText[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= I2S(( 100 + ( 10 * s__udg_GoldExtractorNumber[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] ) ))
	set s__udg_IncomeMiddleText[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]= ( "|cff00ff00" + ( I2S(( 110 + ( 10 * s__udg_GoldExtractorNumber[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] ) )) + "|r" ) )
	call StartTimerBJ(s__udg_GoldExtractorCooldown[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))], false, 90.00)
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call RemoveUnit(GetTriggerUnit())
	call CreateNUnitsAtLoc(1, 'u000', GetOwningPlayer(GetTriggerUnit()), udg_Point, bj_UNIT_FACING)
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Spells\\Orc\\FeralSpirit\\feralspirittarget.mdl")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 3.00)
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveLocation(udg_Point)
	else
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call CreateTextTagLocBJ(( "Cooldown: " + I2S(R2I(TimerGetRemaining(s__udg_GoldExtractorCooldown[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]))) ), udg_Point, 20.00, 10.00, 100, 25.00, 0.00, 0)
	call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
	call SetTextTagLifespanBJ(GetLastCreatedTextTag(), 1.50)
	call RemoveLocation(udg_Point)
	if ( GetSpellAbilityId() == 'A010' ) then
	call AdjustPlayerStateBJ(150, GetOwningPlayer(GetTriggerUnit()), PLAYER_STATE_RESOURCE_GOLD)
	else
	endif

	if ( GetSpellAbilityId() == 'A013' ) then
	call AdjustPlayerStateBJ(225, GetOwningPlayer(GetTriggerUnit()), PLAYER_STATE_RESOURCE_GOLD)
	else
	endif

	if ( GetSpellAbilityId() == 'A014' ) then
	call AdjustPlayerStateBJ(300, GetOwningPlayer(GetTriggerUnit()), PLAYER_STATE_RESOURCE_GOLD)
	else
	endif

	if ( GetSpellAbilityId() == 'A015' ) then
	call AdjustPlayerStateBJ(375, GetOwningPlayer(GetTriggerUnit()), PLAYER_STATE_RESOURCE_GOLD)
	else
	endif

	endif

endfunction


//****************************************************************************
function InitTrig_Gold_Extractor_Add takes nothing returns nothing
	set gg_trg_Gold_Extractor_Add=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Gold_Extractor_Add, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Gold_Extractor_Add, Condition(function Trig_Gold_Extractor_Add_Conditions))
	call TriggerAddAction(gg_trg_Gold_Extractor_Add, function Trig_Gold_Extractor_Add_Actions)
endfunction

//*  Trigger Gold_Extractor_Cooldown_Expires
//****************************************************************************
function Trig_Gold_Extractor_Cooldown_Expires_Actions takes nothing returns nothing
	set bj_forLoopAIndex=1
set bj_forLoopAIndexEnd=6
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	if ( TimerGetRemaining(s__udg_GoldExtractorCooldown[GetForLoopIndexA()]) <= 0.00 ) then
	set s__udg_GoldExtractorCooldownBoolean[GetForLoopIndexA()]= false
	else
	endif

	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
endfunction


//****************************************************************************
function InitTrig_Gold_Extractor_Cooldown_Expires takes nothing returns nothing
	set gg_trg_Gold_Extractor_Cooldown_Expires=CreateTrigger()
call TriggerRegisterTimerExpireEventBJ(gg_trg_Gold_Extractor_Cooldown_Expires, s__udg_GoldExtractorCooldown[1])
call TriggerRegisterTimerExpireEventBJ(gg_trg_Gold_Extractor_Cooldown_Expires, s__udg_GoldExtractorCooldown[2])
call TriggerRegisterTimerExpireEventBJ(gg_trg_Gold_Extractor_Cooldown_Expires, s__udg_GoldExtractorCooldown[3])
call TriggerRegisterTimerExpireEventBJ(gg_trg_Gold_Extractor_Cooldown_Expires, s__udg_GoldExtractorCooldown[4])
call TriggerRegisterTimerExpireEventBJ(gg_trg_Gold_Extractor_Cooldown_Expires, s__udg_GoldExtractorCooldown[5])
call TriggerRegisterTimerExpireEventBJ(gg_trg_Gold_Extractor_Cooldown_Expires, s__udg_GoldExtractorCooldown[6])
	call TriggerAddAction(gg_trg_Gold_Extractor_Cooldown_Expires, function Trig_Gold_Extractor_Cooldown_Expires_Actions)
endfunction

//*  Trigger Team_1_Enters_Middle
//****************************************************************************
function Trig_Team_1_Enters_Middle_Conditions takes nothing returns boolean
	if ( not ( ( GetOwningPlayer(GetTriggerUnit()) == Player(6) or GetOwningPlayer(GetTriggerUnit()) == Player(8) or GetOwningPlayer(GetTriggerUnit()) == Player(10) ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Team_1_Enters_Middle_Actions takes nothing returns nothing
	call GroupAddUnitSimple(GetTriggerUnit(), s__udg_UnitsOnEnemyHalf[1])
endfunction


//****************************************************************************
function InitTrig_Team_1_Enters_Middle takes nothing returns nothing
	set gg_trg_Team_1_Enters_Middle=CreateTrigger()
call TriggerRegisterEnterRectSimple(gg_trg_Team_1_Enters_Middle, gg_rct_Middle_Team_2)
	call TriggerAddCondition(gg_trg_Team_1_Enters_Middle, Condition(function Trig_Team_1_Enters_Middle_Conditions))
	call TriggerAddAction(gg_trg_Team_1_Enters_Middle, function Trig_Team_1_Enters_Middle_Actions)
endfunction

//*  Trigger Team_2_Enters_Middle
//****************************************************************************
function Trig_Team_2_Enters_Middle_Conditions takes nothing returns boolean
	if ( not ( ( GetOwningPlayer(GetTriggerUnit()) == Player(7) or GetOwningPlayer(GetTriggerUnit()) == Player(9) or GetOwningPlayer(GetTriggerUnit()) == Player(11) ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Team_2_Enters_Middle_Actions takes nothing returns nothing
	call GroupAddUnitSimple(GetTriggerUnit(), s__udg_UnitsOnEnemyHalf[2])
endfunction


//****************************************************************************
function InitTrig_Team_2_Enters_Middle takes nothing returns nothing
	set gg_trg_Team_2_Enters_Middle=CreateTrigger()
call TriggerRegisterEnterRectSimple(gg_trg_Team_2_Enters_Middle, gg_rct_Middle_Team_1)
	call TriggerAddCondition(gg_trg_Team_2_Enters_Middle, Condition(function Trig_Team_2_Enters_Middle_Conditions))
	call TriggerAddAction(gg_trg_Team_2_Enters_Middle, function Trig_Team_2_Enters_Middle_Actions)
endfunction

//*  Trigger Middle_Check
//****************************************************************************
function Trig_Middle_Check_417 takes nothing returns nothing
	call MultiboardSetItemValueBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 2, 1, "Team 1")

endfunction

function Trig_Middle_Check_418 takes nothing returns nothing
	call MultiboardSetItemValueBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 2, 5, s__udg_IncomeMiddleText[GetConvertedPlayerId(GetEnumPlayer())])

endfunction

function Trig_Middle_Check_419 takes nothing returns nothing
	call MultiboardSetItemValueBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 2, 5, s__udg_IncomeNoMiddleText[GetConvertedPlayerId(GetEnumPlayer())])

endfunction

function Trig_Middle_Check_420 takes nothing returns nothing
	call MultiboardSetItemValueBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 2, 1, "Team 2")

endfunction

function Trig_Middle_Check_421 takes nothing returns nothing
	call MultiboardSetItemValueBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 2, 5, s__udg_IncomeMiddleText[GetConvertedPlayerId(GetEnumPlayer())])

endfunction

function Trig_Middle_Check_422 takes nothing returns nothing
	call MultiboardSetItemValueBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 2, 5, s__udg_IncomeNoMiddleText[GetConvertedPlayerId(GetEnumPlayer())])

endfunction

function Trig_Middle_Check_423 takes nothing returns nothing
	if ( IsPlayerInForce(GetEnumPlayer(), s__udg_Teams[GetForLoopIndexA()]) == true ) then
	if ( s__udg_MiddleIncome[GetForLoopIndexA()] > 0 ) then
	call MultiboardSetItemValueBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 2, 5, s__udg_IncomeMiddleText[GetConvertedPlayerId(GetEnumPlayer())])
	set s__udg_MMD_MiddleTime[GetConvertedPlayerId(GetEnumPlayer())]= ( s__udg_MMD_MiddleTime[GetConvertedPlayerId(GetEnumPlayer())] + 1 )
	set s__udg_MMD_MiddleTimeTotal[GetConvertedPlayerId(GetEnumPlayer())]= ( s__udg_MMD_MiddleTimeTotal[GetConvertedPlayerId(GetEnumPlayer())] + 1 )
	else
	call MultiboardSetItemValueBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 2, 5, s__udg_IncomeNoMiddleText[GetConvertedPlayerId(GetEnumPlayer())])
	set s__udg_MMD_MiddleTimeTotal[GetConvertedPlayerId(GetEnumPlayer())]= ( s__udg_MMD_MiddleTimeTotal[GetConvertedPlayerId(GetEnumPlayer())] + 1 )
	endif

	else
	endif


endfunction

function Trig_Middle_Check_Actions takes nothing returns nothing
	set udg_Integer=CountUnitsInGroup(s__udg_UnitsOnEnemyHalf[1])
	set udg_Integer2=CountUnitsInGroup(s__udg_UnitsOnEnemyHalf[2])
	if ( udg_Integer > 0 and udg_Integer2 == 0 ) then
	set s__udg_MiddleIncome[1]= 1
	set s__udg_MiddleIncome[2]= 0
	call ForForce(GetPlayersAll(), function Trig_Middle_Check_417)

	call ForForce(s__udg_Teams[1], function Trig_Middle_Check_418)

	call ForForce(s__udg_Teams[2], function Trig_Middle_Check_419)

	else
	endif

	if ( ( udg_Integer == 0 and udg_Integer2 > 0 ) ) then
	set s__udg_MiddleIncome[2]= 1
	set s__udg_MiddleIncome[1]= 0
	call ForForce(GetPlayersAll(), function Trig_Middle_Check_420)

	call ForForce(s__udg_Teams[2], function Trig_Middle_Check_421)

	call ForForce(s__udg_Teams[1], function Trig_Middle_Check_422)

	else
	endif

	
//*  Update multiboard text and increment time spent across middle
	set bj_forLoopAIndex=1
set bj_forLoopAIndexEnd=2
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	call ForForce(GetPlayersAll(), function Trig_Middle_Check_423)

	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
endfunction


//****************************************************************************
function InitTrig_Middle_Check takes nothing returns nothing
	set gg_trg_Middle_Check=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Middle_Check, 1.00)
	call TriggerAddAction(gg_trg_Middle_Check, function Trig_Middle_Check_Actions)
endfunction

//*  Trigger Unit_Dies
//****************************************************************************
function Trig_Unit_Dies_Actions takes nothing returns nothing
	if ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) == false ) then
	call GroupAddUnitSimple(GetTriggerUnit(), udg_DeadUnits)
	else
	endif

	set s__udg_TotalKills[( GetConvertedPlayerId(GetOwningPlayer(GetKillingUnitBJ())) - 6 )]= ( s__udg_TotalKills[( GetConvertedPlayerId(GetOwningPlayer(GetKillingUnitBJ())) - 6 )] + 1 )
	call GroupRemoveUnitSimple(GetTriggerUnit(), udg_TimedLifeTTs)
	call DestroyTextTagBJ(LoadTextTagHandleBJ(0, GetHandleIdBJ(GetTriggerUnit()), udg_TableTimedLifeTT))
	if ( IsUnitInGroup(GetTriggerUnit(), s__udg_UnitsOnEnemyHalf[1]) == true ) then
	call GroupRemoveUnitSimple(GetTriggerUnit(), s__udg_UnitsOnEnemyHalf[1])
	else
	endif

	if ( IsUnitInGroup(GetTriggerUnit(), s__udg_UnitsOnEnemyHalf[2]) == true ) then
	call GroupRemoveUnitSimple(GetTriggerUnit(), s__udg_UnitsOnEnemyHalf[2])
	else
	endif

	call ExperienceGain()
endfunction


//****************************************************************************
function InitTrig_Unit_Dies takes nothing returns nothing
	set gg_trg_Unit_Dies=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Unit_Dies, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddAction(gg_trg_Unit_Dies, function Trig_Unit_Dies_Actions)
endfunction

//*  Trigger Idle_Check
//****************************************************************************
function BoolExpr_425 takes nothing returns boolean
	if ( ( GetUnitCurrentOrder(GetFilterUnit()) == String2OrderIdBJ("stand down") and ( IsPlayerInForce(GetOwningPlayer(GetFilterUnit()), s__udg_Teams[1]) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) ) then
		return true
	endif
	return false
endfunction

function BoolExpr_426 takes nothing returns boolean
	if ( ( GetUnitCurrentOrder(GetFilterUnit()) == String2OrderIdBJ("stand down") and ( IsPlayerInForce(GetOwningPlayer(GetFilterUnit()), s__udg_Teams[2]) == true and IsUnitAliveBJ(GetFilterUnit()) == true ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Idle_Check_426 takes nothing returns nothing
	if ( RectContainsUnit(gg_rct_Team_2_Backline, GetEnumUnit()) == false ) then
	call UnitMoveLoc(GetEnumUnit())
	else
	set udg_Point=GetRectCenter(gg_rct_Fortress_Team_2)
	call IssuePointOrderLocBJ(GetEnumUnit(), "attack", udg_Point)
	call RemoveLocation(udg_Point)
	endif


endfunction

function Trig_Idle_Check_427 takes nothing returns nothing
	if ( RectContainsUnit(gg_rct_Team_1_Backline, GetEnumUnit()) == false ) then
	call UnitMoveLoc(GetEnumUnit())
	else
	set udg_Point=GetRectCenter(gg_rct_Fortress_Team_1)
	call IssuePointOrderLocBJ(GetEnumUnit(), "attack", udg_Point)
	call RemoveLocation(udg_Point)
	endif


endfunction

function Trig_Idle_Check_Actions takes nothing returns nothing
	set udg_UnitGroup=GetUnitsInRectMatching(gg_rct_Battlefield, Condition(function BoolExpr_425))
	set udg_UnitGroup2=GetUnitsInRectMatching(gg_rct_Battlefield, Condition(function BoolExpr_426))
	call GroupAddGroup(udg_UnitGroup, s__udg_IdleUnits[1])
	call GroupAddGroup(udg_UnitGroup2, s__udg_IdleUnits[2])
	call DestroyGroup(udg_UnitGroup)
	call DestroyGroup(udg_UnitGroup2)
	call ForGroup(s__udg_IdleUnits[1], function Trig_Idle_Check_426)

	call GroupClear(s__udg_IdleUnits[1])
	call ForGroup(s__udg_IdleUnits[2], function Trig_Idle_Check_427)

	call GroupClear(s__udg_IdleUnits[2])
endfunction


//****************************************************************************
function InitTrig_Idle_Check takes nothing returns nothing
	set gg_trg_Idle_Check=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Idle_Check, 1.00)
	call TriggerAddAction(gg_trg_Idle_Check, function Trig_Idle_Check_Actions)
endfunction

//*  Trigger Unit_Timed_Life
//****************************************************************************
function BoolExpr_429 takes nothing returns boolean
	if ( ( IsUnitAliveBJ(GetFilterUnit()) == true and ( IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == false and IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false ) ) ) then
		return true
	endif
	return false
endfunction

function Trig_Unit_Timed_Life_429 takes nothing returns nothing
	
//*  Loads the current lifespan of the unit.
	set udg_Integer=LoadIntegerBJ(0, GetHandleIdBJ(GetEnumUnit()), udg_TableUnitTimedLife)
	
//*  Starts counting down when 10 seconds left.
	if ( udg_Integer == ( udg_UnitLifespan - 10 ) ) then
	call CreateTextTagUnitBJ("10", GetEnumUnit(), 0, 10, 100, 100, 100, 0)
	call SaveTextTagHandleBJ(GetLastCreatedTextTag(), 0, GetHandleIdBJ(GetEnumUnit()), udg_TableTimedLifeTT)
	call GroupAddUnitSimple(GetEnumUnit(), udg_TimedLifeTTs)
	else
	endif

	if ( udg_Integer >= udg_UnitLifespan ) then
	set udg_Point=GetUnitLoc(GetEnumUnit())
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdl")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), ( 0.30 * I2R(GetUnitLevel(GetEnumUnit())) ))
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveLocation(udg_Point)
	call GroupRemoveUnitSimple(GetEnumUnit(), udg_TimedLifeTTs)
	call RemoveUnit(GetEnumUnit())
	set udg_Integer=0
	call DestroyTextTagBJ(LoadTextTagHandleBJ(0, GetHandleIdBJ(GetEnumUnit()), udg_TableTimedLifeTT))
	else
	set udg_Integer=( udg_Integer + 1 )
	call SetTextTagTextBJ(LoadTextTagHandleBJ(0, GetHandleIdBJ(GetEnumUnit()), udg_TableTimedLifeTT), I2S(( udg_UnitLifespan - udg_Integer )), 10)
	call SetTextTagColorBJ(LoadTextTagHandleBJ(0, GetHandleIdBJ(GetEnumUnit()), udg_TableTimedLifeTT), 100, ( 10.00 * ( I2R(udg_UnitLifespan) - I2R(udg_Integer) ) ), ( 10.00 * ( I2R(udg_UnitLifespan) - I2R(udg_Integer) ) ), 0)
	endif

	call SaveIntegerBJ(udg_Integer, 0, GetHandleIdBJ(GetEnumUnit()), udg_TableUnitTimedLife)

endfunction

function Trig_Unit_Timed_Life_Actions takes nothing returns nothing
	set udg_UnitGroup=GetUnitsInRectMatching(gg_rct_Battlefield, Condition(function BoolExpr_429))
	call ForGroup(udg_UnitGroup, function Trig_Unit_Timed_Life_429)

	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Unit_Timed_Life takes nothing returns nothing
	set gg_trg_Unit_Timed_Life=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Unit_Timed_Life, 1.00)
	call TriggerAddAction(gg_trg_Unit_Timed_Life, function Trig_Unit_Timed_Life_Actions)
endfunction

//*  Trigger Update_Unit_TT
//****************************************************************************
function Trig_Update_Unit_TT_430 takes nothing returns nothing
	if ( IsUnitType(GetEnumUnit(), UNIT_TYPE_GROUND) == true ) then
	call SetTextTagPosUnitBJ(LoadTextTagHandleBJ(0, GetHandleIdBJ(GetEnumUnit()), udg_TableTimedLifeTT), GetEnumUnit(), - 50.00)
	else
	call SetTextTagPosUnitBJ(LoadTextTagHandleBJ(0, GetHandleIdBJ(GetEnumUnit()), udg_TableTimedLifeTT), GetEnumUnit(), - 50.00)
	endif


endfunction

function Trig_Update_Unit_TT_Actions takes nothing returns nothing
	call ForGroup(udg_TimedLifeTTs, function Trig_Update_Unit_TT_430)

endfunction


//****************************************************************************
function InitTrig_Update_Unit_TT takes nothing returns nothing
	set gg_trg_Update_Unit_TT=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Update_Unit_TT, 0.02)
	call TriggerAddAction(gg_trg_Update_Unit_TT, function Trig_Update_Unit_TT_Actions)
endfunction

//*  Trigger Hero_Dies
//****************************************************************************
function Trig_Hero_Dies_Conditions takes nothing returns boolean
	if ( not ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) == true ) ) then
		return false
	endif
	return true
endfunction

function Trig_Hero_Dies_Actions takes nothing returns nothing
	call GroupAddUnitSimple(GetTriggerUnit(), udg_DeadHeroes)
endfunction


//****************************************************************************
function InitTrig_Hero_Dies takes nothing returns nothing
	set gg_trg_Hero_Dies=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Hero_Dies, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddCondition(gg_trg_Hero_Dies, Condition(function Trig_Hero_Dies_Conditions))
	call TriggerAddAction(gg_trg_Hero_Dies, function Trig_Hero_Dies_Actions)
endfunction

//*  Trigger Hero_XP_Gain
//****************************************************************************
function BoolExpr_432 takes nothing returns boolean
	if ( ( IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetTriggerUnit())) == true ) ) then
		return true
	endif
	return false
endfunction

function Trig_Hero_XP_Gain_432 takes nothing returns nothing
	if ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) == true ) then
	set udg_Integer=( s__udg_HeroXP[GetHeroLevel(GetTriggerUnit())] / s__udg_TotalHeroes[( GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit())) - 6 )] )
	else
	set udg_Integer=( s__udg_UnitXP[GetUnitLevel(GetTriggerUnit())] / s__udg_TotalHeroes[( GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit())) - 6 )] )
	endif

	if ( BlzGetUnitWeaponRealField(GetEnumUnit(), UNIT_WEAPON_RF_ATTACK_RANGE, 0) <= 300.00 ) then
	set udg_Integer=R2I(( I2R(udg_Integer) * 1.10 ))
	else
	endif

	if ( IsUnitAliveBJ(GetEnumUnit()) == true ) then
	call AddHeroXPSwapped(udg_Integer, GetEnumUnit(), true)
	call SetHeroXP(LoadUnitHandleBJ(0, GetHandleIdBJ(GetEnumUnit()), udg_HeroTable), GetHeroXP(GetEnumUnit()), true)
	else
	endif


endfunction

function Trig_Hero_XP_Gain_Conditions takes nothing returns boolean
	if ( not ( IsUnitType(GetKillingUnitBJ(), UNIT_TYPE_STRUCTURE) == false ) ) then
		return false
	endif
	if ( not ( IsUnitIllusionBJ(GetTriggerUnit()) == false ) ) then
		return false
	endif
	return true
endfunction

function Trig_Hero_XP_Gain_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	set udg_UnitGroup=GetUnitsInRangeOfLocMatching(1200.00, udg_Point, Condition(function BoolExpr_432))
	call ForGroup(udg_UnitGroup, function Trig_Hero_XP_Gain_432)

	call RemoveLocation(udg_Point)
	call DestroyGroup(udg_UnitGroup)
endfunction


//****************************************************************************
function InitTrig_Hero_XP_Gain takes nothing returns nothing
	set gg_trg_Hero_XP_Gain=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Hero_XP_Gain, EVENT_PLAYER_UNIT_DEATH)
	call TriggerAddCondition(gg_trg_Hero_XP_Gain, Condition(function Trig_Hero_XP_Gain_Conditions))
	call TriggerAddAction(gg_trg_Hero_XP_Gain, function Trig_Hero_XP_Gain_Actions)
endfunction

//*  Trigger Hero_Learn_Spells
//****************************************************************************
function Trig_Hero_Learn_Spells_Conditions takes nothing returns boolean
	if ( not ( ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) == true and IsUnitType(GetTriggerUnit(), UNIT_TYPE_STRUCTURE) == true ) ) ) then
		return false
	endif
	return true
endfunction

function Trig_Hero_Learn_Spells_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Spells\\Items\\AIem\\AIemTarget.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	set udg_Unit=LoadUnitHandleBJ(GetHandleIdBJ(GetTriggerUnit()), 0, udg_HeroTable)
	call SelectHeroSkill(udg_Unit, GetLearnedSkillBJ())
	if ( GetLearnedSkillBJ() == 'AHfa' ) then
	call IssueImmediateOrderBJ(GetTriggerUnit(), "flamingarrows")
	else
	endif

	if ( GetLearnedSkillBJ() == 'AUfu' ) then
	call IssueImmediateOrderBJ(GetTriggerUnit(), "frostarmoron")
	else
	endif

	if ( GetLearnedSkillBJ() == 'AUcb' ) then
	call IssueImmediateOrderBJ(GetTriggerUnit(), "carrionscarabson")
	else
	endif

	if ( GetLearnedSkillBJ() == 'ANfa' ) then
	call IssueImmediateOrderBJ(GetTriggerUnit(), "coldarrows")
	else
	endif

	if ( GetLearnedSkillBJ() == 'ANba' ) then
	call IssueImmediateOrderBJ(GetTriggerUnit(), "blackarrowon")
	else
	endif

	if ( ( true ) ) then
	call IssueImmediateOrderBJ(GetTriggerUnit(), "flamingattack")
	else
	endif

	if ( ( true ) ) then
	call IssueImmediateOrderBJ(GetTriggerUnit(), "parasiteon")
	else
	endif

	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Hero_Learn_Spells takes nothing returns nothing
	set gg_trg_Hero_Learn_Spells=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Hero_Learn_Spells, EVENT_PLAYER_HERO_SKILL)
	call TriggerAddCondition(gg_trg_Hero_Learn_Spells, Condition(function Trig_Hero_Learn_Spells_Conditions))
	call TriggerAddAction(gg_trg_Hero_Learn_Spells, function Trig_Hero_Learn_Spells_Actions)
endfunction

//*  Trigger Hero_Uses_Spell
//****************************************************************************
function Trig_Hero_Uses_Spell_Conditions takes nothing returns boolean
	if ( not ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) == true ) ) then
		return false
	endif
	if ( not ( IsUnitType(GetTriggerUnit(), UNIT_TYPE_STRUCTURE) == false ) ) then
		return false
	endif
	return true
endfunction

function Trig_Hero_Uses_Spell_Actions takes nothing returns nothing
	set udg_Unit=LoadUnitHandleBJ(0, GetHandleIdBJ(GetTriggerUnit()), udg_HeroTable)
	call BlzStartUnitAbilityCooldown(udg_Unit, GetSpellAbilityId(), BlzGetAbilityCooldown(GetSpellAbilityId(), ( GetUnitAbilityLevelSwapped(GetSpellAbilityId(), GetTriggerUnit()) - 1 )))
endfunction


//****************************************************************************
function InitTrig_Hero_Uses_Spell takes nothing returns nothing
	set gg_trg_Hero_Uses_Spell=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Hero_Uses_Spell, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Hero_Uses_Spell, Condition(function Trig_Hero_Uses_Spell_Conditions))
	call TriggerAddAction(gg_trg_Hero_Uses_Spell, function Trig_Hero_Uses_Spell_Actions)
endfunction

//*  Trigger Staging_Area_Anti_Stuck
//****************************************************************************
function Trig_Staging_Area_Anti_Stuck_Conditions takes nothing returns boolean
	if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'Ewar' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Staging_Area_Anti_Stuck_Actions takes nothing returns nothing
	set udg_Point=GetUnitLoc(GetTriggerUnit())
	if ( ( RectContainsLoc(gg_rct_Build_Player_1, udg_Point) == true or RectContainsLoc(gg_rct_Build_Player_3, udg_Point) == true or RectContainsLoc(gg_rct_Build_Player_5, udg_Point) == true ) ) then
	set udg_Point2=PolarProjectionBJ(udg_Point, 1200.00, 180.00)
	call SetUnitPositionLoc(GetTriggerUnit(), udg_Point2)
	call RemoveLocation(udg_Point2)
	else
	set udg_Point2=PolarProjectionBJ(udg_Point, 1200.00, 0.00)
	call SetUnitPositionLoc(GetTriggerUnit(), udg_Point2)
	call RemoveLocation(udg_Point2)
	endif

	call RemoveLocation(udg_Point)
endfunction


//****************************************************************************
function InitTrig_Staging_Area_Anti_Stuck takes nothing returns nothing
	set gg_trg_Staging_Area_Anti_Stuck=CreateTrigger()
call TriggerRegisterEnterRectSimple(gg_trg_Staging_Area_Anti_Stuck, gg_rct_Build_Player_1)
call TriggerRegisterEnterRectSimple(gg_trg_Staging_Area_Anti_Stuck, gg_rct_Build_Player_2)
call TriggerRegisterEnterRectSimple(gg_trg_Staging_Area_Anti_Stuck, gg_rct_Build_Player_3)
call TriggerRegisterEnterRectSimple(gg_trg_Staging_Area_Anti_Stuck, gg_rct_Build_Player_4)
call TriggerRegisterEnterRectSimple(gg_trg_Staging_Area_Anti_Stuck, gg_rct_Build_Player_5)
call TriggerRegisterEnterRectSimple(gg_trg_Staging_Area_Anti_Stuck, gg_rct_Build_Player_6)
	call TriggerAddCondition(gg_trg_Staging_Area_Anti_Stuck, Condition(function Trig_Staging_Area_Anti_Stuck_Conditions))
	call TriggerAddAction(gg_trg_Staging_Area_Anti_Stuck, function Trig_Staging_Area_Anti_Stuck_Actions)
endfunction

//*  Trigger Timer_Update
//****************************************************************************
function Trig_Timer_Update_Actions takes nothing returns nothing
	call UpdateTimerText()
	set udg_intSeconds=( udg_intSeconds + 1 )
	if ( udg_intSeconds >= 60 ) then
	set udg_intSeconds=0
	set udg_intMinutes=( udg_intMinutes + 1 )
	else
	endif

	if ( udg_intMinutes >= 60 ) then
	set udg_intMinutes=0
	set udg_intHours=( udg_intHours + 1 )
	else
	endif

	if ( udg_intSeconds < 10 ) then
	set udg_stringSeconds=( "0" + I2S(udg_intSeconds) )
	else
	set udg_stringSeconds=I2S(udg_intSeconds)
	endif

	if ( udg_intMinutes < 10 ) then
	set udg_stringMinutes=( "0" + I2S(udg_intMinutes) )
	else
	set udg_stringMinutes=I2S(udg_intMinutes)
	endif

	if ( udg_intHours < 10 ) then
	set udg_stringHours=( "0" + I2S(udg_intHours) )
	else
	set udg_stringHours=I2S(udg_intHours)
	endif

	
//*  UPDATE MULTIBOARDS
	set bj_forLoopAIndex=1
set bj_forLoopAIndexEnd=6
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	if ( udg_intHours == 0 ) then
	call MultiboardSetTitleText(s__udg_Multiboard[GetForLoopIndexA()], ( "Direct Strike Reforged [" + ( ( udg_stringMinutes + ( ":" + udg_stringSeconds ) ) + "]" ) ))
	else
	call MultiboardSetTitleText(s__udg_Multiboard[GetForLoopIndexA()], ( "Direct Strike Reforged [" + ( ( udg_stringHours + ( ":" + ( udg_stringMinutes + ( ":" + udg_stringSeconds ) ) ) ) + "]" ) ))
	endif

	call MultiboardSetItemValueBJ(s__udg_Multiboard[GetForLoopIndexA()], 2, 3, I2S(R2I(( TimerGetRemaining(udg_Timer) + ( udg_WaveTime * I2R(s__udg_PlayerQueue[GetForLoopIndexA()]) ) ))))
	if ( s__udg_GoldExtractorCooldownBoolean[GetForLoopIndexA()] == true ) then
	call MultiboardSetItemValueBJ(s__udg_Multiboard[GetForLoopIndexA()], 2, 6, I2S(R2I(TimerGetRemaining(s__udg_GoldExtractorCooldown[GetForLoopIndexA()]))))
	else
	call MultiboardSetItemValueBJ(s__udg_Multiboard[GetForLoopIndexA()], 2, 6, "N/A")
	endif

	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
endfunction


//****************************************************************************
function InitTrig_Timer_Update takes nothing returns nothing
	set gg_trg_Timer_Update=CreateTrigger()
call TriggerRegisterTimerEventPeriodic(gg_trg_Timer_Update, 1.00)
	call DisableTrigger(gg_trg_Timer_Update)
	call TriggerAddAction(gg_trg_Timer_Update, function Trig_Timer_Update_Actions)
endfunction

//*  Trigger Archer_Hippo_Merge
//****************************************************************************
function Trig_Archer_Hippo_Merge_Conditions takes nothing returns boolean
	if ( not ( GetSpellAbilityId() == 'A01F' ) ) then
		return false
	endif
	return true
endfunction

function Trig_Archer_Hippo_Merge_Actions takes nothing returns nothing
	if ( GetUnitTypeId(GetSpellTargetUnit()) == 'e004' ) then
	if ( GetOwningPlayer(GetTriggerUnit()) == GetOwningPlayer(GetSpellTargetUnit()) ) then
	set udg_Point=GetUnitLoc(GetSpellTargetUnit())
	set udg_Point2=GetUnitLoc(GetTriggerUnit())
	call AddSpecialEffectLocBJ(udg_Point, "Abilities\\Spells\\Human\\Polymorph\\PolyMorphDoneGround.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call AddSpecialEffectLocBJ(udg_Point2, "Abilities\\Spells\\Human\\Polymorph\\PolyMorphDoneGround.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveUnit(GetSpellTargetUnit())
	call RemoveUnit(GetTriggerUnit())
	call CreateNUnitsAtLoc(1, 'e005', GetOwningPlayer(GetTriggerUnit()), udg_Point, bj_UNIT_FACING)
	call RemoveLocation(udg_Point)
	call RemoveLocation(udg_Point2)
	else
	call DisplayTextToForce(GetForceOfPlayer(GetOwningPlayer(GetTriggerUnit())), "Must target your own |cffffc800Hippogryph|r")
	endif

	else
	call DisplayTextToForce(GetForceOfPlayer(GetOwningPlayer(GetTriggerUnit())), "Must target a |cffffc800Hippogryph|r")
	endif

endfunction


//****************************************************************************
function InitTrig_Archer_Hippo_Merge takes nothing returns nothing
	set gg_trg_Archer_Hippo_Merge=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_Archer_Hippo_Merge, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Archer_Hippo_Merge, Condition(function Trig_Archer_Hippo_Merge_Conditions))
	call TriggerAddAction(gg_trg_Archer_Hippo_Merge, function Trig_Archer_Hippo_Merge_Actions)
endfunction

//*  Trigger Multiboard_Setup
//****************************************************************************
function Trig_Multiboard_Setup_433 takes nothing returns nothing
	if ( s__udg_ActivePlayers[GetConvertedPlayerId(GetEnumPlayer())] == true ) then
	set bj_forLoopAIndex=1
set bj_forLoopAIndexEnd=15
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	call MultiboardSetItemStyleBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 1, GetForLoopIndexA(), true, false)
	call MultiboardSetItemWidthBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 1, GetForLoopIndexA(), 15.00)
	call MultiboardSetItemStyleBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 2, GetForLoopIndexA(), true, false)
	call MultiboardSetItemWidthBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 2, GetForLoopIndexA(), 9.00)
	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
	else
	endif

	call MultiboardSetItemStyleBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 1, 10, true, true)
	call MultiboardSetItemStyleBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 1, 11, true, true)
	call MultiboardSetItemStyleBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 1, 12, true, true)
	call MultiboardSetItemStyleBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 1, 13, true, true)
	call MultiboardSetItemStyleBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 1, 14, true, true)
	call MultiboardSetItemStyleBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 1, 15, true, true)
	call MultiboardSetItemIconBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 1, 10, "ReplaceableTextures\\CommandButtons\\BTNFootman.blp")
	call MultiboardSetItemIconBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 1, 11, "ReplaceableTextures\\CommandButtons\\BTNGrunt.blp")
	call MultiboardSetItemIconBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 1, 12, "ReplaceableTextures\\CommandButtons\\BTNGhoul.blp")
	call MultiboardSetItemIconBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 1, 13, "ReplaceableTextures\\CommandButtons\\BTNArcher.blp")
	call MultiboardSetItemIconBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 1, 14, "ReplaceableTextures\\CommandButtons\\BTNNagaMyrmidon.blp")
	call MultiboardSetItemIconBJ(s__udg_Multiboard[GetConvertedPlayerId(GetEnumPlayer())], 1, 15, "ReplaceableTextures\\CommandButtons\\BTNFelHound.blp")

endfunction

function Trig_Multiboard_Setup_Actions takes nothing returns nothing
	set bj_forLoopAIndex=1
set bj_forLoopAIndexEnd=6
	loop
	exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
	call CreateMultiboardBJ(2, 6, "Direct Strike Reforged")
	call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 1, 1, "Middle Bonus:")
	call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 2, 1, "None")
	call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 1, 2, "----------------")
	call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 2, 2, "-------")
	call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 1, 3, "Your wave:")
	call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 2, 3, "0")
	call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 1, 5, "|cffffff00Gold / 20sec:|r")
	call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 2, 5, "100")
	call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 1, 6, "Gold Extractor cooldown:")
	call MultiboardSetItemValueBJ(GetLastCreatedMultiboard(), 2, 6, "N/A")
	call MultiboardDisplayBJ(false, GetLastCreatedMultiboard())
	set s__udg_Multiboard[GetForLoopIndexA()]= GetLastCreatedMultiboard()
	set bj_forLoopAIndex=bj_forLoopAIndex + 1
endloop
	call ForForce(GetPlayersAll(), function Trig_Multiboard_Setup_433)

endfunction


//****************************************************************************
function InitTrig_Multiboard_Setup takes nothing returns nothing
	set gg_trg_Multiboard_Setup=CreateTrigger()
call TriggerRegisterTimerEventSingle(gg_trg_Multiboard_Setup, 1.50)
	call TriggerAddAction(gg_trg_Multiboard_Setup, function Trig_Multiboard_Setup_Actions)
endfunction

//****************************************************************************
//* 
//*   Triggers
//* 
//****************************************************************************
function InitCustomTriggers takes nothing returns nothing
	call InitTrig_Delayed_Destroy_Effect()
	call InitTrig_Init_MMD_Values()
	call InitTrig_New_Round_MMD_Values()
	call InitTrig_Update_MMD_Values()
	call InitTrig_ItemshopGUI_Init_Shop()
	call InitTrig_ItemshopGUI_Init()
	call InitTrig_Cinematic_Sequence_01()
	call InitTrig_Cinematic_Sequence_02_init_scripts()
	call InitTrig_SetupGUISpellTables()
	call InitTrig_Move_Unit_On_Cast()
	call InitTrig_Mana_Flare_Cast()
	call InitTrig_Unit_Casts_Invisibility()
	call InitTrig_Unit_Casts_Invisibility_NEW()
	call InitTrig_Unit_Casts_Aerial_Shackles()
	call InitTrig_Unit_Finishes_Casting_Aerial_Shackles()
	call InitTrig_Unit_Casts_Ancestral_Spirit()
	call InitTrig_Unit_Casts_Stasis_Trap()
	call InitTrig_Unit_Casts_Burrow()
	call InitTrig_Unit_Casts_Devour_Magic()
	call InitTrig_Unit_Hit_by_Possession()
	call InitTrig_Unit_Casts_Kaboom()
	call InitTrig_Banshee_Possession_NEW()
	call InitTrig_Banshee_Possession_Kill()
	call InitTrig_Banshee_Possession_change_back()
	call InitTrig_Hero_Casts_Earthquake()
	call InitTrig_Hero_Stops_Casting_Earthquake()
	call InitTrig_Hero_Casts_Death_and_Decay()
	call InitTrig_Hero_Stops_Casting_Death_and_Decay()
	call InitTrig_Hero_Casts_Tornado()
	call InitTrig_Tornado_Search()
	call InitTrig_Holy_Light()
	call InitTrig_Divine_Shield()
	call InitTrig_Resurrection()
	call InitTrig_Blizzard()
	call InitTrig_Water_Elemental()
	call InitTrig_Tornado()
	call InitTrig_Storm_Bolt()
	call InitTrig_Avatar_and_Thunder_Clap()
	call InitTrig_Avatar()
	call InitTrig_Blood_Mage_Abilities()
	call InitTrig_Footman_Defend()
	call InitTrig_Priest_Dispel_Magic()
	call InitTrig_Priest_Inner_Fire_2()
	call InitTrig_Sorceress_Invisibility()
	call InitTrig_Sorceress_Sheep()
	call InitTrig_Sorceress_Sheep_2()
	call InitTrig_Spellbreaker_Control_Magic()
	call InitTrig_Dragonhawk_Rider_Aerial_Shackles()
	call InitTrig_Dragonhawk_Rider_Aerial_Shackles_2()
	call InitTrig_Mortar_Team_Flare()
	call InitTrig_Wind_Walk()
	call InitTrig_Wind_Walk_2()
	call InitTrig_Wind_Walk_Unit_Dies()
	call InitTrig_Blademaster_Dies()
	call InitTrig_Mirror_Image()
	call InitTrig_Bladestorm()
	call InitTrig_Chain_Lightning()
	call InitTrig_Spirit_Wolves()
	call InitTrig_Firebolt()
	call InitTrig_Earthquake()
	call InitTrig_Earthquake_Point_Check()
	call InitTrig_Shockwave()
	call InitTrig_War_Stomp()
	call InitTrig_Healing_Wave()
	call InitTrig_Hex()
	call InitTrig_Serpent_Ward()
	call InitTrig_Big_Bad_Voodoo()
	call InitTrig_Big_Bad_Voodoo_Check()
	call InitTrig_Big_Bad_Voodoo_is_attacked()
	call InitTrig_Berserker_Berserk()
	call InitTrig_Batrider_Unstable_Concoction()
	call InitTrig_Batrider_Unstable_Concoction_2()
	call InitTrig_Shaman_Purge()
	call InitTrig_Shaman_Purge_2()
	call InitTrig_Shaman_Lightning_Shield()
	call InitTrig_Spirit_Walker_Spirit_Link()
	call InitTrig_Spirit_Walker_Spirit_Link_2()
	call InitTrig_Spirit_Walker_Disenchant()
	call InitTrig_Spirit_Walker_Ancestral_Spirit()
	call InitTrig_Witch_Doctor_Stasis_Trap_Healing_Ward()
	call InitTrig_Kodo_Beast_Devour()
	call InitTrig_Death_Coil()
	call InitTrig_Death_Pact()
	call InitTrig_Animate_Dead()
	call InitTrig_Frost_Nova()
	call InitTrig_Autocast_Frost_Armor_ON()
	call InitTrig_Autocast_Frost_Armor_OFF()
	call InitTrig_Dark_Ritual()
	call InitTrig_Death_and_Decay()
	call InitTrig_Death_and_Decay_Point_Check()
	call InitTrig_Dreadlord_Abilities()
	call InitTrig_Crypt_Lord_Abilities()
	call InitTrig_Autocast_Carrion_Beetles_ON()
	call InitTrig_Autocast_Carrion_Beetles_OFF()
	call InitTrig_Crypt_Fiend_Burrow()
	call InitTrig_Crypt_Fiend_Unburrow()
	call InitTrig_Crypt_Fiend_Unburrow_2()
	call InitTrig_Crypt_Fiend_Dies()
	call InitTrig_Gargoyle_Stone_Form()
	call InitTrig_Gargoyle_Unstone_Form()
	call InitTrig_Gargoyle_Uses_Unstone_Form()
	call InitTrig_Necromancer_Raise_Dead()
	call InitTrig_Necromancer_Unholy_Frenzy()
	call InitTrig_Necromancer_Cripple()
	call InitTrig_Banshee_Anti_Magic_Shell()
	call InitTrig_Banshee_Possession()
	call InitTrig_Banshee_Possession_Random()
	call InitTrig_Obsidian_Staue_Spirit_Touch()
	call InitTrig_Meat_Wagon_Exhume_Corpses()
	call InitTrig_Meat_Wagon_Dies()
	call InitTrig_Disease_Cloud_is_summoned()
	call InitTrig_Disease_Cloud_Dies()
	call InitTrig_Destroyer_Absorb_Mana_2()
	call InitTrig_Destroyer_Devour_Magic()
	call InitTrig_Entangling_Roots()
	call InitTrig_Force_of_Nature()
	call InitTrig_Tranquility()
	call InitTrig_Autocast_Searing_Arrows_ON()
	call InitTrig_Autocast_Searing_Arrows_OFF()
	call InitTrig_Silence()
	call InitTrig_Starfall()
	call InitTrig_Starfall_Check()
	call InitTrig_Mana_Burn()
	call InitTrig_Immolation()
	call InitTrig_Metamorphosis()
	call InitTrig_Fan_of_Knives()
	call InitTrig_Blink()
	call InitTrig_Shadow_Strike()
	call InitTrig_Vengeance()
	call InitTrig_Dryad_Abolish_Magic()
	call InitTrig_Huntress_Sentinel()
	call InitTrig_Druid_of_the_Talon_Crow_Form()
	call InitTrig_Druid_of_the_Talon_Cyclone()
	call InitTrig_Druid_of_the_Claw_Roar()
	call InitTrig_Druid_of_the_Claw_Roar_2()
	call InitTrig_Druid_of_the_Claw_Rejuvenation()
	call InitTrig_Druid_of_the_Claw_Bear_Form()
	call InitTrig_Mountain_Giant_Taunt()
	call InitTrig_Healing_Spray()
	call InitTrig_Chemical_Rage()
	call InitTrig_Acid_Bomb()
	call InitTrig_Transmute()
	call InitTrig_Transmute_FIX()
	call InitTrig_Forked_Lightning()
	call InitTrig_Autocast_Frost_Arrows_ON()
	call InitTrig_Autocast_Frost_Arrows_OFF()
	call InitTrig_Mana_Shield()
	call InitTrig_Tornado_Neutral()
	call InitTrig_Pocket_Factory()
	call InitTrig_Cluster_Rockets()
	call InitTrig_Robo_Goblin()
	call InitTrig_Summon_Bear()
	call InitTrig_Summon_Hawk_and_Quilbeast()
	call InitTrig_Stampede()
	call InitTrig_Breath_of_Fire()
	call InitTrig_Drunken_Haze()
	call InitTrig_Storm_Earth_and_Fire()
	call InitTrig_Storm_Earth_and_Fire_is_summoned()
	call InitTrig_Storm_Wind_Walk()
	call InitTrig_Storm_Wind_Walk_2()
	call InitTrig_Storm_Wind_Walk_Unit_Dies()
	call InitTrig_Storm_Dies()
	call InitTrig_Earth_Attacks()
	call InitTrig_Silence_Neutral()
	call InitTrig_Autocast_Black_Arrow_ON()
	call InitTrig_Autocast_Black_Arrow_OFF()
	call InitTrig_Life_Drain()
	call InitTrig_Charm()
	call InitTrig_Soul_Burn()
	call InitTrig_Lava_Spawn()
	call InitTrig_Volcano()
	call InitTrig_Volcano_Point_Check()
	call InitTrig_Rain_of_Fire()
	call InitTrig_Howl_of_Terror()
	call InitTrig_Doom()
	call InitTrig_Weaken_Cast()
	call InitTrig_Weaken_Check()
	call InitTrig_Living_Bomb()
	call InitTrig_Living_Bomb_Effect()
	call InitTrig_Living_Bomb_Death()
	call InitTrig_Arcane_Arrow()
	call InitTrig_Turmoil_of_Magic()
	call InitTrig_Implode()
	call InitTrig_Implode_Dummy_Level_1()
	call InitTrig_Implode_Dummy_Level_2()
	call InitTrig_Implode_Dummy_Level_3()
	call InitTrig_Anti_Energy()
	call InitTrig_Anti_Energy_Effect()
	call InitTrig_Overpower()
	call InitTrig_Overpower_OFF()
	call InitTrig_Epicenter()
	call InitTrig_Epicenter_Bonus()
	call InitTrig_Unit_Casts_Dalaran_Rune()
	call InitTrig_Dalaran_Rune_Group_Check()
	call InitTrig_Wisdom_Embrace_Effect()
	call InitTrig_Fusion()
	call InitTrig_Arcane_Field()
	call InitTrig_Frost_Nova_Dalaran()
	call InitTrig_Mass_Frost_Armor()
	call InitTrig_Permafrost()
	call InitTrig_Permafrost_OFF()
	call InitTrig_Earth_Elemental_Rank_3_Dies()
	call InitTrig_Fire_Elemental_Dies()
	call InitTrig_AI_Blink_High_Wizard()
	call InitTrig_AI_Unstable_Portal()
	call InitTrig_AI_Mana_Ward()
	call InitTrig_AI_Disruption()
	call InitTrig_AI_Summon_Earth_Elemental()
	call InitTrig_Summon_Aether_and_Water_Elemental()
	call InitTrig_AI_Summon_Fire_Elemental()
	call InitTrig_AI_AntiEnergy()
	call InitTrig_AI_Overpower()
	call InitTrig_AI_Epicenter()
	call InitTrig_AI_Frost_Bolt()
	call InitTrig_AI_Mass_Frost_Armor()
	call InitTrig_AI_Blink_Mage()
	call InitTrig_AI_Permafrost()
	call InitTrig_Apprentice_Weaken()
	call InitTrig_Apprentice_Barrier()
	call InitTrig_Construct_Absorb_Mana()
	call InitTrig_Construct_Fusion()
	call InitTrig_Arcanist_Inversion()
	call InitTrig_Arcanist_Wisdom_Embrace()
	call InitTrig_Arcanist_Sheep()
	call InitTrig_Pyromancer_Burn()
	call InitTrig_AI_Dalaran_Defend()
	call InitTrig_AI_Protective_Field()
	call InitTrig_AI_Protective_Field_2()
	call InitTrig_Kirin_Tor_Operative_Frost_Nova()
	call InitTrig_Kirin_Tor_Operative_Blink()
	call InitTrig_Kirin_Tor_Curator_Arcane_Leash()
	call InitTrig_Kirin_Tor_Curaotr_Arcane_Leash_2()
	call InitTrig_Piercing_Charge()
	call InitTrig_Piercing_Charge_Periodic()
	call InitTrig_Battlecry()
	call InitTrig_Magic_Hunger()
	call InitTrig_Magic_Hunger_Attack()
	call InitTrig_Doppleganger()
	call InitTrig_Petal_Ward()
	call InitTrig_Arcane_Rush()
	call InitTrig_Verbis_Virtus()
	call InitTrig_Sun_Blast()
	call InitTrig_Ember_Cannon_Mode_ON()
	call InitTrig_Ember_Cannon_Mode_OFF()
	call InitTrig_Meld()
	call InitTrig_Phoenix_Slash()
	call InitTrig_Blade_Dance()
	call InitTrig_Havok()
	call InitTrig_Berserkers_Call()
	call InitTrig_Shield_Bash()
	call InitTrig_Shield_Bash_Periodic()
	call InitTrig_Stand_United()
	call InitTrig_Liberate()
	call InitTrig_Arcane_Clarity()
	call InitTrig_AI_Refraction()
	call InitTrig_AI_Refraction_2()
	call InitTrig_AI_Meld()
	call InitTrig_AI_Meld_2()
	call InitTrig_Meld_Unit_Dies()
	call InitTrig_Phoenix_Assassin_Dies()
	call InitTrig_AI_Bladestorm_BELF()
	call InitTrig_AI_SinDorei_Blades()
	call InitTrig_AI_Mana_Burn_BELF()
	call InitTrig_AI_Berserkers_Call()
	call InitTrig_AI_Shield_Bash()
	call InitTrig_AI_Havok()
	call InitTrig_AI_Ultimate_Strength()
	call InitTrig_AI_Ultimate_Strength_2()
	call InitTrig_AI_Rain_of_Chaos()
	call InitTrig_AI_Liberate()
	call InitTrig_AI_Siphon_Life_and_Mana()
	call InitTrig_AI_Concentration()
	call InitTrig_AI_Slow_BELF()
	call InitTrig_AI_Silver_Edge_Form()
	call InitTrig_AI_Dragonhawk_Rider_Mana_Decay()
	call InitTrig_AI_Petal_Ward()
	call InitTrig_AI_Sun_Blast()
	call InitTrig_AI_Arcane_Rush()
	call InitTrig_AI_Verbis_Virtus()
	call InitTrig_AI_Liberate_Shield()
	call InitTrig_AI_Relocate()
	call InitTrig_AI_Ember_Cannon_Mode()
	call InitTrig_AI_Decimator_Mode()
	call InitTrig_Hook_Init()
	call InitTrig_Unit_Casts_Hook()
	call InitTrig_Hook_Periodic()
	call InitTrig_Unit_Finishes_Casting_Hook()
	call InitTrig_Shadows_Call_Cast()
	call InitTrig_Shadows_Call()
	call InitTrig_Fade_Cast()
	call InitTrig_Fade()
	call InitTrig_Blight_Spread()
	call InitTrig_Fateful_Strike()
	call InitTrig_Banshee_Scream_Cast()
	call InitTrig_Banshee_Scream_Start()
	call InitTrig_Grave_Blow()
	call InitTrig_Blight_Aura()
	call InitTrig_Punish_New()
	call InitTrig_Corpse_Consume()
	call InitTrig_Contract_Kill()
	call InitTrig_AI_Grave_Blow()
	call InitTrig_AI_Dread()
	call InitTrig_AI_Life_Drain()
	call InitTrig_AI_Remorseless()
	call InitTrig_AI_Banshee_Scream()
	call InitTrig_AI_Punish()
	call InitTrig_AI_Death_Bound()
	call InitTrig_AI_Vile_Blast()
	call InitTrig_AI_Plague()
	call InitTrig_AI_Greater_Abomination()
	call InitTrig_AI_Potent_Remedy()
	call InitTrig_AI_Forsaken_Concoction()
	call InitTrig_AI_Death_Fumes()
	call InitTrig_AI_Hook()
	call InitTrig_AI_Forlorn_Cell()
	call InitTrig_AI_Consume_NEW()
	call InitTrig_AI_Fade()
	call InitTrig_AI_Petrify()
	call InitTrig_AI_Sentient()
	call InitTrig_AI_Salubrious()
	call InitTrig_AI_Undead_Embrace()
	call InitTrig_Magical_Skin()
	call InitTrig_Murloc_Acid()
	call InitTrig_Couatl_Dies()
	call InitTrig_Couatl_Egg_Dies()
	call InitTrig_Siren_Aura()
	call InitTrig_Malediction()
	call InitTrig_Gust()
	call InitTrig_Ravage()
	call InitTrig_Kraken_Shell()
	call InitTrig_Termal_Eruption()
	call InitTrig_Aqua_Burst()
	call InitTrig_Vortex_Aura()
	call InitTrig_Razor_Edge()
	call InitTrig_Razor_Edge_Periodic()
	call InitTrig_Retreat()
	call InitTrig_Retreat_Surface()
	call InitTrig_Retreat_Periodic()
	call InitTrig_AI_Termal_Eruption()
	call InitTrig_AI_Aqua_Burst()
	call InitTrig_AI_Curse_of_the_Depth()
	call InitTrig_AI_Gust()
	call InitTrig_AI_Ravage()
	call InitTrig_AI_Healing_Water()
	call InitTrig_AI_Monsoon()
	call InitTrig_AI_Mist()
	call InitTrig_AI_Frenzy()
	call InitTrig_AI_Retreat()
	call InitTrig_AI_Razor_Edge()
	call InitTrig_AI_Hunter_Instincts()
	call InitTrig_AI_Hunter_Instincts_2()
	call InitTrig_Hunter_Instincts_Unit_Dies()
	call InitTrig_Myrmidon_Commander_Dies()
	call InitTrig_AI_Typhoon()
	call InitTrig_AI_Mending_Water()
	call InitTrig_AI_Madness()
	call InitTrig_AI_Water_Shield()
	call InitTrig_AI_Suffocate()
	call InitTrig_AI_Devour()
	call InitTrig_AI_Crystalized()
	call InitTrig_AI_Submerge()
	call InitTrig_AI_Submerge_OnCast()
	call InitTrig_AI_Submerge_Scan()
	call InitTrig_AI_Submerge_OnSurface()
	call InitTrig_Place_Racial_Building()
	call InitTrig_Move_Racial_Building()
	call InitTrig_Move_Racial_Building_Prevent()
	call InitTrig_Arcane_Tower_Start()
	call InitTrig_Reconstruction_Tower_Start()
	call InitTrig_Dalaran_Tower_Finish()
	call InitTrig_Dalaran_Tower_Cancel()
	call InitTrig_AI_Wrath_of_The_Phoenix()
	call InitTrig_Wrath_of_the_Phoenix_Cast()
	call InitTrig_Unit_Builds_Phoenix()
	call InitTrig_Dark_Ladys_Vengeance_Start()
	call InitTrig_Dark_Ladys_Vengeance_Finish()
	call InitTrig_Dark_Ladys_Vengeance_Effect()
	call InitTrig_Pale_Ladys_Gaze()
	call InitTrig_Cult_of_Forgotten_Shadow_Start()
	call InitTrig_Cult_of_Forgotten_Shadow_Finish()
	call InitTrig_Cult_of_Forgotten_Shadow_Effect()
	call InitTrig_Super_Plague_Start()
	call InitTrig_Super_Plague_Finish()
	call InitTrig_Forsaken_Mastery_Cancel()
	call InitTrig_Toxic_Murgul_Reaver()
	call InitTrig_Evolved_Naga_Siren()
	call InitTrig_Evolved_Couatl()
	call InitTrig_Evolved_Dragon_Turtle()
	call InitTrig_Evolved_Naga_Myrmidon()
	call InitTrig_Evolved_Ancient_Hydra()
	call InitTrig_Set_Map_Music()
	call InitTrig_Initialization()
	call InitTrig_Initializatize_Scripts()
	call InitTrig_Start_Game()
	call InitTrig_Info_Init()
	call InitTrig_Info_Prompt()
	call InitTrig_Load_Building_Models()
	call InitTrig_Reset_Game()
	call InitTrig_Setup_Fortress_and_Watch_Tower_etc()
	call InitTrig_Camera_Zoom()
	call InitTrig_Spawn()
	call InitTrig_Player_Leaves()
	call InitTrig_Tower_Team_1_Dies()
	call InitTrig_Tower_Team_2_Dies()
	call InitTrig_Game_Over()
	call InitTrig_Show_Scoreboard()
	call InitTrig_Research()
	call InitTrig_Unit_Constructs_Building()
	call InitTrig_Summon_Hero_Builder()
	call InitTrig_Construct_Hero()
	call InitTrig_Hero_Building_Dies()
	call InitTrig_Hero_Building_Set_Mana_Zero()
	call InitTrig_Move_Building()
	call InitTrig_Sell_Building_100()
	call InitTrig_Sell_Building_75()
	call InitTrig_Build_Footman()
	call InitTrig_Build_Priest()
	call InitTrig_Build_Grunt()
	call InitTrig_Build_Headhunter()
	call InitTrig_Build_Witch_Doctor()
	call InitTrig_Build_Raider()
	call InitTrig_Build_Kodo_Beast()
	call InitTrig_Build_Crypt_Fiend()
	call InitTrig_Build_Ghoul()
	call InitTrig_Build_Necromancer()
	call InitTrig_Build_Banshee()
	call InitTrig_Build_Frost_Wyrm()
	call InitTrig_Build_Huntress()
	call InitTrig_Build_Glaive_Thrower()
	call InitTrig_Build_Mountain_Giant()
	call InitTrig_Basic_Income()
	call InitTrig_Extra_Income()
	call InitTrig_Gold_Extractor_Add()
	call InitTrig_Gold_Extractor_Cooldown_Expires()
	call InitTrig_Team_1_Enters_Middle()
	call InitTrig_Team_2_Enters_Middle()
	call InitTrig_Middle_Check()
	call InitTrig_Unit_Dies()
	call InitTrig_Idle_Check()
	call InitTrig_Unit_Timed_Life()
	call InitTrig_Update_Unit_TT()
	call InitTrig_Hero_Dies()
	call InitTrig_Hero_XP_Gain()
	call InitTrig_Hero_Learn_Spells()
	call InitTrig_Hero_Uses_Spell()
	call InitTrig_Staging_Area_Anti_Stuck()
	call InitTrig_Timer_Update()
	call InitTrig_Archer_Hippo_Merge()
	call InitTrig_Multiboard_Setup()
endfunction


function RunInitializationTriggers takes nothing returns nothing
	call ConditionalTriggerExecute(gg_trg_ItemshopGUI_Init)
	call ConditionalTriggerExecute(gg_trg_Hook_Init)
	call ConditionalTriggerExecute(gg_trg_Set_Map_Music)
	call ConditionalTriggerExecute(gg_trg_Initialization)
	call ConditionalTriggerExecute(gg_trg_Load_Building_Models)
endfunction

//****************************************************************************
//* 
//*   Players
//* 
//****************************************************************************
function InitCustomPlayerSlots takes nothing returns nothing
	call SetPlayerStartLocation(Player(0), 0)
	call SetPlayerColor(Player(0), ConvertPlayerColor(0))
	call SetPlayerRacePreference(Player(0), RACE_PREF_HUMAN)
	call SetPlayerRaceSelectable(Player(0), false)
	call SetPlayerController(Player(0), MAP_CONTROL_USER)

	call SetPlayerStartLocation(Player(1), 1)
	call SetPlayerColor(Player(1), ConvertPlayerColor(1))
	call SetPlayerRacePreference(Player(1), RACE_PREF_HUMAN)
	call SetPlayerRaceSelectable(Player(1), false)
	call SetPlayerController(Player(1), MAP_CONTROL_USER)

	call SetPlayerStartLocation(Player(2), 2)
	call SetPlayerColor(Player(2), ConvertPlayerColor(2))
	call SetPlayerRacePreference(Player(2), RACE_PREF_HUMAN)
	call SetPlayerRaceSelectable(Player(2), false)
	call SetPlayerController(Player(2), MAP_CONTROL_USER)

	call SetPlayerStartLocation(Player(3), 3)
	call SetPlayerColor(Player(3), ConvertPlayerColor(3))
	call SetPlayerRacePreference(Player(3), RACE_PREF_HUMAN)
	call SetPlayerRaceSelectable(Player(3), false)
	call SetPlayerController(Player(3), MAP_CONTROL_USER)

	call SetPlayerStartLocation(Player(4), 4)
	call SetPlayerColor(Player(4), ConvertPlayerColor(4))
	call SetPlayerRacePreference(Player(4), RACE_PREF_HUMAN)
	call SetPlayerRaceSelectable(Player(4), false)
	call SetPlayerController(Player(4), MAP_CONTROL_USER)

	call SetPlayerStartLocation(Player(5), 5)
	call SetPlayerColor(Player(5), ConvertPlayerColor(5))
	call SetPlayerRacePreference(Player(5), RACE_PREF_HUMAN)
	call SetPlayerRaceSelectable(Player(5), false)
	call SetPlayerController(Player(5), MAP_CONTROL_USER)

endfunction

//****************************************************************************
//* 
//*   Custom Teams
//* 
//****************************************************************************
function InitCustomTeams takes nothing returns nothing

	//*  Force: TRIGSTR_032
	call SetPlayerTeam(Player(0), 0)
	call SetPlayerTeam(Player(2), 0)
	call SetPlayerTeam(Player(4), 0)
	call SetPlayerAllianceStateAllyBJ(Player(0), Player(2), true)
	call SetPlayerAllianceStateVisionBJ(Player(0), Player(2), true)
	call SetPlayerAllianceStateAllyBJ(Player(0), Player(4), true)
	call SetPlayerAllianceStateVisionBJ(Player(0), Player(4), true)
	call SetPlayerAllianceStateAllyBJ(Player(2), Player(0), true)
	call SetPlayerAllianceStateVisionBJ(Player(2), Player(0), true)
	call SetPlayerAllianceStateAllyBJ(Player(2), Player(4), true)
	call SetPlayerAllianceStateVisionBJ(Player(2), Player(4), true)
	call SetPlayerAllianceStateAllyBJ(Player(4), Player(0), true)
	call SetPlayerAllianceStateVisionBJ(Player(4), Player(0), true)
	call SetPlayerAllianceStateAllyBJ(Player(4), Player(2), true)
	call SetPlayerAllianceStateVisionBJ(Player(4), Player(2), true)


	//*  Force: TRIGSTR_033
	call SetPlayerTeam(Player(1), 1)
	call SetPlayerTeam(Player(3), 1)
	call SetPlayerTeam(Player(5), 1)
	call SetPlayerAllianceStateAllyBJ(Player(1), Player(3), true)
	call SetPlayerAllianceStateVisionBJ(Player(1), Player(3), true)
	call SetPlayerAllianceStateAllyBJ(Player(1), Player(5), true)
	call SetPlayerAllianceStateVisionBJ(Player(1), Player(5), true)
	call SetPlayerAllianceStateAllyBJ(Player(3), Player(1), true)
	call SetPlayerAllianceStateVisionBJ(Player(3), Player(1), true)
	call SetPlayerAllianceStateAllyBJ(Player(3), Player(5), true)
	call SetPlayerAllianceStateVisionBJ(Player(3), Player(5), true)
	call SetPlayerAllianceStateAllyBJ(Player(5), Player(1), true)
	call SetPlayerAllianceStateVisionBJ(Player(5), Player(1), true)
	call SetPlayerAllianceStateAllyBJ(Player(5), Player(3), true)
	call SetPlayerAllianceStateVisionBJ(Player(5), Player(3), true)

endfunction

function InitAllyPriorities takes nothing returns nothing
	call SetStartLocPrioCount(0, 0)
	call SetStartLocPrioCount(1, 0)
	call SetStartLocPrioCount(2, 0)
	call SetStartLocPrioCount(3, 0)
	call SetStartLocPrioCount(4, 0)
	call SetStartLocPrioCount(5, 0)
endfunction

//****************************************************************************
//* 
//*   Main Initialization
//* 
//****************************************************************************
function main takes nothing returns nothing
	call SetCameraBounds(- 11520 + GetCameraMargin(CAMERA_MARGIN_LEFT), - 11776 + GetCameraMargin(CAMERA_MARGIN_BOTTOM), 11520 - GetCameraMargin(CAMERA_MARGIN_RIGHT), 11264 - GetCameraMargin(CAMERA_MARGIN_TOP), - 11520 + GetCameraMargin(CAMERA_MARGIN_LEFT), 11264 - GetCameraMargin(CAMERA_MARGIN_TOP), 11520 - GetCameraMargin(CAMERA_MARGIN_RIGHT), - 11776 + GetCameraMargin(CAMERA_MARGIN_BOTTOM))
	call SetDayNightModels("Environment\\DNC\\DNCLordaeron\\DNCLordaeronTerrain\\DNCLordaeronTerrain.mdl", "Environment\\DNC\\DNCLordaeron\\DNCLordaeronUnit\\DNCLordaeronUnit.mdl")
	call SetTerrainFogEx(0, 3000, 7000, 0.5, 0, 0, 0.1171875)
	call NewSoundEnvironment("lake")
	call SetAmbientDaySound("SunkenRuinsDay")
	call SetAmbientNightSound("SunkenRuinsNight")
	call SetMapMusic("Music", true, 0)
	call InitSounds()
	call CreateRegions()
	call CreateCameras()
	call CreateAllDestructables()
	call CreateAllItems()
	call CreateAllUnits()
	call InitBlizzard()

call ExecuteFunc("jasshelper__initstructs16674062")
call ExecuteFunc("SetupDamageDetect")
call ExecuteFunc("FrameLoader__init_function")
call ExecuteFunc("LibArcaneBarrier___InitArcaneBarrier")
call ExecuteFunc("LibCounterStrike___InitCounterStrike")
call ExecuteFunc("LibPhaseStrike___InitPhaseStrike")
call ExecuteFunc("LibRequired__init")
call ExecuteFunc("MMD__init")
call ExecuteFunc("Power2__init_function")
call ExecuteFunc("RaceSounds__init_function")
call ExecuteFunc("RacialTowerInit")
call ExecuteFunc("RaiderPillage__init")
call ExecuteFunc("SpellFocusedArrow___InitFocusedArrow")
call ExecuteFunc("String__Init")
call ExecuteFunc("SuperPlagueEffect")
call ExecuteFunc("TasItemCost__Init")
call ExecuteFunc("IsRightClick__Init")
call ExecuteFunc("ItemHolder__init_function")
call ExecuteFunc("LibAFKSystem__init")
call ExecuteFunc("TasItemFusion__Init")
call ExecuteFunc("ToggleIconButton__Init")
call ExecuteFunc("TasButtonList__Init")
call ExecuteFunc("ToggleIconButtonGroup__init_function")
call ExecuteFunc("TasItemShop__init_function")
call ExecuteFunc("TasItemShopGUILoader__init_function")
call ExecuteFunc("TasItemShopUserInit")

	call InitGlobals()
	call InitCustomTriggers()
	call RunInitializationTriggers()
endfunction

//****************************************************************************
//* 
//*   Map Configuration
//* 
//****************************************************************************
function config takes nothing returns nothing
	call SetMapName("TRIGSTR_003")
	call SetMapDescription("TRIGSTR_005")
	call SetPlayers(6)
	call SetTeams(2)
	call SetGamePlacement(MAP_PLACEMENT_TEAMS_TOGETHER)

	call DefineStartLocation(0, 7104, 2176)
	call DefineStartLocation(2, 7104, 0)
	call DefineStartLocation(3, - 7104, 0)
	call DefineStartLocation(4, 7104, - 2176)
	call DefineStartLocation(5, - 7104, - 2176)
	call DefineStartLocation(12, 4352, 0)
	call DefineStartLocation(13, - 4352, 0)
	call DefineStartLocation(1, - 7104, 2176)
	call DefineStartLocation(0, 7104, 2176)
	call DefineStartLocation(2, 7104, 0)
	call DefineStartLocation(3, - 7104, 0)
	call DefineStartLocation(4, 7104, - 2176)
	call DefineStartLocation(5, - 7104, - 2176)
	call DefineStartLocation(12, 4352, 0)
	call DefineStartLocation(13, - 4352, 0)
	call DefineStartLocation(1, - 7104, 2176)

	call InitCustomPlayerSlots()
	call InitCustomTeams()
	call InitAllyPriorities()
endfunction




//Struct method generated initializers/callers:

//Functions for BigArrays:
function sa__MMD__QueueNode_onDestroy takes nothing returns boolean
local integer this=f__arg_this
            call FlushStoredInteger(MMD__gc, MMD__M_KEY_VAL + s__MMD__QueueNode_key[this], s__MMD__QueueNode_msg[this])
            call FlushStoredInteger(MMD__gc, MMD__M_KEY_CHK + s__MMD__QueueNode_key[this], s__MMD__QueueNode_key[this])
            set s__MMD__QueueNode_msg[this]=null
            set s__MMD__QueueNode_key[this]=null
            set s__MMD__QueueNode_next[this]=0
   return true
endfunction

function jasshelper__initstructs16674062 takes nothing returns nothing
    set st__MMD__QueueNode_onDestroy=CreateTrigger()
    call TriggerAddCondition(st__MMD__QueueNode_onDestroy,Condition( function sa__MMD__QueueNode_onDestroy))






















call ExecuteFunc("s__Ascii__Inits_Ascii__Init___onInit")

















































































































































































































































































endfunction

