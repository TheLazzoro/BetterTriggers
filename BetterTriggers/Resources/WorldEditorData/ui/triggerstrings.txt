// All entries in this file correspond to entries in TriggerData.txt
// with the same key, and define the text to display for a given
// function.
//
// The first value is the name of the function.
// Following values are the layout of the text description,
// and each value may either be raw text, or a parameter.
// Parameters are distinguished from raw text with a '~' as the first
// character.
//
// Any display text to have a comma must be contained in double quotes


//***************************************************************************
[TriggerEventStrings]

// Special events not defined in common.j,
// handled internally by the editor
MapInitializationEventHint=


TriggerRegisterCommandEventHint="Triggers when a specific ability command is issued."

TriggerRegisterBuildCommandEventBJHint="Triggers when a specific build command is issued."

TriggerRegisterTrainCommandEventBJHint="Triggers when a specific Train command is issued."

TriggerRegisterUpgradeCommandEventBJHint="Triggers when a specific Research command is issued."

TriggerRegisterCommonCommandEventBJHint="Triggers when a specific common command is issued."

// Destructible events
TriggerRegisterDeathEventHint="Use 'Event Response - Dying Destructible' to refer to the destructible that is dying."

TriggerRegisterDestDeathInRegionEventHint="Only the first 64 destructibles within the region when this event is registered are monitored for death.  It is best to use this event for regions containing only a few destructibles."

// Dialog events
TriggerRegisterDialogEventBJHint=


// Game events
TriggerRegisterGameStateEventTimeOfDayHint="A game day is 24 hours long.  Six a.m. is 6.00, and six p.m. is 18.00."

TriggerRegisterVariableEventHint="This only works for non-array variables of type 'Real'."

TriggerRegisterGameLoadedEventBJHint="This fires immediately after the saved game is finished loading."

TriggerRegisterGameSavedEventBJHint="This fires immediately before the game is saved."

TriggerRegisterShowSkillEventBJHint="This event should only be used in single-player maps."

TriggerRegisterBuildSubmenuEventBJHint="This event should only be used in single-player maps."

TriggerRegisterGameEventHint="This event only occurs during automated tournament games on Battle.net."


// Player events
TriggerRegisterPlayerChatEventHint="Use 'Event Response - Entered/Matched Chat Message' to refer to the chat message that was entered/matched.  Use 'Event Response - Triggering Player' to refer to the player who typed the message."

TriggerRegisterPlayerEventEndCinematicHint="This event occurs whenever the player presses the 'Escape' key (regardless of whether or not they are viewing a cinematic)."

TriggerRegisterPlayerSelectionEventBJHint="Use 'Event Response - Triggering Unit' to refer to the unit being selected or deselected."

TriggerRegisterPlayerKeyEventBJHint=

TriggerRegisterPlayerMouseEventBJHint=

TriggerRegisterPlayerStateEventHint=

TriggerRegisterPlayerEventAllianceChangedHint=

TriggerRegisterPlayerAllianceChangeHint=

TriggerRegisterPlayerEventVictoryHint=

TriggerRegisterPlayerEventDefeatHint=

TriggerRegisterPlayerEventLeaveHint="This event occurs regardless of how the player left the game."


// Timer events
TriggerRegisterTimerEventSingleHint=

TriggerRegisterTimerEventPeriodicHint=

TriggerRegisterTimerExpireEventBJHint="A timer expires when it reaches 0.  Repeating timers expire every time they reach 0.  Use 'Event Response - Expiring Timer' to refer to the timer that is expiring."


// Unit events
TriggerRegisterUnitEventHint=

TriggerRegisterPlayerUnitEventSimpleHint=

TriggerRegisterAnyUnitEventBJHint=

TriggerRegisterEnterRectSimpleHint="Use 'Event Response - Entering Unit' to refer to the unit entering the region."

TriggerRegisterLeaveRectSimpleHint="Use 'Event Response - Leaving Unit' to refer to the unit leaving the region."

TriggerRegisterUnitInRangeSimpleHint="Use 'Event Response - Triggering Unit' to refer to the unit that is entering within range."

TriggerRegisterUnitLifeEventHint=

TriggerRegisterUnitManaEventHint=


//***************************************************************************
[TriggerConditionStrings]

OperatorCompareBooleanHint=

OperatorCompareAbilityIdHint=

OperatorCompareBuffIdHint=

OperatorCompareDestructibleHint=

OperatorCompareDestructableCodeHint=

OperatorCompareButtonHint=

OperatorCompareGameDifficultyHint=

OperatorCompareGameSpeedHint=

OperatorCompareHeroSkillHint=

OperatorCompareIntegerHint=

OperatorCompareItemHint=

OperatorCompareItemTypeHint=

OperatorCompareItemCodeHint=

OperatorCompareMeleeDifficultyHint=

OperatorCompareMouseButtonHint=

OperatorCompareOrderCodeHint=

OperatorComparePlayerHint=

OperatorComparePlayerColorHint=

OperatorComparePlayerControlHint=

OperatorComparePlayerSlotStatusHint=

//OperatorComparePoint="Point Comparison"
//OperatorComparePoint=~Value," ",~Operator," ",~Value
//OperatorComparePointHint=

OperatorCompareRaceHint=

OperatorCompareRealHint=

//OperatorCompareRegion="Region Comparison"
//OperatorCompareRegion=~Value," ",~Operator," ",~Value
//OperatorCompareRegionHint=

OperatorCompareStringHint="For two strings to be equal, they must be of equal length and content."

OperatorCompareTechCodeHint=

OperatorCompareTriggerHint=

OperatorCompareUnitHint=

OperatorCompareUnitCodeHint=

OperatorCompareTerrainTypeHint=

GetBooleanAndHint=

GetBooleanOrHint=

AndMultipleHint="Add conditions to this function in the main display."

OrMultipleHint="Add conditions to this function in the main display."


//***************************************************************************
[TriggerActionStrings]

DoNothingHint=

CommentStringHint=

CustomScriptCodeHint="Enter one line of script code.  Example: 'call my_func(udg_my_var)'"

SetDialogueTextKeyHint=

SetDialogueSpeakerNameKeyHint=

CreateCommandButtonEffectBJHint=

CreateTrainCommandButtonEffectBJHint=

CreateBuildCommandButtonEffectBJHint=

CreateUpgradeCommandButtonEffectBJHint=

CreateLearnCommandButtonEffectBJHint=


CreateCommonCommandButtonEffectBJHint=

DestroyCommandButtonEffectHint=

TriggerSleepActionHint="The duration of this wait is specified in real-time seconds."

PolledWaitHint="The duration of this wait is specified in game-time seconds.  This is a polled wait, so it may last slightly longer than requested."

WaitForConditionHint=

WaitForSoundBJHint="This action only waits if the sound is currently playing.  If the sound has not yet started, or has already finished, this action does nothing."


// Specially handled by the editor
SetVariableHint=


// Specially handled by the editor
ReturnActionHint="This causes all remaining actions in the trigger to be skipped."


// Specially handled by the editor
IfThenElseMultipleHint="Add conditions and actions to this function in the main display."

// Specially handled by the editor
IfThenElseHint=

// Specially handled by the editor
ForLoopAMultipleHint="Add actions to this function in the main display. The end value is assumed to be larger than the start value."

// Specially handled by the editor
ForLoopBMultipleHint="Add actions to this function in the main display. The end value is assumed to be larger than the start value."

// Specially handled by the editor
ForLoopVarMultipleHint="Add actions to this function in the main display. The end value is assumed to be larger than the start value."

// Specially handled by the editor
ForLoopAHint="The end value is assumed to be larger than the start value."

// Specially handled by the editor
ForLoopBHint="The end value is assumed to be larger than the start value."

// Specially handled by the editor
ForLoopVarHint="The end value is assumed to be larger than the start value."


// AI actions
StartMeleeAIHint="This should only only be used for computer-controlled player slots.  When using this action, it is advised that you enable the 'Fixed Player Settings' force property."

StartCampaignAIHint="This should only only be used for computer-controlled player slots.  When using this action, it is advised that you enable the 'Fixed Player Settings' force property."

CommandAIHint="This action is for internal use in AI scripts."

RemoveGuardPositionHint="This action tells the AI to neither use nor replace a given preplaced unit.  This has no effect on Heroes and peon-type units."

RemoveAllGuardPositionsHint="This action tells the AI for the given player to neither use nor replace any of its preplaced units.  This has no effect on Heroes and peon-type units."

RecycleGuardPositionHint="This action requests that the AI recycle the guard position that once belonged to the specified unit."

LockGuardPositionHint="This action prevents the AI from changing the guard position of a unit."

// Animation actions
SetUnitAnimationHint="Use 'Reset Unit Animation' to revert to a unit's normal animation."

SetUnitAnimationWithRarityHint="This animation will repeat until reset with 'Reset Unit Animation'."

QueueUnitAnimationBJHint=

ResetUnitAnimationHint="Sets the unit's animation back to whatever the unit is doing."

AddUnitAnimationPropertiesBJHint=

SetUnitLookAtHint="The unit's body-part will continue to face the target until 'Reset Body-Part Facing' is used.  The offset is taken as (X, Y, Z) from the target's feet."

ResetUnitLookAtHint="Returns a unit's body-part facing to normal."

SetUnitScalePercentHint="The scaling values apply to (Length, Width, Height) when viewing a unit head-on."

SetUnitVertexColorBJHint="The color values are (Red, Green, Blue).  Most units default to 100% red, green, and blue, with 0% transparency.  A 100% transparent unit is completely invisible."

SetUnitTimeScalePercentHint="To revert a unit's animation speed to default, set its animation speed to 100%."

SetUnitTurnSpeedBJHint="A unit's turn speed determines how quickly the unit changes direction.  Turn speed values are expected to be between 0 and 1, with smaller numbers indicating slower turning rates."

SetUnitBlendTimeBJHint="A unit's blend time determines how quickly the unit's body parts turn to face a direction."

SetUnitFlyHeightBJHint="Only flying units use flying heights."

SetUnitPropWindowBJHint=

SetDestructableAnimationBJHint=

QueueDestructableAnimationBJHint=

SetDestAnimationSpeedPercentHint="To revert a destructible's animation speed to default, set its animation speed to 100%."

SetDoodadAnimationRectBJHint="Special animation names: 'show', 'hide', 'soundon', 'soundoff'","."

SetDoodadAnimationBJHint="Special animation names: 'show', 'hide', 'soundon', 'soundoff'","."


// Camera actions
CameraSetupApplyForPlayerHint=

CameraSetupApplyForPlayerSmoothHint="Camera will accelerate over the specified ease in time, and decelerate over the specified ease out time, smooth factor is the ratio between the Primary coefficient and quadratic coefficient in the velocity equation"

PanCameraToTimedLocForPlayerHint=

PanCameraToTimedLocWithZForPlayerHint="The camera will not drop below the terrain height during its camera path."

SmartCameraPanBJHint="If the camera is very far from the destination, it will snap instead of pan.  If the camera is very close to the destination, the pan request will be skipped."

SetCameraFieldForPlayerHint=

RotateCameraAroundLocBJHint=

SetCameraTargetControllerNoZForPlayerHint="The camera target is offset by (X, Y) from the center of the unit's feet."

SetCameraOrientControllerForPlayerBJHint=

SetCinematicCameraForPlayerHint=

StopCameraForPlayerBJHint=

ResetToGameCameraForPlayerHint=

CameraSetSmoothingFactorBJHint=

CameraResetSmoothingFactorBJHint=

CameraSetFocalDistanceHint=

CameraSetDepthOfFieldScaleHint=

CameraSetSourceNoiseForPlayerHint="This constantly sways the camera source until it is reset with 'Camera - Reset Game Camera' or 'Camera - Stop Swaying Camera'."

CameraSetTargetNoiseForPlayerHint="This constantly sways the camera target until it is reset with 'Camera - Reset Game Camera' or 'Camera - Stop Swaying Camera'."

CameraSetEQNoiseForPlayerHint="This constantly shakes the camera until it is reset with 'Camera - Reset Game Camera' or 'Camera - Stop Swaying/Shaking Camera'."

CameraClearNoiseForPlayerHint="This stops the camera from swaying after a 'Camera - Sway Camera' or 'Camera - Shake Camera' action is used."

AdjustCameraBoundsForPlayerBJHint=

SetCameraBoundsToRectForPlayerBJHint="This restricts the game camera to the specified region.  Changing the camera bounds does not change the scale of the minimap.  This should only be called while the camera is facing north."

SetCameraQuickPositionLocForPlayerHint="A spacebar-point is a location that the game camera jumps to when the player presses the spacebar."

BlzCameraSetupSetLabelHint="Set a camera label to view scene transitions within the game"

BlzCameraSetupGetLabelHint="Get the label of a Camera Object"

// Cinematic actions
PlayDialogueFromSpeakerExHint=""

PlayDialogueFromSpeakerTypeExHint=""

BlzEnableTargetIndicatorHint="Target Indicator is normally used in cinematic conversation as blinking circles to indicate who's speaking now"

TransmissionFromUnitWithNameBJHint="The duration of 'No sound' is 5 seconds."

TransmissionFromUnitTypeWithNameBJHint="The duration of 'No sound' is 5 seconds."

ForceCinematicSubtitlesBJHint="Turning this on will cause transmission text to be displayed on the screen even if the user normally has subtitles turned off."

CinematicModeBJHint=

CinematicModeExBJHint=

CinematicFadeBJHint="The color values are (Red, Green, Blue).  A 100% transparent color is completely invisible."

CinematicFilterGenericBJHint="The color values are (Red, Green, Blue).  A 100% transparent color is completely invisible."

DisplayCineFilterBJHint=

PingMinimapLocForForceHint=

PingMinimapLocForForceExHint="The color values are (Red, Green, Blue).  Warning pings are always red."

CreateMinimapIconOnUnitBJHint=

CreateMinimapIconAtLocBJHint=

CreateMinimapIconBJHint=

CampaignMinimapIconUnitBJHint=

CampaignMinimapIconLocBJHint=

DestroyMinimapIconHint=

SetMinimapIconVisibleHint=

SetMinimapIconOrphanDestroyHint=

UnitAddIndicatorBJHint="The color values are (Red, Green, Blue).  A 100% transparent color is completely invisible."

DestructableAddIndicatorBJHint="The color values are (Red, Green, Blue).  A 100% transparent color is completely invisible."

ItemAddIndicatorBJHint="The color values are (Red, Green, Blue).  A 100% transparent color is completely invisible."

ClearTextMessagesBJHint=

ShowInterfaceForceOffHint="Puts the camera into letterbox mode, hiding the game interface."

ShowInterfaceForceOnHint="Puts the camera into normal (non-letterbox) mode, displaying the game interface."

SetUserControlForceOffHint=

SetUserControlForceOnHint=

EnableOcclusionBJHint="When occlusion is enabled, trees that block vision of units become transparent."

EnableWorldFogBoundaryBJHint=


// Countdown Timer actions
StartTimerBJHint=

PauseTimerBJHint=

CreateTimerDialogBJHint="Timer Windows cannot be displayed at map initialization."

DestroyTimerDialogBJHint=

TimerDialogDisplayForPlayerBJHint="Timer Windows cannot be displayed at map initialization."

TimerDialogDisplayBJHint="Timer Windows cannot be displayed at map initialization."

TimerDialogSetTitleBJHint=

TimerDialogSetTitleColorBJHint="The color values are (Red, Green, Blue).  A 100% transparent color is completely invisible."

TimerDialogSetTimeColorBJHint="The color values are (Red, Green, Blue).  A 100% transparent color is completely invisible."

//TimerDialogSetSpeedBJ="Set Timer Window Speed"
//TimerDialogSetSpeedBJ="Set the speed of ",~Timer Window," to be ",~Factor," times normal speed"
//TimerDialogSetSpeedBJHint=


// Destructable actions
CreateDestructableLocHint="The facing angle is expected in degrees, with 0 being east and 90 being north.  Use 'Last Created Destructible' to refer to this destructible."

CreateDeadDestructableLocBJHint="The facing angle is expected in degrees, with 0 being east and 90 being north.  Use 'Last Created Destructible' to refer to this destructible."

KillDestructableHint=

RemoveDestructableHint=

DestructableRestoreLifeHint=

ShowDestructableBJHint="Hidden destructibles are not displayed, but still affect pathing and visibility."

SetDestructableLifePercentBJHint=

SetDestructableLifeHint=

SetDestructableMaxLifeBJHint=

ModifyGateBJHint=

ChangeElevatorWallsHint=

ChangeElevatorHeightHint=

SetDestructableInvulnerableBJHint=

SetDestructableOccluderHeightHint=

EnumDestructablesInRectAllMultipleHint="Use 'Picked Destructible' to refer each destructible as it is picked.  This works for every destructible in the region, including dead destructibles.  Wait actions should not be used within this function.  Add actions to this function in the main display."

EnumDestructablesInCircleBJMultipleHint="Use 'Picked Destructible' to refer each destructible as it is picked.  This works for every destructible in the region, including dead destructibles.  Wait actions should not be used within this function.  Add actions to this function in the main display."

EnumDestructablesInRectAllHint="Use 'Picked Destructible' to refer each destructible as it is picked.  This works for every destructible in the region, including dead destructibles.  Wait actions should not be used within this function."

EnumDestructablesInCircleBJHint="Use 'Picked Destructible' to refer each destructible as it is picked.  This works for every destructible in the region, including dead destructibles.  Wait actions should not be used within this function."


// Dialog actions
DialogDisplayBJHint="Dialogs cannot be displayed at map initialization."

DialogSetMessageBJHint=

DialogAddButtonBJHint=

DialogClearBJHint="This clears the title and all buttons for the specified dialog."


// Environment actions
AddWeatherEffectSaveLastHint=

EnableWeatherEffectHint="You can create weather effects via the 'Environment - Create Weather Effect' action."

RemoveWeatherEffectBJHint=

TerrainDeformationCraterBJHint="Use 'Last Created Terrain Deformation' to refer to this terrain deformation.  Depth may be negative for bumps.  Permanent deformations are not preserved in saved game files."

TerrainDeformationRippleBJHint="Use 'Last Created Terrain Deformation' to refer to this terrain deformation."

TerrainDeformationWaveBJHint="Use 'Last Created Terrain Deformation' to refer to this terrain deformation.  Depth may be negative for bumps."

TerrainDeformationRandomBJHint="Use 'Last Created Terrain Deformation' to refer to this terrain deformation."

TerrainDeformationStopBJHint="The deformation will smoothly reduce to nothing over the duration."

TerrainDeformStopAllHint="This includes any terrain deformations indirectly caused by spells or abilities."

SetWaterDeformsHint="When this is turned on, terrain deformations will also apply to any water above the terrain.  This does not work with permanent deformations."

SetTerrainTypeBJHint="Use a variation of -1 to generate random variations across the area."

SetTerrainPathableBJHint="Turning pathing on causes the pathing cell to become pathable to the given type.  For example, turning 'Buildability' on makes the pathing cell buildable.  This only affects pathing restrictions caused by terrain (not doodads, units, etc.)."

SetWaterBaseColorBJHint="The color values are (Red, Green, Blue).  100% transparent water is completely invisible."

SetSkyModelHint=

SetTerrainFogExBJHint="The color values are (Red, Green, Blue)."

ResetTerrainFogBJHint=

SetBlightRectBJHint=

SetBlightRadiusLocBJHint=

// Text Tag actions
CreateTextTagLocBJHint="The color values are (Red, Green, Blue).  A 100% transparent color is completely invisible.  Use 'Floating Text - Permanent/Expires' to make this floating text temporary."

CreateTextTagUnitBJHint="Floating text created in this manner does not follow the unit's movement.  The color values are (Red, Green, Blue).  A 100% transparent color is completely invisible.  Use 'Floating Text - Permanent/Expires' to make this floating text temporary."

DestroyTextTagBJHint=

ShowTextTagForceBJHint=

SetTextTagVelocityBJHint="You can only accurately set the velocity of floating text once, when it is first created.  The angle is expected in degrees, with 0 being east and 90 being north."

SetTextTagColorBJHint="The color values are (Red, Green, Blue).  A 100% transparent color is completely invisible."

SetTextTagPosBJHint=

SetTextTagPosUnitBJHint=

SetTextTagTextBJHint=

SetTextTagSuspendedBJHint=

SetTextTagPermanentBJHint=

SetTextTagLifespanBJHint="This does not affect permanent floating text.  This sets the age at which floating text is removed and cleaned up."

SetTextTagFadepointBJHint="This does not affect permanent floating text.  This sets the age at which floating text begins fading."

SetTextTagAgeBJHint="This does not affect permanent floating text."


// Game actions
DisplayTextToForceHint="The text is shown for an amount of time that automatically increases with the text length."

DisplayTimedTextToForceHint=

PauseGameOnHint=

PauseGameOffHint=

SetGameSpeedHint="You can lock the game speed with the 'Game - Lock Game Speed' trigger action."

LockGameSpeedBJHint="This prevents the game speed from being modified.  Not even triggers can modify the game speed when it is locked."

UnlockGameSpeedBJHint="This allows the game speed to be modified again after a 'Game - Lock Game Speed' action is used."

SetMapFlagHint=

SetTimeOfDayHint="A game day is 24 hours long.  Six a.m. is 6.00, and six p.m. is 18.00."

SetTimeOfDayScalePercentBJHint="Use 100% to revert the speed to normal."

UseTimeOfDayBJHint=

ShareEverythingWithTeamHint="Two players are considered allies if they are both allied with each other."

MakeUnitsPassiveForPlayerHint="By default, the Neutral Victim player treats all other players as allies, but is treated as an enemy by all other players."

SetNextLevelBJHint="This sets a level to be started after the current game ends."

CustomVictoryBJHint=

CustomDefeatBJHint=

SaveGameHint=

SetMaxCheckpointSavesHint=

SaveGameCheckPointHint="This create a save file for the map as well as pop up a 'Saving Game' message."

SaveGameCheckPointBJHint="This trigger creates a save file for the map as pops up a "Checkpoint Reached" message. Max of 5"

LoadGameBJHint=

SaveAndLoadGameBJHint=

SaveAndChangeLevelBJHint=

RenameSaveDirectoryBJHint=

RemoveSaveDirectoryBJHint="This deletes the specified saved-game folder and all of its contents."

CopySaveGameBJHint="This action only works in response to Game Load and Game Save events, and can only be used up to 16 times per event."

SetCampaignMenuRaceBJHint=

SetMissionAvailableBJHint=

SetCampaignAvailableBJHint=

SetCinematicAvailableBJHint=

ShowCustomCampaignButtonHint=

SetAllyColorFilterStateHint="A value of 0 disables filtering.  A value of 1 enables filtering for the minimap.  A value of 2 enables filtering for the minimap and the game view."

SetCreepCampFilterStateHint=

EnableMinimapFilterButtonsHint=

EnableSelectHint="Objects can still be selected and deselected via trigger actions.  Disabling selection prevents drag-selection as well.  Selection circles are only displayed if selection is enabled."

EnableDragSelectHint=

EnablePreSelectHint=

ForceUIKeyBJHint=

ForceUICancelBJHint=

PreloadHint=

PreloadEndHint=

PreloaderHint=

BlzShowTerrainHint=

BlzShowSkyBoxHint=

BlzStartRecordingHint=

BlzEndRecordingHint=

// Machinima API
BlzHideCinematicPanelsHint="Hide the title bar, subtitle and portrait frame."

// Game Cache actions
InitGameCacheBJHint="A game cache allows you to store data between maps, or between games on a given map.  If the specified file does not exist, it will be created."

SaveGameCacheBJHint="Saves the game cache, using the same filename from which it was created.","."

StoreUnitBJHint="Use the 'Game Cache - Restore Unit' actions to load this unit from a cache.  Label and Category names should not contain spaces."

StoreRealBJHint="Use the 'Game Cache - Load Real Value' function to load this value from a cache.  Label and Category names should not contain spaces."

StoreIntegerBJHint="Use the 'Game Cache - Load Integer Value' function to load this value from a cache.  Label and Category names should not contain spaces."

StoreBooleanBJHint="Use the 'Game Cache - Load Boolean Value' function to load this value from a cache.  Label and Category names should not contain spaces."

StoreStringBJHint="Use the 'Game Cache - Load String Value' function to load this value from a cache.  Label and Category names should not contain spaces."

RestoreUnitLocFacingAngleBJHint="Use 'Last Restored Unit' to refer to the unit created by this action.  If the label is not found, no unit will be created, and 'Last Restored Unit' will have the value 'No Unit'."

RestoreUnitLocFacingPointBJHint="Use 'Last Restored Unit' to refer to the unit created by this action.  If the label is not found, no unit will be created, and 'Last Restored Unit' will have the value 'No Unit'."

ReloadGameCachesFromDiskHint=

FlushGameCacheBJHint="Clears all labels of all categories in a game cache."

FlushStoredMissionBJHint="Clears all labels of a specific category in a game cache."

// Hashtable actions
InitHashtableBJHint="A hashtable allows you to store data."

SaveRealBJHint="Use the 'Hashtable - Load Real Value' function to load this value from a hashtable."

SaveIntegerBJHint="Use the 'Hashtable - Load Integer Value' function to load this value from a hashtable."

SaveBooleanBJHint="Use the 'Hashtable - Load Boolean Value' function to load this value from a hashtable."

SaveStringBJHint="Use the 'Hashtable - Load String Value' function to load this value from a hashtable."

SavePlayerHandleBJHint="Use the 'Hashtable - Load Player' actions to load this player from a hashtable."

SaveWidgetHandleBJHint="Use the 'Hashtable - Load Widget' actions to load this widget from a hashtable."

SaveDestructableHandleBJHint="Use the 'Hashtable - Load Destructable' actions to load this destructable from a hashtable."

SaveItemHandleBJHint="Use the 'Hashtable - Load Item' actions to load this item from a hashtable."

SaveUnitHandleBJHint="Use the 'Hashtable - Load Unit' actions to load this unit from a hashtable."

SaveAbilityHandleBJHint="Use the 'Hashtable - Load Ability' actions to load this ability from a hashtable."

SaveTimerHandleBJHint="Use the 'Hashtable - Load Timer' actions to load this timer from a hashtable."

//SaveTriggerRegionHandleBJ="Save Region"
//SaveTriggerRegionHandleBJ="Save Handle Of",~Region," as ",~Value," of ",~Value," in ",~Hashtable
//SaveTriggerRegionHandleBJHint="Use the 'Hashtable - Load Region' actions to load this region from a hashtable."

SaveTriggerHandleBJHint="Use the 'Hashtable - Load Trigger' actions to load this trigger from a hashtable."

SaveTriggerConditionHandleBJHint="Use the 'Hashtable - Load Triggercondition' actions to load this triggercondition from a hashtable."

SaveTriggerActionHandleBJHint="Use the 'Hashtable - Load Triggeraction' actions to load this triggeraction from a hashtable."

SaveTriggerEventHandleBJHint="Use the 'Hashtable - Load Eventid' actions to load this eventid from a hashtable."

SaveForceHandleBJHint="Use the 'Hashtable - Load Force' actions to load this force from a hashtable."

SaveGroupHandleBJHint="Use the 'Hashtable - Load Group' actions to load this group from a hashtable."

SaveLocationHandleBJHint="Use the 'Hashtable - Load Location' actions to load this location from a hashtable."

SaveRegionHandleBJHint="Use the 'Hashtable - Load Region' actions to load this region from a hashtable."

SaveRectHandleBJHint="Use the 'Hashtable - Load Rect' actions to load this rect from a hashtable."

SaveBooleanExprHandleBJHint="Use the 'Hashtable - Load Boolexpr' actions to load this boolexpr from a hashtable."

//SaveConditionFuncHandleBJ="Save Conditionfunc Handle"
//SaveConditionFuncHandleBJ="Save Handle Of",~Conditionfunc," as ",~Value," of ",~Value," in ",~Hashtable
//SaveConditionFuncHandleBJHint="Use the 'Hashtable - Load Conditionfunc' actions to load this conditionfunc from a hashtable."

//SaveFilterFuncHandleBJ="Save Filterfunc Handle"
//SaveFilterFuncHandleBJ="Save Handle Of",~Filterfunc," as ",~Value," of ",~Value," in ",~Hashtable
//SaveFilterFuncHandleBJHint="Use the 'Hashtable - Load Filterfunc' actions to load this filterfunc from a hashtable."

SaveSoundHandleBJHint="Use the 'Hashtable - Load Sound' actions to load this sound from a hashtable."

//SaveRaceHandleBJ="Save Race Handle"
//SaveRaceHandleBJ="Save Handle Of",~Race," as ",~Value," of ",~Value," in ",~Hashtable
//SaveRaceHandleBJHint="Use the 'Hashtable - Load Race' actions to load this race from a hashtable."

SaveEffectHandleBJHint="Use the 'Hashtable - Load Effect' actions to load this effect from a hashtable."

SaveUnitPoolHandleBJHint="Use the 'Hashtable - Load Unitpool' actions to load this unitpool from a hashtable."

SaveItemPoolHandleBJHint="Use the 'Hashtable - Load Itempool' actions to load this itempool from a hashtable."

SaveQuestHandleBJHint="Use the 'Hashtable - Load Quest' actions to load this quest from a hashtable."

SaveQuestItemHandleBJHint="Use the 'Hashtable - Load Questitem' actions to load this questitem from a hashtable."

SaveDefeatConditionHandleBJHint="Use the 'Hashtable - Load Defeatcondition' actions to load this defeatcondition from a hashtable."

SaveTimerDialogHandleBJHint="Use the 'Hashtable - Load Timerdialog' actions to load this timerdialog from a hashtable."

SaveLeaderboardHandleBJHint="Use the 'Hashtable - Load Leaderboard' actions to load this leaderboard from a hashtable."

SaveMultiboardHandleBJHint="Use the 'Hashtable - Load Multiboard' actions to load this multiboard from a hashtable."

SaveMultiboardItemHandleBJHint="Use the 'Hashtable - Load Multiboarditem' actions to load this multiboarditem from a hashtable."

SaveTrackableHandleBJHint="Use the 'Hashtable - Load Trackable' actions to load this trackable from a hashtable."

SaveGameCacheHandleBJHint="Use the 'Hashtable - Load Gamecache' actions to load this gamecache from a hashtable."

SaveDialogHandleBJHint="Use the 'Hashtable - Load Dialog' actions to load this dialog from a hashtable."

SaveButtonHandleBJHint="Use the 'Hashtable - Load Button' actions to load this button from a hashtable."

//SaveVersionHandleBJ="Save Version Handle"
//SaveVersionHandleBJ="Save Handle Of",~Version," as ",~Value," of ",~Value," in ",~Hashtable
//SaveVersionHandleBJHint="Use the 'Hashtable - Load Version' actions to load this version from a hashtable."

//SaveItemTypeHandleBJ="Save Itemtype Handle"
//SaveItemTypeHandleBJ="Save Handle Of",~Itemtype," as ",~Value," of ",~Value," in ",~Hashtable
//SaveItemTypeHandleBJHint="Use the 'Hashtable - Load Itemtype' actions to load this itemtype from a hashtable."

SaveTextTagHandleBJHint="Use the 'Hashtable - Load Texttag' actions to load this texttag from a hashtable."

SaveLightningHandleBJHint="Use the 'Hashtable - Load Lightning' actions to load this lightning from a hashtable."

SaveImageHandleBJHint="Use the 'Hashtable - Load Image' actions to load this image from a hashtable."

SaveUbersplatHandleBJHint="Use the 'Hashtable - Load Ubersplat' actions to load this ubersplat from a hashtable."

SaveFogStateHandleBJHint="Use the 'Hashtable - Load Fogstate' actions to load this fogstate from a hashtable."

SaveFogModifierHandleBJHint="Use the 'Hashtable - Load Fogmodifier' actions to load this fogmodifier from a hashtable."

FlushParentHashtableBJHint="Clears all parent and child hashtables."

FlushChildHashtableBJHint="Clears all childen of a specific parent in a hashtable."

// Hero actions
SelectHeroSkillHint="This only works if the Hero has at least one skill point to spend."

SetHeroLevelHint=

SetHeroXPHint=

AddHeroXPSwappedHint=

SuspendHeroXPBJHint=

SetPlayerHandicapReviveTimeBJHint=

SetPlayerHandicapXPBJHint=

ReviveHeroLocHint="This revives a dead Hero at a spot on the map, even if the player has no altar.  You can also revive a Hero by issuing a 'Revive' order to an appropriate altar, targeting the hero you wish to revive."

ModifyHeroStatHint=

ModifyHeroSkillPointsHint=

SetReservedLocalHeroButtonsHint="Button slots reserved by this action are not used by Heroes controlled via shared unit control."

UnitAddItemSwappedHint=

UnitAddItemByIdSwappedHint=

UnitRemoveItemSwappedHint="The item is removed from the Hero and placed on the ground at the Hero's feet."

UnitRemoveItemFromSlotSwappedHint="If an item exists in the given slot, it is removed from the Hero and placed on the ground at the Hero's feet.","."

UnitUseItemTargetHint=

UnitUseItemPointLocHint=

UnitUseItemDestructableHint=

UnitUseItemHint=


// Item actions
CreateItemLocHint=

RemoveItemHint=

SetItemVisibleBJHint="This hides items on the ground.  It does not affect items held by units."

SetItemPositionLocHint=

SetItemLifeBJHint=

SetItemChargesHint="Use a value of zero to give the item unlimited charges."

SetItemInvulnerableBJHint=

SetItemPawnableHint="A pawnable item can be sold at item vendors."

SetItemDroppableBJHint="An undroppable item cannot be removed from a Hero's inventory once it has been picked up."

SetItemDropOnDeathBJHint=

SetItemPlayerBJHint="Not all items are capable of changing color."

SetItemUserDataHint="Custom values are only used in triggers, and can be used to store any integer value."

EnumItemsInRectBJMultipleHint="Use 'Picked Item' to refer each item as it is picked.  This works for every item in the region, including hidden items.  Wait actions should not be used within this function.  Add actions to this function in the main display."

EnumItemsInRectBJHint="Use 'Picked Item' to refer each item as it is picked.  Wait actions should not be used within this function."


// Image actions
CreateImageBJHint="Use 'Image - Change Render Always State' to toggle display of this image.  By default, images are not rendered.  The point specified is used as the bottom-left corner of the image.  Images need an alpha channel in order to be displayed properly."

DestroyImageHint=

ShowImageBJHint=

SetImageConstantHeightHint=

SetImagePositionBJHint="The point specified is used as the bottom-left corner of the image."

SetImageColorBJHint="The color values are (Red, Green, Blue).  A 100% transparent color is completely invisible."

SetImageRenderHint=

SetImageRenderAlwaysHint=

SetImageAboveWaterHint=

SetImageTypeHint=

// Leaderboard actions
CreateLeaderboardBJHint="Leaderboards cannot be displayed at map initialization.  If no title is specified, the title line will not be displayed."

DestroyLeaderboardBJHint=

LeaderboardSortItemsBJHint=

LeaderboardDisplayBJHint="Leaderboards cannot be displayed at map initialization."

LeaderboardSetLabelBJHint=

LeaderboardSetLabelColorBJHint="The color values are (Red, Green, Blue).  A 100% transparent color is completely invisible."

LeaderboardSetValueColorBJHint="The color values are (Red, Green, Blue).  A 100% transparent color is completely invisible."

LeaderboardSetStyleBJHint=

LeaderboardAddItemBJHint=

LeaderboardRemovePlayerItemBJHint=

LeaderboardSetPlayerItemLabelBJHint=

LeaderboardSetPlayerItemLabelColorBJHint="The color values are (Red, Green, Blue).  A 100% transparent color is completely invisible."

LeaderboardSetPlayerItemValueBJHint=

LeaderboardSetPlayerItemValueColorBJHint="The color values are (Red, Green, Blue).  A 100% transparent color is completely invisible."

LeaderboardSetPlayerItemStyleBJHint=


// Lightning actions
AddLightningLocHint=

DestroyLightningBJHint=

MoveLightningLocHint=

SetLightningColorBJHint="The color values are (Red, Green, Blue).  Color and alpha values are expected in the range of 0 to 1.  A lightning effect with 0 alpha is completely invisible."


// Melee Game actions
MeleeStartingVisibilityHint=

MeleeStartingHeroLimitHint=

MeleeGrantHeroItemsHint=

MeleeStartingResourcesHint=

MeleeClearExcessUnitsHint="Removes all Neutral Hostile units and non-building Neutral Passive units within a radius of 1024 around each used start location."

MeleeStartingUnitsHint=

MeleeStartingAIHint="Players should have starting units and resources before this action is run."

MeleeInitVictoryDefeatHint="Players should have starting units before this action is run."

MeleeStartingUnitsForPlayerHint="This action creates the same starting units that are created for melee games."


// Multiboard actions
CreateMultiboardBJHint="Multiboards cannot be displayed at map initialization."

DestroyMultiboardBJHint=

MultiboardDisplayBJHint="Multiboards cannot be displayed at map initialization."

MultiboardAllowDisplayBJHint=

MultiboardMinimizeBJHint="A minimized multiboard will only display the title."

MultiboardClearHint="This will remove all rows and columns from the multiboard."

MultiboardSetTitleTextHint=

MultiboardSetTitleTextColorBJHint="The color values are (Red, Green, Blue).  A 100% transparent color is completely invisible."

MultiboardSetRowCountHint=

MultiboardSetColumnCountHint=

MultiboardSetItemStyleBJHint="Use a column value of zero to affect all columns.  Use a row value of zero to affect all rows."

MultiboardSetItemValueBJHint="Use a column value of zero to affect all columns.  Use a row value of zero to affect all rows."

MultiboardSetItemColorBJHint="Use a column value of zero to affect all columns.  Use a row value of zero to affect all rows.  The color values are (Red, Green, Blue).  A 100% transparent color is completely invisible."

MultiboardSetItemWidthBJHint=

MultiboardSetItemIconBJHint=


// Neutral Building actions
AddResourceAmountBJHint="Use a negative number to subtract."

SetResourceAmountHint=

BlightGoldMineForPlayerHint="This replaces the Gold Mine with a Haunted Gold Mine of equal resources."

WaygateActivateBJHint=

WaygateSetDestinationLocBJHint=

SetAltMinimapIconHint="The image used for this action must be exactly 16x16 pixels in size."

UnitSetUsesAltIconBJHint="Use the 'Neutral Building - Change Special Minimap Icon' action to control the icon that is displayed."

AddItemToStockBJHint="This only affects a building if it has the 'Sell Items' ability."

AddItemToAllStockHint="This affects all buildings that have the 'Sell Items' ability."

AddUnitToStockBJHint="This only affects a building if it has the 'Sell Units' ability."

AddUnitToAllStockHint="This affects all buildings that have the 'Sell Units' ability."

RemoveItemFromStockBJHint="This only affects a building if it has the 'Sell Items' ability."

RemoveItemFromAllStockHint="This affects all buildings that have the 'Sell Items' ability."

RemoveUnitFromStockBJHint="This only affects a building if it has the 'Sell Units' ability."

RemoveUnitFromAllStockHint="This affects all buildings that have the 'Sell Units' ability."

SetItemTypeSlotsHint="This only affects a building if it has the 'Sell Items' ability."

SetAllItemTypeSlotsHint="This affects all buildings that have the 'Sell Items' ability."

SetUnitTypeSlotsHint="This only affects a building if it has the 'Sell Units' ability."

SetAllUnitTypeSlotsHint="This affects all buildings that have the 'Sell Units' ability."


// Player actions
SetPlayerStateHint=

AdjustPlayerStateBJHint="Use a negative number to subtract."

SetPlayerFlagBJHint=

SetPlayerTaxRateBJHint="Income lost in this way can be accessed using the 'Player Score' function with 'Gold/Lumber Lost To Tax' values."

EnableCreepSleepBJHint="This affects nocturnal sleep, not magical sleep."

SetPlayerAllianceStateBJHint="Note that neutral player slots cannot share their vision."

SetPlayerAllianceBJHint="This modifies one aspect of a player's alliance state, leaving others untouched.  Note that neutral player slots cannot share their vision."

SetPlayerAbilityAvailableBJHint=

SetPlayerUnitAvailableBJHint="This determines whether or not a type of unit can be trained or constructed by a player."

SetPlayerUnitMaxAllowedHint="A limit of -1 allows unlimited training of the unit-type.  A limit of 0 makes the unit-type unavailable for training."

SetPlayerMaxHeroesAllowedHint="A limit of -1 allows unlimited training of Heroes.  A limit of 0 makes Heroes unavailable for training."

SetPlayerTechResearchedSwapHint="Use 0 or 1 for simple tech, or 0..3 for three-stage upgrades."

SetPlayerTechMaxAllowedSwapHint="Use 0 or 1 for simple tech, or 0..3 for three-stage upgrades."

SetPlayerColorBJHint=

SetPlayerHandicapBJHint="Handicaps apply to the max life of all units owned or created for the player.  Heroes are less affected by handicaps than non-Hero units."

SetPlayerHandicapDamageBJHint=

SetPlayerOnScoreScreenBJHint=

SetPlayerNameHint=


// Player Group actions
ForForceMultipleHint="Use 'Picked Player' to refer each player as he/she is picked.  Wait actions should not be used within this function.  Add actions to this function in the main display."

ForForceHint="Use 'Picked Player' to refer each player as he/she is picked.  Wait actions should not be used within this function."

ForceAddPlayerSimpleHint="This adds a player to a Player Group variable.  This does not affect the player."

ForceRemovePlayerSimpleHint="This removes a player from a Player Group variable.  This does not affect the player."

ForceClearHint="This removes all players from a Player Group variable.  This does not affect the players themselves."

SetForceAllianceStateBJHint="Note that neutral player slots cannot share their vision."


// Quest actions
QuestMessageBJHint=

CreateQuestBJHint=

DestroyQuestBJHint="Destroyed quests are removed from the quest log."

QuestSetEnabledBJHint="Disabled quests are not displayed in the quest log."

QuestSetCompletedBJHint=

QuestSetFailedBJHint=

QuestSetDiscoveredBJHint=

QuestSetTitleBJHint=

QuestSetDescriptionBJHint=

CreateQuestItemBJHint=

QuestItemSetCompletedBJHint=

QuestItemSetDescriptionBJHint=

CreateDefeatConditionBJHint="Defeat conditions are displayed for every quest."

DestroyDefeatConditionBJHint="Destroyed defeat conditions are removed from the quest log."

DefeatConditionSetDescriptionBJHint=

FlashQuestDialogButtonBJHint=


// Region actions
MoveRectToLocHint="This has no effect unless the specified region is a variable."


// Selection actions
ClearSelectionForPlayerHint="Forces a player to deselect all units."

SelectGroupForPlayerBJHint="Forces a player to deselect all units and select up to 12 units of the unit group."

SelectUnitForPlayerSingleHint="Forces a player to deselect all units and select only the given unit."

SelectUnitAddForPlayerHint="Forces a player to select the given unit in addition to whatever is already selected."

SelectUnitRemoveForPlayerHint="Forces a player to deselect the given unit, retaining the rest of the current selection."

BlzEnableSelectionsHint=

ClearSelectionHint="Deselect all units."

SelectGroupBJHint="Deselects all units and selects up to 12 units of the unit group."

SelectUnitSingleHint="Deselects all units and selects only the given unit."

SelectUnitAddHint="Selects the given unit in addition to whatever is already selected."

SelectUnitRemoveHint="Deselects the given unit, retaining the rest of the current selection."


// Sound actions
PlaySoundBJHint="Sounds cannot be played at map initialization.  Use the Sound Editor to create sound variables and set their fade rates.  Note that a 3D sound must be positioned to be played."

PlaySoundAtPointBJHint="Sounds cannot be played at map initialization.  This should only be used on sounds that have the '3D Sound' flag set in the Sound Editor."

PlaySoundOnUnitBJHint="Sounds cannot be played at map initialization.  This should only be used on sounds that have the '3D Sound' flag set in the Sound Editor."

PlaySoundFromOffsetBJHint="Sounds cannot be played at map initialization.  This should not be used on 3D sounds."

StopSoundBJHint=

KillSoundWhenDoneBJHint="If the sound is already playing, it will be destroyed upon finishing."

SetSoundVolumeBJHint=

SetSoundOffsetBJHint="This should only be used on sounds that are currently playing.  This should not be used on 3D sounds."

SetSoundDistanceCutoffBJHint=

SetSoundPitchBJHint=

AttachSoundToUnitBJHint="This should only be used on sounds that have the '3D Sound' flag set in the Sound Editor."

SetSoundPositionLocBJHint="This should only be used on sounds that have the '3D Sound' flag set in the Sound Editor."

SetSoundDistancesHint="This should only be used on sounds that have the '3D Sound' flag set in the Sound Editor."

SetStackedSoundBJHint="This should only be used on sounds that have the '3D Sound' flag set in the Sound Editor."

SetAmbientDaySoundHint=

SetAmbientNightSoundHint=

EnableDawnDuskHint=

SetMapMusicIndexedBJHint="This sets the list of music to use when the current song ends.  This does not stop the currently playing music."

SetMapMusicRandomBJHint="This sets the list of music to use when the current song ends.  This does not stop the currently playing music."

ClearMapMusicBJHint="Clearing the music list will cause music to cease after the currently playing music ends."

PlayMusicBJHint=

PlayMusicExBJHint=

PlayThematicMusicBJHint="This will play a music theme once, and then resume the game music.","."

PlayThematicMusicExBJHint="This will play a music theme once, and then resume the game music."

EndThematicMusicBJHint=

StopMusicBJHint=

ResumeMusicBJHint=

SetMusicVolumeBJHint=

SetMusicOffsetBJHint=

SetThematicMusicOffsetBJHint=

VolumeGroupSetVolumeBJHint=

SetCineModeVolumeGroupsBJHint="This uses the same volume channel settings as the 'Cinematic - Cinematic Mode' action."

SetSpeechVolumeGroupsBJHint=

VolumeGroupResetBJHint=


// Special Effect actions
AddSpecialEffectLocBJHint=

AddSpecialEffectTargetUnitBJHint=

DestroyEffectBJHint=


// Trigger actions
DisableTriggerHint="Does not interrupt existing executions of the trigger, but prevents future executions."

EnableTriggerHint="Allows the trigger to be executed."

ConditionalTriggerExecuteHint="Runs the trigger's actions if its conditions are true."

TriggerExecuteHint="Runs the trigger's actions while ignoring events and conditions."

QueuedTriggerAddBJHint="Triggers added to the trigger queue are executed one at a time, in turn.  Triggers added in this manner should remove themselves using 'Trigger - Remove From Queue'."

QueuedTriggerRemoveBJHint="If a trigger is already running via the trigger queue, removing it will allow the next trigger in the trigger queue to run, but will not stop the trigger itself from finishing its execution."

QueuedTriggerClearBJHint="This will remove all triggers from the trigger queue."

QueuedTriggerClearInactiveBJHint="This will remove all pending triggers from the trigger queue.  If a trigger is currently running in the queue, it will not be removed."

AddTriggerEventHint=


// Unit actions
CreateNUnitsAtLocHint="The facing angle is expected in degrees, with 0 being east and 90 being north.  Use 'Last Created Unit Group' to refer to these created units.  Use 'Last Created Unit' to refer to exactly one of these units."

CreateNUnitsAtLocFacingLocBJHint="Use 'Last Created Unit Group' to refer to these created units.  Use 'Last Created Unit' to refer to exactly one of these units."

CreateCorpseLocBJHint="Not all units have corpse forms.  Use 'Last Created Unit' to refer to this unit."

CreatePermanentCorpseLocBJHint="Fleshy corpses will often appear skeletal for the first 8 seconds of their existence."

KillUnitHint=

RemoveUnitHint="Leaves no corpse.  If used on a Hero, that Hero cannot be resurrected."

ExplodeUnitBJHint=

ReplaceUnitBJHint="Use 'Last Replaced Unit' to refer to the replacement unit.  Note that any variables referring to the old unit will need to be updated.  Replacing a Haunted Gold Mine will usually yield a normal Gold Mine in addition to the replacement unit."

ShowUnitHideHint="Use the 'Unhide Unit' action to show a unit.  Hidden units do not show up in 'Units In Region' queries."

ShowUnitShowHint="Use the 'Hide Unit' action to hide a unit.  Hidden units do not show up in 'Units In Region' queries."

SetUnitColorHint="Changing a unit's color does not change the unit's ownership."

BlzShowUnitTeamGlowHint="Show/Hide Unit Team Glow"

SetUnitOwnerHint=

UnitShareVisionBJHint="Note that neutral player slots cannot share their vision."

SetUnitPositionLocHint=

SetUnitPositionLocFacingBJHint="The facing angle is expected in degrees, with 0 being east and 90 being north."

SetUnitPositionLocFacingLocBJHint=

SetUnitRallyPointHint=

SetUnitRallyUnitHint=

SetUnitRallyDestructableHint=

SetUnitLifePercentBJHint=

SetUnitManaPercentBJHint=

SetUnitLifeBJHint=

SetUnitManaBJHint=

BlzEndUnitAbilityCooldownHint=

BlzSetAbilityTooltipHint=

BlzSetAbilityActivatedTooltipHint=

BlzSetAbilityExtendedTooltipHint=

BlzSetAbilityActivatedExtendedTooltipHint=

BlzSetAbilityResearchTooltipHint=

BlzSetAbilityResearchExtendedTooltipHint=

BlzSetAbilityIconHint=

BlzSetAbilityActivatedIconHint=

BlzSetAbilityPosXHint=

BlzSetAbilityActivatedPosXHint=

BlzSetAbilityPosYHint=

BlzSetAbilityActivatedPosYHint=

BlzSetEventDamageHint=

BlzSetItemNameHint=

BlzSetItemDescriptionHint=

BlzSetItemTooltipHint=

BlzSetItemExtendedTooltipHint=

BlzSetItemIconPathHint=

BlzSetItemSkinHint=

BlzSetUnitMaxHPHint=

BlzSetUnitMaxManaHint=

BlzSetUnitBaseDamageHint=

BlzSetUnitDiceNumberHint=

BlzSetUnitDiceSidesHint=

BlzSetUnitAttackCooldownHint=

BlzSetUnitNameHint=

BlzSetUnitSkinHint=

// BlzSetDestructableSkin="Set Destructable Skin"
// BlzSetDestructableSkin="Set Destructable Skin of ",~Destructable," to ",~Value
// BlzSetDestructableSkinHint=

BlzSetHeroProperNameHint="Set Hero's actual name (e.g. 'Granis Darkhammer' for a Paladin)."

BlzSetUnitArmorHint=

BlzUnitHideAbilityHint=

BlzUnitDisableAbilityHint=

BlzUnitCancelTimedLifeHint=

BlzUnitInterruptAttackHint=

BlzSetUnitAbilityCooldownHint=

BlzSetUnitAbilityManaCostHint=

BlzSetSpecialEffectColorByPlayerHint=

BlzSetSpecialEffectColorHint=

BlzSetSpecialEffectAlphaHint=

BlzSetSpecialEffectScaleHint=

BlzSetSpecialEffectXHint=

BlzSetSpecialEffectYHint=

BlzSetSpecialEffectZHint=

BlzSetSpecialEffectPositionLocHint=

BlzSetSpecialEffectPositionHint=

BlzSpecialEffectClearSubAnimationsHint="Clear all sub-animations"

BlzSpecialEffectRemoveSubAnimationHint="Remove sub-animation from a special effect"

BlzSpecialEffectAddSubAnimationHint="Add sub-animation to a special effect to make a combination with the primary animation when the special effect is played"

BlzPlaySpecialEffectHint="Play Special Effect with Specific Animation (Some animations will only apply to certain special effects)"
 
// BlzPlaySpecialEffectWithTimeScale="Play Special Effect Animation with Time Scale"
// BlzPlaySpecialEffectWithTimeScale="Play Special Effect: ",~Effect,", Animation: "~Value,", Time Scale: "~Value
// BlzPlaySpecialEffectWithTimeScaleHint="Play Special Effect with Specific Animation (Some animations will only apply to certain special effects) with time scale"

BlzSetSpecialEffectHeightHint=

BlzSetSpecialEffectOrientationHint=

BlzSetSpecialEffectYawHint=

BlzSetSpecialEffectPitchHint=

BlzSetSpecialEffectRollHint=

BlzSetSpecialEffectTimeScaleHint=

BlzSetSpecialEffectTimeHint=


SetUnitInvulnerableHint=

PauseUnitBJHint="A paused unit stops and performs no orders, but remembers its orders and continues them upon being unpaused."

PauseAllUnitsBJHint="A paused unit stops and performs no orders, but remembers its orders and continues them upon being unpaused.  This action only affects units that exist when this action is run."

UnitPauseTimedLifeBJHint="Only summoned units have expiration timers."

UnitApplyTimedLifeBJHint=

SetUnitExplodedBJHint=

UnitSuspendDecayBJHint="This only works on corpses, and only after the corpses' death animations have finished."

UnitResetCooldownHint="This makes all of the unit's abilities available for use again almost immediately."

UnitSetConstructionProgressHint="This should only be used on buildings that are currently under construction."

UnitSetUpgradeProgressHint="This should only be used on buildings that are currently being upgraded.  This does not affect research-based upgrades."

UnitAddSleepPermHint="Units owned by players 1 though Max Player # never sleep."

UnitSetCanSleepBJHint="Units owned by players 1 though Max Player # never sleep."

UnitWakeUpBJHint="This affects nocturnal sleep, not magical sleep."

UnitGenerateAlarmsHint="This only affects buildings."

RescueUnitBJHint=

MakeUnitRescuableToForceBJHint=

SetUnitRescueRangeHint="To make a unit rescuable, use 'Unit - Make Rescuable' or set the unit's owner to 'Rescuable'."

SetRescueUnitColorChangeBJHint="By default, units owned by 'Rescuable' players do not change color when rescued.  This action does not affect units that have already been rescued."

SetRescueBuildingColorChangeBJHint="By default, buildings owned by 'Rescuable' players change color when rescued.  This action does not affect buildings that have already been rescued."

SetUnitUseFoodBJHint=

SetUnitFacingToFaceUnitTimedHint="Forces a unit to face another unit.  This only works if the source unit is not moving at the time."

SetUnitFacingToFaceLocTimedHint="Forces a unit to face a point.  This only works if the source unit is not moving at the time."

SetUnitFacingTimedHint="Forces a unit to face a directional angle, expected in degrees, with 0 being east.  This only works if the source unit is not moving at the time."

SetUnitMoveSpeedHint="Common movement speeds range from 150 to 300."

SetUnitPathingHint="Collision-disabled units ignore obstacles, but are still themselves treated as obstacles.","."

SetUnitAcquireRangeBJHint="The acquisition range of a unit is the distance at which the unit acquires targets to attack."

SetUnitUserDataHint="Custom values are only used in triggers, and can be used to store any integer value."

UnitRemoveBuffsBJHint=

UnitRemoveBuffsExBJHint=

UnitRemoveBuffBJHint=

UnitAddAbilityBJHint=

UnitRemoveAbilityBJHint="In most cases, removing an ability in this manner is permanent."

UnitAddTypeBJHint="The info panel for a selected unit won't update until the unit is re-selected."

UnitRemoveTypeBJHint="The info panel for a selected unit won't update until the unit is re-selected."

IssueTargetOrderHint=

IssuePointOrderLocHint=

IssueTargetDestructableOrderHint=

IssueTargetItemOrderHint=

IssueImmediateOrderHint=

IssueBuildOrderByIdLocBJHint=

IssueTrainOrderByIdBJHint="This action can be used to order a unit to upgrade itself.  A Town Hall, for example, can be upgraded by ordering it to train a Keep."

IssueUpgradeOrderByIdBJHint="Weapons and armor upgrades can be researched multiple times via this trigger action."

UnitDropItemPointLocHint=

UnitDropItemSlotBJHint="This only works if the unit is already carrying the item.  If an item exists in the slot, the items will be swapped.","."

UnitDropItemTargetBJHint=

UnitDamagePointLocHint="This does not interrupt the unit's orders.  The source unit gets credit for kills resulting from this damage."

UnitDamageTargetBJHint="This does not interrupt the unit's orders.  The source unit gets credit for kills resulting from this damage."

DecUnitAbilityLevelSwappedHint="If the unit does not have the ability, this does nothing."

IncUnitAbilityLevelSwappedHint="If the unit does not have the ability, this does nothing."

SetUnitAbilityLevelSwappedHint="If the unit does not have the ability, this does nothing."

BlzSetAbilityBooleanFieldBJHint=

BlzSetAbilityIntegerFieldBJHint=

BlzSetAbilityRealFieldBJHint=

BlzSetAbilityStringFieldBJHint=

BlzSetAbilityBooleanLevelFieldBJHint=

BlzSetAbilityIntegerLevelFieldBJHint=

BlzSetAbilityRealLevelFieldBJHint=

BlzSetAbilityStringLevelFieldBJHint=

BlzSetAbilityBooleanLevelArrayFieldBJHint=

BlzSetAbilityIntegerLevelArrayFieldBJHint=

BlzSetAbilityRealLevelArrayFieldBJHint=

BlzSetAbilityStringLevelArrayFieldBJHint=

BlzAddAbilityBooleanLevelArrayFieldBJHint=

BlzAddAbilityIntegerLevelArrayFieldBJHint=

BlzAddAbilityRealLevelArrayFieldBJHint=

BlzAddAbilityStringLevelArrayFieldBJHint=

BlzRemoveAbilityBooleanLevelArrayFieldBJHint=

BlzRemoveAbilityIntegerLevelArrayFieldBJHint=

BlzRemoveAbilityRealLevelArrayFieldBJHint=

BlzRemoveAbilityStringLevelArrayFieldBJHint=

BlzItemAddAbilityBJHint=

BlzItemRemoveAbilityBJHint=

BlzSetItemBooleanFieldBJHint=

BlzSetItemIntegerFieldBJHint=

BlzSetItemRealFieldBJHint=

BlzSetItemStringFieldBJHint=

BlzSetUnitBooleanFieldBJHint=

BlzSetUnitIntegerFieldBJHint=

BlzSetUnitRealFieldBJHint=

BlzSetUnitStringFieldBJHint=

BlzSetUnitWeaponBooleanFieldBJHint=

BlzSetUnitWeaponIntegerFieldBJHint=

BlzSetUnitWeaponRealFieldBJHint=

BlzSetUnitWeaponStringFieldBJHint=

// Unit Group actions
ForGroupMultipleHint="Use 'Picked Unit' to refer each unit as it is picked.  This works for every unit in the group, including dead units.  Wait actions should not be used within this function.  Add actions to this function in the main display."

ForGroupHint="Use 'Picked Unit' to refer each unit as it is picked.  This works for every unit in the group, including dead units.  Wait actions should not be used within this function."

GroupAddUnitSimpleHint="This adds a unit to a Unit Group variable.  This does not affect the unit itself."

GroupAddGroupHint="This adds all units of a unit group to a Unit Group variable.  This does not affect the units themselves."

GroupRemoveUnitSimpleHint="This removes a unit from a Unit Group variable.  This does not affect the unit itself."

GroupRemoveGroupHint="This removes all units of a unit group from a Unit Group variable.  This does not affect the units themselves."

GroupClearHint="This removes all units from a Unit Group variable.  This does not affect the units themselves."

GroupTargetOrderHint="This will issue an order to at most 12 units from the specified unit group.  Note that 'Right-Click' orders issued this way do not always behave as they do when issued to units in-game."

GroupPointOrderLocHint="This will issue an order to at most 12 units from the specified unit group."

GroupTargetDestructableOrderHint="This will issue an order to at most 12 units from the specified unit group."

GroupTargetItemOrderHint="This will issue an order to at most 12 units from the specified unit group."

GroupImmediateOrderHint="This will issue an order to at most 12 units from the specified unit group."

GroupTrainOrderByIdBJHint="This action can also be used to order a unit to upgrade itself.  A Town Hall, for example, can be upgraded by ordering it to train a Keep.  This will issue an order to at most 12 units from the specified unit group."


// Ubersplat actions
CreateUbersplatBJHint="The color values are (Red, Green, Blue).  A 100% transparent color is completely invisible.  Use 'Ubersplat - Change Render Always State' to toggle display of this ubersplat.  By default, ubersplats are not rendered."

DestroyUbersplatHint=

ResetUbersplatHint=

FinishUbersplatHint=

ShowUbersplatBJHint=

SetUbersplatRenderHint=

SetUbersplatRenderAlwaysHint=


// Visibility actions
FogEnableOnHint=

FogEnableOffHint=

FogMaskEnableOnHint=

FogMaskEnableOffHint=

CreateFogModifierRectBJHint=

CreateFogModifierRadiusLocBJHint=

FogModifierStartHint=

FogModifierStopHint=

DestroyFogModifierHint=


// Obsolete actions
//AddPerfLogLabel="** AddPerfLogLabel **"
//AddPerfLogLabel="** AddPerfLogLabel(",~Label,") **"
//AddPerfLogLabelHint="** This is for debugging purposes only - remove before ship. **"

//Cheat="** Cheat **"
//Cheat="** Cheat(",~Label,") **"
//CheatHint="** This is for debugging purposes only - remove before ship. **"



//***************************************************************************
[TriggerCallStrings]

// returns string
ParseTagsHint="Parse String with Tags"

// returns boolean
SetSoundFacialAnimationLabelHint="Set Facial Animation Label"

// returns boolean
SetSoundFacialAnimationGroupLabelHint="Set Facial Animation Label"

// returns boolean
SetSoundFacialAnimationSetFilepathHint="Set Facial Animation Label"

// returns boolean
BlzIsTargetIndicatorEnabledHint="Target Indicator is normally used in cinematic conversation as blinking circles to indicate who's speaking now"

SkinManagerGetLocalPathHint=

IsDestructableAliveBJHint=

IsDestructableDeadBJHint=

IsDestructableInvulnerableBJHint=

IsPointBlightedBJHint=

IsTerrainPathableBJHint="Terrain pathing is off if it is not pathable to the given pathing type.  For example, 'Buildability' is off if the pathing cell is unbuildable.  Use 'Environment - Turn Terrain Pathing On/Off' to change terrain pathing."

IsMapFlagSetHint=

IsCustomCampaignButtonVisibileHint=

GetCreepCampFilterStateHint=

SaveGameExistsHint=

GetLocalizedStringHint=

GetStoredBooleanBJHint="If the label is not found, this function returns False."

HaveStoredValueHint=

HaveSavedValueHint=

UnitHasItemHint=

UnitHasItemOfTypeBJHint=

IsSuspendedXPHint="Use the 'Hero - Enable/Disable Experience' action to disable a Hero's experience."

CheckItemStatusHint=

CheckItemcodeStatusHint=

IsItemHiddenBJHint="Items held by units are considered hidden."

IsItemOwnedHint="Any item in a unit's inventory is considered owned, even if the owner is dead."

RectContainsItemHint="An owned item is not considered to be in any regions."

IsItemInvulnerableHint=

LeaderboardHasPlayerItemBJHint=

IsMultiboardDisplayedHint=

IsMultiboardMinimizedHint=

WaygateIsActiveBJHint=

IsPlayerFlagSetBJHint=

IsPlayerAllyHint=

IsPlayerEnemyHint=

GetPlayerAllianceHint=

IsPlayerInForceHint=

IsQuestItemCompletedHint=

IsQuestEnabledHint=

IsQuestCompletedHint=

IsQuestFailedHint=

IsQuestDiscoveredHint=

IsQuestRequiredHint=

RectContainsLocHint=

IsTriggerEnabledHint=

TriggerEvaluateHint=

IsTriggerQueuedBJHint="Use 'Trigger - Add To Trigger Queue' and 'Trigger - Remove From Trigger Queue' to manipulate the trigger queue."

IsTriggerQueueEmptyBJHint="Use 'Trigger - Add To Trigger Queue' and 'Trigger - Remove From Trigger Queue' to manipulate the trigger queue."

IsUnitTypeHint=

IsUnitIdTypeHint=

IsUnitInGroupHint=

RectContainsUnitHint=

IsUnitAliveBJHint=

IsUnitDeadBJHint=

IsUnitPausedBJHint=

IsUnitHiddenBJHint="A unit can be hidden with the 'Unit - Hide' trigger action, or by placing the unit into a transport, Soul Gem, altar, etc."

IsUnitIllusionBJHint=

UnitCanSleepPermHint="Units owned by players 1 though Max Player # never sleep."

UnitCanSleepBJHint="Units owned by players 1 though Max Player # never sleep."

UnitIsSleepingBJHint="Units owned by players 1 though Max Player # never sleep."

DoesUnitGenerateAlarmsHint=

IsUnitLoadedBJHint=

IsUnitInTransportBJHint=

IsUnitSelectedHint=

IsUnitAllyHint=

IsUnitEnemyHint=

UnitHasBuffBJHint=

IsUnitGroupEmptyBJHint="This is true if the unit group contains no units."

IsUnitGroupInRectBJHint="This is true if every unit in the unit group is in the given region."

IsUnitGroupDeadBJHint="This is true if every unit in the unit group is dead."

IsFogEnabledHint=

IsFogMaskEnabledHint=

IsUnitVisibleHint=

IsUnitInvisibleHint=

IsUnitFoggedHint=

IsUnitMaskedHint=

IsLocationVisibleToPlayerHint=

IsLocationFoggedToPlayerHint=

IsLocationMaskedToPlayerHint=

BlzIsUnitSelectableHint=

BlzIsUnitInvulnerableHint=

BlzIsSelectionEnabledHint=

BlzIsSelectionCircleEnabledHint=

BlzIsLastInstanceObjectFunctionSuccessfulHint=

BlzGetAbilityBooleanFieldHint=

BlzGetAbilityBooleanLevelFieldHint=

BlzGetAbilityBooleanLevelArrayFieldHint=

BlzSetAbilityBooleanFieldHint=

BlzSetAbilityIntegerFieldHint=

BlzSetAbilityRealFieldHint=

BlzSetAbilityStringFieldHint=

BlzSetAbilityBooleanLevelFieldHint=

BlzSetAbilityIntegerLevelFieldHint=

BlzSetAbilityRealLevelFieldHint=

BlzSetAbilityStringLevelFieldHint=

BlzSetAbilityBooleanLevelArrayFieldHint=

BlzSetAbilityIntegerLevelArrayFieldHint=

BlzSetAbilityRealLevelArrayFieldHint=

BlzSetAbilityStringLevelArrayFieldHint=

BlzAddAbilityBooleanLevelArrayFieldHint=

BlzAddAbilityIntegerLevelArrayFieldHint=

BlzAddAbilityRealLevelArrayFieldHint=

BlzAddAbilityStringLevelArrayFieldHint=

BlzRemoveAbilityBooleanLevelArrayFieldHint=

BlzRemoveAbilityIntegerLevelArrayFieldHint=

BlzRemoveAbilityRealLevelArrayFieldHint=

BlzRemoveAbilityStringLevelArrayFieldHint=

BlzItemAddAbilityHint=

BlzItemRemoveAbilityHint=

BlzGetItemBooleanFieldHint=

BlzSetItemBooleanFieldHint=

BlzSetItemIntegerFieldHint=

BlzSetItemRealFieldHint=

BlzSetItemStringFieldHint=

BlzGetUnitBooleanFieldHint=

BlzSetUnitBooleanFieldHint=

BlzSetUnitIntegerFieldHint=

BlzSetUnitRealFieldHint=

BlzSetUnitStringFieldHint=

BlzGetUnitWeaponBooleanFieldHint=

BlzSetUnitWeaponBooleanFieldHint=

BlzSetUnitWeaponIntegerFieldHint=

BlzSetUnitWeaponRealFieldHint=

BlzSetUnitWeaponStringFieldHint=

// returns integer
OperatorIntHint=

GetForLoopIndexAHint=

GetForLoopIndexBHint=

StringLengthHint=

R2IHint=

S2IHint=

BlzS2FourCCHint="Convert String to Integer FourCC code"

GetElevatorHeightHint="An elevator's height can be changed using the 'Destructible - Set Elevator Height' action."

GetTerrainCliffLevelBJHint="Cliff level values start at zero."

GetTerrainVarianceBJHint=

GetLearnedSkillLevelHint=

GetPlayersHint=

GetTeamsHint=

GetAllyColorFilterStateHint="A value of 0 indicates that filtering is disabled.  A value of 1 indicates that filtering is only enabled for the minimap.  A value of 2 indicates that filtering is enabled for the minimap and the game view."

GetTournamentFinishNowRuleHint="A value of 1 indicates that the game is in a bracket and therefore cannot end in a draw.  Any other value indicates that this is a preliminary game and may end in a draw."

GetTournamentScoreHint="This returns the melee score for a player, which is used by melee games to determine victory/defeat/draw if a tournament game runs too long."

BlzGetAbilityPosXHint=

BlzGetAbilityActivatedPosXHint=

BlzGetAbilityPosYHint=

BlzGetAbilityActivatedPosYHint=

GetStoredIntegerBJHint="If the label is not found, this function returns 0."

GetHeroLevelHint=

GetHeroXPHint=

GetHeroStatBJHint=

GetHeroSkillPointsHint=

GetItemLevelHint=

GetItemChargesHint="Items with unlimited charges will return zero."

GetItemUserDataHint="Use 'Item - Set Custom Value' to set the custom value of an item."

LeaderboardGetPlayerIndexBJHint=

GetRandomIntHint=

IMinBJHint=

IMaxBJHint=

IAbsBJHint="Calculates the absolute value of a number."

ISignBJHint="Calculates the sign of a number.  The sign of a negative number is -1.  The sign of a nonnegative number is 1."

ModuloIntegerHint="Calculates the remainder of a division.  Example: 12 mod 5 = 2."

MultiboardGetRowCountHint=

MultiboardGetColumnCountHint=

GetResourceAmountHint="This is for use with Gold Mines."

GetPlayerStateHint=

GetPlayerTaxRateBJHint="The tax rate value is a percentage of total income (0-100)."

GetPlayerScoreHint=

GetConvertedPlayerIdHint="Player numbers range from 1 to 28."

GetPlayerStructureCountHint=

GetPlayerUnitCountHint=

GetPlayerTechCountSimpleHint="Returns 0 or 1 for simple tech, or 0..3 for three-stage upgrades."

GetPlayerTechMaxAllowedSwapHint="Returns 0 or 1 for simple tech, or 0..3 for three-stage upgrades."

GetPlayerTeamHint=

CountPlayersInForceBJHint=

BlzGetTriggerPlayerMouseButtonHint=""

CountUnitsInGroupHint=

CountLivingPlayerUnitsOfTypeIdHint=

GetUnitFoodUsedHint=

GetUnitFoodMadeHint=

GetFoodUsedHint=

GetFoodMadeHint=

GetUnitPointValueHint=

GetUnitPointValueByTypeHint=

GetUnitUserDataHint="Use 'Unit - Set Custom Value' to set the custom value of a unit."

GetUnitLevelHint="This may be used for heroes and regular units."

GetUnitAbilityLevelSwappedHint="If the unit does not have the ability, the result will be zero."

UnitInventoryCountHint=

UnitInventorySizeBJHint=

UnitCountBuffsExBJHint=

BlzGetUnitMaxHPHint=

BlzGetUnitMaxManaHint=

BlzGetUnitBaseDamageHint=

BlzGetUnitDiceNumberHint=

BlzGetUnitDiceSidesHint=

GetTriggerEvalCountHint=

GetTriggerExecCountHint=

QueuedTriggerCountBJHint="Use 'Trigger - Add To Trigger Queue' and 'Trigger - Remove From Trigger Queue' to manipulate the trigger queue."

BlzGetUnitAbilityManaCostHint=

BlzGetAbilityManaCostHint=

BlzGetAbilityIntegerFieldHint=

BlzGetAbilityIntegerLevelFieldHint=

BlzGetAbilityIntegerLevelArrayFieldHint=

BlzGetUnitIntegerFieldHint=

BlzGetUnitWeaponIntegerFieldHint=

BlzGetItemIntegerFieldHint=

BlzBitOrHint=Bit Or Operation (x | y)

BlzBitAndHint=Bit And Operation (x & y)

BlzBitXorHint=Bit Xor Operation (x ^ y)

BlzGetUnitSkinHint=

BlzGetItemSkinHint=

// BlzGetDestructableSkin="Skin"
// BlzGetDestructableSkin="Skin ID of ",~Destructable
// BlzGetDestructableSkinHint=

// returns real
OperatorRealHint=

GetLocationXHint=

GetLocationYHint=

CameraSetupGetFieldSwapHint=

GetCameraFieldHint=

GetCameraTargetPositionXHint=

GetCameraTargetPositionYHint=

GetCameraTargetPositionZHint=

GetCameraEyePositionXHint=

GetCameraEyePositionYHint=

GetCameraEyePositionZHint=

GetLastTransmissionDurationBJHint="This is the length, in seconds, of the last used 'Cinematic - Transmission' action."

I2RHint=

S2RHint=

Deg2RadHint=

Rad2DegHint=

TimerGetElapsedHint=

TimerGetRemainingHint=

TimerGetTimeoutHint=

GetDestructableLifeHint="Destructibles lose life when attacked or harvested.  Like units, destructibles die when their life reaches 0."

GetDestructableMaxLifeHint="Destructibles lose life when attacked or harvested.  Like units, destructibles die when their life reaches 0."

GetDestructableOccluderHeightHint=

GetEventDamageHint="When responding to a 'Takes Damage' unit event, this refers to the amount of damage being taken."

GetTournamentFinishSoonTimeRemainingHint="When responding to a 'Game must end soon' tournament event, this returns the amount of time remaining, in real-time seconds."

GetTimeOfDayHint="This is in game time, not real time."

GetTimeOfDayScalePercentBJHint="This returns the time of day speed as a percentage of the default time of day speed."

GetStoredRealBJHint="If the label is not found, this function returns 0."

LoadIntegerBJHint="If the label is not found, this function returns 0.","."

LoadRealBJHint="If the label is not found, this function returns 0.","."

LoadStringBJHint="If the label is not found, this function returns an empty string.","."

LoadBooleanBJHint="If the label is not found, this function returns False.","."

LoadPlayerHandleBJHint="If the label is not found, this function returns NULL.","."

LoadWidgetHandleBJHint="If the label is not found, this function returns NULL.","."

LoadDestructableHandleBJHint="If the label is not found, this function returns NULL.","."

LoadItemHandleBJHint="If the label is not found, this function returns NULL.","."

LoadUnitHandleBJHint="If the label is not found, this function returns NULL.","."

LoadAbilityHandleBJHint="If the label is not found, this function returns NULL.","."

LoadTimerHandleBJHint="If the label is not found, this function returns NULL.","."

///LoadTriggerRegionHandleBJ="Load Region Handle"
///LoadTriggerRegionHandleBJ="Load ",~Value," of ",~Value," in ",~Hashtable
///LoadTriggerRegionHandleBJHint="If the label is not found, this function returns NULL."

LoadTriggerHandleBJHint="If the label is not found, this function returns NULL.","."

LoadTriggerConditionHandleBJHint="If the label is not found, this function returns NULL.","."

LoadTriggerActionHandleBJHint="If the label is not found, this function returns NULL.","."

LoadTriggerEventHandleBJHint="If the label is not found, this function returns NULL.","."

LoadForceHandleBJHint="If the label is not found, this function returns NULL.","."

LoadGroupHandleBJHint="If the label is not found, this function returns NULL.","."

LoadLocationHandleBJHint="If the label is not found, this function returns NULL.","."

LoadRegionHandleBJHint="If the label is not found, this function returns NULL.","."

LoadRectHandleBJHint="If the label is not found, this function returns NULL.","."

LoadBooleanExprHandleBJHint="If the label is not found, this function returns NULL.","."

//LoadConditionFuncHandleBJ="Load Conditionfunc Handle"
//LoadConditionFuncHandleBJ="Load ",~Value," of ",~Value," in ",~Hashtable
//LoadConditionFuncHandleBJHint="If the label is not found, this function returns NULL."

//LoadFilterFuncHandleBJ="Load Filterfunc Handle"
//LoadFilterFuncHandleBJ="Load ",~Value," of ",~Value," in ",~Hashtable
//LoadFilterFuncHandleBJHint="If the label is not found, this function returns NULL."

LoadSoundHandleBJHint="If the label is not found, this function returns NULL.","."

//LoadRaceHandleBJ="Load Race Handle"
//LoadRaceHandleBJ="Load ",~Value," of ",~Value," in ",~Hashtable
//LoadRaceHandleBJHint="If the label is not found, this function returns NULL."

LoadEffectHandleBJHint="If the label is not found, this function returns NULL.","."

LoadUnitPoolHandleBJHint="If the label is not found, this function returns NULL.","."

LoadItemPoolHandleBJHint="If the label is not found, this function returns NULL.","."

LoadQuestHandleBJHint="If the label is not found, this function returns NULL.","."

LoadQuestItemHandleBJHint="If the label is not found, this function returns NULL.","."

LoadDefeatConditionHandleBJHint="If the label is not found, this function returns NULL.","."

LoadTimerDialogHandleBJHint="If the label is not found, this function returns NULL.","."

LoadLeaderboardHandleBJHint="If the label is not found, this function returns NULL.","."

LoadMultiboardHandleBJHint="If the label is not found, this function returns NULL.","."

LoadMultiboardItemHandleBJHint="If the label is not found, this function returns NULL.","."

LoadTrackableHandleBJHint="If the label is not found, this function returns NULL.","."

LoadDialogHandleBJHint="If the label is not found, this function returns NULL.","."

LoadButtonHandleBJHint="If the label is not found, this function returns NULL.","."

//LoadVersionHandleBJ="Load Version Handle"
//LoadVersionHandleBJ="Load ",~Value," of ",~Value," in ",~Hashtable
//LoadVersionHandleBJHint="If the label is not found, this function returns NULL."

//LoadItemTypeHandleBJ="Load Itemtype Handle"
//LoadItemTypeHandleBJ="Load ",~Value," of ",~Value," in ",~Hashtable
//LoadItemTypeHandleBJHint="If the label is not found, this function returns NULL."

LoadTextTagHandleBJHint="If the label is not found, this function returns NULL."

LoadLightningHandleBJHint="If the label is not found, this function returns NULL.","."

LoadImageHandleBJHint="If the label is not found, this function returns NULL.","."

LoadUbersplatHandleBJHint="If the label is not found, this function returns NULL.","."

LoadFogStateHandleBJHint="If the label is not found, this function returns NULL.","."

LoadFogModifierHandleBJHint="If the label is not found, this function returns NULL.","."

GetItemLifeBJHint=

GetLightningColorRBJHint="This returns a value between 0 and 1.  Use 'Lightning - Set Lightning Effect Color' to change the color of a Lightning Effect."

GetLightningColorGBJHint="This returns a value between 0 and 1.  Use 'Lightning - Set Lightning Effect Color' to change the color of a Lightning Effect."

GetLightningColorBBJHint="This returns a value between 0 and 1.  Use 'Lightning - Set Lightning Effect Color' to change the color of a Lightning Effect."

GetLightningColorABJHint="This returns a value between 0 and 1.  A value of 0 corresponds to a completely invisible lightning effect.  Use 'Lightning - Set Lightning Effect Color' to change the alpha value of a Lightning Effect."

GetRandomRealHint=

GetRandomDirectionDegHint="This is a random real number in the range of 0 to 360, for use as an angle or a unit facing."

GetRandomPercentageBJHint="This is a random real number in the range of 0 to 100, for use as a percentage."

DistanceBetweenPointsHint="Returns the Euclidean distance between two points, ignoring height."

AngleBetweenPointsHint="Returns the angle of a line from one point to another."

RMinBJHint=

RMaxBJHint=

RAbsBJHint="Calculates the absolute value of a number."

RSignBJHint="Calculates the sign of a number.  The sign of a negative number is -1.  The sign of a nonnegative number is 1."

ModuloRealHint="Calculates the remainder of a division.  Example: 9.0 mod 2.5 = 1.5."

PowHint=

SquareRootHint=

SinBJHint="The angle specified is expected to be in degrees."

CosBJHint="The angle specified is expected to be in degrees."

TanBJHint="The angle specified is expected to be in degrees."

AsinBJHint="The angle returned is in degrees."

AcosBJHint="The angle returned is in degrees."

AtanBJHint="The angle returned is in degrees."

Atan2BJHint="The angle returned is in degrees."

GetPlayerHandicapReviveTimeBJHint="Revive Time rates are specified as percentages, with 100% being normal."

GetPlayerHandicapXPBJHint="Experience rates are specified as percentages, with 100% being normal."

GetPlayerHandicapBJHint="Handicap values are specified as percentages, with 100% being normal."

BlzGetTriggerPlayerMouseXHint=

BlzGetTriggerPlayerMouseYHint=

BlzGetTriggerPlayerMousePositionHint=

GetRectCenterXHint=

GetRectCenterYHint=

GetRectMinXHint=

GetRectMinYHint=

GetRectMaxXHint=

GetRectMaxYHint=

GetRectWidthBJHint=

GetRectHeightBJHint=

GetSoundDurationBJHint="This returns the duration of a sound, in seconds."

GetSoundFileDurationBJHint="This returns the duration of a music score, in seconds."

GetUnitStateSwapHint=

GetUnitLifePercentHint=

GetUnitManaPercentHint=

GetUnitFacingHint="The angle returned is in degrees, with 0 facing east."

GetUnitMoveSpeedHint="Movement speeds commonly range from 150 to 300."

GetUnitDefaultMoveSpeedHint="Movement speeds commonly range from 150 to 300."

GetUnitAcquireRangeHint=

GetUnitDefaultAcquireRangeHint=

GetUnitTurnSpeedHint="A unit's turn speed determines how quickly the unit changes direction.  Turn speed values are expected to be between 0 and 1, with smaller numbers indicating slower turning rates."

GetUnitDefaultTurnSpeedHint="A unit's turn speed determines how quickly the unit changes direction.  Turn speed values are expected to be between 0 and 1, with smaller numbers indicating slower turning rates."

GetUnitPropWindowBJHint=

GetUnitDefaultPropWindowBJHint=

GetUnitFlyHeightHint="Only flying units use flying heights."

GetUnitDefaultFlyHeightHint=

BlzGetUnitAttackCooldownHint=

BlzGetUnitArmorHint=

BlzGetAbilityCooldownHint=

BlzGetUnitAbilityCooldownHint=

BlzGetUnitAbilityCooldownRemainingHint=

BlzGetUnitCollisionSizeHint=

BlzGetLocalUnitZHint=

BlzGetLocalSpecialEffectXHint=

BlzGetLocalSpecialEffectYHint=

BlzGetLocalSpecialEffectZHint=

BlzGetAbilityRealFieldHint=

BlzGetAbilityRealLevelFieldHint=

BlzGetAbilityRealLevelArrayFieldHint=

BlzGetUnitRealFieldHint=

BlzGetUnitWeaponRealFieldHint=

BlzGetItemRealFieldHint=

// returns string
OperatorStringHint=

SubStringBJHint="Example:  Substring(''Grunts stink'', 2, 4) = ''run''."

GetHandleIdBJHint="Creates a key from a handle for use in the hashtable."

StringHashBJHint="Creates a key from a string for use in the hashtable."

I2SHint=

R2SHint=

R2SWHint="Examples:  String(1.234, 7, 2) = ''   1.23''.  String(1.234, 2, 5) = ''1.23400''."

OrderId2StringBJHint="Example order strings:  ''harvest'', ''move'', ''smart'', ''attack''."

UnitId2StringBJHint=

BlzFourCC2SHint="Convert Integer FourCC code to string"

StringIdentityHint="Use this to make sure the given string will be externalized in the map string file (war3map.wts)."

StringCaseHint="All letters in the string will be changed to the selected case."

GetDestructableNameHint=

GetEventPlayerChatStringHint=

GetEventPlayerChatStringMatchedHint=

GetSaveBasicFilenameHint="When responding to a 'Game - Game Save' event, this refers to the name of the file being saved."

GetAbilityNameHint=

GetAbilityEffectBJHint="This returns the model file path of an ability's effect art."

GetAbilitySoundBJHint=

BlzGetAbilityTooltipHint=

BlzGetAbilityActivatedTooltipHint=

BlzGetAbilityExtendedTooltipHint=

BlzGetAbilityActivatedExtendedTooltipHint=

BlzGetAbilityResearchTooltipHint=

BlzGetAbilityResearchExtendedTooltipHint=

BlzGetAbilityIconHint=

BlzGetAbilityActivatedIconHint=

GetStoredStringBJHint="If the label is not found, this function returns an empty string."

GetHeroProperNameHint="Calling this on a hero will return his actual name (e.g. 'Granis Darkhammer' for a Paladin)."

GetItemNameHint=

BlzGetItemDescriptionHint=

BlzGetItemTooltipHint=

BlzGetItemExtendedTooltipHint=

BlzGetItemIconPathHint=

MultiboardGetTitleTextHint=

GetPlayerNameHint=

GetTriggerNameHint="Returns the name, as entered in the editor, of the trigger which contains this function."

GetUnitNameHint="This returns the internal name of a unit, not the proper name of units or Heroes."

BlzGetAbilityStringFieldHint=

BlzGetAbilityStringLevelFieldHint=

BlzGetAbilityStringLevelArrayFieldHint=

BlzGetUnitStringFieldHint=

BlzGetUnitWeaponStringFieldHint=

BlzGetItemStringFieldHint=

// returns location
GetRectCenterHint=

GetRandomLocInRectHint=

OffsetLocationHint="The offset values are (X, Y)."

PolarProjectionBJHint=

CameraSetupGetDestPositionLocHint=

GetCameraTargetPositionLocHint=

GetCameraEyePositionLocHint=

LocationHint=

GetDestructableLocHint=

GetOrderPointLocHint="When responding to an 'Is Issued An Order Targeting A Point' unit event, this refers to the target of the order."

GetSpellTargetLocHint="When responding to 'Channeling/Casting/etc. casting an ability' unit events, this refers to the target point of the ability being cast."

GetItemLocHint=

WaygateGetDestinationLocBJHint=

GetPlayerStartLocationLocHint=

GetUnitLocHint=

GetUnitRallyPointHint="If the unit has no rally-point set, the result will be (0,0)"


// returns rect
GetCurrentCameraBoundsMapRectBJHint="This is the area to which the camera target is currently restricted."

GetCameraBoundsMapRectHint="This is the area to which the camera target is restricted at map initialization."

GetPlayableMapRectHint="This is the area to which units are restricted.  This area typically extends just beyond the camera bounds."

GetEntireMapRectHint="This is the entire map, including areas which cannot normally be reached by units."

OffsetRectBJHint="The offset values are (X, Y).","."

RectFromCenterSizeBJHint="The size values are (Width, Height)."

RectHint="Choose four coordinates (min X, min Y, max X, max Y) to define a rectangular region on the map."

RectFromLocHint="Choose two points to define a rectangular region on the map."


// returns unit
GetLastCreatedUnitHint="This is the last unit created via a 'Unit - Create' trigger action."

GetLastRestoredUnitBJHint="This is the last unit restored via a 'Game Cache - Restore Unit' trigger action."

GetLastReplacedUnitBJHint="This is the last unit created via a 'Unit - Replace' trigger action."

GetLastHauntedGoldMineHint="This is the last Haunted Gold Mine created via a 'Neutral Building - Haunt Gold Mine (Instantly)' trigger action."

GetEnumUnitHint="When using the 'Pick Every Unit...' action, this refers to each unit as it is picked."

GetFilterUnitHint="Use this to refer to the unit being considered for 'Units Matching Condition' functions."

GroupPickRandomUnitHint=

GetAttackedUnitBJHint="When responding to an 'Is Attacked' unit event, this refers to the unit that is being attacked."

GetAttackerHint="When responding to an 'Is Attacked' unit event, this refers to the attacking unit."

GetBuyingUnitHint="When responding to 'Sells A Unit', 'Sells An Item', or 'Pawns An Item' unit events, this refers to the unit doing the buying."

GetCancelledStructureHint="When responding to a 'Cancels Construction' unit event, this refers to the unit whose construction has been cancelled."

GetSpellAbilityUnitHint="When responding to 'Channeling/Casting/etc. casting an ability' unit events, this refers to the unit casting the ability."

GetConstructedStructureHint="When responding to a 'Finishes Construction' unit event, this refers to the unit whose construction has finished."

GetConstructingStructureHint="When responding to a 'Begins Construction' unit event, this refers to the unit whose construction has begun."

GetEventDamageSourceHint="When responding to a 'Takes Damage' unit event, this refers to the source of damage being dealt."

GetDecayingUnitHint="When responding to a 'Decays' unit event, this refers to the unit that is decaying."

GetDyingUnitHint="When responding to a 'Dies' unit event, this refers to the unit that is dying."

GetEnteringUnitHint="When responding to a 'Unit Enters Region' unit event, this refers to the unit entering the region."

GetManipulatingUnitHint="When responding to 'Uses/Acquires/Loses An Item' unit events, this refers to the Hero that is manipulating the item."

GetKillingUnitBJHint="When responding to a 'Dies' unit event, this refers to the killer of the dying unit.  In cases where a unit dies from a source other than a killing unit, this returns 'No unit'."

GetLearningUnitHint="When responding to a 'Learns A Skill' unit event, this refers to the unit learning the skill."

GetLeavingUnitHint="When responding to a 'Unit Leaves Region' event, this refers to the unit leaving the region."

GetLevelingUnitHint="When responding to a 'Gains A Level' unit event, this refers to the unit gaining the level."

GetLoadedUnitBJHint="When responding to an 'Is Loaded Into A Transport' unit event, this refers to the unit that is being loaded."

GetOrderedUnitHint="When responding to an 'Is Issued An Order' unit event, this refers to the unit receiving the order."

GetChangingUnitHint="When responding to a 'Changes Owner' unit event, this refers to the unit whose ownership has changed."

GetResearchingUnitHint="When responding to 'Begins/Cancels/Finishes Research' unit events, this refers to the unit doing the research."

GetRevivableUnitHint="When responding to a 'Becomes Revivable' unit event, this refers to the unit that has become available for revival."

GetRevivingUnitHint="When responding to 'Begins/Cancels/Finishes Reviving' unit events, this refers to the unit being revived."

GetSellingUnitHint="When responding to 'Sells A Unit', 'Sells An Item', or 'Pawns An Item' unit events, this refers to the unit doing the selling."

GetSoldUnitHint="When responding to a 'Sells A Unit' unit event, this refers to the unit being sold."

GetSummonedUnitHint="When responding to a 'Spawns A Summoned Unit' unit event, this refers to the unit being summoned."

GetSummoningUnitHint="When responding to a 'Spawns A Summoned Unit' unit event, this refers to the unit spawning the summoned unit."

GetOrderTargetUnitHint="When responding to an 'Is Issued An Order Targeting An Object' unit event with a unit target, this refers to the target of the order."

GetSpellTargetUnitHint="When responding to 'Channeling/Casting/etc. casting an ability' unit events with a unit target, this refers to the target of the ability being cast."

GetEventTargetUnitHint="When responding to an 'Acquires A Target' unit event, this refers to the target being acquired."

GetTrainedUnitHint="When responding to a 'Finishes Training A Unit' unit event, this refers to the unit that was trained."

GetTransportUnitBJHint="When responding to an 'Is Loaded Into A Transport' unit event, this refers to the transport that loaded the unit."

GetTriggerUnitHint=

GetUnitRallyUnitHint="If the unit does not have a rally-point set to a unit, this will return 'No unit'."


// returns unitcode
GetUnitTypeIdHint=

ChooseRandomCreepBJHint="Use -1 for any level."

ChooseRandomNPBuildingBJHint=

String2UnitIdBJHint=

GetTrainedUnitTypeHint="When responding to 'Begins/Cancels/Finishes Training A Unit' unit events, this refers to the unit-type of the unit that is being trained."


// returns ordercode
String2OrderIdBJHint="Example order strings:  ''harvest'', ''move'', ''smart'', ''attack''."

UnitId2OrderIdBJHint=

GetIssuedOrderIdBJHint="When responding to 'Is Issued An Order' unit events, this refers to the order being issued."

GetUnitCurrentOrderHint=


// returns destructable
GetLastCreatedDestructableHint="This is the last destructible created via a 'Destructible - Create' trigger action."

RandomDestructableInRectSimpleBJHint=

RandomDestructableInRectBJHint="Use 'Matching Destructible' to refer to the destructible being considered."

GetEnumDestructableHint="When using the 'Pick Every Destructible...' action, this refers to each destructible as it is picked."

GetFilterDestructableHint="Use this to refer to the destructible being considered for the 'Random Destructible' functions."

GetDyingDestructableHint="When responding to a 'Destructible Dies' event, this refers to the destructible that is dying."

GetOrderTargetDestructableHint="When responding to an 'Is Issued An Order Targeting An Object' unit event with a destructible target, this refers to the target of the order."

GetSpellTargetDestructableHint="When responding to 'Channeling/Casting/etc. casting an ability' unit events with a destructible target, this refers to the target of the ability being cast."

GetUnitRallyDestructableHint="If the unit does not have a rally-point set to a destructible, this will return 'No destructible'."


// returns destructablecode
GetDestructableTypeIdHint=


// returns item
GetLastCreatedItemHint="This is the last item created via an 'Item - Create' or 'Hero - Create Item For Hero' trigger action."

GetLastRemovedItemHint="This is the last item dropped via a 'Hero - Drop Item' trigger action."

RandomItemInRectSimpleBJHint=

RandomItemInRectBJHint="Use 'Matching Item' to refer to the item being considered."

GetEnumItemHint="When using the 'Pick Every Item...' action, this refers to each item as it is picked."

GetFilterItemHint="Use this to refer to the item being considered for the 'Random Item' functions."

UnitItemInSlotBJHint=

GetItemOfTypeFromUnitBJHint=

GetManipulatedItemHint="When responding to 'Uses/Acquires/Loses An Item' unit events, this refers to the item being manipulated."

GetSoldItemHint="When responding to 'Sells An Item' or 'Pawns An Item' unit events, this refers to the item being sold."

GetOrderTargetItemHint="When responding to an 'Is Issued An Order Targeting An Object' unit event with an item target, this refers to the target of the order."

GetSpellTargetItemHint="When responding to 'Channeling/Casting/etc. casting an ability' unit events with an item target, this refers to the target of the ability being cast."


// returns itemtype
GetItemTypeHint=


// returns itemcode
GetItemTypeIdHint=

ChooseRandomItemBJHint="This function corresponds to the original unclassified item system with levels 0-10.  Use -1 for any level."

ChooseRandomItemExBJHint="This function corresponds to the newer item classification system with levels 0-8.  Use -1 for any level."


// returns techcode
GetResearchedHint="When responding to 'Begins/Cancels/Finishes Research' unit events, this refers to the tech-type being researched."


// returns abilcode
GetSpellAbilityIdHint="When responding to 'Channeling/Casting/etc. casting an ability' unit events, this refers to the ability being cast."

// returns ability
BlzGetUnitAbilityHint=

BlzGetItemAbilityByIndexHint=

BlzGetItemAbilityHint=

// returns heroskillcode
GetLearnedSkillBJHint=


// returns player
GetEnumPlayerHint="When using the 'Pick Every Player...' action, this refers to each player as he/she is picked."

GetFilterPlayerHint="Use this to refer to the player being considered for the 'All Players Matching Condition' function."

GetOwningPlayerHint=

GetItemPlayerHint=

ForcePickRandomPlayerHint=

ConvertedPlayerHint="Player indexes range from 1 to 28."

GetChangingUnitPrevOwnerHint="When responding to a 'Changes Owner' unit event, this refers to the previous owner of the unit."

GetTriggerPlayerHint=

LeaderboardGetIndexedPlayerBJHint=


// returns group
GetLastCreatedGroupHint="This is the last set of units created via a 'Unit - Create' trigger action."

GetRandomSubGroupHint=

GetUnitsInRectAllHint=

GetUnitsInRectOfPlayerHint=

GetUnitsInRectMatchingHint="Use 'Matching Unit' to refer to the unit on whom the comparison is being performed."

GetUnitsInRangeOfLocAllHint=

GetUnitsInRangeOfLocMatchingHint="Use 'Matching Unit' to refer to the unit on whom the comparison is being performed."

GetUnitsOfPlayerAllHint=

GetUnitsOfPlayerAndTypeIdHint=

GetUnitsOfPlayerMatchingHint="Use 'Matching Unit' to refer to the unit on whom the comparison is being performed."

GetUnitsOfTypeIdAllHint=

GetUnitsSelectedAllHint="This should not be used in trigger conditions."


// returns force
GetPlayersAllHint="Includes unused and neutral players."

GetPlayersByMapControlHint=

GetPlayersMatchingHint="Use 'Matching Player' to refer to the player on whom the comparison is being performed.  This includes unused and neutral players."

GetPlayersAlliesHint="All allies of the specified player, including him/herself.","."

GetPlayersEnemiesHint="All enemies of the specified player."

GetForceOfPlayerHint=


// returns race
GetPlayerRaceHint=

GetUnitRaceHint=


// returns camerasetup
GetCurrentCameraSetupHint=


// returns fogmodifier
GetLastCreatedFogModifierHint="This is the last visibility modifier created via a 'Visibility - Create Visibility Modifier' trigger action."


// returns trigger
GetTriggeringTriggerHint=


// returns gamedifficulty
GetGameDifficultyHint=


// returns aidifficulty
GetAIDifficultyHint=


// returns gamespeed
GetGameSpeedHint=


// returns mapcontrol
GetPlayerControllerHint=


// returns playercolor
GetPlayerColorHint=


// returns playerslotstate
GetPlayerSlotStateHint=


// returns effect
GetLastCreatedEffectBJHint=


// returns command button effect
GetLastCreatedCommandButtonEffectBJHint=


// returns lightning
GetLastCreatedLightningBJHint=


// returns image
GetLastCreatedImageHint=


// returns ubersplat
GetLastCreatedUbersplatHint=


// returns minimapicon
GetLastCreatedMinimapIconHint="This is the last minimap icon created via a Create Minimap Icon trigger action."


// returns weathereffect
GetLastCreatedWeatherEffectHint="This is the last weather effect created via an 'Environment - Create Weather Effect' trigger action."


// returns terraindeformation
GetLastCreatedTerrainDeformationHint="This is the last terrain deformation created via any of the 'Environment - Create Terrain Deformation' trigger actions."


// returns terraintype
GetTerrainTypeBJHint=


// returns sound
GetLastPlayedSoundHint="This is the last sound played via a 'Sound - Play Sound' or 'Cinematic - Transmission' trigger action."


// returns music
GetLastPlayedMusicHint="This is the last music played via a 'Sound - Play Music' trigger action."


// returns quest
GetLastCreatedQuestBJHint="This is the last quest created via a 'Quest - Create Quest' trigger action."


// returns questitem
GetLastCreatedQuestItemBJHint="This is the last quest requirement created via a 'Quest - Create Quest Requirement' trigger action."


// returns defeatcondition
GetLastCreatedDefeatConditionBJHint="This is the last defeat condition created via a 'Quest - Create Defeat Condition' trigger action."


// returns dialog
GetClickedDialogBJHint="When responding to a 'Dialog - Dialog Button Click' event, this refers to the dialog containing the clicked button."


// returns button
GetLastCreatedButtonBJHint="This is the last dialog button created via a 'Dialog - Create Dialog Button' trigger action."

GetClickedButtonBJHint="When responding to a 'Dialog - Button Clicked' event, this refers to the dialog button that is being clicked."


// returns leaderboard
GetLastCreatedLeaderboardHint="This is the last leaderboard created via a 'Leaderboard - Create Leaderboard' trigger action."

PlayerGetLeaderboardBJHint="Each player can have at most one leaderboard."


// returns multiboard
GetLastCreatedMultiboardHint="This is the last multiboard created via a 'Multiboard - Create Multiboard' trigger action."


// returns timer
GetLastCreatedTimerBJHint="This is the last timer started via a 'Countdown Timer - Start Timer' trigger action."

GetExpiredTimerHint="When responding to a 'Time - Timer Expires' event, this refers to the timer that is expiring."


// returns timerdialog
GetLastCreatedTimerDialogBJHint="This is the last timer window created via a 'Countdown Timer - Create Timer Window' trigger action."


// returns gamecache
GetLastCreatedGameCacheBJHint="This is the last game cache created via a 'Game Cache - Create Game Cache' trigger action."


// returns hashtable
GetLastCreatedHashtableBJHint="This is the last hashtable created via a 'Hashtable - Create Hashtable' trigger action."


// returns texttag
GetLastCreatedTextTagHint="This is the last floating text created via a 'Floating Text - Create Floating Text' trigger action."



//***************************************************************************
[AIFunctionStrings]
// These functions are defined in AIEditorData.txt

// --- Boolean

TownThreatenedHint=""










ExpansionNeededHint="Returns true if the AI needs to build an expansion but there are currently no open spots."

// --- Integer

GetUnitCountHint="This count includes units currently being trained or constructed."

GetUnitCountDoneHint="This count does NOT include units currently being trained or constructed."

GetTownUnitCountHint=""

GetMinesOwnedHint="The total number of mines currently in use by the AI player."

GetGoldOwnedHint="The total amount of gold remaining in all mines currently in use."

TownWithMineHint="Returns the ID of the first town with an active gold mine"

GetGoldHint="The amount of gold currently owned by the AI player"

GetWoodHint="The amount of lumber currently owned by the AI player"



GetUnitBuildTimeHint="Build time is in seconds."




GetNextExpansionHint="Returns the town ID for the next expansion location"

FoodUsedHint="The total amount of food currently being used by the AI player"

TotalFoodProducedHint="The total amount of food currently produced by the AI player"

CommandsWaitingHint="Commands can be sent from map triggers via the 'AI - Send AI Command' action."

CheckLastCommandHint="Commands can be sent from map triggers via the 'AI - Send AI Command' action."

CheckLastCommandDataHint="Commands can be sent from map triggers via the 'AI - Send AI Command' action."

CaptainGroupSizeHint="The current number of units in the attack group."

CaptainReadinessHPHint="The health level is an estimation of the average attack group health, with 100 being full."

CaptainReadinessMaHint="The mana level is an estimation of the average attack group mana, with 100 being full."

CurrentAttackWaveHint="Attack waves are defined in the attack wave list in the Attacking tab."

